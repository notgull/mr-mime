// This file is automatically generated by `mr-mime-generator`. Do not edit.

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub(crate) enum Type {
    Star,
    Application,
    Audio,
    Chemical,
    Font,
    Image,
    Inode,
    Message,
    Model,
    Multipart,
    Text,
    Video,
}

impl Type {
    pub(crate) fn as_str(self) -> &'static str {
        match self {
            Type::Star => "*",
            Type::Application => "application",
            Type::Audio => "audio",
            Type::Chemical => "chemical",
            Type::Font => "font",
            Type::Image => "image",
            Type::Inode => "inode",
            Type::Message => "message",
            Type::Model => "model",
            Type::Multipart => "multipart",
            Type::Text => "text",
            Type::Video => "video",
        }
    }
}
impl core::str::FromStr for Type {
    type Err = crate::InvalidName;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        const GRAPH: intern_str::Graph<'static, 'static, intern_str::CaseInsensitive<&'static str>, Option<Type>> = {
    const NODES: &[intern_str::Node<'static, intern_str::CaseInsensitive<&'static str>, Option<Type>>] = &[
        intern_str::Node::new(
            &[
            ],
            None,
            0,
            18446744073709551615,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Star),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Application),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cation"), 2),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Audio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ppli"), 3),
                (intern_str::CaseInsensitive("udio"), 4),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Chemical),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hemical"), 6),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Font),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ont"), 8),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Image),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Inode),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mage"), 10),
                (intern_str::CaseInsensitive("node"), 11),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Message),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ge"), 13),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Model),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Multipart),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("part"), 16),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("essa"), 14),
                (intern_str::CaseInsensitive("odel"), 15),
                (intern_str::CaseInsensitive("ulti"), 17),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Text),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ext"), 19),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Type::Video),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ideo"), 21),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("*"), 1),
                (intern_str::CaseInsensitive("a"), 5),
                (intern_str::CaseInsensitive("c"), 7),
                (intern_str::CaseInsensitive("f"), 9),
                (intern_str::CaseInsensitive("i"), 12),
                (intern_str::CaseInsensitive("m"), 18),
                (intern_str::CaseInsensitive("t"), 20),
                (intern_str::CaseInsensitive("v"), 22),
            ],
            None,
            0,
            1,
        ),
    ];
    const GRAPH: intern_str::Graph<'static, 'static, intern_str::CaseInsensitive<&'static str>, Option<Type>> = intern_str::Graph::new(NODES, 23);
    GRAPH
}
;
        GRAPH.process(intern_str::CaseInsensitive(s)).as_ref().copied().ok_or(crate::InvalidName)
    }
}

#[test]
fn type_from_str() {
    assert_eq!("*".parse::<Type>(), Ok(Type::Star));
    assert_eq!("application".parse::<Type>(), Ok(Type::Application));
    assert_eq!("APpliCATion".parse::<Type>(), Ok(Type::Application));
    assert_eq!("audio".parse::<Type>(), Ok(Type::Audio));
    assert_eq!("audio".parse::<Type>(), Ok(Type::Audio));
    assert_eq!("chemical".parse::<Type>(), Ok(Type::Chemical));
    assert_eq!("chEmICAL".parse::<Type>(), Ok(Type::Chemical));
    assert_eq!("font".parse::<Type>(), Ok(Type::Font));
    assert_eq!("fOnt".parse::<Type>(), Ok(Type::Font));
    assert_eq!("image".parse::<Type>(), Ok(Type::Image));
    assert_eq!("iMAGE".parse::<Type>(), Ok(Type::Image));
    assert_eq!("inode".parse::<Type>(), Ok(Type::Inode));
    assert_eq!("INoDe".parse::<Type>(), Ok(Type::Inode));
    assert_eq!("message".parse::<Type>(), Ok(Type::Message));
    assert_eq!("mesSaGE".parse::<Type>(), Ok(Type::Message));
    assert_eq!("model".parse::<Type>(), Ok(Type::Model));
    assert_eq!("MOdeL".parse::<Type>(), Ok(Type::Model));
    assert_eq!("multipart".parse::<Type>(), Ok(Type::Multipart));
    assert_eq!("MULTIPArT".parse::<Type>(), Ok(Type::Multipart));
    assert_eq!("text".parse::<Type>(), Ok(Type::Text));
    assert_eq!("tExt".parse::<Type>(), Ok(Type::Text));
    assert_eq!("video".parse::<Type>(), Ok(Type::Video));
    assert_eq!("viDEo".parse::<Type>(), Ok(Type::Video));
}

impl AsRef<str> for Type {
    fn as_ref(&self) -> &str { self.as_str() }
}

impl From<Type> for &'static str {
    fn from(name: Type) -> Self { name.as_str() }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub(crate) enum Subtype {
    Star,
    A2l,
    Aac,
    Ac3,
    Ace,
    Aces,
    Activemessage,
    Activity,
    Alternative,
    AltoCdni,
    AltoCdnifilter,
    AltoCostmap,
    AltoCostmapfilter,
    AltoDirectory,
    AltoEndpointcost,
    AltoEndpointcostparams,
    AltoEndpointprop,
    AltoEndpointpropparams,
    AltoError,
    AltoNetworkmap,
    AltoNetworkmapfilter,
    AltoPropmap,
    AltoPropmapparams,
    AltoUpdatestreamcontrol,
    AltoUpdatestreamparams,
    Aml,
    Amr,
    AmrWb,
    AndrewInset,
    Annodex,
    Appledouble,
    Applefile,
    Aptx,
    Asc,
    At,
    Atf,
    Atfx,
    Atom,
    Atomcat,
    Atomdeleted,
    Atomicmail,
    Atomserv,
    Atomsvc,
    Atrac3,
    AtracAdvancedLossless,
    AtracX,
    AtscDwd,
    AtscDynamicEventMessage,
    AtscHeld,
    AtscRdt,
    AtscRsat,
    Atxml,
    AuthPolicy,
    Av1,
    Avci,
    Avcs,
    Avif,
    BacnetXdd,
    Basic,
    BatchSmtp,
    Bbolin,
    Beep,
    Blockdevice,
    Bmp,
    Bmpeg,
    Bt656,
    Bv16,
    Bv32,
    Byteranges,
    CacheManifest,
    Calendar,
    CallCompletion,
    Cals1840,
    Captive,
    Cbor,
    CborSeq,
    Cccex,
    Ccmp,
    Ccxml,
    Cdfx,
    CdmiCapability,
    CdmiContainer,
    CdmiDomain,
    CdmiObject,
    CdmiQueue,
    Cdni,
    Cea,
    Cea2018,
    CelB,
    Cellml,
    Cfw,
    Cgm,
    Chardevice,
    City,
    Clearmode,
    Clr,
    Clue,
    ClueInfo,
    Cms,
    Cn,
    Cnrp,
    CoapGroup,
    CoapPayload,
    Collection,
    Commonground,
    ConferenceInfo,
    Cose,
    CoseKey,
    CoseKeySet,
    Cpim,
    Cpl,
    Cql,
    CqlExtension,
    CqlIdentifier,
    Csound,
    Csrattrs,
    Css,
    CstAdata,
    Csta,
    Csv,
    CsvSchema,
    Csvm,
    CuSeeme,
    Cwt,
    Cybercash,
    Dash,
    DashPatch,
    Dashdelta,
    Dat12,
    Davmount,
    DcaRft,
    Dcd,
    DecDx,
    DeliveryStatus,
    DialogInfo,
    Dicom,
    DicomRle,
    Digest,
    Dii,
    Directory,
    DirectoryLocked,
    DispositionNotification,
    Dit,
    Dl,
    Dls,
    Dns,
    DnsMessage,
    Dots,
    Dskpp,
    Dsptype,
    DsrEs201108,
    DsrEs202050,
    DsrEs202211,
    DsrEs202212,
    Dssc,
    Dv,
    Dvcs,
    Dvi4,
    E57,
    Eac3,
    EdiConsent,
    EdiX12,
    Edifact,
    Efi,
    Elm,
    EmergencyCallDataCap,
    EmergencyCallDataComment,
    EmergencyCallDataControl,
    EmergencyCallDataDeviceInfo,
    EmergencyCallDataECallMsd,
    EmergencyCallDataProviderInfo,
    EmergencyCallDataServiceInfo,
    EmergencyCallDataSubscriberInfo,
    EmergencyCallDataVeds,
    Emf,
    Emma,
    Emotionml,
    Encaprtp,
    Encrypted,
    Enriched,
    Epp,
    Epub,
    Eshop,
    Evrc,
    Evrc0,
    Evrc1,
    EvrcQcp,
    Evrcb,
    Evrcb0,
    Evrcb1,
    Evrcnw,
    Evrcnw0,
    Evrcnw1,
    Evrcwb,
    Evrcwb0,
    Evrcwb1,
    Evs,
    Example,
    Exi,
    ExpectCtReport,
    Express,
    ExternalBody,
    Fastinfoset,
    Fastsoap,
    Fdt,
    FeedbackReport,
    Ffv1,
    Fhir,
    Fhirpath,
    Fifo,
    Fits,
    Flac,
    Flexfec,
    Fli,
    FontTdpfr,
    FormData,
    FrameworkAttributes,
    Futuresplash,
    Fwdred,
    G3fax,
    G7110,
    G719,
    G722,
    G7221,
    G723,
    G72616,
    G72624,
    G72632,
    G72640,
    G728,
    G729,
    G7291,
    G729d,
    G729e,
    Geo,
    Geopackage,
    Geoxacml,
    Gff3,
    Gif,
    Gl,
    Global,
    GlobalDeliveryStatus,
    GlobalDispositionNotification,
    GlobalHeaders,
    Gltf,
    GltfBinary,
    GltfBuffer,
    Gml,
    GrammarRefList,
    Gsm,
    GsmEfr,
    GsmHr08,
    Gzip,
    H224,
    H261,
    H263,
    H2631998,
    H2632000,
    H264,
    H264Rcdo,
    H264Svc,
    H265,
    HeaderSet,
    Heic,
    HeicSequence,
    Heif,
    HeifSequence,
    Hej2k,
    Held,
    Hsj2,
    Hta,
    Html,
    Http,
    Hyperstudio,
    ILbc,
    IbeKeyRequest,
    IbePkgReply,
    IbePpData,
    Ief,
    Iges,
    ImIscomposing,
    Imdn,
    Index,
    IndexCmd,
    IndexObj,
    IndexResponse,
    IndexVnd,
    Inkml,
    Iotp,
    IpMrV25,
    Ipfix,
    Ipp,
    IsoSegment,
    Isup,
    Its,
    JavaArchive,
    JavaSerializedObject,
    JavaVm,
    Javascript,
    JcrCnd,
    Jf2feed,
    Jls,
    Jose,
    Jp2,
    Jpeg,
    Jpeg2000,
    Jph,
    Jphc,
    Jpm,
    Jpx,
    Jrd,
    Jscalendar,
    Json,
    JsonPatch,
    JsonSeq,
    Jwk,
    JwkSet,
    Jwt,
    Jxl,
    Jxr,
    JxrA,
    JxrS,
    Jxs,
    Jxsc,
    Jxsi,
    Jxss,
    Jxsv,
    KpmlRequest,
    KpmlResponse,
    Ktx,
    Ktx2,
    L16,
    L20,
    L24,
    L8,
    Ld,
    Lgr,
    LinkFormat,
    LoadControl,
    Lost,
    Lostsync,
    Lpc,
    Lpf,
    Lxf,
    M3g,
    MacBinhex40,
    MacCompactpro,
    Macwriteii,
    Mads,
    Manifest,
    Marc,
    Marcxml,
    Markdown,
    Mathematica,
    Mathml,
    MathmlContent,
    MathmlPresentation,
    MbmsAssociatedProcedureDescription,
    MbmsDeregister,
    MbmsEnvelope,
    MbmsMsk,
    MbmsMskResponse,
    MbmsProtectionDescription,
    MbmsReceptionReport,
    MbmsRegister,
    MbmsRegisterResponse,
    MbmsSchedule,
    MbmsUserServiceDescription,
    Mbox,
    MediaControl,
    MediaPolicyDataset,
    Mediaservercontrol,
    Melp,
    Melp1200,
    Melp2400,
    Melp600,
    MergePatch,
    Mesh,
    Metalink4,
    Mets,
    Mf4,
    Mhas,
    Mikey,
    Mipc,
    MissingBlocks,
    Mixed,
    Mizar,
    Mj2,
    MmtAei,
    MmtUsd,
    MobileXmf,
    Mods,
    MossKeys,
    MossSignature,
    MosskeyData,
    MosskeyRequest,
    Mp1s,
    Mp21,
    Mp2p,
    Mp2t,
    Mp4,
    Mp4aLatm,
    Mp4vEs,
    Mpa,
    MpaRobust,
    Mpeg,
    Mpeg4Generic,
    Mpeg4Iod,
    Mpeg4IodXmt,
    Mpegurl,
    Mpv,
    MrbConsumer,
    MrbPublish,
    Msaccess,
    MscIvr,
    MscMixer,
    Msword,
    Mtl,
    Mud,
    Multilingual,
    MultipartCore,
    Mxf,
    N3,
    NQuads,
    NTriples,
    Naplps,
    Nasdata,
    NewsCheckgroups,
    NewsGroupinfo,
    NewsTransmission,
    Nlsml,
    Node,
    Nss,
    Nv,
    OauthAuthzReq,
    Obj,
    ObliviousDnsMessage,
    OcspRequest,
    OcspResponse,
    OctetStream,
    Oda,
    Odm,
    Odx,
    OebpsPackage,
    Ogg,
    Onenote,
    OpcNodeset,
    Opus,
    Oscore,
    Otf,
    Oxps,
    P21,
    P2pOverlay,
    Parallel,
    Parameters,
    Parityfec,
    Partial,
    Passport,
    PatchOpsError,
    Pcma,
    PcmaWb,
    Pcmu,
    PcmuWb,
    Pdf,
    Pdx,
    PemCertificateChain,
    PgpEncrypted,
    PgpKeys,
    PgpSignature,
    PicsRules,
    Pidf,
    PidfDiff,
    Pkcs10,
    Pkcs12,
    Pkcs7Mime,
    Pkcs7Signature,
    Pkcs8,
    Pkcs8Encrypted,
    PkixAttrCert,
    PkixCert,
    PkixCrl,
    PkixPkipath,
    Pkixcmp,
    Plain,
    Pls,
    Png,
    PocSettings,
    Pointer,
    Postscript,
    PpspTracker,
    Prc,
    Problem,
    Provenance,
    ProvenanceNotation,
    PrsAlvestrandTitraxSheet,
    PrsBtif,
    PrsCww,
    PrsCyn,
    PrsFallensteinRst,
    PrsHpub,
    PrsLinesTag,
    PrsNprend,
    PrsPlucker,
    PrsPropLogic,
    PrsPti,
    PrsRdfXmlCrypt,
    PrsSid,
    PrsXsf,
    Pskc,
    Pvd,
    PwgRaster,
    Qcelp,
    Qsig,
    Quicktime,
    Raptorfec,
    Raw,
    Rdap,
    Rdf,
    Red,
    Reginfo,
    Related,
    RelaxNgCompactSyntax,
    RemotePrinting,
    Report,
    Reputon,
    ResourceLists,
    ResourceListsDiff,
    Rfc,
    Rfc822,
    Rfc822Headers,
    Riscos,
    Rlmi,
    RlsServices,
    RouteApd,
    RouteSTsid,
    RouteUsd,
    RpkiGhostbusters,
    RpkiManifest,
    RpkiPublication,
    RpkiRoa,
    RpkiUpdown,
    Rtf,
    RtpEncAescm128,
    RtpMidi,
    Rtploopback,
    Rtx,
    SHttp,
    Samlassertion,
    Samlmetadata,
    Sarif,
    SarifExternalProperties,
    Sbe,
    Sbml,
    Scaip,
    Scim,
    Scip,
    ScvpCvRequest,
    ScvpCvResponse,
    ScvpVpRequest,
    ScvpVpResponse,
    Sdp,
    Secevent,
    Senml,
    SenmlEtch,
    SenmlExi,
    Sensml,
    SensmlExi,
    Sep,
    SepExi,
    SessionInfo,
    SetPayment,
    SetPaymentInitiation,
    SetRegistration,
    SetRegistrationInitiation,
    Sfnt,
    Sgml,
    SgmlOpenCatalog,
    Shaclc,
    Shex,
    Shf,
    Sieve,
    Signed,
    SimpleFilter,
    SimpleMessageSummary,
    SimpleSymbolContainer,
    Sip,
    Sipc,
    Sipfrag,
    Slate,
    Smil,
    Smpte291,
    Smpte292m,
    Smpte336m,
    Smv,
    Smv0,
    SmvQcp,
    Soap,
    Socket,
    Sofa,
    SpMidi,
    SparqlQuery,
    SparqlResults,
    Spdx,
    Speex,
    SpiritsEvent,
    Sql,
    Srgs,
    Sru,
    Ssml,
    Step,
    StepXml,
    Stix,
    Stl,
    Strings,
    Svg,
    Swid,
    T140,
    T140c,
    T38,
    TabSeparatedValues,
    TampApexUpdate,
    TampApexUpdateConfirm,
    TampCommunityUpdate,
    TampCommunityUpdateConfirm,
    TampError,
    TampSequenceAdjust,
    TampSequenceAdjustConfirm,
    TampStatusQuery,
    TampStatusResponse,
    TampUpdate,
    TampUpdateConfirm,
    Taxii,
    Td,
    Tei,
    TelephoneEvent,
    TetraAcelp,
    TetraAcelpBb,
    TetraIsi,
    Texmacs,
    Thraud,
    Tiff,
    TiffFx,
    TimestampQuery,
    TimestampReply,
    TimestampedData,
    Tlsrpt,
    Tnauthlist,
    TokenIntrospection,
    Tone,
    TrackingStatus,
    TrickleIceSdpfrag,
    Trig,
    Troff,
    Tsvcis,
    Ttf,
    Ttml,
    Turtle,
    TveTrigger,
    Tzif,
    TzifLeap,
    U3d,
    Uemclip,
    Ulpfec,
    UrcGrpsheet,
    UrcRessheet,
    UrcTargetdesc,
    UrcUisocketdesc,
    UriList,
    Usac,
    Vc1,
    Vc2,
    Vcard,
    Vdvi,
    Vemmi,
    VmrWb,
    Vnd1000mindsDecisionModel,
    Vnd3gpp2Bcmcsinfo,
    Vnd3gpp2Sms,
    Vnd3gpp2Tcap,
    Vnd3gpp5gnas,
    Vnd3gppAccessTransferEvents,
    Vnd3gppBsf,
    Vnd3gppGmop,
    Vnd3gppGtpc,
    Vnd3gppInterworkingData,
    Vnd3gppIufp,
    Vnd3gppLpp,
    Vnd3gppMcSignallingEar,
    Vnd3gppMcdataAffiliationCommand,
    Vnd3gppMcdataInfo,
    Vnd3gppMcdataPayload,
    Vnd3gppMcdataServiceConfig,
    Vnd3gppMcdataSignalling,
    Vnd3gppMcdataUeConfig,
    Vnd3gppMcdataUserProfile,
    Vnd3gppMcpttAffiliationCommand,
    Vnd3gppMcpttFloorRequest,
    Vnd3gppMcpttInfo,
    Vnd3gppMcpttLocationInfo,
    Vnd3gppMcpttMbmsUsageInfo,
    Vnd3gppMcpttServiceConfig,
    Vnd3gppMcpttSigned,
    Vnd3gppMcpttUeConfig,
    Vnd3gppMcpttUeInitConfig,
    Vnd3gppMcpttUserProfile,
    Vnd3gppMcvideoAffiliationCommand,
    Vnd3gppMcvideoInfo,
    Vnd3gppMcvideoLocationInfo,
    Vnd3gppMcvideoMbmsUsageInfo,
    Vnd3gppMcvideoServiceConfig,
    Vnd3gppMcvideoTransmissionRequest,
    Vnd3gppMcvideoUeConfig,
    Vnd3gppMcvideoUserProfile,
    Vnd3gppMidCall,
    Vnd3gppNgap,
    Vnd3gppPfcp,
    Vnd3gppPicBwLarge,
    Vnd3gppPicBwSmall,
    Vnd3gppPicBwVar,
    Vnd3gppProse,
    Vnd3gppProsePc3ch,
    Vnd3gppS1ap,
    Vnd3gppSms,
    Vnd3gppSrvccExt,
    Vnd3gppSrvccInfo,
    Vnd3gppStateAndEventInfo,
    Vnd3gppUssd,
    Vnd3gppV2xLocalServiceInformation,
    Vnd3lightssoftwareImagescal,
    Vnd3mPostItNotes,
    Vnd4sb,
    VndA,
    VndAbc,
    VndAccpacSimplyAso,
    VndAccpacSimplyImp,
    VndAcucobol,
    VndAcucorp,
    VndAdobeFlashMovie,
    VndAdobeFormscentralFcdt,
    VndAdobeFxp,
    VndAdobePartialUpload,
    VndAdobePhotoshop,
    VndAdobeXdp,
    VndAdobeXfdf,
    VndAetherImp,
    VndAfpcAfplinedata,
    VndAfpcAfplinedataPagedef,
    VndAfpcCmocaCmresource,
    VndAfpcFocaCharset,
    VndAfpcFocaCodedfont,
    VndAfpcFocaCodepage,
    VndAfpcModca,
    VndAfpcModcaFormdef,
    VndAfpcModcaMediummap,
    VndAfpcModcaObjectcontainer,
    VndAfpcModcaOverlay,
    VndAfpcModcaPagesegment,
    VndAge,
    VndAhBarcode,
    VndAheadSpace,
    VndAirzipAcceleratorAzv,
    VndAirzipFilesecureAzf,
    VndAirzipFilesecureAzs,
    VndAmadeus,
    VndAmazonMobi8Ebook,
    VndAmericandynamicsAcc,
    VndAmigaAmi,
    VndAmundsenMaze,
    VndAndroidOta,
    VndAndroidPackageArchive,
    VndAnki,
    VndAnserWebCertificateIssueInitiation,
    VndAnserWebFundsTransferInitiation,
    VndAntixGameComponent,
    VndApacheArrowFile,
    VndApacheArrowStream,
    VndApacheThriftBinary,
    VndApacheThriftCompact,
    VndApacheThriftJson,
    VndApi,
    VndAplextorWarrp,
    VndApothekendeReservation,
    VndAppleInstaller,
    VndAppleKeynote,
    VndAppleMpegurl,
    VndAppleNumbers,
    VndApplePages,
    VndAristanetworksSwi,
    VndArtisan,
    VndArtsquare,
    VndAsciiArt,
    VndAstraeaSoftwareIota,
    VndAudiograph,
    VndAudiokoz,
    VndAutopackage,
    VndAvalon,
    VndAvistar,
    VndBalsamiqBmml,
    VndBalsamiqBmpr,
    VndBananaAccounting,
    VndBbfUspError,
    VndBbfUspMsg,
    VndBekitzurStech,
    VndBintMedContent,
    VndBintMedPlus,
    VndBiopaxRdf,
    VndBlinkIdbValueWrapper,
    VndBlueiceMultipass,
    VndBluetoothEpOob,
    VndBluetoothLeOob,
    VndBmi,
    VndBpf,
    VndBpf3,
    VndBusinessobjects,
    VndByuUapi,
    VndCabJscript,
    VndCanonCpdl,
    VndCanonLips,
    VndCapasystemsPg,
    VndCctv,
    VndCelp,
    VndCendioThinlincClientconf,
    VndCenturySystemsTcpStream,
    VndChemdraw,
    VndChessPgn,
    VndChipnutsKaraokeMmd,
    VndCiedi,
    VndCinderella,
    VndCirpackIsdnExt,
    VndCiscoNse,
    VndCitationstylesStyle,
    VndClaymore,
    VndCloantoRp9,
    VndClonkC4group,
    VndCluetrustCartomobileConfig,
    VndCluetrustCartomobileConfigPkg,
    VndCmlesRadioEvents,
    VndCnsAnp1,
    VndCnsInf1,
    VndCnsInf2,
    VndCoffeescript,
    VndCollabioXodocumentsDocument,
    VndCollabioXodocumentsDocumentTemplate,
    VndCollabioXodocumentsPresentation,
    VndCollabioXodocumentsPresentationTemplate,
    VndCollabioXodocumentsSpreadsheet,
    VndCollabioXodocumentsSpreadsheetTemplate,
    VndCollada,
    VndCollection,
    VndCollectionDoc,
    VndCollectionNext,
    VndComicbook,
    VndComicbookRar,
    VndCommerceBattelle,
    VndCommonspace,
    VndContactCmsg,
    VndCoreosIgnition,
    VndCosmocaller,
    VndCrickClicker,
    VndCrickClickerKeyboard,
    VndCrickClickerPalette,
    VndCrickClickerTemplate,
    VndCrickClickerWordbank,
    VndCriticaltoolsWbs,
    VndCryptiiPipe,
    VndCryptoShadeFile,
    VndCryptomatorEncrypted,
    VndCryptomatorVault,
    VndCtcPosml,
    VndCtctWs,
    VndCupsPdf,
    VndCupsPostscript,
    VndCupsPpd,
    VndCupsRaster,
    VndCupsRaw,
    VndCurl,
    VndCyanDeanRoot,
    VndCybank,
    VndCyclonedx,
    VndD2lCoursepackage1p0,
    VndD3mDataset,
    VndD3mProblem,
    VndDart,
    VndDataVisionRdz,
    VndDatapackage,
    VndDataresource,
    VndDbf,
    VndDebianBinaryPackage,
    VndDebianCopyright,
    VndDeceAudio,
    VndDeceData,
    VndDeceGraphic,
    VndDeceHd,
    VndDeceMobile,
    VndDeceMp4,
    VndDecePd,
    VndDeceSd,
    VndDeceTtml,
    VndDeceUnspecified,
    VndDeceVideo,
    VndDeceZip,
    VndDenovoFcselayoutLink,
    VndDesmumeMovie,
    VndDigitalWinds,
    VndDirBiPlateDlNosuffix,
    VndDirectvMpeg,
    VndDirectvMpegTts,
    VndDjvu,
    VndDlnaAdts,
    VndDlnaMpegTts,
    VndDmClientScript,
    VndDmDelegation,
    VndDna,
    VndDocument,
    VndDolbyHeaac1,
    VndDolbyHeaac2,
    VndDolbyMlp,
    VndDolbyMobile1,
    VndDolbyMobile2,
    VndDolbyMps,
    VndDolbyPl2,
    VndDolbyPl2x,
    VndDolbyPl2z,
    VndDolbyPulse1,
    VndDoremirScorecloudBinaryDocument,
    VndDpgraph,
    VndDra,
    VndDreamfactory,
    VndDrive,
    VndDtgLocal,
    VndDtgLocalFlash,
    VndDtgLocalHtml,
    VndDts,
    VndDtsHd,
    VndDtsUhd,
    VndDvbAit,
    VndDvbDvbisl,
    VndDvbDvbj,
    VndDvbEsgcontainer,
    VndDvbFile,
    VndDvbIpdcdftnotifaccess,
    VndDvbIpdcesgaccess,
    VndDvbIpdcesgaccess2,
    VndDvbIpdcesgpdd,
    VndDvbIpdcroaming,
    VndDvbIptvAlfecBase,
    VndDvbIptvAlfecEnhancement,
    VndDvbNotifAggregateRoot,
    VndDvbNotifContainer,
    VndDvbNotifGeneric,
    VndDvbNotifIaMsglist,
    VndDvbNotifIaRegistrationRequest,
    VndDvbNotifIaRegistrationResponse,
    VndDvbNotifInit,
    VndDvbPfr,
    VndDvbService,
    VndDvbSubtitle,
    VndDwf,
    VndDwg,
    VndDxf,
    VndDxr,
    VndDynageo,
    VndDzr,
    VndEasykaraokeCdgdownload,
    VndEcdisUpdate,
    VndEcipRlp,
    VndEclipseDitto,
    VndEcowinChart,
    VndEcowinFilerequest,
    VndEcowinFileupdate,
    VndEcowinSeries,
    VndEcowinSeriesrequest,
    VndEcowinSeriesupdate,
    VndEfiImg,
    VndEfiIso,
    VndEmclientAccessrequest,
    VndEnliven,
    VndEnphaseEnvoy,
    VndEprintsData,
    VndEpsonEsf,
    VndEpsonMsf,
    VndEpsonQuickanime,
    VndEpsonSalt,
    VndEpsonSsf,
    VndEricssonQuickcall,
    VndEsmertecThemeDescriptor,
    VndEspassEspass,
    VndEszigno3,
    VndEtsiAoc,
    VndEtsiAsicE,
    VndEtsiAsicS,
    VndEtsiCug,
    VndEtsiIptvcommand,
    VndEtsiIptvdiscovery,
    VndEtsiIptvprofile,
    VndEtsiIptvsadBc,
    VndEtsiIptvsadCod,
    VndEtsiIptvsadNpvr,
    VndEtsiIptvservice,
    VndEtsiIptvsync,
    VndEtsiIptvueprofile,
    VndEtsiMcid,
    VndEtsiMheg5,
    VndEtsiOverloadControlPolicyDataset,
    VndEtsiPstn,
    VndEtsiSci,
    VndEtsiSimservs,
    VndEtsiTimestampToken,
    VndEtsiTsl,
    VndEtsiTslDer,
    VndEuKasparianCar,
    VndEudoraData,
    VndEveradPlj,
    VndEvolvEcigProfile,
    VndEvolvEcigSettings,
    VndEvolvEcigTheme,
    VndExstreamEmpower,
    VndExstreamPackage,
    VndEzpixAlbum,
    VndEzpixPackage,
    VndFSecureMobile,
    VndFamilysearchGedcom,
    VndFastbidsheet,
    VndFastcopyDiskImage,
    VndFdf,
    VndFdsnMseed,
    VndFdsnSeed,
    VndFfsns,
    VndFiclabFlb,
    VndFiclabFlt,
    VndFilmitZfc,
    VndFints,
    VndFiremonkeysCloudcell,
    VndFlatland3dml,
    VndFloGraphIt,
    VndFluxtimeClip,
    VndFly,
    VndFmiFlexstor,
    VndFontFontforgeSfd,
    VndFpx,
    VndFramemaker,
    VndFscWeblaunch,
    VndFst,
    VndFujifilmFbDocuworks,
    VndFujifilmFbDocuworksBinder,
    VndFujifilmFbDocuworksContainer,
    VndFujifilmFbJfi,
    VndFujitsuOasys,
    VndFujitsuOasys2,
    VndFujitsuOasys3,
    VndFujitsuOasysgp,
    VndFujitsuOasysprs,
    VndFujixeroxArt4,
    VndFujixeroxArtEx,
    VndFujixeroxDdd,
    VndFujixeroxDocuworks,
    VndFujixeroxDocuworksBinder,
    VndFujixeroxDocuworksContainer,
    VndFujixeroxEdmicsMmr,
    VndFujixeroxEdmicsRlc,
    VndFujixeroxHbpl,
    VndFutMisnet,
    VndFutoin,
    VndFuzzysheet,
    VndFvt,
    VndGdl,
    VndGenomatixTuxedo,
    VndGenticsGrd,
    VndGeogebraFile,
    VndGeogebraSlides,
    VndGeogebraTool,
    VndGeometryExplorer,
    VndGeonext,
    VndGeoplan,
    VndGeospace,
    VndGerber,
    VndGlobalgraphicsPgb,
    VndGlobalplatformCardContentMgt,
    VndGlobalplatformCardContentMgtResponse,
    VndGml,
    VndGnuTalerExchange,
    VndGnuTalerMerchant,
    VndGoogleEarthKml,
    VndGoogleEarthKmz,
    VndGovSkEForm,
    VndGovSkXmldatacontainer,
    VndGrafeq,
    VndGraphviz,
    VndGridmp,
    VndGrooveAccount,
    VndGrooveHelp,
    VndGrooveIdentityMessage,
    VndGrooveInjector,
    VndGrooveToolMessage,
    VndGrooveToolTemplate,
    VndGrooveVcard,
    VndGsGdl,
    VndGtw,
    VndHal,
    VndHandHeldEntertainment,
    VndHans,
    VndHbci,
    VndHc,
    VndHclBireports,
    VndHdt,
    VndHeroku,
    VndHgl,
    VndHheLessonPlayer,
    VndHl7cda,
    VndHl7v2,
    VndHnsAudio,
    VndHnsVideo,
    VndHpHpgl,
    VndHpHpid,
    VndHpHps,
    VndHpJlyt,
    VndHpPcl,
    VndHpPclxl,
    VndHttphone,
    VndHydrostatixSofData,
    VndHyper,
    VndHyperItem,
    VndHyperdrive,
    VndHzn3dCrossword,
    VndIbmElectronicMedia,
    VndIbmMiniPay,
    VndIbmRightsManagement,
    VndIbmSecureContainer,
    VndIccprofile,
    VndIeee1905,
    VndIgloader,
    VndImagemeterFolder,
    VndImagemeterImage,
    VndImmervisionIvp,
    VndImmervisionIvu,
    VndImsImsccv1p1,
    VndImsImsccv1p2,
    VndImsImsccv1p3,
    VndImsLisV2Result,
    VndImsLtiV2Toolconsumerprofile,
    VndImsLtiV2Toolproxy,
    VndImsLtiV2ToolproxyId,
    VndImsLtiV2Toolsettings,
    VndImsLtiV2ToolsettingsSimple,
    VndIn3d3dml,
    VndIn3dSpot,
    VndInformedcontrolRms,
    VndInfotechProject,
    VndInnopathWampNotification,
    VndInsorsIgm,
    VndInterconFormnet,
    VndIntergeo,
    VndIntertrustDigibox,
    VndIntertrustNncp,
    VndIntuQbo,
    VndIntuQfx,
    VndIptcG2Catalogitem,
    VndIptcG2Conceptitem,
    VndIptcG2Knowledgeitem,
    VndIptcG2Newsitem,
    VndIptcG2Newsmessage,
    VndIptcG2Packageitem,
    VndIptcG2Planningitem,
    VndIptcNewsMl,
    VndIptcNitf,
    VndIptvforum1dparityfec1010,
    VndIptvforum1dparityfec2005,
    VndIptvforum2dparityfec1010,
    VndIptvforum2dparityfec2005,
    VndIptvforumTtsavc,
    VndIptvforumTtsmpeg2,
    VndIpunpluggedRcprofile,
    VndIrepositoryPackage,
    VndIsXpr,
    VndIsacFcs,
    VndIso1178310,
    VndJam,
    VndJapannetDirectoryService,
    VndJapannetJpnstoreWakeup,
    VndJapannetPaymentWakeup,
    VndJapannetRegistration,
    VndJapannetRegistrationWakeup,
    VndJapannetSetstoreWakeup,
    VndJapannetVerification,
    VndJapannetVerificationWakeup,
    VndJcpJavameMidletRms,
    VndJisp,
    VndJoostJodaArchive,
    VndJskIsdnNgn,
    VndKahootz,
    VndKdeKarbon,
    VndKdeKchart,
    VndKdeKformula,
    VndKdeKivio,
    VndKdeKontour,
    VndKdeKpresenter,
    VndKdeKspread,
    VndKdeKword,
    VndKenameaapp,
    VndKidspiration,
    VndKinar,
    VndKoan,
    VndKodakDescriptor,
    VndLas,
    VndLasLas,
    VndLaszip,
    VndLatexZ,
    VndLeap,
    VndLibertyRequest,
    VndLlamagraphicsLifeBalanceDesktop,
    VndLlamagraphicsLifeBalanceExchange,
    VndLogipipeCircuit,
    VndLoom,
    VndLotus123,
    VndLotusApproach,
    VndLotusFreelance,
    VndLotusNotes,
    VndLotusOrganizer,
    VndLotusScreencam,
    VndLotusWordpro,
    VndLucentVoice,
    VndMacportsPortpkg,
    VndMapboxVectorTile,
    VndMarlinDrmActiontoken,
    VndMarlinDrmConftoken,
    VndMarlinDrmLicense,
    VndMarlinDrmMdcf,
    VndMason,
    VndMaxarArchive3tz,
    VndMaxmindMaxmindDb,
    VndMcd,
    VndMedcalcdata,
    VndMediastationCdkey,
    VndMeridianSlingshot,
    VndMfer,
    VndMfmp,
    VndMicro,
    VndMicrografxFlo,
    VndMicrografxIgx,
    VndMicrosoftIcon,
    VndMicrosoftPortableExecutable,
    VndMicrosoftWindowsThumbnailCache,
    VndMiele,
    VndMif,
    VndMinisoftHp3000Save,
    VndMitsubishiMistyGuardTrustweb,
    VndMix,
    VndMobiusDaf,
    VndMobiusDis,
    VndMobiusMbk,
    VndMobiusMqy,
    VndMobiusMsl,
    VndMobiusPlc,
    VndMobiusTxf,
    VndMoml,
    VndMophunApplication,
    VndMophunCertificate,
    VndMotorolaFlexsuite,
    VndMotorolaFlexsuiteAdsi,
    VndMotorolaFlexsuiteFis,
    VndMotorolaFlexsuiteGotap,
    VndMotorolaFlexsuiteKmr,
    VndMotorolaFlexsuiteTtc,
    VndMotorolaFlexsuiteWem,
    VndMotorolaIprm,
    VndMotorolaReflex,
    VndMotorolaVideo,
    VndMotorolaVideop,
    VndMozillaApng,
    VndMozillaXul,
    VndMpegurl,
    VndMs3mfdocument,
    VndMsArtgalry,
    VndMsAsf,
    VndMsCabCompressed,
    VndMsExcel,
    VndMsExcelAddinMacroEnabled12,
    VndMsExcelSheetBinaryMacroEnabled12,
    VndMsExcelSheetMacroEnabled12,
    VndMsExcelTemplateMacroEnabled12,
    VndMsFontobject,
    VndMsHtmlhelp,
    VndMsIms,
    VndMsLrm,
    VndMsMediapackage,
    VndMsModi,
    VndMsOfficeActiveX,
    VndMsOfficetheme,
    VndMsPkiSeccat,
    VndMsPlayreadyInitiator,
    VndMsPlayreadyMediaPya,
    VndMsPlayreadyMediaPyv,
    VndMsPowerpoint,
    VndMsPowerpointAddinMacroEnabled12,
    VndMsPowerpointPresentationMacroEnabled12,
    VndMsPowerpointSlideMacroEnabled12,
    VndMsPowerpointSlideshowMacroEnabled12,
    VndMsPowerpointTemplateMacroEnabled12,
    VndMsPrintDeviceCapabilities,
    VndMsPrintSchemaTicket,
    VndMsProject,
    VndMsTnef,
    VndMsWindowsDevicepairing,
    VndMsWindowsNwprintingOob,
    VndMsWindowsPrinterpairing,
    VndMsWindowsWsdOob,
    VndMsWmdrmLicChlgReq,
    VndMsWmdrmLicResp,
    VndMsWmdrmMeterChlgReq,
    VndMsWmdrmMeterResp,
    VndMsWordDocumentMacroEnabled12,
    VndMsWordTemplateMacroEnabled12,
    VndMsWorks,
    VndMsWpl,
    VndMsXpsdocument,
    VndMsaDiskImage,
    VndMseq,
    VndMsign,
    VndMts,
    VndMultiadCreator,
    VndMultiadCreatorCif,
    VndMusicNiff,
    VndMusician,
    VndMuveeStyle,
    VndMynfc,
    VndNacamarYbrid,
    VndNcdControl,
    VndNcdReference,
    VndNearstInv,
    VndNebumindLine,
    VndNervana,
    VndNet2phoneCommcenterCommand,
    VndNetFpx,
    VndNetfpx,
    VndNeurolanguageNlu,
    VndNimn,
    VndNintendoNitroRom,
    VndNintendoSnesRom,
    VndNitf,
    VndNoblenetDirectory,
    VndNoblenetSealer,
    VndNoblenetWeb,
    VndNokiaCatalogs,
    VndNokiaConml,
    VndNokiaISdsRadioPresets,
    VndNokiaInterleavedMultimedia,
    VndNokiaIptvConfig,
    VndNokiaLandmark,
    VndNokiaLandmarkcollection,
    VndNokiaMobileXmf,
    VndNokiaMp4vr,
    VndNokiaNGageAc,
    VndNokiaNGageData,
    VndNokiaNcd,
    VndNokiaPcd,
    VndNokiaRadioPreset,
    VndNokiaRadioPresets,
    VndNokiaVideovoip,
    VndNortelVbk,
    VndNovadigmEdm,
    VndNovadigmEdx,
    VndNovadigmExt,
    VndNttLocalContentShare,
    VndNttLocalFileTransfer,
    VndNttLocalOgwRemoteAccess,
    VndNttLocalSipTaRemote,
    VndNttLocalSipTaTcpStream,
    VndNueraEcelp4800,
    VndNueraEcelp7470,
    VndNueraEcelp9600,
    VndOasisOpendocumentChart,
    VndOasisOpendocumentChartTemplate,
    VndOasisOpendocumentDatabase,
    VndOasisOpendocumentFormula,
    VndOasisOpendocumentFormulaTemplate,
    VndOasisOpendocumentGraphics,
    VndOasisOpendocumentGraphicsTemplate,
    VndOasisOpendocumentImage,
    VndOasisOpendocumentImageTemplate,
    VndOasisOpendocumentPresentation,
    VndOasisOpendocumentPresentationTemplate,
    VndOasisOpendocumentSpreadsheet,
    VndOasisOpendocumentSpreadsheetTemplate,
    VndOasisOpendocumentText,
    VndOasisOpendocumentTextMaster,
    VndOasisOpendocumentTextTemplate,
    VndOasisOpendocumentTextWeb,
    VndObjectvideo,
    VndObn,
    VndOcf,
    VndOciImageManifestV1,
    VndOctelSbc,
    VndOftnL10n,
    VndOipfContentaccessdownload,
    VndOipfContentaccessstreaming,
    VndOipfCspgHexbinary,
    VndOipfDaeSvg,
    VndOipfDaeXhtml,
    VndOipfMippvcontrolmessage,
    VndOipfPaeGem,
    VndOipfSpdiscovery,
    VndOipfSpdlist,
    VndOipfUeprofile,
    VndOipfUserprofile,
    VndOlpcSugar,
    VndOmaBcastAssociatedProcedureParameter,
    VndOmaBcastDrmTrigger,
    VndOmaBcastImd,
    VndOmaBcastLtkm,
    VndOmaBcastNotification,
    VndOmaBcastProvisioningtrigger,
    VndOmaBcastSgboot,
    VndOmaBcastSgdd,
    VndOmaBcastSgdu,
    VndOmaBcastSimpleSymbolContainer,
    VndOmaBcastSmartcardTrigger,
    VndOmaBcastSprov,
    VndOmaBcastStkm,
    VndOmaCabAddressBook,
    VndOmaCabFeatureHandler,
    VndOmaCabPcc,
    VndOmaCabSubsInvite,
    VndOmaCabUserPrefs,
    VndOmaDcd,
    VndOmaDcdc,
    VndOmaDd2,
    VndOmaDrmRisd,
    VndOmaGroupUsageList,
    VndOmaLwm2m,
    VndOmaPal,
    VndOmaPocDetailedProgressReport,
    VndOmaPocFinalReport,
    VndOmaPocGroups,
    VndOmaPocInvocationDescriptor,
    VndOmaPocOptimizedProgressReport,
    VndOmaPush,
    VndOmaScidmMessages,
    VndOmaScwsConfig,
    VndOmaScwsHttpRequest,
    VndOmaScwsHttpResponse,
    VndOmaXcapDirectory,
    VndOmadsEmail,
    VndOmadsFile,
    VndOmadsFolder,
    VndOmalocSuplInit,
    VndOnepager,
    VndOnepagertamp,
    VndOnepagertamx,
    VndOnepagertat,
    VndOnepagertatp,
    VndOnepagertatx,
    VndOpenbloxGame,
    VndOpenbloxGameBinary,
    VndOpeneyeOeb,
    VndOpengex,
    VndOpenofficeorgExtension,
    VndOpenstreetmapData,
    VndOpentimestampsOts,
    VndOpenxmlformatsOfficedocumentCustomProperties,
    VndOpenxmlformatsOfficedocumentCustomXmlProperties,
    VndOpenxmlformatsOfficedocumentDrawing,
    VndOpenxmlformatsOfficedocumentDrawingmlChart,
    VndOpenxmlformatsOfficedocumentDrawingmlChartshapes,
    VndOpenxmlformatsOfficedocumentDrawingmlDiagramColors,
    VndOpenxmlformatsOfficedocumentDrawingmlDiagramData,
    VndOpenxmlformatsOfficedocumentDrawingmlDiagramLayout,
    VndOpenxmlformatsOfficedocumentDrawingmlDiagramStyle,
    VndOpenxmlformatsOfficedocumentExtendedProperties,
    VndOpenxmlformatsOfficedocumentPresentationmlCommentAuthors,
    VndOpenxmlformatsOfficedocumentPresentationmlComments,
    VndOpenxmlformatsOfficedocumentPresentationmlHandoutMaster,
    VndOpenxmlformatsOfficedocumentPresentationmlNotesMaster,
    VndOpenxmlformatsOfficedocumentPresentationmlNotesSlide,
    VndOpenxmlformatsOfficedocumentPresentationmlPresProps,
    VndOpenxmlformatsOfficedocumentPresentationmlPresentation,
    VndOpenxmlformatsOfficedocumentPresentationmlPresentationMain,
    VndOpenxmlformatsOfficedocumentPresentationmlSlide,
    VndOpenxmlformatsOfficedocumentPresentationmlSlideLayout,
    VndOpenxmlformatsOfficedocumentPresentationmlSlideMaster,
    VndOpenxmlformatsOfficedocumentPresentationmlSlideUpdateInfo,
    VndOpenxmlformatsOfficedocumentPresentationmlSlideshow,
    VndOpenxmlformatsOfficedocumentPresentationmlSlideshowMain,
    VndOpenxmlformatsOfficedocumentPresentationmlTableStyles,
    VndOpenxmlformatsOfficedocumentPresentationmlTags,
    VndOpenxmlformatsOfficedocumentPresentationmlTemplate,
    VndOpenxmlformatsOfficedocumentPresentationmlTemplateMain,
    VndOpenxmlformatsOfficedocumentPresentationmlViewProps,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlCalcChain,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlChartsheet,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlComments,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlConnections,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlDialogsheet,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlExternalLink,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheDefinition,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheRecords,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotTable,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlQueryTable,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionHeaders,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionLog,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlSharedStrings,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlSheet,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMain,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMetadata,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlStyles,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlTable,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlTableSingleCells,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplateMain,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlUserNames,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlVolatileDependencies,
    VndOpenxmlformatsOfficedocumentSpreadsheetmlWorksheet,
    VndOpenxmlformatsOfficedocumentTheme,
    VndOpenxmlformatsOfficedocumentThemeOverride,
    VndOpenxmlformatsOfficedocumentVmlDrawing,
    VndOpenxmlformatsOfficedocumentWordprocessingmlComments,
    VndOpenxmlformatsOfficedocumentWordprocessingmlDocument,
    VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentGlossary,
    VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentMain,
    VndOpenxmlformatsOfficedocumentWordprocessingmlEndnotes,
    VndOpenxmlformatsOfficedocumentWordprocessingmlFontTable,
    VndOpenxmlformatsOfficedocumentWordprocessingmlFooter,
    VndOpenxmlformatsOfficedocumentWordprocessingmlFootnotes,
    VndOpenxmlformatsOfficedocumentWordprocessingmlNumbering,
    VndOpenxmlformatsOfficedocumentWordprocessingmlSettings,
    VndOpenxmlformatsOfficedocumentWordprocessingmlStyles,
    VndOpenxmlformatsOfficedocumentWordprocessingmlTemplate,
    VndOpenxmlformatsOfficedocumentWordprocessingmlTemplateMain,
    VndOpenxmlformatsOfficedocumentWordprocessingmlWebSettings,
    VndOpenxmlformatsPackageCoreProperties,
    VndOpenxmlformatsPackageDigitalSignatureXmlsignature,
    VndOpenxmlformatsPackageRelationships,
    VndOracleResource,
    VndOrangeIndata,
    VndOsaNetdeploy,
    VndOsgeoMapguidePackage,
    VndOsgiBundle,
    VndOsgiDp,
    VndOsgiSubsystem,
    VndOtpsCtKip,
    VndOxliCountgraph,
    VndPagerduty,
    VndPalm,
    VndPanoply,
    VndPaosXml,
    VndParasolidTransmitBinary,
    VndParasolidTransmitText,
    VndPatentdive,
    VndPatientecommsdoc,
    VndPawaafile,
    VndPcoB16,
    VndPcos,
    VndPgFormat,
    VndPgOsasli,
    VndPiaccessApplicationLicence,
    VndPicsel,
    VndPmiWidget,
    VndPocGroupAdvertisement,
    VndPocketlearn,
    VndPowerbuilder6,
    VndPowerbuilder6S,
    VndPowerbuilder7,
    VndPowerbuilder75,
    VndPowerbuilder75S,
    VndPowerbuilder7S,
    VndPreminet,
    VndPresonusMultitrack,
    VndPreviewsystemsBox,
    VndProteusMagazine,
    VndPsfs,
    VndPublishareDeltaTree,
    VndPviPtid1,
    VndPwgMultiplexed,
    VndPwgXhtmlPrint,
    VndPythaPyox,
    VndQualcommBrewAppRes,
    VndQuarantainenet,
    VndQuarkQuarkXPress,
    VndQuobjectQuoxdocument,
    VndRadgamettoolsBink,
    VndRadgamettoolsSmacker,
    VndRadiance,
    VndRadisysMoml,
    VndRadisysMsml,
    VndRadisysMsmlAudit,
    VndRadisysMsmlAuditConf,
    VndRadisysMsmlAuditConn,
    VndRadisysMsmlAuditDialog,
    VndRadisysMsmlAuditStream,
    VndRadisysMsmlBasicLayout,
    VndRadisysMsmlConf,
    VndRadisysMsmlDialog,
    VndRadisysMsmlDialogBase,
    VndRadisysMsmlDialogFaxDetect,
    VndRadisysMsmlDialogFaxSendrecv,
    VndRadisysMsmlDialogGroup,
    VndRadisysMsmlDialogSpeech,
    VndRadisysMsmlDialogTransform,
    VndRainstorData,
    VndRapid,
    VndRar,
    VndRealvncBed,
    VndRecordareMusicxml,
    VndRenLearnRlprint,
    VndResilientLogic,
    VndRestful,
    VndRhetorex32kadpcm,
    VndRigCryptonote,
    VndRimCod,
    VndRip,
    VndRosetteAnnotatedDataModel,
    VndRoute66Link66,
    VndRs274x,
    VndRuckusDownload,
    VndS3sms,
    VndSailingtrackerTrack,
    VndSapVds,
    VndSar,
    VndSbmCid,
    VndSbmMid2,
    VndScribus,
    VndSealed3df,
    VndSealedCsf,
    VndSealedDoc,
    VndSealedEml,
    VndSealedMht,
    VndSealedMpeg1,
    VndSealedMpeg4,
    VndSealedNet,
    VndSealedPng,
    VndSealedPpt,
    VndSealedSwf,
    VndSealedTiff,
    VndSealedXls,
    VndSealedmediaSoftsealGif,
    VndSealedmediaSoftsealHtml,
    VndSealedmediaSoftsealJpg,
    VndSealedmediaSoftsealMov,
    VndSealedmediaSoftsealMpeg,
    VndSealedmediaSoftsealPdf,
    VndSeemail,
    VndSeis,
    VndSema,
    VndSemd,
    VndSemf,
    VndSenxWarpscript,
    VndShadeSaveFile,
    VndShanaInformedFormdata,
    VndShanaInformedFormtemplate,
    VndShanaInformedInterchange,
    VndShanaInformedPackage,
    VndShootproof,
    VndShopkick,
    VndShp,
    VndShx,
    VndSigrokSession,
    VndSimTechMindMapper,
    VndSiren,
    VndSmaf,
    VndSmartNotebook,
    VndSmartTeacher,
    VndSnesdevPageTable,
    VndSoftware602FillerForm,
    VndSoftware602FillerFormXmlZip,
    VndSolentSdkm,
    VndSosi,
    VndSpotfireDxp,
    VndSpotfireSfs,
    VndSqlite3,
    VndSssCod,
    VndSssDtf,
    VndSssNtf,
    VndStardivisionCalc,
    VndStardivisionChart,
    VndStardivisionDraw,
    VndStardivisionImpress,
    VndStardivisionMath,
    VndStardivisionWriter,
    VndStardivisionWriterGlobal,
    VndStepmaniaPackage,
    VndStepmaniaStepchart,
    VndStreetStream,
    VndSunJ2meAppDescriptor,
    VndSunWadl,
    VndSunXmlCalc,
    VndSunXmlCalcTemplate,
    VndSunXmlDraw,
    VndSunXmlDrawTemplate,
    VndSunXmlImpress,
    VndSunXmlImpressTemplate,
    VndSunXmlMath,
    VndSunXmlWriter,
    VndSunXmlWriterGlobal,
    VndSunXmlWriterTemplate,
    VndSusCalendar,
    VndSvd,
    VndSvf,
    VndSwiftviewIcs,
    VndSycle,
    VndSyft,
    VndSymbianInstall,
    VndSyncml,
    VndSyncmlDm,
    VndSyncmlDmNotification,
    VndSyncmlDmddf,
    VndSyncmlDmtnds,
    VndSyncmlDsNotification,
    VndTableschema,
    VndTaoIntentModuleArchive,
    VndTcpdumpPcap,
    VndTencentTap,
    VndTheqvd,
    VndThinkCellPpttc,
    VndTmdMediaflexApi,
    VndTml,
    VndTmobileLivetv,
    VndTriOnesource,
    VndTridTpt,
    VndTriscapeMxs,
    VndTrolltechLinguist,
    VndTrueapp,
    VndTruedoc,
    VndUbisoftWebplayer,
    VndUfdl,
    VndUiqTheme,
    VndUmajin,
    VndUnity,
    VndUoml,
    VndUplanetAlert,
    VndUplanetAlertWbxml,
    VndUplanetBearerChoice,
    VndUplanetBearerChoiceWbxml,
    VndUplanetCacheop,
    VndUplanetCacheopWbxml,
    VndUplanetChannel,
    VndUplanetChannelWbxml,
    VndUplanetList,
    VndUplanetListWbxml,
    VndUplanetListcmd,
    VndUplanetListcmdWbxml,
    VndUplanetSignal,
    VndUriMap,
    VndUsdz,
    VndUvvuMp4,
    VndValveSourceCompiledMap,
    VndValveSourceMaterial,
    VndValveSourceTexture,
    VndVcx,
    VndVdStudy,
    VndVectorworks,
    VndVel,
    VndVerimatrixVcas,
    VndVeritoneAion,
    VndVeryantThin,
    VndVesEncrypted,
    VndVidsoftVidconference,
    VndVisio,
    VndVisionary,
    VndVividenceScriptfile,
    VndVivo,
    VndVmxCvsd,
    VndVsf,
    VndVtu,
    VndWapSi,
    VndWapSic,
    VndWapSl,
    VndWapSlc,
    VndWapWbmp,
    VndWapWbxml,
    VndWapWml,
    VndWapWmlc,
    VndWapWmlscript,
    VndWapWmlscriptc,
    VndWebturbo,
    VndWfaDpp,
    VndWfaP2p,
    VndWfaWsc,
    VndWindowsDevicepairing,
    VndWmc,
    VndWmfBootstrap,
    VndWolframMathematica,
    VndWolframMathematicaPackage,
    VndWolframPlayer,
    VndWordperfect,
    VndWordperfect51,
    VndWqd,
    VndWrqHp3000Labelled,
    VndWtStf,
    VndWvCsp,
    VndWvSsp,
    VndXacml,
    VndXara,
    VndXfdl,
    VndXfdlWebform,
    VndXiff,
    VndXmi,
    VndXmpieCpkg,
    VndXmpieDpkg,
    VndXmpiePlan,
    VndXmpiePpkg,
    VndXmpieXlim,
    VndYamahaHvDic,
    VndYamahaHvScript,
    VndYamahaHvVoice,
    VndYamahaOpenscoreformat,
    VndYamahaOpenscoreformatOsfpvg,
    VndYamahaRemoteSetup,
    VndYamahaSmafAudio,
    VndYamahaSmafPhrase,
    VndYamahaThroughNgn,
    VndYamahaTunnelUdpencap,
    VndYaoweme,
    VndYellowriverCustomMenu,
    VndYoutubeYt,
    VndZbrushPcx,
    VndZul,
    VndZzazzDeck,
    VoiceMessage,
    Voicexml,
    Vorbis,
    VorbisConfig,
    VoucherCms,
    Vp8,
    Vp9,
    VqRtcpxr,
    Vrml,
    Vtt,
    Wasm,
    Watcherinfo,
    Webm,
    WebpushOptions,
    WhoisppQuery,
    WhoisppResponse,
    Widget,
    Wita,
    Wmf,
    Woff,
    Woff2,
    Wordperfect51,
    Wsdl,
    Wspolicy,
    X123,
    X3d,
    X3dVrml,
    X400Bp,
    X7zCompressed,
    XAbiword,
    XAiff,
    XAlchemy,
    XAppleDiskimage,
    XBcpio,
    XBibtex,
    XBittorrent,
    XBoo,
    XC,
    XCache,
    XCacheCsf,
    XCactvsBinary,
    XCanonCr2,
    XCanonCrw,
    XCdf,
    XCdlink,
    XCdx,
    XCerius,
    XChdr,
    XChem3d,
    XChemdraw,
    XCif,
    XCmdf,
    XCml,
    XCmuRaster,
    XCompass,
    XComponent,
    XComsol,
    XCoreldraw,
    XCoreldrawpattern,
    XCoreldrawtemplate,
    XCorelphotopaint,
    XCpio,
    XCrossfire,
    XCsh,
    XCsml,
    XCsrc,
    XCtx,
    XCxf,
    XDiff,
    XDirector,
    XDoom,
    XDsrc,
    XDvi,
    XEmblDlNucleotide,
    XEpsonErf,
    XFlv,
    XFont,
    XFontPcf,
    XFreemind,
    XGalacticSpc,
    XGamessInput,
    XGanttproject,
    XGaussianCheckpoint,
    XGaussianCube,
    XGaussianInput,
    XGaussianLog,
    XGcg8Sequence,
    XGenbank,
    XGnumeric,
    XGoSgf,
    XGraphingCalculator,
    XGsm,
    XGtar,
    XGtarCompressed,
    XHaskell,
    XHdf,
    XHin,
    XHwp,
    XIca,
    XInfo,
    XInternetSignup,
    XIphone,
    XIso9660Image,
    XIsostar,
    XJava,
    XJavaJnlpFile,
    XJcampDx,
    XJg,
    XJmol,
    XJng,
    XKillustrator,
    XKinemage,
    XLaAsf,
    XLatex,
    XLha,
    XLilypond,
    XLiterateHaskell,
    XLyx,
    XLzh,
    XLzx,
    XMacmolecule,
    XMacromodelInput,
    XMaker,
    XMatroska,
    XMdlMolfile,
    XMdlRdfile,
    XMdlRxnfile,
    XMdlSdfile,
    XMdlTgf,
    XMixedReplace,
    XMmcif,
    XMng,
    XMoc,
    XMol2,
    XMolconnZ,
    XMopacGraph,
    XMopacInput,
    XMopacOut,
    XMopacVib,
    XMsWax,
    XMsWm,
    XMsWma,
    XMsWmd,
    XMsWmv,
    XMsWmx,
    XMsWmz,
    XMsWvx,
    XMsdosProgram,
    XMsi,
    XMsvideo,
    XNcbiAsn1,
    XNcbiAsn1Ascii,
    XNcbiAsn1Binary,
    XNcbiAsn1Spec,
    XNetcdf,
    XNikonNef,
    XNsProxyAutoconfig,
    XNwc,
    XObject,
    XOlympusOrf,
    XOzApplication,
    XPascal,
    XPcsGcd,
    XPdb,
    XPerl,
    XPkcs7Certreqresp,
    XPnRealaudio,
    XPortableAnymap,
    XPortableBitmap,
    XPortableGraymap,
    XPortablePixmap,
    XPython,
    XPythonCode,
    XQgis,
    XQuicktimeplayer,
    XRdp,
    XRedhatPackageManager,
    XRgb,
    XRosdal,
    XRss,
    XRuby,
    XScala,
    XScilab,
    XScilabXcos,
    XScpls,
    XSd2,
    XSetext,
    XSfv,
    XSgiMovie,
    XSh,
    XShar,
    XSilverlight,
    XStuffit,
    XSv4cpio,
    XSv4crc,
    XSwissprot,
    XTar,
    XTcl,
    XTex,
    XTexGf,
    XTexPk,
    XTexinfo,
    XTrash,
    XTroffMan,
    XTroffMe,
    XTroffMs,
    XUstar,
    XVamasIso14976,
    XVcalendar,
    XVmd,
    XWaisSource,
    XWav,
    XWingz,
    XX509CaCert,
    XXbitmap,
    XXcf,
    XXfig,
    XXpinstall,
    XXpixmap,
    XXtel,
    XXwindowdump,
    XXyz,
    XXz,
    Xacml,
    XcapAtt,
    XcapCaps,
    XcapDiff,
    XcapEl,
    XcapError,
    XcapNs,
    XconConferenceInfo,
    XconConferenceInfoDiff,
    Xenc,
    Xhtml,
    Xliff,
    Xml,
    XmlDtd,
    XmlExternalParsedEntity,
    XmlPatch,
    Xmpp,
    Xop,
    Xslt,
    Xspf,
    Xv,
    Yang,
    YangData,
    YangPatch,
    Yin,
    Zip,
    Zlib,
    Zstd,
}

impl Subtype {
    pub(crate) fn as_str(self) -> &'static str {
        match self {
            Subtype::Star => "*",
            Subtype::A2l => "A2L",
            Subtype::Aac => "aac",
            Subtype::Ac3 => "ac3",
            Subtype::Ace => "ace",
            Subtype::Aces => "aces",
            Subtype::Activemessage => "activemessage",
            Subtype::Activity => "activity",
            Subtype::Alternative => "alternative",
            Subtype::AltoCdni => "alto-cdni",
            Subtype::AltoCdnifilter => "alto-cdnifilter",
            Subtype::AltoCostmap => "alto-costmap",
            Subtype::AltoCostmapfilter => "alto-costmapfilter",
            Subtype::AltoDirectory => "alto-directory",
            Subtype::AltoEndpointcost => "alto-endpointcost",
            Subtype::AltoEndpointcostparams => "alto-endpointcostparams",
            Subtype::AltoEndpointprop => "alto-endpointprop",
            Subtype::AltoEndpointpropparams => "alto-endpointpropparams",
            Subtype::AltoError => "alto-error",
            Subtype::AltoNetworkmap => "alto-networkmap",
            Subtype::AltoNetworkmapfilter => "alto-networkmapfilter",
            Subtype::AltoPropmap => "alto-propmap",
            Subtype::AltoPropmapparams => "alto-propmapparams",
            Subtype::AltoUpdatestreamcontrol => "alto-updatestreamcontrol",
            Subtype::AltoUpdatestreamparams => "alto-updatestreamparams",
            Subtype::Aml => "AML",
            Subtype::Amr => "AMR",
            Subtype::AmrWb => "AMR-WB",
            Subtype::AndrewInset => "andrew-inset",
            Subtype::Annodex => "annodex",
            Subtype::Appledouble => "appledouble",
            Subtype::Applefile => "applefile",
            Subtype::Aptx => "aptx",
            Subtype::Asc => "asc",
            Subtype::At => "at",
            Subtype::Atf => "ATF",
            Subtype::Atfx => "ATFX",
            Subtype::Atom => "atom",
            Subtype::Atomcat => "atomcat",
            Subtype::Atomdeleted => "atomdeleted",
            Subtype::Atomicmail => "atomicmail",
            Subtype::Atomserv => "atomserv",
            Subtype::Atomsvc => "atomsvc",
            Subtype::Atrac3 => "ATRAC3",
            Subtype::AtracAdvancedLossless => "ATRAC-ADVANCED-LOSSLESS",
            Subtype::AtracX => "ATRAC-X",
            Subtype::AtscDwd => "atsc-dwd",
            Subtype::AtscDynamicEventMessage => "atsc-dynamic-event-message",
            Subtype::AtscHeld => "atsc-held",
            Subtype::AtscRdt => "atsc-rdt",
            Subtype::AtscRsat => "atsc-rsat",
            Subtype::Atxml => "ATXML",
            Subtype::AuthPolicy => "auth-policy",
            Subtype::Av1 => "AV1",
            Subtype::Avci => "avci",
            Subtype::Avcs => "avcs",
            Subtype::Avif => "avif",
            Subtype::BacnetXdd => "bacnet-xdd",
            Subtype::Basic => "basic",
            Subtype::BatchSmtp => "batch-SMTP",
            Subtype::Bbolin => "bbolin",
            Subtype::Beep => "beep",
            Subtype::Blockdevice => "blockdevice",
            Subtype::Bmp => "bmp",
            Subtype::Bmpeg => "BMPEG",
            Subtype::Bt656 => "BT656",
            Subtype::Bv16 => "BV16",
            Subtype::Bv32 => "BV32",
            Subtype::Byteranges => "byteranges",
            Subtype::CacheManifest => "cache-manifest",
            Subtype::Calendar => "calendar",
            Subtype::CallCompletion => "call-completion",
            Subtype::Cals1840 => "CALS-1840",
            Subtype::Captive => "captive",
            Subtype::Cbor => "cbor",
            Subtype::CborSeq => "cbor-seq",
            Subtype::Cccex => "cccex",
            Subtype::Ccmp => "ccmp",
            Subtype::Ccxml => "ccxml",
            Subtype::Cdfx => "CDFX",
            Subtype::CdmiCapability => "cdmi-capability",
            Subtype::CdmiContainer => "cdmi-container",
            Subtype::CdmiDomain => "cdmi-domain",
            Subtype::CdmiObject => "cdmi-object",
            Subtype::CdmiQueue => "cdmi-queue",
            Subtype::Cdni => "cdni",
            Subtype::Cea => "CEA",
            Subtype::Cea2018 => "cea-2018",
            Subtype::CelB => "CelB",
            Subtype::Cellml => "cellml",
            Subtype::Cfw => "cfw",
            Subtype::Cgm => "cgm",
            Subtype::Chardevice => "chardevice",
            Subtype::City => "city",
            Subtype::Clearmode => "clearmode",
            Subtype::Clr => "clr",
            Subtype::Clue => "clue",
            Subtype::ClueInfo => "clue_info",
            Subtype::Cms => "cms",
            Subtype::Cn => "CN",
            Subtype::Cnrp => "cnrp",
            Subtype::CoapGroup => "coap-group",
            Subtype::CoapPayload => "coap-payload",
            Subtype::Collection => "collection",
            Subtype::Commonground => "commonground",
            Subtype::ConferenceInfo => "conference-info",
            Subtype::Cose => "cose",
            Subtype::CoseKey => "cose-key",
            Subtype::CoseKeySet => "cose-key-set",
            Subtype::Cpim => "CPIM",
            Subtype::Cpl => "cpl",
            Subtype::Cql => "cql",
            Subtype::CqlExtension => "cql-extension",
            Subtype::CqlIdentifier => "cql-identifier",
            Subtype::Csound => "csound",
            Subtype::Csrattrs => "csrattrs",
            Subtype::Css => "css",
            Subtype::CstAdata => "CSTAdata",
            Subtype::Csta => "csta",
            Subtype::Csv => "csv",
            Subtype::CsvSchema => "csv-schema",
            Subtype::Csvm => "csvm",
            Subtype::CuSeeme => "cu-seeme",
            Subtype::Cwt => "cwt",
            Subtype::Cybercash => "cybercash",
            Subtype::Dash => "dash",
            Subtype::DashPatch => "dash-patch",
            Subtype::Dashdelta => "dashdelta",
            Subtype::Dat12 => "DAT12",
            Subtype::Davmount => "davmount",
            Subtype::DcaRft => "dca-rft",
            Subtype::Dcd => "DCD",
            Subtype::DecDx => "dec-dx",
            Subtype::DeliveryStatus => "delivery-status",
            Subtype::DialogInfo => "dialog-info",
            Subtype::Dicom => "dicom",
            Subtype::DicomRle => "dicom-rle",
            Subtype::Digest => "digest",
            Subtype::Dii => "DII",
            Subtype::Directory => "directory",
            Subtype::DirectoryLocked => "directory-locked",
            Subtype::DispositionNotification => "disposition-notification",
            Subtype::Dit => "DIT",
            Subtype::Dl => "dl",
            Subtype::Dls => "dls",
            Subtype::Dns => "dns",
            Subtype::DnsMessage => "dns-message",
            Subtype::Dots => "dots",
            Subtype::Dskpp => "dskpp",
            Subtype::Dsptype => "dsptype",
            Subtype::DsrEs201108 => "dsr-es201108",
            Subtype::DsrEs202050 => "dsr-es202050",
            Subtype::DsrEs202211 => "dsr-es202211",
            Subtype::DsrEs202212 => "dsr-es202212",
            Subtype::Dssc => "dssc",
            Subtype::Dv => "DV",
            Subtype::Dvcs => "dvcs",
            Subtype::Dvi4 => "DVI4",
            Subtype::E57 => "e57",
            Subtype::Eac3 => "eac3",
            Subtype::EdiConsent => "EDI-consent",
            Subtype::EdiX12 => "EDI-X12",
            Subtype::Edifact => "EDIFACT",
            Subtype::Efi => "efi",
            Subtype::Elm => "elm",
            Subtype::EmergencyCallDataCap => "EmergencyCallData.cap",
            Subtype::EmergencyCallDataComment => "EmergencyCallData.Comment",
            Subtype::EmergencyCallDataControl => "EmergencyCallData.Control",
            Subtype::EmergencyCallDataDeviceInfo => "EmergencyCallData.DeviceInfo",
            Subtype::EmergencyCallDataECallMsd => "EmergencyCallData.eCall.MSD",
            Subtype::EmergencyCallDataProviderInfo => "EmergencyCallData.ProviderInfo",
            Subtype::EmergencyCallDataServiceInfo => "EmergencyCallData.ServiceInfo",
            Subtype::EmergencyCallDataSubscriberInfo => "EmergencyCallData.SubscriberInfo",
            Subtype::EmergencyCallDataVeds => "EmergencyCallData.VEDS",
            Subtype::Emf => "emf",
            Subtype::Emma => "emma",
            Subtype::Emotionml => "emotionml",
            Subtype::Encaprtp => "encaprtp",
            Subtype::Encrypted => "encrypted",
            Subtype::Enriched => "enriched",
            Subtype::Epp => "epp",
            Subtype::Epub => "epub",
            Subtype::Eshop => "eshop",
            Subtype::Evrc => "EVRC",
            Subtype::Evrc0 => "EVRC0",
            Subtype::Evrc1 => "EVRC1",
            Subtype::EvrcQcp => "EVRC-QCP",
            Subtype::Evrcb => "EVRCB",
            Subtype::Evrcb0 => "EVRCB0",
            Subtype::Evrcb1 => "EVRCB1",
            Subtype::Evrcnw => "EVRCNW",
            Subtype::Evrcnw0 => "EVRCNW0",
            Subtype::Evrcnw1 => "EVRCNW1",
            Subtype::Evrcwb => "EVRCWB",
            Subtype::Evrcwb0 => "EVRCWB0",
            Subtype::Evrcwb1 => "EVRCWB1",
            Subtype::Evs => "EVS",
            Subtype::Example => "example",
            Subtype::Exi => "exi",
            Subtype::ExpectCtReport => "expect-ct-report",
            Subtype::Express => "express",
            Subtype::ExternalBody => "external-body",
            Subtype::Fastinfoset => "fastinfoset",
            Subtype::Fastsoap => "fastsoap",
            Subtype::Fdt => "fdt",
            Subtype::FeedbackReport => "feedback-report",
            Subtype::Ffv1 => "FFV1",
            Subtype::Fhir => "fhir",
            Subtype::Fhirpath => "fhirpath",
            Subtype::Fifo => "fifo",
            Subtype::Fits => "fits",
            Subtype::Flac => "flac",
            Subtype::Flexfec => "flexfec",
            Subtype::Fli => "fli",
            Subtype::FontTdpfr => "font-tdpfr",
            Subtype::FormData => "form-data",
            Subtype::FrameworkAttributes => "framework-attributes",
            Subtype::Futuresplash => "futuresplash",
            Subtype::Fwdred => "fwdred",
            Subtype::G3fax => "g3fax",
            Subtype::G7110 => "G711-0",
            Subtype::G719 => "G719",
            Subtype::G722 => "G722",
            Subtype::G7221 => "G7221",
            Subtype::G723 => "G723",
            Subtype::G72616 => "G726-16",
            Subtype::G72624 => "G726-24",
            Subtype::G72632 => "G726-32",
            Subtype::G72640 => "G726-40",
            Subtype::G728 => "G728",
            Subtype::G729 => "G729",
            Subtype::G7291 => "G7291",
            Subtype::G729d => "G729D",
            Subtype::G729e => "G729E",
            Subtype::Geo => "geo",
            Subtype::Geopackage => "geopackage",
            Subtype::Geoxacml => "geoxacml",
            Subtype::Gff3 => "gff3",
            Subtype::Gif => "gif",
            Subtype::Gl => "gl",
            Subtype::Global => "global",
            Subtype::GlobalDeliveryStatus => "global-delivery-status",
            Subtype::GlobalDispositionNotification => "global-disposition-notification",
            Subtype::GlobalHeaders => "global-headers",
            Subtype::Gltf => "gltf",
            Subtype::GltfBinary => "gltf-binary",
            Subtype::GltfBuffer => "gltf-buffer",
            Subtype::Gml => "gml",
            Subtype::GrammarRefList => "grammar-ref-list",
            Subtype::Gsm => "GSM",
            Subtype::GsmEfr => "GSM-EFR",
            Subtype::GsmHr08 => "GSM-HR-08",
            Subtype::Gzip => "gzip",
            Subtype::H224 => "H224",
            Subtype::H261 => "H261",
            Subtype::H263 => "H263",
            Subtype::H2631998 => "H263-1998",
            Subtype::H2632000 => "H263-2000",
            Subtype::H264 => "H264",
            Subtype::H264Rcdo => "H264-RCDO",
            Subtype::H264Svc => "H264-SVC",
            Subtype::H265 => "H265",
            Subtype::HeaderSet => "header-set",
            Subtype::Heic => "heic",
            Subtype::HeicSequence => "heic-sequence",
            Subtype::Heif => "heif",
            Subtype::HeifSequence => "heif-sequence",
            Subtype::Hej2k => "hej2k",
            Subtype::Held => "held",
            Subtype::Hsj2 => "hsj2",
            Subtype::Hta => "hta",
            Subtype::Html => "html",
            Subtype::Http => "http",
            Subtype::Hyperstudio => "hyperstudio",
            Subtype::ILbc => "iLBC",
            Subtype::IbeKeyRequest => "ibe-key-request",
            Subtype::IbePkgReply => "ibe-pkg-reply",
            Subtype::IbePpData => "ibe-pp-data",
            Subtype::Ief => "ief",
            Subtype::Iges => "iges",
            Subtype::ImIscomposing => "im-iscomposing",
            Subtype::Imdn => "imdn",
            Subtype::Index => "index",
            Subtype::IndexCmd => "index.cmd",
            Subtype::IndexObj => "index.obj",
            Subtype::IndexResponse => "index.response",
            Subtype::IndexVnd => "index.vnd",
            Subtype::Inkml => "inkml",
            Subtype::Iotp => "IOTP",
            Subtype::IpMrV25 => "ip-mr_v2.5",
            Subtype::Ipfix => "ipfix",
            Subtype::Ipp => "ipp",
            Subtype::IsoSegment => "iso.segment",
            Subtype::Isup => "ISUP",
            Subtype::Its => "its",
            Subtype::JavaArchive => "java-archive",
            Subtype::JavaSerializedObject => "java-serialized-object",
            Subtype::JavaVm => "java-vm",
            Subtype::Javascript => "javascript",
            Subtype::JcrCnd => "jcr-cnd",
            Subtype::Jf2feed => "jf2feed",
            Subtype::Jls => "jls",
            Subtype::Jose => "jose",
            Subtype::Jp2 => "jp2",
            Subtype::Jpeg => "jpeg",
            Subtype::Jpeg2000 => "jpeg2000",
            Subtype::Jph => "jph",
            Subtype::Jphc => "jphc",
            Subtype::Jpm => "jpm",
            Subtype::Jpx => "jpx",
            Subtype::Jrd => "jrd",
            Subtype::Jscalendar => "jscalendar",
            Subtype::Json => "json",
            Subtype::JsonPatch => "json-patch",
            Subtype::JsonSeq => "json-seq",
            Subtype::Jwk => "jwk",
            Subtype::JwkSet => "jwk-set",
            Subtype::Jwt => "jwt",
            Subtype::Jxl => "jxl",
            Subtype::Jxr => "jxr",
            Subtype::JxrA => "jxrA",
            Subtype::JxrS => "jxrS",
            Subtype::Jxs => "jxs",
            Subtype::Jxsc => "jxsc",
            Subtype::Jxsi => "jxsi",
            Subtype::Jxss => "jxss",
            Subtype::Jxsv => "jxsv",
            Subtype::KpmlRequest => "kpml-request",
            Subtype::KpmlResponse => "kpml-response",
            Subtype::Ktx => "ktx",
            Subtype::Ktx2 => "ktx2",
            Subtype::L16 => "L16",
            Subtype::L20 => "L20",
            Subtype::L24 => "L24",
            Subtype::L8 => "L8",
            Subtype::Ld => "ld",
            Subtype::Lgr => "lgr",
            Subtype::LinkFormat => "link-format",
            Subtype::LoadControl => "load-control",
            Subtype::Lost => "lost",
            Subtype::Lostsync => "lostsync",
            Subtype::Lpc => "LPC",
            Subtype::Lpf => "lpf",
            Subtype::Lxf => "LXF",
            Subtype::M3g => "m3g",
            Subtype::MacBinhex40 => "mac-binhex40",
            Subtype::MacCompactpro => "mac-compactpro",
            Subtype::Macwriteii => "macwriteii",
            Subtype::Mads => "mads",
            Subtype::Manifest => "manifest",
            Subtype::Marc => "marc",
            Subtype::Marcxml => "marcxml",
            Subtype::Markdown => "markdown",
            Subtype::Mathematica => "mathematica",
            Subtype::Mathml => "mathml",
            Subtype::MathmlContent => "mathml-content",
            Subtype::MathmlPresentation => "mathml-presentation",
            Subtype::MbmsAssociatedProcedureDescription => "mbms-associated-procedure-description",
            Subtype::MbmsDeregister => "mbms-deregister",
            Subtype::MbmsEnvelope => "mbms-envelope",
            Subtype::MbmsMsk => "mbms-msk",
            Subtype::MbmsMskResponse => "mbms-msk-response",
            Subtype::MbmsProtectionDescription => "mbms-protection-description",
            Subtype::MbmsReceptionReport => "mbms-reception-report",
            Subtype::MbmsRegister => "mbms-register",
            Subtype::MbmsRegisterResponse => "mbms-register-response",
            Subtype::MbmsSchedule => "mbms-schedule",
            Subtype::MbmsUserServiceDescription => "mbms-user-service-description",
            Subtype::Mbox => "mbox",
            Subtype::MediaControl => "media_control",
            Subtype::MediaPolicyDataset => "media-policy-dataset",
            Subtype::Mediaservercontrol => "mediaservercontrol",
            Subtype::Melp => "MELP",
            Subtype::Melp1200 => "MELP1200",
            Subtype::Melp2400 => "MELP2400",
            Subtype::Melp600 => "MELP600",
            Subtype::MergePatch => "merge-patch",
            Subtype::Mesh => "mesh",
            Subtype::Metalink4 => "metalink4",
            Subtype::Mets => "mets",
            Subtype::Mf4 => "MF4",
            Subtype::Mhas => "mhas",
            Subtype::Mikey => "mikey",
            Subtype::Mipc => "mipc",
            Subtype::MissingBlocks => "missing-blocks",
            Subtype::Mixed => "mixed",
            Subtype::Mizar => "mizar",
            Subtype::Mj2 => "mj2",
            Subtype::MmtAei => "mmt-aei",
            Subtype::MmtUsd => "mmt-usd",
            Subtype::MobileXmf => "mobile-xmf",
            Subtype::Mods => "mods",
            Subtype::MossKeys => "moss-keys",
            Subtype::MossSignature => "moss-signature",
            Subtype::MosskeyData => "mosskey-data",
            Subtype::MosskeyRequest => "mosskey-request",
            Subtype::Mp1s => "MP1S",
            Subtype::Mp21 => "mp21",
            Subtype::Mp2p => "MP2P",
            Subtype::Mp2t => "MP2T",
            Subtype::Mp4 => "mp4",
            Subtype::Mp4aLatm => "MP4A-LATM",
            Subtype::Mp4vEs => "MP4V-ES",
            Subtype::Mpa => "MPA",
            Subtype::MpaRobust => "mpa-robust",
            Subtype::Mpeg => "mpeg",
            Subtype::Mpeg4Generic => "mpeg4-generic",
            Subtype::Mpeg4Iod => "mpeg4-iod",
            Subtype::Mpeg4IodXmt => "mpeg4-iod-xmt",
            Subtype::Mpegurl => "mpegurl",
            Subtype::Mpv => "MPV",
            Subtype::MrbConsumer => "mrb-consumer",
            Subtype::MrbPublish => "mrb-publish",
            Subtype::Msaccess => "msaccess",
            Subtype::MscIvr => "msc-ivr",
            Subtype::MscMixer => "msc-mixer",
            Subtype::Msword => "msword",
            Subtype::Mtl => "mtl",
            Subtype::Mud => "mud",
            Subtype::Multilingual => "multilingual",
            Subtype::MultipartCore => "multipart-core",
            Subtype::Mxf => "mxf",
            Subtype::N3 => "n3",
            Subtype::NQuads => "n-quads",
            Subtype::NTriples => "n-triples",
            Subtype::Naplps => "naplps",
            Subtype::Nasdata => "nasdata",
            Subtype::NewsCheckgroups => "news-checkgroups",
            Subtype::NewsGroupinfo => "news-groupinfo",
            Subtype::NewsTransmission => "news-transmission",
            Subtype::Nlsml => "nlsml",
            Subtype::Node => "node",
            Subtype::Nss => "nss",
            Subtype::Nv => "nv",
            Subtype::OauthAuthzReq => "oauth-authz-req",
            Subtype::Obj => "obj",
            Subtype::ObliviousDnsMessage => "oblivious-dns-message",
            Subtype::OcspRequest => "ocsp-request",
            Subtype::OcspResponse => "ocsp-response",
            Subtype::OctetStream => "octet-stream",
            Subtype::Oda => "ODA",
            Subtype::Odm => "odm",
            Subtype::Odx => "ODX",
            Subtype::OebpsPackage => "oebps-package",
            Subtype::Ogg => "ogg",
            Subtype::Onenote => "onenote",
            Subtype::OpcNodeset => "opc-nodeset",
            Subtype::Opus => "opus",
            Subtype::Oscore => "oscore",
            Subtype::Otf => "otf",
            Subtype::Oxps => "oxps",
            Subtype::P21 => "p21",
            Subtype::P2pOverlay => "p2p-overlay",
            Subtype::Parallel => "parallel",
            Subtype::Parameters => "parameters",
            Subtype::Parityfec => "parityfec",
            Subtype::Partial => "partial",
            Subtype::Passport => "passport",
            Subtype::PatchOpsError => "patch-ops-error",
            Subtype::Pcma => "PCMA",
            Subtype::PcmaWb => "PCMA-WB",
            Subtype::Pcmu => "PCMU",
            Subtype::PcmuWb => "PCMU-WB",
            Subtype::Pdf => "pdf",
            Subtype::Pdx => "PDX",
            Subtype::PemCertificateChain => "pem-certificate-chain",
            Subtype::PgpEncrypted => "pgp-encrypted",
            Subtype::PgpKeys => "pgp-keys",
            Subtype::PgpSignature => "pgp-signature",
            Subtype::PicsRules => "pics-rules",
            Subtype::Pidf => "pidf",
            Subtype::PidfDiff => "pidf-diff",
            Subtype::Pkcs10 => "pkcs10",
            Subtype::Pkcs12 => "pkcs12",
            Subtype::Pkcs7Mime => "pkcs7-mime",
            Subtype::Pkcs7Signature => "pkcs7-signature",
            Subtype::Pkcs8 => "pkcs8",
            Subtype::Pkcs8Encrypted => "pkcs8-encrypted",
            Subtype::PkixAttrCert => "pkix-attr-cert",
            Subtype::PkixCert => "pkix-cert",
            Subtype::PkixCrl => "pkix-crl",
            Subtype::PkixPkipath => "pkix-pkipath",
            Subtype::Pkixcmp => "pkixcmp",
            Subtype::Plain => "plain",
            Subtype::Pls => "pls",
            Subtype::Png => "png",
            Subtype::PocSettings => "poc-settings",
            Subtype::Pointer => "pointer",
            Subtype::Postscript => "postscript",
            Subtype::PpspTracker => "ppsp-tracker",
            Subtype::Prc => "prc",
            Subtype::Problem => "problem",
            Subtype::Provenance => "provenance",
            Subtype::ProvenanceNotation => "provenance-notation",
            Subtype::PrsAlvestrandTitraxSheet => "prs.alvestrand.titrax-sheet",
            Subtype::PrsBtif => "prs.btif",
            Subtype::PrsCww => "prs.cww",
            Subtype::PrsCyn => "prs.cyn",
            Subtype::PrsFallensteinRst => "prs.fallenstein.rst",
            Subtype::PrsHpub => "prs.hpub",
            Subtype::PrsLinesTag => "prs.lines.tag",
            Subtype::PrsNprend => "prs.nprend",
            Subtype::PrsPlucker => "prs.plucker",
            Subtype::PrsPropLogic => "prs.prop.logic",
            Subtype::PrsPti => "prs.pti",
            Subtype::PrsRdfXmlCrypt => "prs.rdf-xml-crypt",
            Subtype::PrsSid => "prs.sid",
            Subtype::PrsXsf => "prs.xsf",
            Subtype::Pskc => "pskc",
            Subtype::Pvd => "pvd",
            Subtype::PwgRaster => "pwg-raster",
            Subtype::Qcelp => "QCELP",
            Subtype::Qsig => "QSIG",
            Subtype::Quicktime => "quicktime",
            Subtype::Raptorfec => "raptorfec",
            Subtype::Raw => "raw",
            Subtype::Rdap => "rdap",
            Subtype::Rdf => "rdf",
            Subtype::Red => "RED",
            Subtype::Reginfo => "reginfo",
            Subtype::Related => "related",
            Subtype::RelaxNgCompactSyntax => "relax-ng-compact-syntax",
            Subtype::RemotePrinting => "remote-printing",
            Subtype::Report => "report",
            Subtype::Reputon => "reputon",
            Subtype::ResourceLists => "resource-lists",
            Subtype::ResourceListsDiff => "resource-lists-diff",
            Subtype::Rfc => "rfc",
            Subtype::Rfc822 => "rfc822",
            Subtype::Rfc822Headers => "rfc822-headers",
            Subtype::Riscos => "riscos",
            Subtype::Rlmi => "rlmi",
            Subtype::RlsServices => "rls-services",
            Subtype::RouteApd => "route-apd",
            Subtype::RouteSTsid => "route-s-tsid",
            Subtype::RouteUsd => "route-usd",
            Subtype::RpkiGhostbusters => "rpki-ghostbusters",
            Subtype::RpkiManifest => "rpki-manifest",
            Subtype::RpkiPublication => "rpki-publication",
            Subtype::RpkiRoa => "rpki-roa",
            Subtype::RpkiUpdown => "rpki-updown",
            Subtype::Rtf => "rtf",
            Subtype::RtpEncAescm128 => "rtp-enc-aescm128",
            Subtype::RtpMidi => "rtp-midi",
            Subtype::Rtploopback => "rtploopback",
            Subtype::Rtx => "rtx",
            Subtype::SHttp => "s-http",
            Subtype::Samlassertion => "samlassertion",
            Subtype::Samlmetadata => "samlmetadata",
            Subtype::Sarif => "sarif",
            Subtype::SarifExternalProperties => "sarif-external-properties",
            Subtype::Sbe => "sbe",
            Subtype::Sbml => "sbml",
            Subtype::Scaip => "scaip",
            Subtype::Scim => "scim",
            Subtype::Scip => "scip",
            Subtype::ScvpCvRequest => "scvp-cv-request",
            Subtype::ScvpCvResponse => "scvp-cv-response",
            Subtype::ScvpVpRequest => "scvp-vp-request",
            Subtype::ScvpVpResponse => "scvp-vp-response",
            Subtype::Sdp => "sdp",
            Subtype::Secevent => "secevent",
            Subtype::Senml => "senml",
            Subtype::SenmlEtch => "senml-etch",
            Subtype::SenmlExi => "senml-exi",
            Subtype::Sensml => "sensml",
            Subtype::SensmlExi => "sensml-exi",
            Subtype::Sep => "sep",
            Subtype::SepExi => "sep-exi",
            Subtype::SessionInfo => "session-info",
            Subtype::SetPayment => "set-payment",
            Subtype::SetPaymentInitiation => "set-payment-initiation",
            Subtype::SetRegistration => "set-registration",
            Subtype::SetRegistrationInitiation => "set-registration-initiation",
            Subtype::Sfnt => "sfnt",
            Subtype::Sgml => "SGML",
            Subtype::SgmlOpenCatalog => "sgml-open-catalog",
            Subtype::Shaclc => "shaclc",
            Subtype::Shex => "shex",
            Subtype::Shf => "shf",
            Subtype::Sieve => "sieve",
            Subtype::Signed => "signed",
            Subtype::SimpleFilter => "simple-filter",
            Subtype::SimpleMessageSummary => "simple-message-summary",
            Subtype::SimpleSymbolContainer => "simpleSymbolContainer",
            Subtype::Sip => "sip",
            Subtype::Sipc => "sipc",
            Subtype::Sipfrag => "sipfrag",
            Subtype::Slate => "slate",
            Subtype::Smil => "smil",
            Subtype::Smpte291 => "smpte291",
            Subtype::Smpte292m => "SMPTE292M",
            Subtype::Smpte336m => "smpte336m",
            Subtype::Smv => "SMV",
            Subtype::Smv0 => "SMV0",
            Subtype::SmvQcp => "SMV-QCP",
            Subtype::Soap => "soap",
            Subtype::Socket => "socket",
            Subtype::Sofa => "sofa",
            Subtype::SpMidi => "sp-midi",
            Subtype::SparqlQuery => "sparql-query",
            Subtype::SparqlResults => "sparql-results",
            Subtype::Spdx => "spdx",
            Subtype::Speex => "speex",
            Subtype::SpiritsEvent => "spirits-event",
            Subtype::Sql => "sql",
            Subtype::Srgs => "srgs",
            Subtype::Sru => "sru",
            Subtype::Ssml => "ssml",
            Subtype::Step => "step",
            Subtype::StepXml => "step-xml",
            Subtype::Stix => "stix",
            Subtype::Stl => "stl",
            Subtype::Strings => "strings",
            Subtype::Svg => "svg",
            Subtype::Swid => "swid",
            Subtype::T140 => "t140",
            Subtype::T140c => "t140c",
            Subtype::T38 => "t38",
            Subtype::TabSeparatedValues => "tab-separated-values",
            Subtype::TampApexUpdate => "tamp-apex-update",
            Subtype::TampApexUpdateConfirm => "tamp-apex-update-confirm",
            Subtype::TampCommunityUpdate => "tamp-community-update",
            Subtype::TampCommunityUpdateConfirm => "tamp-community-update-confirm",
            Subtype::TampError => "tamp-error",
            Subtype::TampSequenceAdjust => "tamp-sequence-adjust",
            Subtype::TampSequenceAdjustConfirm => "tamp-sequence-adjust-confirm",
            Subtype::TampStatusQuery => "tamp-status-query",
            Subtype::TampStatusResponse => "tamp-status-response",
            Subtype::TampUpdate => "tamp-update",
            Subtype::TampUpdateConfirm => "tamp-update-confirm",
            Subtype::Taxii => "taxii",
            Subtype::Td => "td",
            Subtype::Tei => "tei",
            Subtype::TelephoneEvent => "telephone-event",
            Subtype::TetraAcelp => "TETRA_ACELP",
            Subtype::TetraAcelpBb => "TETRA_ACELP_BB",
            Subtype::TetraIsi => "TETRA_ISI",
            Subtype::Texmacs => "texmacs",
            Subtype::Thraud => "thraud",
            Subtype::Tiff => "tiff",
            Subtype::TiffFx => "tiff-fx",
            Subtype::TimestampQuery => "timestamp-query",
            Subtype::TimestampReply => "timestamp-reply",
            Subtype::TimestampedData => "timestamped-data",
            Subtype::Tlsrpt => "tlsrpt",
            Subtype::Tnauthlist => "tnauthlist",
            Subtype::TokenIntrospection => "token-introspection",
            Subtype::Tone => "tone",
            Subtype::TrackingStatus => "tracking-status",
            Subtype::TrickleIceSdpfrag => "trickle-ice-sdpfrag",
            Subtype::Trig => "trig",
            Subtype::Troff => "troff",
            Subtype::Tsvcis => "TSVCIS",
            Subtype::Ttf => "ttf",
            Subtype::Ttml => "ttml",
            Subtype::Turtle => "turtle",
            Subtype::TveTrigger => "tve-trigger",
            Subtype::Tzif => "tzif",
            Subtype::TzifLeap => "tzif-leap",
            Subtype::U3d => "u3d",
            Subtype::Uemclip => "UEMCLIP",
            Subtype::Ulpfec => "ulpfec",
            Subtype::UrcGrpsheet => "urc-grpsheet",
            Subtype::UrcRessheet => "urc-ressheet",
            Subtype::UrcTargetdesc => "urc-targetdesc",
            Subtype::UrcUisocketdesc => "urc-uisocketdesc",
            Subtype::UriList => "uri-list",
            Subtype::Usac => "usac",
            Subtype::Vc1 => "vc1",
            Subtype::Vc2 => "vc2",
            Subtype::Vcard => "vcard",
            Subtype::Vdvi => "VDVI",
            Subtype::Vemmi => "vemmi",
            Subtype::VmrWb => "VMR-WB",
            Subtype::Vnd1000mindsDecisionModel => "vnd.1000minds.decision-model",
            Subtype::Vnd3gpp2Bcmcsinfo => "vnd.3gpp2.bcmcsinfo",
            Subtype::Vnd3gpp2Sms => "vnd.3gpp2.sms",
            Subtype::Vnd3gpp2Tcap => "vnd.3gpp2.tcap",
            Subtype::Vnd3gpp5gnas => "vnd.3gpp.5gnas",
            Subtype::Vnd3gppAccessTransferEvents => "vnd.3gpp.access-transfer-events",
            Subtype::Vnd3gppBsf => "vnd.3gpp.bsf",
            Subtype::Vnd3gppGmop => "vnd.3gpp.GMOP",
            Subtype::Vnd3gppGtpc => "vnd.3gpp.gtpc",
            Subtype::Vnd3gppInterworkingData => "vnd.3gpp.interworking-data",
            Subtype::Vnd3gppIufp => "vnd.3gpp.iufp",
            Subtype::Vnd3gppLpp => "vnd.3gpp.lpp",
            Subtype::Vnd3gppMcSignallingEar => "vnd.3gpp.mc-signalling-ear",
            Subtype::Vnd3gppMcdataAffiliationCommand => "vnd.3gpp.mcdata-affiliation-command",
            Subtype::Vnd3gppMcdataInfo => "vnd.3gpp.mcdata-info",
            Subtype::Vnd3gppMcdataPayload => "vnd.3gpp.mcdata-payload",
            Subtype::Vnd3gppMcdataServiceConfig => "vnd.3gpp.mcdata-service-config",
            Subtype::Vnd3gppMcdataSignalling => "vnd.3gpp.mcdata-signalling",
            Subtype::Vnd3gppMcdataUeConfig => "vnd.3gpp.mcdata-ue-config",
            Subtype::Vnd3gppMcdataUserProfile => "vnd.3gpp.mcdata-user-profile",
            Subtype::Vnd3gppMcpttAffiliationCommand => "vnd.3gpp.mcptt-affiliation-command",
            Subtype::Vnd3gppMcpttFloorRequest => "vnd.3gpp.mcptt-floor-request",
            Subtype::Vnd3gppMcpttInfo => "vnd.3gpp.mcptt-info",
            Subtype::Vnd3gppMcpttLocationInfo => "vnd.3gpp.mcptt-location-info",
            Subtype::Vnd3gppMcpttMbmsUsageInfo => "vnd.3gpp.mcptt-mbms-usage-info",
            Subtype::Vnd3gppMcpttServiceConfig => "vnd.3gpp.mcptt-service-config",
            Subtype::Vnd3gppMcpttSigned => "vnd.3gpp.mcptt-signed",
            Subtype::Vnd3gppMcpttUeConfig => "vnd.3gpp.mcptt-ue-config",
            Subtype::Vnd3gppMcpttUeInitConfig => "vnd.3gpp.mcptt-ue-init-config",
            Subtype::Vnd3gppMcpttUserProfile => "vnd.3gpp.mcptt-user-profile",
            Subtype::Vnd3gppMcvideoAffiliationCommand => "vnd.3gpp.mcvideo-affiliation-command",
            Subtype::Vnd3gppMcvideoInfo => "vnd.3gpp.mcvideo-info",
            Subtype::Vnd3gppMcvideoLocationInfo => "vnd.3gpp.mcvideo-location-info",
            Subtype::Vnd3gppMcvideoMbmsUsageInfo => "vnd.3gpp.mcvideo-mbms-usage-info",
            Subtype::Vnd3gppMcvideoServiceConfig => "vnd.3gpp.mcvideo-service-config",
            Subtype::Vnd3gppMcvideoTransmissionRequest => "vnd.3gpp.mcvideo-transmission-request",
            Subtype::Vnd3gppMcvideoUeConfig => "vnd.3gpp.mcvideo-ue-config",
            Subtype::Vnd3gppMcvideoUserProfile => "vnd.3gpp.mcvideo-user-profile",
            Subtype::Vnd3gppMidCall => "vnd.3gpp.mid-call",
            Subtype::Vnd3gppNgap => "vnd.3gpp.ngap",
            Subtype::Vnd3gppPfcp => "vnd.3gpp.pfcp",
            Subtype::Vnd3gppPicBwLarge => "vnd.3gpp.pic-bw-large",
            Subtype::Vnd3gppPicBwSmall => "vnd.3gpp.pic-bw-small",
            Subtype::Vnd3gppPicBwVar => "vnd.3gpp.pic-bw-var",
            Subtype::Vnd3gppProse => "vnd.3gpp-prose",
            Subtype::Vnd3gppProsePc3ch => "vnd.3gpp-prose-pc3ch",
            Subtype::Vnd3gppS1ap => "vnd.3gpp.s1ap",
            Subtype::Vnd3gppSms => "vnd.3gpp.sms",
            Subtype::Vnd3gppSrvccExt => "vnd.3gpp.srvcc-ext",
            Subtype::Vnd3gppSrvccInfo => "vnd.3gpp.SRVCC-info",
            Subtype::Vnd3gppStateAndEventInfo => "vnd.3gpp.state-and-event-info",
            Subtype::Vnd3gppUssd => "vnd.3gpp.ussd",
            Subtype::Vnd3gppV2xLocalServiceInformation => "vnd.3gpp-v2x-local-service-information",
            Subtype::Vnd3lightssoftwareImagescal => "vnd.3lightssoftware.imagescal",
            Subtype::Vnd3mPostItNotes => "vnd.3M.Post-it-Notes",
            Subtype::Vnd4sb => "vnd.4SB",
            Subtype::VndA => "vnd.a",
            Subtype::VndAbc => "vnd.abc",
            Subtype::VndAccpacSimplyAso => "vnd.accpac.simply.aso",
            Subtype::VndAccpacSimplyImp => "vnd.accpac.simply.imp",
            Subtype::VndAcucobol => "vnd.acucobol",
            Subtype::VndAcucorp => "vnd.acucorp",
            Subtype::VndAdobeFlashMovie => "vnd.adobe.flash.movie",
            Subtype::VndAdobeFormscentralFcdt => "vnd.adobe.formscentral.fcdt",
            Subtype::VndAdobeFxp => "vnd.adobe.fxp",
            Subtype::VndAdobePartialUpload => "vnd.adobe.partial-upload",
            Subtype::VndAdobePhotoshop => "vnd.adobe.photoshop",
            Subtype::VndAdobeXdp => "vnd.adobe.xdp",
            Subtype::VndAdobeXfdf => "vnd.adobe.xfdf",
            Subtype::VndAetherImp => "vnd.aether.imp",
            Subtype::VndAfpcAfplinedata => "vnd.afpc.afplinedata",
            Subtype::VndAfpcAfplinedataPagedef => "vnd.afpc.afplinedata-pagedef",
            Subtype::VndAfpcCmocaCmresource => "vnd.afpc.cmoca-cmresource",
            Subtype::VndAfpcFocaCharset => "vnd.afpc.foca-charset",
            Subtype::VndAfpcFocaCodedfont => "vnd.afpc.foca-codedfont",
            Subtype::VndAfpcFocaCodepage => "vnd.afpc.foca-codepage",
            Subtype::VndAfpcModca => "vnd.afpc.modca",
            Subtype::VndAfpcModcaFormdef => "vnd.afpc.modca-formdef",
            Subtype::VndAfpcModcaMediummap => "vnd.afpc.modca-mediummap",
            Subtype::VndAfpcModcaObjectcontainer => "vnd.afpc.modca-objectcontainer",
            Subtype::VndAfpcModcaOverlay => "vnd.afpc.modca-overlay",
            Subtype::VndAfpcModcaPagesegment => "vnd.afpc.modca-pagesegment",
            Subtype::VndAge => "vnd.age",
            Subtype::VndAhBarcode => "vnd.ah-barcode",
            Subtype::VndAheadSpace => "vnd.ahead.space",
            Subtype::VndAirzipAcceleratorAzv => "vnd.airzip.accelerator.azv",
            Subtype::VndAirzipFilesecureAzf => "vnd.airzip.filesecure.azf",
            Subtype::VndAirzipFilesecureAzs => "vnd.airzip.filesecure.azs",
            Subtype::VndAmadeus => "vnd.amadeus",
            Subtype::VndAmazonMobi8Ebook => "vnd.amazon.mobi8-ebook",
            Subtype::VndAmericandynamicsAcc => "vnd.americandynamics.acc",
            Subtype::VndAmigaAmi => "vnd.amiga.ami",
            Subtype::VndAmundsenMaze => "vnd.amundsen.maze",
            Subtype::VndAndroidOta => "vnd.android.ota",
            Subtype::VndAndroidPackageArchive => "vnd.android.package-archive",
            Subtype::VndAnki => "vnd.anki",
            Subtype::VndAnserWebCertificateIssueInitiation => "vnd.anser-web-certificate-issue-initiation",
            Subtype::VndAnserWebFundsTransferInitiation => "vnd.anser-web-funds-transfer-initiation",
            Subtype::VndAntixGameComponent => "vnd.antix.game-component",
            Subtype::VndApacheArrowFile => "vnd.apache.arrow.file",
            Subtype::VndApacheArrowStream => "vnd.apache.arrow.stream",
            Subtype::VndApacheThriftBinary => "vnd.apache.thrift.binary",
            Subtype::VndApacheThriftCompact => "vnd.apache.thrift.compact",
            Subtype::VndApacheThriftJson => "vnd.apache.thrift.json",
            Subtype::VndApi => "vnd.api",
            Subtype::VndAplextorWarrp => "vnd.aplextor.warrp",
            Subtype::VndApothekendeReservation => "vnd.apothekende.reservation",
            Subtype::VndAppleInstaller => "vnd.apple.installer",
            Subtype::VndAppleKeynote => "vnd.apple.keynote",
            Subtype::VndAppleMpegurl => "vnd.apple.mpegurl",
            Subtype::VndAppleNumbers => "vnd.apple.numbers",
            Subtype::VndApplePages => "vnd.apple.pages",
            Subtype::VndAristanetworksSwi => "vnd.aristanetworks.swi",
            Subtype::VndArtisan => "vnd.artisan",
            Subtype::VndArtsquare => "vnd.artsquare",
            Subtype::VndAsciiArt => "vnd.ascii-art",
            Subtype::VndAstraeaSoftwareIota => "vnd.astraea-software.iota",
            Subtype::VndAudiograph => "vnd.audiograph",
            Subtype::VndAudiokoz => "vnd.audiokoz",
            Subtype::VndAutopackage => "vnd.autopackage",
            Subtype::VndAvalon => "vnd.avalon",
            Subtype::VndAvistar => "vnd.avistar",
            Subtype::VndBalsamiqBmml => "vnd.balsamiq.bmml",
            Subtype::VndBalsamiqBmpr => "vnd.balsamiq.bmpr",
            Subtype::VndBananaAccounting => "vnd.banana-accounting",
            Subtype::VndBbfUspError => "vnd.bbf.usp.error",
            Subtype::VndBbfUspMsg => "vnd.bbf.usp.msg",
            Subtype::VndBekitzurStech => "vnd.bekitzur-stech",
            Subtype::VndBintMedContent => "vnd.bint.med-content",
            Subtype::VndBintMedPlus => "vnd.bint.med-plus",
            Subtype::VndBiopaxRdf => "vnd.biopax.rdf",
            Subtype::VndBlinkIdbValueWrapper => "vnd.blink-idb-value-wrapper",
            Subtype::VndBlueiceMultipass => "vnd.blueice.multipass",
            Subtype::VndBluetoothEpOob => "vnd.bluetooth.ep.oob",
            Subtype::VndBluetoothLeOob => "vnd.bluetooth.le.oob",
            Subtype::VndBmi => "vnd.bmi",
            Subtype::VndBpf => "vnd.bpf",
            Subtype::VndBpf3 => "vnd.bpf3",
            Subtype::VndBusinessobjects => "vnd.businessobjects",
            Subtype::VndByuUapi => "vnd.byu.uapi",
            Subtype::VndCabJscript => "vnd.cab-jscript",
            Subtype::VndCanonCpdl => "vnd.canon-cpdl",
            Subtype::VndCanonLips => "vnd.canon-lips",
            Subtype::VndCapasystemsPg => "vnd.capasystems-pg",
            Subtype::VndCctv => "vnd.CCTV",
            Subtype::VndCelp => "vnd.CELP",
            Subtype::VndCendioThinlincClientconf => "vnd.cendio.thinlinc.clientconf",
            Subtype::VndCenturySystemsTcpStream => "vnd.century-systems.tcp_stream",
            Subtype::VndChemdraw => "vnd.chemdraw",
            Subtype::VndChessPgn => "vnd.chess-pgn",
            Subtype::VndChipnutsKaraokeMmd => "vnd.chipnuts.karaoke-mmd",
            Subtype::VndCiedi => "vnd.ciedi",
            Subtype::VndCinderella => "vnd.cinderella",
            Subtype::VndCirpackIsdnExt => "vnd.cirpack.isdn-ext",
            Subtype::VndCiscoNse => "vnd.cisco.nse",
            Subtype::VndCitationstylesStyle => "vnd.citationstyles.style",
            Subtype::VndClaymore => "vnd.claymore",
            Subtype::VndCloantoRp9 => "vnd.cloanto.rp9",
            Subtype::VndClonkC4group => "vnd.clonk.c4group",
            Subtype::VndCluetrustCartomobileConfig => "vnd.cluetrust.cartomobile-config",
            Subtype::VndCluetrustCartomobileConfigPkg => "vnd.cluetrust.cartomobile-config-pkg",
            Subtype::VndCmlesRadioEvents => "vnd.cmles.radio-events",
            Subtype::VndCnsAnp1 => "vnd.cns.anp1",
            Subtype::VndCnsInf1 => "vnd.cns.inf1",
            Subtype::VndCnsInf2 => "vnd.cns.inf2",
            Subtype::VndCoffeescript => "vnd.coffeescript",
            Subtype::VndCollabioXodocumentsDocument => "vnd.collabio.xodocuments.document",
            Subtype::VndCollabioXodocumentsDocumentTemplate => "vnd.collabio.xodocuments.document-template",
            Subtype::VndCollabioXodocumentsPresentation => "vnd.collabio.xodocuments.presentation",
            Subtype::VndCollabioXodocumentsPresentationTemplate => "vnd.collabio.xodocuments.presentation-template",
            Subtype::VndCollabioXodocumentsSpreadsheet => "vnd.collabio.xodocuments.spreadsheet",
            Subtype::VndCollabioXodocumentsSpreadsheetTemplate => "vnd.collabio.xodocuments.spreadsheet-template",
            Subtype::VndCollada => "vnd.collada",
            Subtype::VndCollection => "vnd.collection",
            Subtype::VndCollectionDoc => "vnd.collection.doc",
            Subtype::VndCollectionNext => "vnd.collection.next",
            Subtype::VndComicbook => "vnd.comicbook",
            Subtype::VndComicbookRar => "vnd.comicbook-rar",
            Subtype::VndCommerceBattelle => "vnd.commerce-battelle",
            Subtype::VndCommonspace => "vnd.commonspace",
            Subtype::VndContactCmsg => "vnd.contact.cmsg",
            Subtype::VndCoreosIgnition => "vnd.coreos.ignition",
            Subtype::VndCosmocaller => "vnd.cosmocaller",
            Subtype::VndCrickClicker => "vnd.crick.clicker",
            Subtype::VndCrickClickerKeyboard => "vnd.crick.clicker.keyboard",
            Subtype::VndCrickClickerPalette => "vnd.crick.clicker.palette",
            Subtype::VndCrickClickerTemplate => "vnd.crick.clicker.template",
            Subtype::VndCrickClickerWordbank => "vnd.crick.clicker.wordbank",
            Subtype::VndCriticaltoolsWbs => "vnd.criticaltools.wbs",
            Subtype::VndCryptiiPipe => "vnd.cryptii.pipe",
            Subtype::VndCryptoShadeFile => "vnd.crypto-shade-file",
            Subtype::VndCryptomatorEncrypted => "vnd.cryptomator.encrypted",
            Subtype::VndCryptomatorVault => "vnd.cryptomator.vault",
            Subtype::VndCtcPosml => "vnd.ctc-posml",
            Subtype::VndCtctWs => "vnd.ctct.ws",
            Subtype::VndCupsPdf => "vnd.cups-pdf",
            Subtype::VndCupsPostscript => "vnd.cups-postscript",
            Subtype::VndCupsPpd => "vnd.cups-ppd",
            Subtype::VndCupsRaster => "vnd.cups-raster",
            Subtype::VndCupsRaw => "vnd.cups-raw",
            Subtype::VndCurl => "vnd.curl",
            Subtype::VndCyanDeanRoot => "vnd.cyan.dean.root",
            Subtype::VndCybank => "vnd.cybank",
            Subtype::VndCyclonedx => "vnd.cyclonedx",
            Subtype::VndD2lCoursepackage1p0 => "vnd.d2l.coursepackage1p0",
            Subtype::VndD3mDataset => "vnd.d3m-dataset",
            Subtype::VndD3mProblem => "vnd.d3m-problem",
            Subtype::VndDart => "vnd.dart",
            Subtype::VndDataVisionRdz => "vnd.data-vision.rdz",
            Subtype::VndDatapackage => "vnd.datapackage",
            Subtype::VndDataresource => "vnd.dataresource",
            Subtype::VndDbf => "vnd.dbf",
            Subtype::VndDebianBinaryPackage => "vnd.debian.binary-package",
            Subtype::VndDebianCopyright => "vnd.debian.copyright",
            Subtype::VndDeceAudio => "vnd.dece.audio",
            Subtype::VndDeceData => "vnd.dece.data",
            Subtype::VndDeceGraphic => "vnd.dece.graphic",
            Subtype::VndDeceHd => "vnd.dece.hd",
            Subtype::VndDeceMobile => "vnd.dece.mobile",
            Subtype::VndDeceMp4 => "vnd.dece.mp4",
            Subtype::VndDecePd => "vnd.dece.pd",
            Subtype::VndDeceSd => "vnd.dece.sd",
            Subtype::VndDeceTtml => "vnd.dece.ttml",
            Subtype::VndDeceUnspecified => "vnd.dece.unspecified",
            Subtype::VndDeceVideo => "vnd.dece.video",
            Subtype::VndDeceZip => "vnd.dece.zip",
            Subtype::VndDenovoFcselayoutLink => "vnd.denovo.fcselayout-link",
            Subtype::VndDesmumeMovie => "vnd.desmume.movie",
            Subtype::VndDigitalWinds => "vnd.digital-winds",
            Subtype::VndDirBiPlateDlNosuffix => "vnd.dir-bi.plate-dl-nosuffix",
            Subtype::VndDirectvMpeg => "vnd.directv.mpeg",
            Subtype::VndDirectvMpegTts => "vnd.directv.mpeg-tts",
            Subtype::VndDjvu => "vnd.djvu",
            Subtype::VndDlnaAdts => "vnd.dlna.adts",
            Subtype::VndDlnaMpegTts => "vnd.dlna.mpeg-tts",
            Subtype::VndDmClientScript => "vnd.DMClientScript",
            Subtype::VndDmDelegation => "vnd.dm.delegation",
            Subtype::VndDna => "vnd.dna",
            Subtype::VndDocument => "vnd.document",
            Subtype::VndDolbyHeaac1 => "vnd.dolby.heaac.1",
            Subtype::VndDolbyHeaac2 => "vnd.dolby.heaac.2",
            Subtype::VndDolbyMlp => "vnd.dolby.mlp",
            Subtype::VndDolbyMobile1 => "vnd.dolby.mobile.1",
            Subtype::VndDolbyMobile2 => "vnd.dolby.mobile.2",
            Subtype::VndDolbyMps => "vnd.dolby.mps",
            Subtype::VndDolbyPl2 => "vnd.dolby.pl2",
            Subtype::VndDolbyPl2x => "vnd.dolby.pl2x",
            Subtype::VndDolbyPl2z => "vnd.dolby.pl2z",
            Subtype::VndDolbyPulse1 => "vnd.dolby.pulse.1",
            Subtype::VndDoremirScorecloudBinaryDocument => "vnd.doremir.scorecloud-binary-document",
            Subtype::VndDpgraph => "vnd.dpgraph",
            Subtype::VndDra => "vnd.dra",
            Subtype::VndDreamfactory => "vnd.dreamfactory",
            Subtype::VndDrive => "vnd.drive",
            Subtype::VndDtgLocal => "vnd.dtg.local",
            Subtype::VndDtgLocalFlash => "vnd.dtg.local.flash",
            Subtype::VndDtgLocalHtml => "vnd.dtg.local.html",
            Subtype::VndDts => "vnd.dts",
            Subtype::VndDtsHd => "vnd.dts.hd",
            Subtype::VndDtsUhd => "vnd.dts.uhd",
            Subtype::VndDvbAit => "vnd.dvb.ait",
            Subtype::VndDvbDvbisl => "vnd.dvb.dvbisl",
            Subtype::VndDvbDvbj => "vnd.dvb.dvbj",
            Subtype::VndDvbEsgcontainer => "vnd.dvb.esgcontainer",
            Subtype::VndDvbFile => "vnd.dvb.file",
            Subtype::VndDvbIpdcdftnotifaccess => "vnd.dvb.ipdcdftnotifaccess",
            Subtype::VndDvbIpdcesgaccess => "vnd.dvb.ipdcesgaccess",
            Subtype::VndDvbIpdcesgaccess2 => "vnd.dvb.ipdcesgaccess2",
            Subtype::VndDvbIpdcesgpdd => "vnd.dvb.ipdcesgpdd",
            Subtype::VndDvbIpdcroaming => "vnd.dvb.ipdcroaming",
            Subtype::VndDvbIptvAlfecBase => "vnd.dvb.iptv.alfec-base",
            Subtype::VndDvbIptvAlfecEnhancement => "vnd.dvb.iptv.alfec-enhancement",
            Subtype::VndDvbNotifAggregateRoot => "vnd.dvb.notif-aggregate-root",
            Subtype::VndDvbNotifContainer => "vnd.dvb.notif-container",
            Subtype::VndDvbNotifGeneric => "vnd.dvb.notif-generic",
            Subtype::VndDvbNotifIaMsglist => "vnd.dvb.notif-ia-msglist",
            Subtype::VndDvbNotifIaRegistrationRequest => "vnd.dvb.notif-ia-registration-request",
            Subtype::VndDvbNotifIaRegistrationResponse => "vnd.dvb.notif-ia-registration-response",
            Subtype::VndDvbNotifInit => "vnd.dvb.notif-init",
            Subtype::VndDvbPfr => "vnd.dvb.pfr",
            Subtype::VndDvbService => "vnd.dvb.service",
            Subtype::VndDvbSubtitle => "vnd.dvb.subtitle",
            Subtype::VndDwf => "vnd.dwf",
            Subtype::VndDwg => "vnd.dwg",
            Subtype::VndDxf => "vnd.dxf",
            Subtype::VndDxr => "vnd.dxr",
            Subtype::VndDynageo => "vnd.dynageo",
            Subtype::VndDzr => "vnd.dzr",
            Subtype::VndEasykaraokeCdgdownload => "vnd.easykaraoke.cdgdownload",
            Subtype::VndEcdisUpdate => "vnd.ecdis-update",
            Subtype::VndEcipRlp => "vnd.ecip.rlp",
            Subtype::VndEclipseDitto => "vnd.eclipse.ditto",
            Subtype::VndEcowinChart => "vnd.ecowin.chart",
            Subtype::VndEcowinFilerequest => "vnd.ecowin.filerequest",
            Subtype::VndEcowinFileupdate => "vnd.ecowin.fileupdate",
            Subtype::VndEcowinSeries => "vnd.ecowin.series",
            Subtype::VndEcowinSeriesrequest => "vnd.ecowin.seriesrequest",
            Subtype::VndEcowinSeriesupdate => "vnd.ecowin.seriesupdate",
            Subtype::VndEfiImg => "vnd.efi.img",
            Subtype::VndEfiIso => "vnd.efi.iso",
            Subtype::VndEmclientAccessrequest => "vnd.emclient.accessrequest",
            Subtype::VndEnliven => "vnd.enliven",
            Subtype::VndEnphaseEnvoy => "vnd.enphase.envoy",
            Subtype::VndEprintsData => "vnd.eprints.data",
            Subtype::VndEpsonEsf => "vnd.epson.esf",
            Subtype::VndEpsonMsf => "vnd.epson.msf",
            Subtype::VndEpsonQuickanime => "vnd.epson.quickanime",
            Subtype::VndEpsonSalt => "vnd.epson.salt",
            Subtype::VndEpsonSsf => "vnd.epson.ssf",
            Subtype::VndEricssonQuickcall => "vnd.ericsson.quickcall",
            Subtype::VndEsmertecThemeDescriptor => "vnd.esmertec.theme-descriptor",
            Subtype::VndEspassEspass => "vnd.espass-espass",
            Subtype::VndEszigno3 => "vnd.eszigno3",
            Subtype::VndEtsiAoc => "vnd.etsi.aoc",
            Subtype::VndEtsiAsicE => "vnd.etsi.asic-e",
            Subtype::VndEtsiAsicS => "vnd.etsi.asic-s",
            Subtype::VndEtsiCug => "vnd.etsi.cug",
            Subtype::VndEtsiIptvcommand => "vnd.etsi.iptvcommand",
            Subtype::VndEtsiIptvdiscovery => "vnd.etsi.iptvdiscovery",
            Subtype::VndEtsiIptvprofile => "vnd.etsi.iptvprofile",
            Subtype::VndEtsiIptvsadBc => "vnd.etsi.iptvsad-bc",
            Subtype::VndEtsiIptvsadCod => "vnd.etsi.iptvsad-cod",
            Subtype::VndEtsiIptvsadNpvr => "vnd.etsi.iptvsad-npvr",
            Subtype::VndEtsiIptvservice => "vnd.etsi.iptvservice",
            Subtype::VndEtsiIptvsync => "vnd.etsi.iptvsync",
            Subtype::VndEtsiIptvueprofile => "vnd.etsi.iptvueprofile",
            Subtype::VndEtsiMcid => "vnd.etsi.mcid",
            Subtype::VndEtsiMheg5 => "vnd.etsi.mheg5",
            Subtype::VndEtsiOverloadControlPolicyDataset => "vnd.etsi.overload-control-policy-dataset",
            Subtype::VndEtsiPstn => "vnd.etsi.pstn",
            Subtype::VndEtsiSci => "vnd.etsi.sci",
            Subtype::VndEtsiSimservs => "vnd.etsi.simservs",
            Subtype::VndEtsiTimestampToken => "vnd.etsi.timestamp-token",
            Subtype::VndEtsiTsl => "vnd.etsi.tsl",
            Subtype::VndEtsiTslDer => "vnd.etsi.tsl.der",
            Subtype::VndEuKasparianCar => "vnd.eu.kasparian.car",
            Subtype::VndEudoraData => "vnd.eudora.data",
            Subtype::VndEveradPlj => "vnd.everad.plj",
            Subtype::VndEvolvEcigProfile => "vnd.evolv.ecig.profile",
            Subtype::VndEvolvEcigSettings => "vnd.evolv.ecig.settings",
            Subtype::VndEvolvEcigTheme => "vnd.evolv.ecig.theme",
            Subtype::VndExstreamEmpower => "vnd.exstream-empower",
            Subtype::VndExstreamPackage => "vnd.exstream-package",
            Subtype::VndEzpixAlbum => "vnd.ezpix-album",
            Subtype::VndEzpixPackage => "vnd.ezpix-package",
            Subtype::VndFSecureMobile => "vnd.f-secure.mobile",
            Subtype::VndFamilysearchGedcom => "vnd.familysearch.gedcom",
            Subtype::VndFastbidsheet => "vnd.fastbidsheet",
            Subtype::VndFastcopyDiskImage => "vnd.fastcopy-disk-image",
            Subtype::VndFdf => "vnd.fdf",
            Subtype::VndFdsnMseed => "vnd.fdsn.mseed",
            Subtype::VndFdsnSeed => "vnd.fdsn.seed",
            Subtype::VndFfsns => "vnd.ffsns",
            Subtype::VndFiclabFlb => "vnd.ficlab.flb",
            Subtype::VndFiclabFlt => "vnd.ficlab.flt",
            Subtype::VndFilmitZfc => "vnd.filmit.zfc",
            Subtype::VndFints => "vnd.fints",
            Subtype::VndFiremonkeysCloudcell => "vnd.firemonkeys.cloudcell",
            Subtype::VndFlatland3dml => "vnd.flatland.3dml",
            Subtype::VndFloGraphIt => "vnd.FloGraphIt",
            Subtype::VndFluxtimeClip => "vnd.fluxtime.clip",
            Subtype::VndFly => "vnd.fly",
            Subtype::VndFmiFlexstor => "vnd.fmi.flexstor",
            Subtype::VndFontFontforgeSfd => "vnd.font-fontforge-sfd",
            Subtype::VndFpx => "vnd.fpx",
            Subtype::VndFramemaker => "vnd.framemaker",
            Subtype::VndFscWeblaunch => "vnd.fsc.weblaunch",
            Subtype::VndFst => "vnd.fst",
            Subtype::VndFujifilmFbDocuworks => "vnd.fujifilm.fb.docuworks",
            Subtype::VndFujifilmFbDocuworksBinder => "vnd.fujifilm.fb.docuworks.binder",
            Subtype::VndFujifilmFbDocuworksContainer => "vnd.fujifilm.fb.docuworks.container",
            Subtype::VndFujifilmFbJfi => "vnd.fujifilm.fb.jfi",
            Subtype::VndFujitsuOasys => "vnd.fujitsu.oasys",
            Subtype::VndFujitsuOasys2 => "vnd.fujitsu.oasys2",
            Subtype::VndFujitsuOasys3 => "vnd.fujitsu.oasys3",
            Subtype::VndFujitsuOasysgp => "vnd.fujitsu.oasysgp",
            Subtype::VndFujitsuOasysprs => "vnd.fujitsu.oasysprs",
            Subtype::VndFujixeroxArt4 => "vnd.fujixerox.ART4",
            Subtype::VndFujixeroxArtEx => "vnd.fujixerox.ART-EX",
            Subtype::VndFujixeroxDdd => "vnd.fujixerox.ddd",
            Subtype::VndFujixeroxDocuworks => "vnd.fujixerox.docuworks",
            Subtype::VndFujixeroxDocuworksBinder => "vnd.fujixerox.docuworks.binder",
            Subtype::VndFujixeroxDocuworksContainer => "vnd.fujixerox.docuworks.container",
            Subtype::VndFujixeroxEdmicsMmr => "vnd.fujixerox.edmics-mmr",
            Subtype::VndFujixeroxEdmicsRlc => "vnd.fujixerox.edmics-rlc",
            Subtype::VndFujixeroxHbpl => "vnd.fujixerox.HBPL",
            Subtype::VndFutMisnet => "vnd.fut-misnet",
            Subtype::VndFutoin => "vnd.futoin",
            Subtype::VndFuzzysheet => "vnd.fuzzysheet",
            Subtype::VndFvt => "vnd.fvt",
            Subtype::VndGdl => "vnd.gdl",
            Subtype::VndGenomatixTuxedo => "vnd.genomatix.tuxedo",
            Subtype::VndGenticsGrd => "vnd.gentics.grd",
            Subtype::VndGeogebraFile => "vnd.geogebra.file",
            Subtype::VndGeogebraSlides => "vnd.geogebra.slides",
            Subtype::VndGeogebraTool => "vnd.geogebra.tool",
            Subtype::VndGeometryExplorer => "vnd.geometry-explorer",
            Subtype::VndGeonext => "vnd.geonext",
            Subtype::VndGeoplan => "vnd.geoplan",
            Subtype::VndGeospace => "vnd.geospace",
            Subtype::VndGerber => "vnd.gerber",
            Subtype::VndGlobalgraphicsPgb => "vnd.globalgraphics.pgb",
            Subtype::VndGlobalplatformCardContentMgt => "vnd.globalplatform.card-content-mgt",
            Subtype::VndGlobalplatformCardContentMgtResponse => "vnd.globalplatform.card-content-mgt-response",
            Subtype::VndGml => "vnd.gml",
            Subtype::VndGnuTalerExchange => "vnd.gnu.taler.exchange",
            Subtype::VndGnuTalerMerchant => "vnd.gnu.taler.merchant",
            Subtype::VndGoogleEarthKml => "vnd.google-earth.kml",
            Subtype::VndGoogleEarthKmz => "vnd.google-earth.kmz",
            Subtype::VndGovSkEForm => "vnd.gov.sk.e-form",
            Subtype::VndGovSkXmldatacontainer => "vnd.gov.sk.xmldatacontainer",
            Subtype::VndGrafeq => "vnd.grafeq",
            Subtype::VndGraphviz => "vnd.graphviz",
            Subtype::VndGridmp => "vnd.gridmp",
            Subtype::VndGrooveAccount => "vnd.groove-account",
            Subtype::VndGrooveHelp => "vnd.groove-help",
            Subtype::VndGrooveIdentityMessage => "vnd.groove-identity-message",
            Subtype::VndGrooveInjector => "vnd.groove-injector",
            Subtype::VndGrooveToolMessage => "vnd.groove-tool-message",
            Subtype::VndGrooveToolTemplate => "vnd.groove-tool-template",
            Subtype::VndGrooveVcard => "vnd.groove-vcard",
            Subtype::VndGsGdl => "vnd.gs-gdl",
            Subtype::VndGtw => "vnd.gtw",
            Subtype::VndHal => "vnd.hal",
            Subtype::VndHandHeldEntertainment => "vnd.HandHeld-Entertainment",
            Subtype::VndHans => "vnd.hans",
            Subtype::VndHbci => "vnd.hbci",
            Subtype::VndHc => "vnd.hc",
            Subtype::VndHclBireports => "vnd.hcl-bireports",
            Subtype::VndHdt => "vnd.hdt",
            Subtype::VndHeroku => "vnd.heroku",
            Subtype::VndHgl => "vnd.hgl",
            Subtype::VndHheLessonPlayer => "vnd.hhe.lesson-player",
            Subtype::VndHl7cda => "vnd.hl7cda",
            Subtype::VndHl7v2 => "vnd.hl7v2",
            Subtype::VndHnsAudio => "vnd.hns.audio",
            Subtype::VndHnsVideo => "vnd.hns.video",
            Subtype::VndHpHpgl => "vnd.hp-HPGL",
            Subtype::VndHpHpid => "vnd.hp-hpid",
            Subtype::VndHpHps => "vnd.hp-hps",
            Subtype::VndHpJlyt => "vnd.hp-jlyt",
            Subtype::VndHpPcl => "vnd.hp-PCL",
            Subtype::VndHpPclxl => "vnd.hp-PCLXL",
            Subtype::VndHttphone => "vnd.httphone",
            Subtype::VndHydrostatixSofData => "vnd.hydrostatix.sof-data",
            Subtype::VndHyper => "vnd.hyper",
            Subtype::VndHyperItem => "vnd.hyper-item",
            Subtype::VndHyperdrive => "vnd.hyperdrive",
            Subtype::VndHzn3dCrossword => "vnd.hzn-3d-crossword",
            Subtype::VndIbmElectronicMedia => "vnd.ibm.electronic-media",
            Subtype::VndIbmMiniPay => "vnd.ibm.MiniPay",
            Subtype::VndIbmRightsManagement => "vnd.ibm.rights-management",
            Subtype::VndIbmSecureContainer => "vnd.ibm.secure-container",
            Subtype::VndIccprofile => "vnd.iccprofile",
            Subtype::VndIeee1905 => "vnd.ieee.1905",
            Subtype::VndIgloader => "vnd.igloader",
            Subtype::VndImagemeterFolder => "vnd.imagemeter.folder",
            Subtype::VndImagemeterImage => "vnd.imagemeter.image",
            Subtype::VndImmervisionIvp => "vnd.immervision-ivp",
            Subtype::VndImmervisionIvu => "vnd.immervision-ivu",
            Subtype::VndImsImsccv1p1 => "vnd.ims.imsccv1p1",
            Subtype::VndImsImsccv1p2 => "vnd.ims.imsccv1p2",
            Subtype::VndImsImsccv1p3 => "vnd.ims.imsccv1p3",
            Subtype::VndImsLisV2Result => "vnd.ims.lis.v2.result",
            Subtype::VndImsLtiV2Toolconsumerprofile => "vnd.ims.lti.v2.toolconsumerprofile",
            Subtype::VndImsLtiV2Toolproxy => "vnd.ims.lti.v2.toolproxy",
            Subtype::VndImsLtiV2ToolproxyId => "vnd.ims.lti.v2.toolproxy.id",
            Subtype::VndImsLtiV2Toolsettings => "vnd.ims.lti.v2.toolsettings",
            Subtype::VndImsLtiV2ToolsettingsSimple => "vnd.ims.lti.v2.toolsettings.simple",
            Subtype::VndIn3d3dml => "vnd.in3d.3dml",
            Subtype::VndIn3dSpot => "vnd.in3d.spot",
            Subtype::VndInformedcontrolRms => "vnd.informedcontrol.rms",
            Subtype::VndInfotechProject => "vnd.infotech.project",
            Subtype::VndInnopathWampNotification => "vnd.innopath.wamp.notification",
            Subtype::VndInsorsIgm => "vnd.insors.igm",
            Subtype::VndInterconFormnet => "vnd.intercon.formnet",
            Subtype::VndIntergeo => "vnd.intergeo",
            Subtype::VndIntertrustDigibox => "vnd.intertrust.digibox",
            Subtype::VndIntertrustNncp => "vnd.intertrust.nncp",
            Subtype::VndIntuQbo => "vnd.intu.qbo",
            Subtype::VndIntuQfx => "vnd.intu.qfx",
            Subtype::VndIptcG2Catalogitem => "vnd.iptc.g2.catalogitem",
            Subtype::VndIptcG2Conceptitem => "vnd.iptc.g2.conceptitem",
            Subtype::VndIptcG2Knowledgeitem => "vnd.iptc.g2.knowledgeitem",
            Subtype::VndIptcG2Newsitem => "vnd.iptc.g2.newsitem",
            Subtype::VndIptcG2Newsmessage => "vnd.iptc.g2.newsmessage",
            Subtype::VndIptcG2Packageitem => "vnd.iptc.g2.packageitem",
            Subtype::VndIptcG2Planningitem => "vnd.iptc.g2.planningitem",
            Subtype::VndIptcNewsMl => "vnd.IPTC.NewsML",
            Subtype::VndIptcNitf => "vnd.IPTC.NITF",
            Subtype::VndIptvforum1dparityfec1010 => "vnd.iptvforum.1dparityfec-1010",
            Subtype::VndIptvforum1dparityfec2005 => "vnd.iptvforum.1dparityfec-2005",
            Subtype::VndIptvforum2dparityfec1010 => "vnd.iptvforum.2dparityfec-1010",
            Subtype::VndIptvforum2dparityfec2005 => "vnd.iptvforum.2dparityfec-2005",
            Subtype::VndIptvforumTtsavc => "vnd.iptvforum.ttsavc",
            Subtype::VndIptvforumTtsmpeg2 => "vnd.iptvforum.ttsmpeg2",
            Subtype::VndIpunpluggedRcprofile => "vnd.ipunplugged.rcprofile",
            Subtype::VndIrepositoryPackage => "vnd.irepository.package",
            Subtype::VndIsXpr => "vnd.is-xpr",
            Subtype::VndIsacFcs => "vnd.isac.fcs",
            Subtype::VndIso1178310 => "vnd.iso11783-10",
            Subtype::VndJam => "vnd.jam",
            Subtype::VndJapannetDirectoryService => "vnd.japannet-directory-service",
            Subtype::VndJapannetJpnstoreWakeup => "vnd.japannet-jpnstore-wakeup",
            Subtype::VndJapannetPaymentWakeup => "vnd.japannet-payment-wakeup",
            Subtype::VndJapannetRegistration => "vnd.japannet-registration",
            Subtype::VndJapannetRegistrationWakeup => "vnd.japannet-registration-wakeup",
            Subtype::VndJapannetSetstoreWakeup => "vnd.japannet-setstore-wakeup",
            Subtype::VndJapannetVerification => "vnd.japannet-verification",
            Subtype::VndJapannetVerificationWakeup => "vnd.japannet-verification-wakeup",
            Subtype::VndJcpJavameMidletRms => "vnd.jcp.javame.midlet-rms",
            Subtype::VndJisp => "vnd.jisp",
            Subtype::VndJoostJodaArchive => "vnd.joost.joda-archive",
            Subtype::VndJskIsdnNgn => "vnd.jsk.isdn-ngn",
            Subtype::VndKahootz => "vnd.kahootz",
            Subtype::VndKdeKarbon => "vnd.kde.karbon",
            Subtype::VndKdeKchart => "vnd.kde.kchart",
            Subtype::VndKdeKformula => "vnd.kde.kformula",
            Subtype::VndKdeKivio => "vnd.kde.kivio",
            Subtype::VndKdeKontour => "vnd.kde.kontour",
            Subtype::VndKdeKpresenter => "vnd.kde.kpresenter",
            Subtype::VndKdeKspread => "vnd.kde.kspread",
            Subtype::VndKdeKword => "vnd.kde.kword",
            Subtype::VndKenameaapp => "vnd.kenameaapp",
            Subtype::VndKidspiration => "vnd.kidspiration",
            Subtype::VndKinar => "vnd.Kinar",
            Subtype::VndKoan => "vnd.koan",
            Subtype::VndKodakDescriptor => "vnd.kodak-descriptor",
            Subtype::VndLas => "vnd.las",
            Subtype::VndLasLas => "vnd.las.las",
            Subtype::VndLaszip => "vnd.laszip",
            Subtype::VndLatexZ => "vnd.latex-z",
            Subtype::VndLeap => "vnd.leap",
            Subtype::VndLibertyRequest => "vnd.liberty-request",
            Subtype::VndLlamagraphicsLifeBalanceDesktop => "vnd.llamagraphics.life-balance.desktop",
            Subtype::VndLlamagraphicsLifeBalanceExchange => "vnd.llamagraphics.life-balance.exchange",
            Subtype::VndLogipipeCircuit => "vnd.logipipe.circuit",
            Subtype::VndLoom => "vnd.loom",
            Subtype::VndLotus123 => "vnd.lotus-1-2-3",
            Subtype::VndLotusApproach => "vnd.lotus-approach",
            Subtype::VndLotusFreelance => "vnd.lotus-freelance",
            Subtype::VndLotusNotes => "vnd.lotus-notes",
            Subtype::VndLotusOrganizer => "vnd.lotus-organizer",
            Subtype::VndLotusScreencam => "vnd.lotus-screencam",
            Subtype::VndLotusWordpro => "vnd.lotus-wordpro",
            Subtype::VndLucentVoice => "vnd.lucent.voice",
            Subtype::VndMacportsPortpkg => "vnd.macports.portpkg",
            Subtype::VndMapboxVectorTile => "vnd.mapbox-vector-tile",
            Subtype::VndMarlinDrmActiontoken => "vnd.marlin.drm.actiontoken",
            Subtype::VndMarlinDrmConftoken => "vnd.marlin.drm.conftoken",
            Subtype::VndMarlinDrmLicense => "vnd.marlin.drm.license",
            Subtype::VndMarlinDrmMdcf => "vnd.marlin.drm.mdcf",
            Subtype::VndMason => "vnd.mason",
            Subtype::VndMaxarArchive3tz => "vnd.maxar.archive.3tz",
            Subtype::VndMaxmindMaxmindDb => "vnd.maxmind.maxmind-db",
            Subtype::VndMcd => "vnd.mcd",
            Subtype::VndMedcalcdata => "vnd.medcalcdata",
            Subtype::VndMediastationCdkey => "vnd.mediastation.cdkey",
            Subtype::VndMeridianSlingshot => "vnd.meridian-slingshot",
            Subtype::VndMfer => "vnd.MFER",
            Subtype::VndMfmp => "vnd.mfmp",
            Subtype::VndMicro => "vnd.micro",
            Subtype::VndMicrografxFlo => "vnd.micrografx.flo",
            Subtype::VndMicrografxIgx => "vnd.micrografx.igx",
            Subtype::VndMicrosoftIcon => "vnd.microsoft.icon",
            Subtype::VndMicrosoftPortableExecutable => "vnd.microsoft.portable-executable",
            Subtype::VndMicrosoftWindowsThumbnailCache => "vnd.microsoft.windows.thumbnail-cache",
            Subtype::VndMiele => "vnd.miele",
            Subtype::VndMif => "vnd.mif",
            Subtype::VndMinisoftHp3000Save => "vnd.minisoft-hp3000-save",
            Subtype::VndMitsubishiMistyGuardTrustweb => "vnd.mitsubishi.misty-guard.trustweb",
            Subtype::VndMix => "vnd.mix",
            Subtype::VndMobiusDaf => "vnd.Mobius.DAF",
            Subtype::VndMobiusDis => "vnd.Mobius.DIS",
            Subtype::VndMobiusMbk => "vnd.Mobius.MBK",
            Subtype::VndMobiusMqy => "vnd.Mobius.MQY",
            Subtype::VndMobiusMsl => "vnd.Mobius.MSL",
            Subtype::VndMobiusPlc => "vnd.Mobius.PLC",
            Subtype::VndMobiusTxf => "vnd.Mobius.TXF",
            Subtype::VndMoml => "vnd.moml",
            Subtype::VndMophunApplication => "vnd.mophun.application",
            Subtype::VndMophunCertificate => "vnd.mophun.certificate",
            Subtype::VndMotorolaFlexsuite => "vnd.motorola.flexsuite",
            Subtype::VndMotorolaFlexsuiteAdsi => "vnd.motorola.flexsuite.adsi",
            Subtype::VndMotorolaFlexsuiteFis => "vnd.motorola.flexsuite.fis",
            Subtype::VndMotorolaFlexsuiteGotap => "vnd.motorola.flexsuite.gotap",
            Subtype::VndMotorolaFlexsuiteKmr => "vnd.motorola.flexsuite.kmr",
            Subtype::VndMotorolaFlexsuiteTtc => "vnd.motorola.flexsuite.ttc",
            Subtype::VndMotorolaFlexsuiteWem => "vnd.motorola.flexsuite.wem",
            Subtype::VndMotorolaIprm => "vnd.motorola.iprm",
            Subtype::VndMotorolaReflex => "vnd.motorola.reflex",
            Subtype::VndMotorolaVideo => "vnd.motorola.video",
            Subtype::VndMotorolaVideop => "vnd.motorola.videop",
            Subtype::VndMozillaApng => "vnd.mozilla.apng",
            Subtype::VndMozillaXul => "vnd.mozilla.xul",
            Subtype::VndMpegurl => "vnd.mpegurl",
            Subtype::VndMs3mfdocument => "vnd.ms-3mfdocument",
            Subtype::VndMsArtgalry => "vnd.ms-artgalry",
            Subtype::VndMsAsf => "vnd.ms-asf",
            Subtype::VndMsCabCompressed => "vnd.ms-cab-compressed",
            Subtype::VndMsExcel => "vnd.ms-excel",
            Subtype::VndMsExcelAddinMacroEnabled12 => "vnd.ms-excel.addin.macroEnabled.12",
            Subtype::VndMsExcelSheetBinaryMacroEnabled12 => "vnd.ms-excel.sheet.binary.macroEnabled.12",
            Subtype::VndMsExcelSheetMacroEnabled12 => "vnd.ms-excel.sheet.macroEnabled.12",
            Subtype::VndMsExcelTemplateMacroEnabled12 => "vnd.ms-excel.template.macroEnabled.12",
            Subtype::VndMsFontobject => "vnd.ms-fontobject",
            Subtype::VndMsHtmlhelp => "vnd.ms-htmlhelp",
            Subtype::VndMsIms => "vnd.ms-ims",
            Subtype::VndMsLrm => "vnd.ms-lrm",
            Subtype::VndMsMediapackage => "vnd.ms-mediapackage",
            Subtype::VndMsModi => "vnd.ms-modi",
            Subtype::VndMsOfficeActiveX => "vnd.ms-office.activeX",
            Subtype::VndMsOfficetheme => "vnd.ms-officetheme",
            Subtype::VndMsPkiSeccat => "vnd.ms-pki.seccat",
            Subtype::VndMsPlayreadyInitiator => "vnd.ms-playready.initiator",
            Subtype::VndMsPlayreadyMediaPya => "vnd.ms-playready.media.pya",
            Subtype::VndMsPlayreadyMediaPyv => "vnd.ms-playready.media.pyv",
            Subtype::VndMsPowerpoint => "vnd.ms-powerpoint",
            Subtype::VndMsPowerpointAddinMacroEnabled12 => "vnd.ms-powerpoint.addin.macroEnabled.12",
            Subtype::VndMsPowerpointPresentationMacroEnabled12 => "vnd.ms-powerpoint.presentation.macroEnabled.12",
            Subtype::VndMsPowerpointSlideMacroEnabled12 => "vnd.ms-powerpoint.slide.macroEnabled.12",
            Subtype::VndMsPowerpointSlideshowMacroEnabled12 => "vnd.ms-powerpoint.slideshow.macroEnabled.12",
            Subtype::VndMsPowerpointTemplateMacroEnabled12 => "vnd.ms-powerpoint.template.macroEnabled.12",
            Subtype::VndMsPrintDeviceCapabilities => "vnd.ms-PrintDeviceCapabilities",
            Subtype::VndMsPrintSchemaTicket => "vnd.ms-PrintSchemaTicket",
            Subtype::VndMsProject => "vnd.ms-project",
            Subtype::VndMsTnef => "vnd.ms-tnef",
            Subtype::VndMsWindowsDevicepairing => "vnd.ms-windows.devicepairing",
            Subtype::VndMsWindowsNwprintingOob => "vnd.ms-windows.nwprinting.oob",
            Subtype::VndMsWindowsPrinterpairing => "vnd.ms-windows.printerpairing",
            Subtype::VndMsWindowsWsdOob => "vnd.ms-windows.wsd.oob",
            Subtype::VndMsWmdrmLicChlgReq => "vnd.ms-wmdrm.lic-chlg-req",
            Subtype::VndMsWmdrmLicResp => "vnd.ms-wmdrm.lic-resp",
            Subtype::VndMsWmdrmMeterChlgReq => "vnd.ms-wmdrm.meter-chlg-req",
            Subtype::VndMsWmdrmMeterResp => "vnd.ms-wmdrm.meter-resp",
            Subtype::VndMsWordDocumentMacroEnabled12 => "vnd.ms-word.document.macroEnabled.12",
            Subtype::VndMsWordTemplateMacroEnabled12 => "vnd.ms-word.template.macroEnabled.12",
            Subtype::VndMsWorks => "vnd.ms-works",
            Subtype::VndMsWpl => "vnd.ms-wpl",
            Subtype::VndMsXpsdocument => "vnd.ms-xpsdocument",
            Subtype::VndMsaDiskImage => "vnd.msa-disk-image",
            Subtype::VndMseq => "vnd.mseq",
            Subtype::VndMsign => "vnd.msign",
            Subtype::VndMts => "vnd.mts",
            Subtype::VndMultiadCreator => "vnd.multiad.creator",
            Subtype::VndMultiadCreatorCif => "vnd.multiad.creator.cif",
            Subtype::VndMusicNiff => "vnd.music-niff",
            Subtype::VndMusician => "vnd.musician",
            Subtype::VndMuveeStyle => "vnd.muvee.style",
            Subtype::VndMynfc => "vnd.mynfc",
            Subtype::VndNacamarYbrid => "vnd.nacamar.ybrid",
            Subtype::VndNcdControl => "vnd.ncd.control",
            Subtype::VndNcdReference => "vnd.ncd.reference",
            Subtype::VndNearstInv => "vnd.nearst.inv",
            Subtype::VndNebumindLine => "vnd.nebumind.line",
            Subtype::VndNervana => "vnd.nervana",
            Subtype::VndNet2phoneCommcenterCommand => "vnd.net2phone.commcenter.command",
            Subtype::VndNetFpx => "vnd.net-fpx",
            Subtype::VndNetfpx => "vnd.netfpx",
            Subtype::VndNeurolanguageNlu => "vnd.neurolanguage.nlu",
            Subtype::VndNimn => "vnd.nimn",
            Subtype::VndNintendoNitroRom => "vnd.nintendo.nitro.rom",
            Subtype::VndNintendoSnesRom => "vnd.nintendo.snes.rom",
            Subtype::VndNitf => "vnd.nitf",
            Subtype::VndNoblenetDirectory => "vnd.noblenet-directory",
            Subtype::VndNoblenetSealer => "vnd.noblenet-sealer",
            Subtype::VndNoblenetWeb => "vnd.noblenet-web",
            Subtype::VndNokiaCatalogs => "vnd.nokia.catalogs",
            Subtype::VndNokiaConml => "vnd.nokia.conml",
            Subtype::VndNokiaISdsRadioPresets => "vnd.nokia.iSDS-radio-presets",
            Subtype::VndNokiaInterleavedMultimedia => "vnd.nokia.interleaved-multimedia",
            Subtype::VndNokiaIptvConfig => "vnd.nokia.iptv.config",
            Subtype::VndNokiaLandmark => "vnd.nokia.landmark",
            Subtype::VndNokiaLandmarkcollection => "vnd.nokia.landmarkcollection",
            Subtype::VndNokiaMobileXmf => "vnd.nokia.mobile-xmf",
            Subtype::VndNokiaMp4vr => "vnd.nokia.mp4vr",
            Subtype::VndNokiaNGageAc => "vnd.nokia.n-gage.ac",
            Subtype::VndNokiaNGageData => "vnd.nokia.n-gage.data",
            Subtype::VndNokiaNcd => "vnd.nokia.ncd",
            Subtype::VndNokiaPcd => "vnd.nokia.pcd",
            Subtype::VndNokiaRadioPreset => "vnd.nokia.radio-preset",
            Subtype::VndNokiaRadioPresets => "vnd.nokia.radio-presets",
            Subtype::VndNokiaVideovoip => "vnd.nokia.videovoip",
            Subtype::VndNortelVbk => "vnd.nortel.vbk",
            Subtype::VndNovadigmEdm => "vnd.novadigm.EDM",
            Subtype::VndNovadigmEdx => "vnd.novadigm.EDX",
            Subtype::VndNovadigmExt => "vnd.novadigm.EXT",
            Subtype::VndNttLocalContentShare => "vnd.ntt-local.content-share",
            Subtype::VndNttLocalFileTransfer => "vnd.ntt-local.file-transfer",
            Subtype::VndNttLocalOgwRemoteAccess => "vnd.ntt-local.ogw_remote-access",
            Subtype::VndNttLocalSipTaRemote => "vnd.ntt-local.sip-ta_remote",
            Subtype::VndNttLocalSipTaTcpStream => "vnd.ntt-local.sip-ta_tcp_stream",
            Subtype::VndNueraEcelp4800 => "vnd.nuera.ecelp4800",
            Subtype::VndNueraEcelp7470 => "vnd.nuera.ecelp7470",
            Subtype::VndNueraEcelp9600 => "vnd.nuera.ecelp9600",
            Subtype::VndOasisOpendocumentChart => "vnd.oasis.opendocument.chart",
            Subtype::VndOasisOpendocumentChartTemplate => "vnd.oasis.opendocument.chart-template",
            Subtype::VndOasisOpendocumentDatabase => "vnd.oasis.opendocument.database",
            Subtype::VndOasisOpendocumentFormula => "vnd.oasis.opendocument.formula",
            Subtype::VndOasisOpendocumentFormulaTemplate => "vnd.oasis.opendocument.formula-template",
            Subtype::VndOasisOpendocumentGraphics => "vnd.oasis.opendocument.graphics",
            Subtype::VndOasisOpendocumentGraphicsTemplate => "vnd.oasis.opendocument.graphics-template",
            Subtype::VndOasisOpendocumentImage => "vnd.oasis.opendocument.image",
            Subtype::VndOasisOpendocumentImageTemplate => "vnd.oasis.opendocument.image-template",
            Subtype::VndOasisOpendocumentPresentation => "vnd.oasis.opendocument.presentation",
            Subtype::VndOasisOpendocumentPresentationTemplate => "vnd.oasis.opendocument.presentation-template",
            Subtype::VndOasisOpendocumentSpreadsheet => "vnd.oasis.opendocument.spreadsheet",
            Subtype::VndOasisOpendocumentSpreadsheetTemplate => "vnd.oasis.opendocument.spreadsheet-template",
            Subtype::VndOasisOpendocumentText => "vnd.oasis.opendocument.text",
            Subtype::VndOasisOpendocumentTextMaster => "vnd.oasis.opendocument.text-master",
            Subtype::VndOasisOpendocumentTextTemplate => "vnd.oasis.opendocument.text-template",
            Subtype::VndOasisOpendocumentTextWeb => "vnd.oasis.opendocument.text-web",
            Subtype::VndObjectvideo => "vnd.objectvideo",
            Subtype::VndObn => "vnd.obn",
            Subtype::VndOcf => "vnd.ocf",
            Subtype::VndOciImageManifestV1 => "vnd.oci.image.manifest.v1",
            Subtype::VndOctelSbc => "vnd.octel.sbc",
            Subtype::VndOftnL10n => "vnd.oftn.l10n",
            Subtype::VndOipfContentaccessdownload => "vnd.oipf.contentaccessdownload",
            Subtype::VndOipfContentaccessstreaming => "vnd.oipf.contentaccessstreaming",
            Subtype::VndOipfCspgHexbinary => "vnd.oipf.cspg-hexbinary",
            Subtype::VndOipfDaeSvg => "vnd.oipf.dae.svg",
            Subtype::VndOipfDaeXhtml => "vnd.oipf.dae.xhtml",
            Subtype::VndOipfMippvcontrolmessage => "vnd.oipf.mippvcontrolmessage",
            Subtype::VndOipfPaeGem => "vnd.oipf.pae.gem",
            Subtype::VndOipfSpdiscovery => "vnd.oipf.spdiscovery",
            Subtype::VndOipfSpdlist => "vnd.oipf.spdlist",
            Subtype::VndOipfUeprofile => "vnd.oipf.ueprofile",
            Subtype::VndOipfUserprofile => "vnd.oipf.userprofile",
            Subtype::VndOlpcSugar => "vnd.olpc-sugar",
            Subtype::VndOmaBcastAssociatedProcedureParameter => "vnd.oma.bcast.associated-procedure-parameter",
            Subtype::VndOmaBcastDrmTrigger => "vnd.oma.bcast.drm-trigger",
            Subtype::VndOmaBcastImd => "vnd.oma.bcast.imd",
            Subtype::VndOmaBcastLtkm => "vnd.oma.bcast.ltkm",
            Subtype::VndOmaBcastNotification => "vnd.oma.bcast.notification",
            Subtype::VndOmaBcastProvisioningtrigger => "vnd.oma.bcast.provisioningtrigger",
            Subtype::VndOmaBcastSgboot => "vnd.oma.bcast.sgboot",
            Subtype::VndOmaBcastSgdd => "vnd.oma.bcast.sgdd",
            Subtype::VndOmaBcastSgdu => "vnd.oma.bcast.sgdu",
            Subtype::VndOmaBcastSimpleSymbolContainer => "vnd.oma.bcast.simple-symbol-container",
            Subtype::VndOmaBcastSmartcardTrigger => "vnd.oma.bcast.smartcard-trigger",
            Subtype::VndOmaBcastSprov => "vnd.oma.bcast.sprov",
            Subtype::VndOmaBcastStkm => "vnd.oma.bcast.stkm",
            Subtype::VndOmaCabAddressBook => "vnd.oma.cab-address-book",
            Subtype::VndOmaCabFeatureHandler => "vnd.oma.cab-feature-handler",
            Subtype::VndOmaCabPcc => "vnd.oma.cab-pcc",
            Subtype::VndOmaCabSubsInvite => "vnd.oma.cab-subs-invite",
            Subtype::VndOmaCabUserPrefs => "vnd.oma.cab-user-prefs",
            Subtype::VndOmaDcd => "vnd.oma.dcd",
            Subtype::VndOmaDcdc => "vnd.oma.dcdc",
            Subtype::VndOmaDd2 => "vnd.oma.dd2",
            Subtype::VndOmaDrmRisd => "vnd.oma.drm.risd",
            Subtype::VndOmaGroupUsageList => "vnd.oma.group-usage-list",
            Subtype::VndOmaLwm2m => "vnd.oma.lwm2m",
            Subtype::VndOmaPal => "vnd.oma.pal",
            Subtype::VndOmaPocDetailedProgressReport => "vnd.oma.poc.detailed-progress-report",
            Subtype::VndOmaPocFinalReport => "vnd.oma.poc.final-report",
            Subtype::VndOmaPocGroups => "vnd.oma.poc.groups",
            Subtype::VndOmaPocInvocationDescriptor => "vnd.oma.poc.invocation-descriptor",
            Subtype::VndOmaPocOptimizedProgressReport => "vnd.oma.poc.optimized-progress-report",
            Subtype::VndOmaPush => "vnd.oma.push",
            Subtype::VndOmaScidmMessages => "vnd.oma.scidm.messages",
            Subtype::VndOmaScwsConfig => "vnd.oma-scws-config",
            Subtype::VndOmaScwsHttpRequest => "vnd.oma-scws-http-request",
            Subtype::VndOmaScwsHttpResponse => "vnd.oma-scws-http-response",
            Subtype::VndOmaXcapDirectory => "vnd.oma.xcap-directory",
            Subtype::VndOmadsEmail => "vnd.omads-email",
            Subtype::VndOmadsFile => "vnd.omads-file",
            Subtype::VndOmadsFolder => "vnd.omads-folder",
            Subtype::VndOmalocSuplInit => "vnd.omaloc-supl-init",
            Subtype::VndOnepager => "vnd.onepager",
            Subtype::VndOnepagertamp => "vnd.onepagertamp",
            Subtype::VndOnepagertamx => "vnd.onepagertamx",
            Subtype::VndOnepagertat => "vnd.onepagertat",
            Subtype::VndOnepagertatp => "vnd.onepagertatp",
            Subtype::VndOnepagertatx => "vnd.onepagertatx",
            Subtype::VndOpenbloxGame => "vnd.openblox.game",
            Subtype::VndOpenbloxGameBinary => "vnd.openblox.game-binary",
            Subtype::VndOpeneyeOeb => "vnd.openeye.oeb",
            Subtype::VndOpengex => "vnd.opengex",
            Subtype::VndOpenofficeorgExtension => "vnd.openofficeorg.extension",
            Subtype::VndOpenstreetmapData => "vnd.openstreetmap.data",
            Subtype::VndOpentimestampsOts => "vnd.opentimestamps.ots",
            Subtype::VndOpenxmlformatsOfficedocumentCustomProperties => "vnd.openxmlformats-officedocument.custom-properties",
            Subtype::VndOpenxmlformatsOfficedocumentCustomXmlProperties => "vnd.openxmlformats-officedocument.customXmlProperties",
            Subtype::VndOpenxmlformatsOfficedocumentDrawing => "vnd.openxmlformats-officedocument.drawing",
            Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChart => "vnd.openxmlformats-officedocument.drawingml.chart",
            Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChartshapes => "vnd.openxmlformats-officedocument.drawingml.chartshapes",
            Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramColors => "vnd.openxmlformats-officedocument.drawingml.diagramColors",
            Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramData => "vnd.openxmlformats-officedocument.drawingml.diagramData",
            Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramLayout => "vnd.openxmlformats-officedocument.drawingml.diagramLayout",
            Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramStyle => "vnd.openxmlformats-officedocument.drawingml.diagramStyle",
            Subtype::VndOpenxmlformatsOfficedocumentExtendedProperties => "vnd.openxmlformats-officedocument.extended-properties",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlCommentAuthors => "vnd.openxmlformats-officedocument.presentationml.commentAuthors",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlComments => "vnd.openxmlformats-officedocument.presentationml.comments",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlHandoutMaster => "vnd.openxmlformats-officedocument.presentationml.handoutMaster",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesMaster => "vnd.openxmlformats-officedocument.presentationml.notesMaster",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesSlide => "vnd.openxmlformats-officedocument.presentationml.notesSlide",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresProps => "vnd.openxmlformats-officedocument.presentationml.presProps",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentation => "vnd.openxmlformats-officedocument.presentationml.presentation",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentationMain => "vnd.openxmlformats-officedocument.presentationml.presentation.main",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlide => "vnd.openxmlformats-officedocument.presentationml.slide",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideLayout => "vnd.openxmlformats-officedocument.presentationml.slideLayout",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideMaster => "vnd.openxmlformats-officedocument.presentationml.slideMaster",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideUpdateInfo => "vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshow => "vnd.openxmlformats-officedocument.presentationml.slideshow",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshowMain => "vnd.openxmlformats-officedocument.presentationml.slideshow.main",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTableStyles => "vnd.openxmlformats-officedocument.presentationml.tableStyles",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTags => "vnd.openxmlformats-officedocument.presentationml.tags",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplate => "vnd.openxmlformats-officedocument.presentationml.template",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplateMain => "vnd.openxmlformats-officedocument.presentationml.template.main",
            Subtype::VndOpenxmlformatsOfficedocumentPresentationmlViewProps => "vnd.openxmlformats-officedocument.presentationml.viewProps",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlCalcChain => "vnd.openxmlformats-officedocument.spreadsheetml.calcChain",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlChartsheet => "vnd.openxmlformats-officedocument.spreadsheetml.chartsheet",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlComments => "vnd.openxmlformats-officedocument.spreadsheetml.comments",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlConnections => "vnd.openxmlformats-officedocument.spreadsheetml.connections",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlDialogsheet => "vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlExternalLink => "vnd.openxmlformats-officedocument.spreadsheetml.externalLink",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheDefinition => "vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheRecords => "vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotTable => "vnd.openxmlformats-officedocument.spreadsheetml.pivotTable",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlQueryTable => "vnd.openxmlformats-officedocument.spreadsheetml.queryTable",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionHeaders => "vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionLog => "vnd.openxmlformats-officedocument.spreadsheetml.revisionLog",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSharedStrings => "vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheet => "vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMain => "vnd.openxmlformats-officedocument.spreadsheetml.sheet.main",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMetadata => "vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlStyles => "vnd.openxmlformats-officedocument.spreadsheetml.styles",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTable => "vnd.openxmlformats-officedocument.spreadsheetml.table",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTableSingleCells => "vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate => "vnd.openxmlformats-officedocument.spreadsheetml.template",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplateMain => "vnd.openxmlformats-officedocument.spreadsheetml.template.main",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlUserNames => "vnd.openxmlformats-officedocument.spreadsheetml.userNames",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlVolatileDependencies => "vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies",
            Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlWorksheet => "vnd.openxmlformats-officedocument.spreadsheetml.worksheet",
            Subtype::VndOpenxmlformatsOfficedocumentTheme => "vnd.openxmlformats-officedocument.theme",
            Subtype::VndOpenxmlformatsOfficedocumentThemeOverride => "vnd.openxmlformats-officedocument.themeOverride",
            Subtype::VndOpenxmlformatsOfficedocumentVmlDrawing => "vnd.openxmlformats-officedocument.vmlDrawing",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlComments => "vnd.openxmlformats-officedocument.wordprocessingml.comments",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocument => "vnd.openxmlformats-officedocument.wordprocessingml.document",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentGlossary => "vnd.openxmlformats-officedocument.wordprocessingml.document.glossary",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentMain => "vnd.openxmlformats-officedocument.wordprocessingml.document.main",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlEndnotes => "vnd.openxmlformats-officedocument.wordprocessingml.endnotes",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFontTable => "vnd.openxmlformats-officedocument.wordprocessingml.fontTable",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFooter => "vnd.openxmlformats-officedocument.wordprocessingml.footer",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFootnotes => "vnd.openxmlformats-officedocument.wordprocessingml.footnotes",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlNumbering => "vnd.openxmlformats-officedocument.wordprocessingml.numbering",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlSettings => "vnd.openxmlformats-officedocument.wordprocessingml.settings",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlStyles => "vnd.openxmlformats-officedocument.wordprocessingml.styles",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplate => "vnd.openxmlformats-officedocument.wordprocessingml.template",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplateMain => "vnd.openxmlformats-officedocument.wordprocessingml.template.main",
            Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlWebSettings => "vnd.openxmlformats-officedocument.wordprocessingml.webSettings",
            Subtype::VndOpenxmlformatsPackageCoreProperties => "vnd.openxmlformats-package.core-properties",
            Subtype::VndOpenxmlformatsPackageDigitalSignatureXmlsignature => "vnd.openxmlformats-package.digital-signature-xmlsignature",
            Subtype::VndOpenxmlformatsPackageRelationships => "vnd.openxmlformats-package.relationships",
            Subtype::VndOracleResource => "vnd.oracle.resource",
            Subtype::VndOrangeIndata => "vnd.orange.indata",
            Subtype::VndOsaNetdeploy => "vnd.osa.netdeploy",
            Subtype::VndOsgeoMapguidePackage => "vnd.osgeo.mapguide.package",
            Subtype::VndOsgiBundle => "vnd.osgi.bundle",
            Subtype::VndOsgiDp => "vnd.osgi.dp",
            Subtype::VndOsgiSubsystem => "vnd.osgi.subsystem",
            Subtype::VndOtpsCtKip => "vnd.otps.ct-kip",
            Subtype::VndOxliCountgraph => "vnd.oxli.countgraph",
            Subtype::VndPagerduty => "vnd.pagerduty",
            Subtype::VndPalm => "vnd.palm",
            Subtype::VndPanoply => "vnd.panoply",
            Subtype::VndPaosXml => "vnd.paos.xml",
            Subtype::VndParasolidTransmitBinary => "vnd.parasolid.transmit.binary",
            Subtype::VndParasolidTransmitText => "vnd.parasolid.transmit.text",
            Subtype::VndPatentdive => "vnd.patentdive",
            Subtype::VndPatientecommsdoc => "vnd.patientecommsdoc",
            Subtype::VndPawaafile => "vnd.pawaafile",
            Subtype::VndPcoB16 => "vnd.pco.b16",
            Subtype::VndPcos => "vnd.pcos",
            Subtype::VndPgFormat => "vnd.pg.format",
            Subtype::VndPgOsasli => "vnd.pg.osasli",
            Subtype::VndPiaccessApplicationLicence => "vnd.piaccess.application-licence",
            Subtype::VndPicsel => "vnd.picsel",
            Subtype::VndPmiWidget => "vnd.pmi.widget",
            Subtype::VndPocGroupAdvertisement => "vnd.poc.group-advertisement",
            Subtype::VndPocketlearn => "vnd.pocketlearn",
            Subtype::VndPowerbuilder6 => "vnd.powerbuilder6",
            Subtype::VndPowerbuilder6S => "vnd.powerbuilder6-s",
            Subtype::VndPowerbuilder7 => "vnd.powerbuilder7",
            Subtype::VndPowerbuilder75 => "vnd.powerbuilder75",
            Subtype::VndPowerbuilder75S => "vnd.powerbuilder75-s",
            Subtype::VndPowerbuilder7S => "vnd.powerbuilder7-s",
            Subtype::VndPreminet => "vnd.preminet",
            Subtype::VndPresonusMultitrack => "vnd.presonus.multitrack",
            Subtype::VndPreviewsystemsBox => "vnd.previewsystems.box",
            Subtype::VndProteusMagazine => "vnd.proteus.magazine",
            Subtype::VndPsfs => "vnd.psfs",
            Subtype::VndPublishareDeltaTree => "vnd.publishare-delta-tree",
            Subtype::VndPviPtid1 => "vnd.pvi.ptid1",
            Subtype::VndPwgMultiplexed => "vnd.pwg-multiplexed",
            Subtype::VndPwgXhtmlPrint => "vnd.pwg-xhtml-print",
            Subtype::VndPythaPyox => "vnd.pytha.pyox",
            Subtype::VndQualcommBrewAppRes => "vnd.qualcomm.brew-app-res",
            Subtype::VndQuarantainenet => "vnd.quarantainenet",
            Subtype::VndQuarkQuarkXPress => "vnd.Quark.QuarkXPress",
            Subtype::VndQuobjectQuoxdocument => "vnd.quobject-quoxdocument",
            Subtype::VndRadgamettoolsBink => "vnd.radgamettools.bink",
            Subtype::VndRadgamettoolsSmacker => "vnd.radgamettools.smacker",
            Subtype::VndRadiance => "vnd.radiance",
            Subtype::VndRadisysMoml => "vnd.radisys.moml",
            Subtype::VndRadisysMsml => "vnd.radisys.msml",
            Subtype::VndRadisysMsmlAudit => "vnd.radisys.msml-audit",
            Subtype::VndRadisysMsmlAuditConf => "vnd.radisys.msml-audit-conf",
            Subtype::VndRadisysMsmlAuditConn => "vnd.radisys.msml-audit-conn",
            Subtype::VndRadisysMsmlAuditDialog => "vnd.radisys.msml-audit-dialog",
            Subtype::VndRadisysMsmlAuditStream => "vnd.radisys.msml-audit-stream",
            Subtype::VndRadisysMsmlBasicLayout => "vnd.radisys.msml-basic-layout",
            Subtype::VndRadisysMsmlConf => "vnd.radisys.msml-conf",
            Subtype::VndRadisysMsmlDialog => "vnd.radisys.msml-dialog",
            Subtype::VndRadisysMsmlDialogBase => "vnd.radisys.msml-dialog-base",
            Subtype::VndRadisysMsmlDialogFaxDetect => "vnd.radisys.msml-dialog-fax-detect",
            Subtype::VndRadisysMsmlDialogFaxSendrecv => "vnd.radisys.msml-dialog-fax-sendrecv",
            Subtype::VndRadisysMsmlDialogGroup => "vnd.radisys.msml-dialog-group",
            Subtype::VndRadisysMsmlDialogSpeech => "vnd.radisys.msml-dialog-speech",
            Subtype::VndRadisysMsmlDialogTransform => "vnd.radisys.msml-dialog-transform",
            Subtype::VndRainstorData => "vnd.rainstor.data",
            Subtype::VndRapid => "vnd.rapid",
            Subtype::VndRar => "vnd.rar",
            Subtype::VndRealvncBed => "vnd.realvnc.bed",
            Subtype::VndRecordareMusicxml => "vnd.recordare.musicxml",
            Subtype::VndRenLearnRlprint => "vnd.RenLearn.rlprint",
            Subtype::VndResilientLogic => "vnd.resilient.logic",
            Subtype::VndRestful => "vnd.restful",
            Subtype::VndRhetorex32kadpcm => "vnd.rhetorex.32kadpcm",
            Subtype::VndRigCryptonote => "vnd.rig.cryptonote",
            Subtype::VndRimCod => "vnd.rim.cod",
            Subtype::VndRip => "vnd.rip",
            Subtype::VndRosetteAnnotatedDataModel => "vnd.rosette.annotated-data-model",
            Subtype::VndRoute66Link66 => "vnd.route66.link66",
            Subtype::VndRs274x => "vnd.rs-274x",
            Subtype::VndRuckusDownload => "vnd.ruckus.download",
            Subtype::VndS3sms => "vnd.s3sms",
            Subtype::VndSailingtrackerTrack => "vnd.sailingtracker.track",
            Subtype::VndSapVds => "vnd.sap.vds",
            Subtype::VndSar => "vnd.sar",
            Subtype::VndSbmCid => "vnd.sbm.cid",
            Subtype::VndSbmMid2 => "vnd.sbm.mid2",
            Subtype::VndScribus => "vnd.scribus",
            Subtype::VndSealed3df => "vnd.sealed.3df",
            Subtype::VndSealedCsf => "vnd.sealed.csf",
            Subtype::VndSealedDoc => "vnd.sealed.doc",
            Subtype::VndSealedEml => "vnd.sealed.eml",
            Subtype::VndSealedMht => "vnd.sealed.mht",
            Subtype::VndSealedMpeg1 => "vnd.sealed.mpeg1",
            Subtype::VndSealedMpeg4 => "vnd.sealed.mpeg4",
            Subtype::VndSealedNet => "vnd.sealed.net",
            Subtype::VndSealedPng => "vnd.sealed.png",
            Subtype::VndSealedPpt => "vnd.sealed.ppt",
            Subtype::VndSealedSwf => "vnd.sealed.swf",
            Subtype::VndSealedTiff => "vnd.sealed.tiff",
            Subtype::VndSealedXls => "vnd.sealed.xls",
            Subtype::VndSealedmediaSoftsealGif => "vnd.sealedmedia.softseal.gif",
            Subtype::VndSealedmediaSoftsealHtml => "vnd.sealedmedia.softseal.html",
            Subtype::VndSealedmediaSoftsealJpg => "vnd.sealedmedia.softseal.jpg",
            Subtype::VndSealedmediaSoftsealMov => "vnd.sealedmedia.softseal.mov",
            Subtype::VndSealedmediaSoftsealMpeg => "vnd.sealedmedia.softseal.mpeg",
            Subtype::VndSealedmediaSoftsealPdf => "vnd.sealedmedia.softseal.pdf",
            Subtype::VndSeemail => "vnd.seemail",
            Subtype::VndSeis => "vnd.seis",
            Subtype::VndSema => "vnd.sema",
            Subtype::VndSemd => "vnd.semd",
            Subtype::VndSemf => "vnd.semf",
            Subtype::VndSenxWarpscript => "vnd.senx.warpscript",
            Subtype::VndShadeSaveFile => "vnd.shade-save-file",
            Subtype::VndShanaInformedFormdata => "vnd.shana.informed.formdata",
            Subtype::VndShanaInformedFormtemplate => "vnd.shana.informed.formtemplate",
            Subtype::VndShanaInformedInterchange => "vnd.shana.informed.interchange",
            Subtype::VndShanaInformedPackage => "vnd.shana.informed.package",
            Subtype::VndShootproof => "vnd.shootproof",
            Subtype::VndShopkick => "vnd.shopkick",
            Subtype::VndShp => "vnd.shp",
            Subtype::VndShx => "vnd.shx",
            Subtype::VndSigrokSession => "vnd.sigrok.session",
            Subtype::VndSimTechMindMapper => "vnd.SimTech-MindMapper",
            Subtype::VndSiren => "vnd.siren",
            Subtype::VndSmaf => "vnd.smaf",
            Subtype::VndSmartNotebook => "vnd.smart.notebook",
            Subtype::VndSmartTeacher => "vnd.smart.teacher",
            Subtype::VndSnesdevPageTable => "vnd.snesdev-page-table",
            Subtype::VndSoftware602FillerForm => "vnd.software602.filler.form",
            Subtype::VndSoftware602FillerFormXmlZip => "vnd.software602.filler.form-xml-zip",
            Subtype::VndSolentSdkm => "vnd.solent.sdkm",
            Subtype::VndSosi => "vnd.sosi",
            Subtype::VndSpotfireDxp => "vnd.spotfire.dxp",
            Subtype::VndSpotfireSfs => "vnd.spotfire.sfs",
            Subtype::VndSqlite3 => "vnd.sqlite3",
            Subtype::VndSssCod => "vnd.sss-cod",
            Subtype::VndSssDtf => "vnd.sss-dtf",
            Subtype::VndSssNtf => "vnd.sss-ntf",
            Subtype::VndStardivisionCalc => "vnd.stardivision.calc",
            Subtype::VndStardivisionChart => "vnd.stardivision.chart",
            Subtype::VndStardivisionDraw => "vnd.stardivision.draw",
            Subtype::VndStardivisionImpress => "vnd.stardivision.impress",
            Subtype::VndStardivisionMath => "vnd.stardivision.math",
            Subtype::VndStardivisionWriter => "vnd.stardivision.writer",
            Subtype::VndStardivisionWriterGlobal => "vnd.stardivision.writer-global",
            Subtype::VndStepmaniaPackage => "vnd.stepmania.package",
            Subtype::VndStepmaniaStepchart => "vnd.stepmania.stepchart",
            Subtype::VndStreetStream => "vnd.street-stream",
            Subtype::VndSunJ2meAppDescriptor => "vnd.sun.j2me.app-descriptor",
            Subtype::VndSunWadl => "vnd.sun.wadl",
            Subtype::VndSunXmlCalc => "vnd.sun.xml.calc",
            Subtype::VndSunXmlCalcTemplate => "vnd.sun.xml.calc.template",
            Subtype::VndSunXmlDraw => "vnd.sun.xml.draw",
            Subtype::VndSunXmlDrawTemplate => "vnd.sun.xml.draw.template",
            Subtype::VndSunXmlImpress => "vnd.sun.xml.impress",
            Subtype::VndSunXmlImpressTemplate => "vnd.sun.xml.impress.template",
            Subtype::VndSunXmlMath => "vnd.sun.xml.math",
            Subtype::VndSunXmlWriter => "vnd.sun.xml.writer",
            Subtype::VndSunXmlWriterGlobal => "vnd.sun.xml.writer.global",
            Subtype::VndSunXmlWriterTemplate => "vnd.sun.xml.writer.template",
            Subtype::VndSusCalendar => "vnd.sus-calendar",
            Subtype::VndSvd => "vnd.svd",
            Subtype::VndSvf => "vnd.svf",
            Subtype::VndSwiftviewIcs => "vnd.swiftview-ics",
            Subtype::VndSycle => "vnd.sycle",
            Subtype::VndSyft => "vnd.syft",
            Subtype::VndSymbianInstall => "vnd.symbian.install",
            Subtype::VndSyncml => "vnd.syncml",
            Subtype::VndSyncmlDm => "vnd.syncml.dm",
            Subtype::VndSyncmlDmNotification => "vnd.syncml.dm.notification",
            Subtype::VndSyncmlDmddf => "vnd.syncml.dmddf",
            Subtype::VndSyncmlDmtnds => "vnd.syncml.dmtnds",
            Subtype::VndSyncmlDsNotification => "vnd.syncml.ds.notification",
            Subtype::VndTableschema => "vnd.tableschema",
            Subtype::VndTaoIntentModuleArchive => "vnd.tao.intent-module-archive",
            Subtype::VndTcpdumpPcap => "vnd.tcpdump.pcap",
            Subtype::VndTencentTap => "vnd.tencent.tap",
            Subtype::VndTheqvd => "vnd.theqvd",
            Subtype::VndThinkCellPpttc => "vnd.think-cell.ppttc",
            Subtype::VndTmdMediaflexApi => "vnd.tmd.mediaflex.api",
            Subtype::VndTml => "vnd.tml",
            Subtype::VndTmobileLivetv => "vnd.tmobile-livetv",
            Subtype::VndTriOnesource => "vnd.tri.onesource",
            Subtype::VndTridTpt => "vnd.trid.tpt",
            Subtype::VndTriscapeMxs => "vnd.triscape.mxs",
            Subtype::VndTrolltechLinguist => "vnd.trolltech.linguist",
            Subtype::VndTrueapp => "vnd.trueapp",
            Subtype::VndTruedoc => "vnd.truedoc",
            Subtype::VndUbisoftWebplayer => "vnd.ubisoft.webplayer",
            Subtype::VndUfdl => "vnd.ufdl",
            Subtype::VndUiqTheme => "vnd.uiq.theme",
            Subtype::VndUmajin => "vnd.umajin",
            Subtype::VndUnity => "vnd.unity",
            Subtype::VndUoml => "vnd.uoml",
            Subtype::VndUplanetAlert => "vnd.uplanet.alert",
            Subtype::VndUplanetAlertWbxml => "vnd.uplanet.alert-wbxml",
            Subtype::VndUplanetBearerChoice => "vnd.uplanet.bearer-choice",
            Subtype::VndUplanetBearerChoiceWbxml => "vnd.uplanet.bearer-choice-wbxml",
            Subtype::VndUplanetCacheop => "vnd.uplanet.cacheop",
            Subtype::VndUplanetCacheopWbxml => "vnd.uplanet.cacheop-wbxml",
            Subtype::VndUplanetChannel => "vnd.uplanet.channel",
            Subtype::VndUplanetChannelWbxml => "vnd.uplanet.channel-wbxml",
            Subtype::VndUplanetList => "vnd.uplanet.list",
            Subtype::VndUplanetListWbxml => "vnd.uplanet.list-wbxml",
            Subtype::VndUplanetListcmd => "vnd.uplanet.listcmd",
            Subtype::VndUplanetListcmdWbxml => "vnd.uplanet.listcmd-wbxml",
            Subtype::VndUplanetSignal => "vnd.uplanet.signal",
            Subtype::VndUriMap => "vnd.uri-map",
            Subtype::VndUsdz => "vnd.usdz",
            Subtype::VndUvvuMp4 => "vnd.uvvu.mp4",
            Subtype::VndValveSourceCompiledMap => "vnd.valve.source.compiled-map",
            Subtype::VndValveSourceMaterial => "vnd.valve.source.material",
            Subtype::VndValveSourceTexture => "vnd.valve.source.texture",
            Subtype::VndVcx => "vnd.vcx",
            Subtype::VndVdStudy => "vnd.vd-study",
            Subtype::VndVectorworks => "vnd.vectorworks",
            Subtype::VndVel => "vnd.vel",
            Subtype::VndVerimatrixVcas => "vnd.verimatrix.vcas",
            Subtype::VndVeritoneAion => "vnd.veritone.aion",
            Subtype::VndVeryantThin => "vnd.veryant.thin",
            Subtype::VndVesEncrypted => "vnd.ves.encrypted",
            Subtype::VndVidsoftVidconference => "vnd.vidsoft.vidconference",
            Subtype::VndVisio => "vnd.visio",
            Subtype::VndVisionary => "vnd.visionary",
            Subtype::VndVividenceScriptfile => "vnd.vividence.scriptfile",
            Subtype::VndVivo => "vnd.vivo",
            Subtype::VndVmxCvsd => "vnd.vmx.cvsd",
            Subtype::VndVsf => "vnd.vsf",
            Subtype::VndVtu => "vnd.vtu",
            Subtype::VndWapSi => "vnd.wap.si",
            Subtype::VndWapSic => "vnd.wap.sic",
            Subtype::VndWapSl => "vnd.wap.sl",
            Subtype::VndWapSlc => "vnd.wap.slc",
            Subtype::VndWapWbmp => "vnd.wap.wbmp",
            Subtype::VndWapWbxml => "vnd.wap.wbxml",
            Subtype::VndWapWml => "vnd.wap.wml",
            Subtype::VndWapWmlc => "vnd.wap.wmlc",
            Subtype::VndWapWmlscript => "vnd.wap.wmlscript",
            Subtype::VndWapWmlscriptc => "vnd.wap.wmlscriptc",
            Subtype::VndWebturbo => "vnd.webturbo",
            Subtype::VndWfaDpp => "vnd.wfa.dpp",
            Subtype::VndWfaP2p => "vnd.wfa.p2p",
            Subtype::VndWfaWsc => "vnd.wfa.wsc",
            Subtype::VndWindowsDevicepairing => "vnd.windows.devicepairing",
            Subtype::VndWmc => "vnd.wmc",
            Subtype::VndWmfBootstrap => "vnd.wmf.bootstrap",
            Subtype::VndWolframMathematica => "vnd.wolfram.mathematica",
            Subtype::VndWolframMathematicaPackage => "vnd.wolfram.mathematica.package",
            Subtype::VndWolframPlayer => "vnd.wolfram.player",
            Subtype::VndWordperfect => "vnd.wordperfect",
            Subtype::VndWordperfect51 => "vnd.wordperfect5.1",
            Subtype::VndWqd => "vnd.wqd",
            Subtype::VndWrqHp3000Labelled => "vnd.wrq-hp3000-labelled",
            Subtype::VndWtStf => "vnd.wt.stf",
            Subtype::VndWvCsp => "vnd.wv.csp",
            Subtype::VndWvSsp => "vnd.wv.ssp",
            Subtype::VndXacml => "vnd.xacml",
            Subtype::VndXara => "vnd.xara",
            Subtype::VndXfdl => "vnd.xfdl",
            Subtype::VndXfdlWebform => "vnd.xfdl.webform",
            Subtype::VndXiff => "vnd.xiff",
            Subtype::VndXmi => "vnd.xmi",
            Subtype::VndXmpieCpkg => "vnd.xmpie.cpkg",
            Subtype::VndXmpieDpkg => "vnd.xmpie.dpkg",
            Subtype::VndXmpiePlan => "vnd.xmpie.plan",
            Subtype::VndXmpiePpkg => "vnd.xmpie.ppkg",
            Subtype::VndXmpieXlim => "vnd.xmpie.xlim",
            Subtype::VndYamahaHvDic => "vnd.yamaha.hv-dic",
            Subtype::VndYamahaHvScript => "vnd.yamaha.hv-script",
            Subtype::VndYamahaHvVoice => "vnd.yamaha.hv-voice",
            Subtype::VndYamahaOpenscoreformat => "vnd.yamaha.openscoreformat",
            Subtype::VndYamahaOpenscoreformatOsfpvg => "vnd.yamaha.openscoreformat.osfpvg",
            Subtype::VndYamahaRemoteSetup => "vnd.yamaha.remote-setup",
            Subtype::VndYamahaSmafAudio => "vnd.yamaha.smaf-audio",
            Subtype::VndYamahaSmafPhrase => "vnd.yamaha.smaf-phrase",
            Subtype::VndYamahaThroughNgn => "vnd.yamaha.through-ngn",
            Subtype::VndYamahaTunnelUdpencap => "vnd.yamaha.tunnel-udpencap",
            Subtype::VndYaoweme => "vnd.yaoweme",
            Subtype::VndYellowriverCustomMenu => "vnd.yellowriver-custom-menu",
            Subtype::VndYoutubeYt => "vnd.youtube.yt",
            Subtype::VndZbrushPcx => "vnd.zbrush.pcx",
            Subtype::VndZul => "vnd.zul",
            Subtype::VndZzazzDeck => "vnd.zzazz.deck",
            Subtype::VoiceMessage => "voice-message",
            Subtype::Voicexml => "voicexml",
            Subtype::Vorbis => "vorbis",
            Subtype::VorbisConfig => "vorbis-config",
            Subtype::VoucherCms => "voucher-cms",
            Subtype::Vp8 => "VP8",
            Subtype::Vp9 => "VP9",
            Subtype::VqRtcpxr => "vq-rtcpxr",
            Subtype::Vrml => "vrml",
            Subtype::Vtt => "vtt",
            Subtype::Wasm => "wasm",
            Subtype::Watcherinfo => "watcherinfo",
            Subtype::Webm => "webm",
            Subtype::WebpushOptions => "webpush-options",
            Subtype::WhoisppQuery => "whoispp-query",
            Subtype::WhoisppResponse => "whoispp-response",
            Subtype::Widget => "widget",
            Subtype::Wita => "wita",
            Subtype::Wmf => "wmf",
            Subtype::Woff => "woff",
            Subtype::Woff2 => "woff2",
            Subtype::Wordperfect51 => "wordperfect5.1",
            Subtype::Wsdl => "wsdl",
            Subtype::Wspolicy => "wspolicy",
            Subtype::X123 => "x-123",
            Subtype::X3d => "x3d",
            Subtype::X3dVrml => "x3d-vrml",
            Subtype::X400Bp => "x400-bp",
            Subtype::X7zCompressed => "x-7z-compressed",
            Subtype::XAbiword => "x-abiword",
            Subtype::XAiff => "x-aiff",
            Subtype::XAlchemy => "x-alchemy",
            Subtype::XAppleDiskimage => "x-apple-diskimage",
            Subtype::XBcpio => "x-bcpio",
            Subtype::XBibtex => "x-bibtex",
            Subtype::XBittorrent => "x-bittorrent",
            Subtype::XBoo => "x-boo",
            Subtype::XC => "x-c",
            Subtype::XCache => "x-cache",
            Subtype::XCacheCsf => "x-cache-csf",
            Subtype::XCactvsBinary => "x-cactvs-binary",
            Subtype::XCanonCr2 => "x-canon-cr2",
            Subtype::XCanonCrw => "x-canon-crw",
            Subtype::XCdf => "x-cdf",
            Subtype::XCdlink => "x-cdlink",
            Subtype::XCdx => "x-cdx",
            Subtype::XCerius => "x-cerius",
            Subtype::XChdr => "x-chdr",
            Subtype::XChem3d => "x-chem3d",
            Subtype::XChemdraw => "x-chemdraw",
            Subtype::XCif => "x-cif",
            Subtype::XCmdf => "x-cmdf",
            Subtype::XCml => "x-cml",
            Subtype::XCmuRaster => "x-cmu-raster",
            Subtype::XCompass => "x-compass",
            Subtype::XComponent => "x-component",
            Subtype::XComsol => "x-comsol",
            Subtype::XCoreldraw => "x-coreldraw",
            Subtype::XCoreldrawpattern => "x-coreldrawpattern",
            Subtype::XCoreldrawtemplate => "x-coreldrawtemplate",
            Subtype::XCorelphotopaint => "x-corelphotopaint",
            Subtype::XCpio => "x-cpio",
            Subtype::XCrossfire => "x-crossfire",
            Subtype::XCsh => "x-csh",
            Subtype::XCsml => "x-csml",
            Subtype::XCsrc => "x-csrc",
            Subtype::XCtx => "x-ctx",
            Subtype::XCxf => "x-cxf",
            Subtype::XDiff => "x-diff",
            Subtype::XDirector => "x-director",
            Subtype::XDoom => "x-doom",
            Subtype::XDsrc => "x-dsrc",
            Subtype::XDvi => "x-dvi",
            Subtype::XEmblDlNucleotide => "x-embl-dl-nucleotide",
            Subtype::XEpsonErf => "x-epson-erf",
            Subtype::XFlv => "x-flv",
            Subtype::XFont => "x-font",
            Subtype::XFontPcf => "x-font-pcf",
            Subtype::XFreemind => "x-freemind",
            Subtype::XGalacticSpc => "x-galactic-spc",
            Subtype::XGamessInput => "x-gamess-input",
            Subtype::XGanttproject => "x-ganttproject",
            Subtype::XGaussianCheckpoint => "x-gaussian-checkpoint",
            Subtype::XGaussianCube => "x-gaussian-cube",
            Subtype::XGaussianInput => "x-gaussian-input",
            Subtype::XGaussianLog => "x-gaussian-log",
            Subtype::XGcg8Sequence => "x-gcg8-sequence",
            Subtype::XGenbank => "x-genbank",
            Subtype::XGnumeric => "x-gnumeric",
            Subtype::XGoSgf => "x-go-sgf",
            Subtype::XGraphingCalculator => "x-graphing-calculator",
            Subtype::XGsm => "x-gsm",
            Subtype::XGtar => "x-gtar",
            Subtype::XGtarCompressed => "x-gtar-compressed",
            Subtype::XHaskell => "x-haskell",
            Subtype::XHdf => "x-hdf",
            Subtype::XHin => "x-hin",
            Subtype::XHwp => "x-hwp",
            Subtype::XIca => "x-ica",
            Subtype::XInfo => "x-info",
            Subtype::XInternetSignup => "x-internet-signup",
            Subtype::XIphone => "x-iphone",
            Subtype::XIso9660Image => "x-iso9660-image",
            Subtype::XIsostar => "x-isostar",
            Subtype::XJava => "x-java",
            Subtype::XJavaJnlpFile => "x-java-jnlp-file",
            Subtype::XJcampDx => "x-jcamp-dx",
            Subtype::XJg => "x-jg",
            Subtype::XJmol => "x-jmol",
            Subtype::XJng => "x-jng",
            Subtype::XKillustrator => "x-killustrator",
            Subtype::XKinemage => "x-kinemage",
            Subtype::XLaAsf => "x-la-asf",
            Subtype::XLatex => "x-latex",
            Subtype::XLha => "x-lha",
            Subtype::XLilypond => "x-lilypond",
            Subtype::XLiterateHaskell => "x-literate-haskell",
            Subtype::XLyx => "x-lyx",
            Subtype::XLzh => "x-lzh",
            Subtype::XLzx => "x-lzx",
            Subtype::XMacmolecule => "x-macmolecule",
            Subtype::XMacromodelInput => "x-macromodel-input",
            Subtype::XMaker => "x-maker",
            Subtype::XMatroska => "x-matroska",
            Subtype::XMdlMolfile => "x-mdl-molfile",
            Subtype::XMdlRdfile => "x-mdl-rdfile",
            Subtype::XMdlRxnfile => "x-mdl-rxnfile",
            Subtype::XMdlSdfile => "x-mdl-sdfile",
            Subtype::XMdlTgf => "x-mdl-tgf",
            Subtype::XMixedReplace => "x-mixed-replace",
            Subtype::XMmcif => "x-mmcif",
            Subtype::XMng => "x-mng",
            Subtype::XMoc => "x-moc",
            Subtype::XMol2 => "x-mol2",
            Subtype::XMolconnZ => "x-molconn-Z",
            Subtype::XMopacGraph => "x-mopac-graph",
            Subtype::XMopacInput => "x-mopac-input",
            Subtype::XMopacOut => "x-mopac-out",
            Subtype::XMopacVib => "x-mopac-vib",
            Subtype::XMsWax => "x-ms-wax",
            Subtype::XMsWm => "x-ms-wm",
            Subtype::XMsWma => "x-ms-wma",
            Subtype::XMsWmd => "x-ms-wmd",
            Subtype::XMsWmv => "x-ms-wmv",
            Subtype::XMsWmx => "x-ms-wmx",
            Subtype::XMsWmz => "x-ms-wmz",
            Subtype::XMsWvx => "x-ms-wvx",
            Subtype::XMsdosProgram => "x-msdos-program",
            Subtype::XMsi => "x-msi",
            Subtype::XMsvideo => "x-msvideo",
            Subtype::XNcbiAsn1 => "x-ncbi-asn1",
            Subtype::XNcbiAsn1Ascii => "x-ncbi-asn1-ascii",
            Subtype::XNcbiAsn1Binary => "x-ncbi-asn1-binary",
            Subtype::XNcbiAsn1Spec => "x-ncbi-asn1-spec",
            Subtype::XNetcdf => "x-netcdf",
            Subtype::XNikonNef => "x-nikon-nef",
            Subtype::XNsProxyAutoconfig => "x-ns-proxy-autoconfig",
            Subtype::XNwc => "x-nwc",
            Subtype::XObject => "x-object",
            Subtype::XOlympusOrf => "x-olympus-orf",
            Subtype::XOzApplication => "x-oz-application",
            Subtype::XPascal => "x-pascal",
            Subtype::XPcsGcd => "x-pcs-gcd",
            Subtype::XPdb => "x-pdb",
            Subtype::XPerl => "x-perl",
            Subtype::XPkcs7Certreqresp => "x-pkcs7-certreqresp",
            Subtype::XPnRealaudio => "x-pn-realaudio",
            Subtype::XPortableAnymap => "x-portable-anymap",
            Subtype::XPortableBitmap => "x-portable-bitmap",
            Subtype::XPortableGraymap => "x-portable-graymap",
            Subtype::XPortablePixmap => "x-portable-pixmap",
            Subtype::XPython => "x-python",
            Subtype::XPythonCode => "x-python-code",
            Subtype::XQgis => "x-qgis",
            Subtype::XQuicktimeplayer => "x-quicktimeplayer",
            Subtype::XRdp => "x-rdp",
            Subtype::XRedhatPackageManager => "x-redhat-package-manager",
            Subtype::XRgb => "x-rgb",
            Subtype::XRosdal => "x-rosdal",
            Subtype::XRss => "x-rss",
            Subtype::XRuby => "x-ruby",
            Subtype::XScala => "x-scala",
            Subtype::XScilab => "x-scilab",
            Subtype::XScilabXcos => "x-scilab-xcos",
            Subtype::XScpls => "x-scpls",
            Subtype::XSd2 => "x-sd2",
            Subtype::XSetext => "x-setext",
            Subtype::XSfv => "x-sfv",
            Subtype::XSgiMovie => "x-sgi-movie",
            Subtype::XSh => "x-sh",
            Subtype::XShar => "x-shar",
            Subtype::XSilverlight => "x-silverlight",
            Subtype::XStuffit => "x-stuffit",
            Subtype::XSv4cpio => "x-sv4cpio",
            Subtype::XSv4crc => "x-sv4crc",
            Subtype::XSwissprot => "x-swissprot",
            Subtype::XTar => "x-tar",
            Subtype::XTcl => "x-tcl",
            Subtype::XTex => "x-tex",
            Subtype::XTexGf => "x-tex-gf",
            Subtype::XTexPk => "x-tex-pk",
            Subtype::XTexinfo => "x-texinfo",
            Subtype::XTrash => "x-trash",
            Subtype::XTroffMan => "x-troff-man",
            Subtype::XTroffMe => "x-troff-me",
            Subtype::XTroffMs => "x-troff-ms",
            Subtype::XUstar => "x-ustar",
            Subtype::XVamasIso14976 => "x-vamas-iso14976",
            Subtype::XVcalendar => "x-vcalendar",
            Subtype::XVmd => "x-vmd",
            Subtype::XWaisSource => "x-wais-source",
            Subtype::XWav => "x-wav",
            Subtype::XWingz => "x-wingz",
            Subtype::XX509CaCert => "x-x509-ca-cert",
            Subtype::XXbitmap => "x-xbitmap",
            Subtype::XXcf => "x-xcf",
            Subtype::XXfig => "x-xfig",
            Subtype::XXpinstall => "x-xpinstall",
            Subtype::XXpixmap => "x-xpixmap",
            Subtype::XXtel => "x-xtel",
            Subtype::XXwindowdump => "x-xwindowdump",
            Subtype::XXyz => "x-xyz",
            Subtype::XXz => "x-xz",
            Subtype::Xacml => "xacml",
            Subtype::XcapAtt => "xcap-att",
            Subtype::XcapCaps => "xcap-caps",
            Subtype::XcapDiff => "xcap-diff",
            Subtype::XcapEl => "xcap-el",
            Subtype::XcapError => "xcap-error",
            Subtype::XcapNs => "xcap-ns",
            Subtype::XconConferenceInfo => "xcon-conference-info",
            Subtype::XconConferenceInfoDiff => "xcon-conference-info-diff",
            Subtype::Xenc => "xenc",
            Subtype::Xhtml => "xhtml",
            Subtype::Xliff => "xliff",
            Subtype::Xml => "xml",
            Subtype::XmlDtd => "xml-dtd",
            Subtype::XmlExternalParsedEntity => "xml-external-parsed-entity",
            Subtype::XmlPatch => "xml-patch",
            Subtype::Xmpp => "xmpp",
            Subtype::Xop => "xop",
            Subtype::Xslt => "xslt",
            Subtype::Xspf => "xspf",
            Subtype::Xv => "xv",
            Subtype::Yang => "yang",
            Subtype::YangData => "yang-data",
            Subtype::YangPatch => "yang-patch",
            Subtype::Yin => "yin",
            Subtype::Zip => "zip",
            Subtype::Zlib => "zlib",
            Subtype::Zstd => "zstd",
        }
    }
}
impl core::str::FromStr for Subtype {
    type Err = crate::InvalidName;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        const GRAPH: intern_str::Graph<'static, 'static, intern_str::CaseInsensitive<&'static str>, Option<Subtype>> = {
    const NODES: &[intern_str::Node<'static, intern_str::CaseInsensitive<&'static str>, Option<Subtype>>] = &[
        intern_str::Node::new(
            &[
            ],
            None,
            0,
            18446744073709551615,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Star),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::A2l),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Aac),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 4),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ac3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Aces),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 7),
            ],
            Some(Subtype::Ace),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Activemessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ssage"), 9),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Activity),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eme"), 10),
                (intern_str::CaseInsensitive("ity"), 11),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iv"), 12),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 6),
                (intern_str::CaseInsensitive("e"), 8),
                (intern_str::CaseInsensitive("t"), 13),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Alternative),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("native"), 15),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoCdnifilter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("filter"), 17),
            ],
            Some(Subtype::AltoCdni),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoCostmapfilter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("filter"), 19),
            ],
            Some(Subtype::AltoCostmap),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("map"), 20),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dni"), 18),
                (intern_str::CaseInsensitive("ost"), 21),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoDirectory),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("irectory"), 23),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoEndpointcostparams),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("params"), 25),
            ],
            Some(Subtype::AltoEndpointcost),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoEndpointpropparams),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("params"), 27),
            ],
            Some(Subtype::AltoEndpointprop),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cost"), 26),
                (intern_str::CaseInsensitive("prop"), 28),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("int"), 29),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoError),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ndpo"), 30),
                (intern_str::CaseInsensitive("rror"), 31),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoNetworkmapfilter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("filter"), 33),
            ],
            Some(Subtype::AltoNetworkmap),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("etworkmap"), 34),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoPropmapparams),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("params"), 36),
            ],
            Some(Subtype::AltoPropmap),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ropmap"), 37),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoUpdatestreamcontrol),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 39),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AltoUpdatestreamparams),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("contro"), 40),
                (intern_str::CaseInsensitive("params"), 41),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pdatestream"), 42),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 22),
                (intern_str::CaseInsensitive("d"), 24),
                (intern_str::CaseInsensitive("e"), 32),
                (intern_str::CaseInsensitive("n"), 35),
                (intern_str::CaseInsensitive("p"), 38),
                (intern_str::CaseInsensitive("u"), 43),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 16),
                (intern_str::CaseInsensitive("o-"), 44),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 45),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Aml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AmrWb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wb"), 48),
            ],
            Some(Subtype::Amr),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 47),
                (intern_str::CaseInsensitive("r"), 49),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AndrewInset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("inset"), 51),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Annodex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("drew-"), 52),
                (intern_str::CaseInsensitive("nodex"), 53),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Appledouble),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("le"), 55),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Applefile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("doub"), 56),
                (intern_str::CaseInsensitive("file"), 57),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 58),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Aptx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pl"), 59),
                (intern_str::CaseInsensitive("tx"), 60),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Asc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 62),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atfx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 64),
            ],
            Some(Subtype::Atf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atomcat),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("at"), 66),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atomdeleted),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eleted"), 68),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atomicmail),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cmail"), 70),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atomserv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("v"), 72),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atomsvc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 73),
                (intern_str::CaseInsensitive("vc"), 74),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 67),
                (intern_str::CaseInsensitive("d"), 69),
                (intern_str::CaseInsensitive("i"), 71),
                (intern_str::CaseInsensitive("s"), 75),
            ],
            Some(Subtype::Atom),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 76),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtracAdvancedLossless),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dvanced-lossless"), 78),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtracX),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 79),
                (intern_str::CaseInsensitive("x"), 80),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atrac3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 81),
                (intern_str::CaseInsensitive("3"), 82),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ac"), 83),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtscDwd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtscDynamicEventMessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amic-event-message"), 86),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("wd"), 85),
                (intern_str::CaseInsensitive("yn"), 87),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtscHeld),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eld"), 89),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtscRdt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AtscRsat),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 92),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dt"), 91),
                (intern_str::CaseInsensitive("sa"), 93),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 88),
                (intern_str::CaseInsensitive("h"), 90),
                (intern_str::CaseInsensitive("r"), 94),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-"), 95),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Atxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 97),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 65),
                (intern_str::CaseInsensitive("o"), 77),
                (intern_str::CaseInsensitive("r"), 84),
                (intern_str::CaseInsensitive("s"), 96),
                (intern_str::CaseInsensitive("x"), 98),
            ],
            Some(Subtype::At),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::AuthPolicy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("th-policy"), 100),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Av1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Avci),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Avcs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 103),
                (intern_str::CaseInsensitive("s"), 104),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Avif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 106),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 102),
                (intern_str::CaseInsensitive("c"), 105),
                (intern_str::CaseInsensitive("i"), 107),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 3),
                (intern_str::CaseInsensitive("a"), 5),
                (intern_str::CaseInsensitive("c"), 14),
                (intern_str::CaseInsensitive("l"), 46),
                (intern_str::CaseInsensitive("m"), 50),
                (intern_str::CaseInsensitive("n"), 54),
                (intern_str::CaseInsensitive("p"), 61),
                (intern_str::CaseInsensitive("s"), 63),
                (intern_str::CaseInsensitive("t"), 99),
                (intern_str::CaseInsensitive("u"), 101),
                (intern_str::CaseInsensitive("v"), 108),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::BacnetXdd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t-xdd"), 110),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Basic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::BatchSmtp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-smtp"), 113),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cne"), 111),
                (intern_str::CaseInsensitive("sic"), 112),
                (intern_str::CaseInsensitive("tch"), 114),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Bbolin),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("olin"), 116),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Beep),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ep"), 118),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Blockdevice),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ockdevice"), 120),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Bmpeg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eg"), 122),
            ],
            Some(Subtype::Bmp),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 123),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Bt656),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("656"), 125),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Bv16),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Bv32),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("16"), 127),
                (intern_str::CaseInsensitive("32"), 128),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Byteranges),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("teranges"), 130),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 115),
                (intern_str::CaseInsensitive("b"), 117),
                (intern_str::CaseInsensitive("e"), 119),
                (intern_str::CaseInsensitive("l"), 121),
                (intern_str::CaseInsensitive("m"), 124),
                (intern_str::CaseInsensitive("t"), 126),
                (intern_str::CaseInsensitive("v"), 129),
                (intern_str::CaseInsensitive("y"), 131),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CacheManifest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("he-manifest"), 133),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Calendar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CallCompletion),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pletion"), 136),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cals1840),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 138),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("endar"), 135),
                (intern_str::CaseInsensitive("l-com"), 137),
                (intern_str::CaseInsensitive("s-184"), 139),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Captive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tive"), 141),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 134),
                (intern_str::CaseInsensitive("l"), 140),
                (intern_str::CaseInsensitive("p"), 142),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CborSeq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-seq"), 144),
            ],
            Some(Subtype::Cbor),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("or"), 145),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cccex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 147),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ccmp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ccxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 150),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ce"), 148),
                (intern_str::CaseInsensitive("mp"), 149),
                (intern_str::CaseInsensitive("xm"), 151),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cdfx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CdmiCapability),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("y"), 154),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CdmiContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("apabilit"), 155),
                (intern_str::CaseInsensitive("ontainer"), 156),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CdmiDomain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("omain"), 158),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CdmiObject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bject"), 160),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CdmiQueue),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ueue"), 162),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 157),
                (intern_str::CaseInsensitive("d"), 159),
                (intern_str::CaseInsensitive("o"), 161),
                (intern_str::CaseInsensitive("q"), 163),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 164),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cdni),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fx"), 153),
                (intern_str::CaseInsensitive("mi"), 165),
                (intern_str::CaseInsensitive("ni"), 166),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cea2018),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-2018"), 168),
            ],
            Some(Subtype::Cea),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CelB),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cellml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 171),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 170),
                (intern_str::CaseInsensitive("l"), 172),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 169),
                (intern_str::CaseInsensitive("l"), 173),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cfw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("w"), 175),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cgm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 177),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Chardevice),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ardevice"), 179),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::City),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ty"), 181),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Clearmode),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("armode"), 183),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Clr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ClueInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("_info"), 186),
            ],
            Some(Subtype::Clue),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 187),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 184),
                (intern_str::CaseInsensitive("r"), 185),
                (intern_str::CaseInsensitive("u"), 188),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 190),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cnrp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rp"), 192),
            ],
            Some(Subtype::Cn),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CoapGroup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CoapPayload),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ad"), 195),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("group"), 194),
                (intern_str::CaseInsensitive("paylo"), 196),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 197),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Collection),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ection"), 199),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Commonground),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("onground"), 201),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ConferenceInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("erence-info"), 203),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CoseKeySet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-set"), 205),
            ],
            Some(Subtype::CoseKey),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-key"), 206),
            ],
            Some(Subtype::Cose),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ap"), 198),
                (intern_str::CaseInsensitive("ll"), 200),
                (intern_str::CaseInsensitive("mm"), 202),
                (intern_str::CaseInsensitive("nf"), 204),
                (intern_str::CaseInsensitive("se"), 207),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cpim),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 209),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cpl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 210),
                (intern_str::CaseInsensitive("l"), 211),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CqlExtension),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CqlIdentifier),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 214),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("extension"), 213),
                (intern_str::CaseInsensitive("identifie"), 215),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 216),
            ],
            Some(Subtype::Cql),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 217),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Csound),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("und"), 219),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Csrattrs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("attrs"), 221),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Css),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CstAdata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("data"), 224),
            ],
            Some(Subtype::Csta),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 225),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CsvSchema),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("schema"), 227),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Csvm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 228),
                (intern_str::CaseInsensitive("m"), 229),
            ],
            Some(Subtype::Csv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 220),
                (intern_str::CaseInsensitive("r"), 222),
                (intern_str::CaseInsensitive("s"), 223),
                (intern_str::CaseInsensitive("t"), 226),
                (intern_str::CaseInsensitive("v"), 230),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::CuSeeme),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-seeme"), 232),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cwt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 234),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Cybercash),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bercash"), 236),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 143),
                (intern_str::CaseInsensitive("b"), 146),
                (intern_str::CaseInsensitive("c"), 152),
                (intern_str::CaseInsensitive("d"), 167),
                (intern_str::CaseInsensitive("e"), 174),
                (intern_str::CaseInsensitive("f"), 176),
                (intern_str::CaseInsensitive("g"), 178),
                (intern_str::CaseInsensitive("h"), 180),
                (intern_str::CaseInsensitive("i"), 182),
                (intern_str::CaseInsensitive("l"), 189),
                (intern_str::CaseInsensitive("m"), 191),
                (intern_str::CaseInsensitive("n"), 193),
                (intern_str::CaseInsensitive("o"), 208),
                (intern_str::CaseInsensitive("p"), 212),
                (intern_str::CaseInsensitive("q"), 218),
                (intern_str::CaseInsensitive("s"), 231),
                (intern_str::CaseInsensitive("u"), 233),
                (intern_str::CaseInsensitive("w"), 235),
                (intern_str::CaseInsensitive("y"), 237),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DashPatch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 239),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dashdelta),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-patc"), 240),
                (intern_str::CaseInsensitive("delta"), 241),
            ],
            Some(Subtype::Dash),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dat12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 243),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Davmount),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ount"), 245),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sh"), 242),
                (intern_str::CaseInsensitive("t1"), 244),
                (intern_str::CaseInsensitive("vm"), 246),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DcaRft),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-rft"), 248),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dcd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 249),
                (intern_str::CaseInsensitive("d"), 250),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DecDx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DeliveryStatus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ry-status"), 253),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-dx"), 252),
                (intern_str::CaseInsensitive("live"), 254),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DialogInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("log-info"), 256),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DicomRle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-rle"), 258),
            ],
            Some(Subtype::Dicom),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("om"), 259),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Digest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("est"), 261),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dii),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DirectoryLocked),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-locked"), 264),
            ],
            Some(Subtype::Directory),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ectory"), 265),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DispositionNotification),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("position-notification"), 267),
            ],
            None,
            0,
            21,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 257),
                (intern_str::CaseInsensitive("c"), 260),
                (intern_str::CaseInsensitive("g"), 262),
                (intern_str::CaseInsensitive("i"), 263),
                (intern_str::CaseInsensitive("r"), 266),
                (intern_str::CaseInsensitive("s"), 268),
                (intern_str::CaseInsensitive("t"), 269),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dls),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 271),
            ],
            Some(Subtype::Dl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DnsMessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-message"), 273),
            ],
            Some(Subtype::Dns),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 274),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dots),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ts"), 276),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dskpp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 278),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dsptype),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ype"), 280),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DsrEs201108),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("108"), 282),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DsrEs202050),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 284),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DsrEs202211),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::DsrEs202212),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 286),
                (intern_str::CaseInsensitive("2"), 287),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("05"), 285),
                (intern_str::CaseInsensitive("21"), 288),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 283),
                (intern_str::CaseInsensitive("2"), 289),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es20"), 290),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dssc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kp"), 279),
                (intern_str::CaseInsensitive("pt"), 281),
                (intern_str::CaseInsensitive("r-"), 291),
                (intern_str::CaseInsensitive("sc"), 292),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dvcs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Dvi4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cs"), 294),
                (intern_str::CaseInsensitive("i4"), 295),
            ],
            Some(Subtype::Dv),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 247),
                (intern_str::CaseInsensitive("c"), 251),
                (intern_str::CaseInsensitive("e"), 255),
                (intern_str::CaseInsensitive("i"), 270),
                (intern_str::CaseInsensitive("l"), 272),
                (intern_str::CaseInsensitive("n"), 275),
                (intern_str::CaseInsensitive("o"), 277),
                (intern_str::CaseInsensitive("s"), 293),
                (intern_str::CaseInsensitive("v"), 296),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::E57),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("7"), 298),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Eac3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c3"), 300),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EdiConsent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sent"), 302),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EdiX12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("con"), 303),
                (intern_str::CaseInsensitive("x12"), 304),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Edifact),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("act"), 306),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 305),
                (intern_str::CaseInsensitive("f"), 307),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 308),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Efi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 310),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Elm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 312),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataCap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 314),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataComment),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataControl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mment"), 316),
                (intern_str::CaseInsensitive("ntrol"), 317),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 315),
                (intern_str::CaseInsensitive("o"), 318),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataDeviceInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eviceinfo"), 320),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataECallMsd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("call.msd"), 322),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataProviderInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("roviderinfo"), 324),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataServiceInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataSubscriberInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfo"), 327),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("erviceinfo"), 326),
                (intern_str::CaseInsensitive("ubscriberi"), 328),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EmergencyCallDataVeds),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eds"), 330),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 319),
                (intern_str::CaseInsensitive("d"), 321),
                (intern_str::CaseInsensitive("e"), 323),
                (intern_str::CaseInsensitive("p"), 325),
                (intern_str::CaseInsensitive("s"), 329),
                (intern_str::CaseInsensitive("v"), 331),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rgencycalldata."), 332),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Emf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Emma),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 335),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Emotionml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tionml"), 337),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 333),
                (intern_str::CaseInsensitive("f"), 334),
                (intern_str::CaseInsensitive("m"), 336),
                (intern_str::CaseInsensitive("o"), 338),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Encaprtp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Encrypted),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 341),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aprtp"), 340),
                (intern_str::CaseInsensitive("rypte"), 342),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Enriched),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iched"), 344),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 343),
                (intern_str::CaseInsensitive("r"), 345),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Epp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Epub),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 348),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 347),
                (intern_str::CaseInsensitive("u"), 349),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Eshop),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hop"), 351),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::EvrcQcp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("qcp"), 353),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrc0),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrc1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrcb0),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrcb1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 357),
                (intern_str::CaseInsensitive("1"), 358),
            ],
            Some(Subtype::Evrcb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrcnw0),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrcnw1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 360),
                (intern_str::CaseInsensitive("1"), 361),
            ],
            Some(Subtype::Evrcnw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("w"), 362),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrcwb0),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evrcwb1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 364),
                (intern_str::CaseInsensitive("1"), 365),
            ],
            Some(Subtype::Evrcwb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 366),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 354),
                (intern_str::CaseInsensitive("0"), 355),
                (intern_str::CaseInsensitive("1"), 356),
                (intern_str::CaseInsensitive("b"), 359),
                (intern_str::CaseInsensitive("n"), 363),
                (intern_str::CaseInsensitive("w"), 367),
            ],
            Some(Subtype::Evrc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 368),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Evs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 369),
                (intern_str::CaseInsensitive("s"), 370),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Example),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mple"), 372),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Exi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ExpectCtReport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ct-report"), 375),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Express),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ect-"), 376),
                (intern_str::CaseInsensitive("ress"), 377),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ExternalBody),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ernal-body"), 379),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 373),
                (intern_str::CaseInsensitive("i"), 374),
                (intern_str::CaseInsensitive("p"), 378),
                (intern_str::CaseInsensitive("t"), 380),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("5"), 299),
                (intern_str::CaseInsensitive("a"), 301),
                (intern_str::CaseInsensitive("d"), 309),
                (intern_str::CaseInsensitive("f"), 311),
                (intern_str::CaseInsensitive("l"), 313),
                (intern_str::CaseInsensitive("m"), 339),
                (intern_str::CaseInsensitive("n"), 346),
                (intern_str::CaseInsensitive("p"), 350),
                (intern_str::CaseInsensitive("s"), 352),
                (intern_str::CaseInsensitive("v"), 371),
                (intern_str::CaseInsensitive("x"), 381),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fastinfoset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("set"), 383),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fastsoap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("info"), 384),
                (intern_str::CaseInsensitive("soap"), 385),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("st"), 386),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fdt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 388),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::FeedbackReport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("edback-report"), 390),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ffv1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("v1"), 392),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fhirpath),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("path"), 394),
            ],
            Some(Subtype::Fhir),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ir"), 395),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fifo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fits),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fo"), 397),
                (intern_str::CaseInsensitive("ts"), 398),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Flac),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 400),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Flexfec),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xfec"), 402),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fli),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 401),
                (intern_str::CaseInsensitive("e"), 403),
                (intern_str::CaseInsensitive("i"), 404),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::FontTdpfr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 406),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::FormData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt-tdpf"), 407),
                (intern_str::CaseInsensitive("rm-data"), 408),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::FrameworkAttributes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amework-attributes"), 410),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Futuresplash),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("turesplash"), 412),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Fwdred),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dred"), 414),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 387),
                (intern_str::CaseInsensitive("d"), 389),
                (intern_str::CaseInsensitive("e"), 391),
                (intern_str::CaseInsensitive("f"), 393),
                (intern_str::CaseInsensitive("h"), 396),
                (intern_str::CaseInsensitive("i"), 399),
                (intern_str::CaseInsensitive("l"), 405),
                (intern_str::CaseInsensitive("o"), 409),
                (intern_str::CaseInsensitive("r"), 411),
                (intern_str::CaseInsensitive("u"), 413),
                (intern_str::CaseInsensitive("w"), 415),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G3fax),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fax"), 417),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G7110),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-0"), 419),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G719),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 420),
                (intern_str::CaseInsensitive("9"), 421),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G7221),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 423),
            ],
            Some(Subtype::G722),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G723),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G72616),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G72624),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G72632),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G72640),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("16"), 426),
                (intern_str::CaseInsensitive("24"), 427),
                (intern_str::CaseInsensitive("32"), 428),
                (intern_str::CaseInsensitive("40"), 429),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 430),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G728),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G7291),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G729d),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::G729e),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 433),
                (intern_str::CaseInsensitive("d"), 434),
                (intern_str::CaseInsensitive("e"), 435),
            ],
            Some(Subtype::G729),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 424),
                (intern_str::CaseInsensitive("3"), 425),
                (intern_str::CaseInsensitive("6"), 431),
                (intern_str::CaseInsensitive("8"), 432),
                (intern_str::CaseInsensitive("9"), 436),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 422),
                (intern_str::CaseInsensitive("2"), 437),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Geopackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ge"), 439),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Geoxacml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("packa"), 440),
                (intern_str::CaseInsensitive("xacml"), 441),
            ],
            Some(Subtype::Geo),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 442),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Gff3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f3"), 444),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Gif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 446),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GlobalDeliveryStatus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GlobalDispositionNotification),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ification"), 449),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("elivery-status"), 448),
                (intern_str::CaseInsensitive("isposition-not"), 450),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GlobalHeaders),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eaders"), 452),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 451),
                (intern_str::CaseInsensitive("h"), 453),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 454),
            ],
            Some(Subtype::Global),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("al"), 455),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GltfBinary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GltfBuffer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("inary"), 457),
                (intern_str::CaseInsensitive("uffer"), 458),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-b"), 459),
            ],
            Some(Subtype::Gltf),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ob"), 456),
                (intern_str::CaseInsensitive("tf"), 460),
            ],
            Some(Subtype::Gl),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Gml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 462),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GrammarRefList),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ammar-ref-list"), 464),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GsmEfr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::GsmHr08),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("08"), 467),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("efr"), 466),
                (intern_str::CaseInsensitive("hr-"), 468),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 469),
            ],
            Some(Subtype::Gsm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 470),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Gzip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ip"), 472),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 418),
                (intern_str::CaseInsensitive("7"), 438),
                (intern_str::CaseInsensitive("e"), 443),
                (intern_str::CaseInsensitive("f"), 445),
                (intern_str::CaseInsensitive("i"), 447),
                (intern_str::CaseInsensitive("l"), 461),
                (intern_str::CaseInsensitive("m"), 463),
                (intern_str::CaseInsensitive("r"), 465),
                (intern_str::CaseInsensitive("s"), 471),
                (intern_str::CaseInsensitive("z"), 473),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H224),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("4"), 475),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H261),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H2631998),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H2632000),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1998"), 478),
                (intern_str::CaseInsensitive("2000"), 479),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 480),
            ],
            Some(Subtype::H263),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H264Rcdo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 482),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H264Svc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rcd"), 483),
                (intern_str::CaseInsensitive("svc"), 484),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 485),
            ],
            Some(Subtype::H264),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::H265),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 477),
                (intern_str::CaseInsensitive("3"), 481),
                (intern_str::CaseInsensitive("4"), 486),
                (intern_str::CaseInsensitive("5"), 487),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 476),
                (intern_str::CaseInsensitive("6"), 488),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::HeaderSet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("der-set"), 490),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::HeicSequence),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-sequence"), 492),
            ],
            Some(Subtype::Heic),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::HeifSequence),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-sequence"), 494),
            ],
            Some(Subtype::Heif),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 493),
                (intern_str::CaseInsensitive("f"), 495),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Hej2k),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2k"), 497),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Held),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 499),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 491),
                (intern_str::CaseInsensitive("i"), 496),
                (intern_str::CaseInsensitive("j"), 498),
                (intern_str::CaseInsensitive("l"), 500),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Hsj2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("j2"), 502),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Hta),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Html),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 505),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Http),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 507),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 504),
                (intern_str::CaseInsensitive("m"), 506),
                (intern_str::CaseInsensitive("t"), 508),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Hyperstudio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("perstudio"), 510),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 489),
                (intern_str::CaseInsensitive("e"), 501),
                (intern_str::CaseInsensitive("s"), 503),
                (intern_str::CaseInsensitive("t"), 509),
                (intern_str::CaseInsensitive("y"), 511),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IbeKeyRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ey-request"), 513),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IbePkgReply),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ly"), 515),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IbePpData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kg-rep"), 516),
                (intern_str::CaseInsensitive("p-data"), 517),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k"), 514),
                (intern_str::CaseInsensitive("p"), 518),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-"), 519),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ief),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 521),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Iges),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es"), 523),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ILbc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bc"), 525),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ImIscomposing),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("scomposing"), 527),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Imdn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-i"), 528),
                (intern_str::CaseInsensitive("dn"), 529),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IndexCmd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IndexObj),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IndexResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ponse"), 533),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IndexVnd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cmd"), 531),
                (intern_str::CaseInsensitive("obj"), 532),
                (intern_str::CaseInsensitive("res"), 534),
                (intern_str::CaseInsensitive("vnd"), 535),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 536),
            ],
            Some(Subtype::Index),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Inkml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dex"), 537),
                (intern_str::CaseInsensitive("kml"), 538),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Iotp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tp"), 540),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IpMrV25),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mr_v2.5"), 542),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ipfix),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ix"), 544),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ipp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 543),
                (intern_str::CaseInsensitive("f"), 545),
                (intern_str::CaseInsensitive("p"), 546),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::IsoSegment),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("segment"), 548),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Isup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o."), 549),
                (intern_str::CaseInsensitive("up"), 550),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Its),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 552),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 520),
                (intern_str::CaseInsensitive("e"), 522),
                (intern_str::CaseInsensitive("g"), 524),
                (intern_str::CaseInsensitive("l"), 526),
                (intern_str::CaseInsensitive("m"), 530),
                (intern_str::CaseInsensitive("n"), 539),
                (intern_str::CaseInsensitive("o"), 541),
                (intern_str::CaseInsensitive("p"), 547),
                (intern_str::CaseInsensitive("s"), 551),
                (intern_str::CaseInsensitive("t"), 553),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JavaArchive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("chive"), 555),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JavaSerializedObject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rialized-object"), 557),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JavaVm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ar"), 556),
                (intern_str::CaseInsensitive("se"), 558),
                (intern_str::CaseInsensitive("vm"), 559),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Javascript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cript"), 561),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 560),
                (intern_str::CaseInsensitive("s"), 562),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("va"), 563),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JcrCnd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r-cnd"), 565),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jf2feed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2feed"), 567),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jls),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 569),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jose),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("se"), 571),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jp2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jpeg2000),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2000"), 574),
            ],
            Some(Subtype::Jpeg),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 575),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jphc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 577),
            ],
            Some(Subtype::Jph),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jpm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jpx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 573),
                (intern_str::CaseInsensitive("e"), 576),
                (intern_str::CaseInsensitive("h"), 578),
                (intern_str::CaseInsensitive("m"), 579),
                (intern_str::CaseInsensitive("x"), 580),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jrd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 582),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jscalendar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lendar"), 584),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JsonPatch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ch"), 586),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JsonSeq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pat"), 587),
                (intern_str::CaseInsensitive("seq"), 588),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 589),
            ],
            Some(Subtype::Json),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ca"), 585),
                (intern_str::CaseInsensitive("on"), 590),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JwkSet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-set"), 592),
            ],
            Some(Subtype::Jwk),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jwt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k"), 593),
                (intern_str::CaseInsensitive("t"), 594),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jxl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JxrA),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::JxrS),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 597),
                (intern_str::CaseInsensitive("s"), 598),
            ],
            Some(Subtype::Jxr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jxsc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jxsi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jxss),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Jxsv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 600),
                (intern_str::CaseInsensitive("i"), 601),
                (intern_str::CaseInsensitive("s"), 602),
                (intern_str::CaseInsensitive("v"), 603),
            ],
            Some(Subtype::Jxs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 596),
                (intern_str::CaseInsensitive("r"), 599),
                (intern_str::CaseInsensitive("s"), 604),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 564),
                (intern_str::CaseInsensitive("c"), 566),
                (intern_str::CaseInsensitive("f"), 568),
                (intern_str::CaseInsensitive("l"), 570),
                (intern_str::CaseInsensitive("o"), 572),
                (intern_str::CaseInsensitive("p"), 581),
                (intern_str::CaseInsensitive("r"), 583),
                (intern_str::CaseInsensitive("s"), 591),
                (intern_str::CaseInsensitive("w"), 595),
                (intern_str::CaseInsensitive("x"), 605),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::KpmlRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::KpmlResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 608),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quest"), 607),
                (intern_str::CaseInsensitive("spons"), 609),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l-re"), 610),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ktx2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 612),
            ],
            Some(Subtype::Ktx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pm"), 611),
                (intern_str::CaseInsensitive("tx"), 613),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::L16),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("6"), 615),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::L20),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::L24),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 617),
                (intern_str::CaseInsensitive("4"), 618),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::L8),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ld),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Lgr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 622),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::LinkFormat),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nk-format"), 624),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::LoadControl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-control"), 626),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Lostsync),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sync"), 628),
            ],
            Some(Subtype::Lost),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ad"), 627),
                (intern_str::CaseInsensitive("st"), 629),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Lpc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Lpf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 631),
                (intern_str::CaseInsensitive("f"), 632),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Lxf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 634),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 616),
                (intern_str::CaseInsensitive("2"), 619),
                (intern_str::CaseInsensitive("8"), 620),
                (intern_str::CaseInsensitive("d"), 621),
                (intern_str::CaseInsensitive("g"), 623),
                (intern_str::CaseInsensitive("i"), 625),
                (intern_str::CaseInsensitive("o"), 630),
                (intern_str::CaseInsensitive("p"), 633),
                (intern_str::CaseInsensitive("x"), 635),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::M3g),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 637),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MacBinhex40),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MacCompactpro),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ro"), 640),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("binhex40"), 639),
                (intern_str::CaseInsensitive("compactp"), 641),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Macwriteii),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("riteii"), 643),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 642),
                (intern_str::CaseInsensitive("w"), 644),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mads),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 646),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Manifest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ifest"), 648),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Marcxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xml"), 650),
            ],
            Some(Subtype::Marc),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Markdown),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("down"), 652),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 651),
                (intern_str::CaseInsensitive("k"), 653),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mathematica),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("atica"), 655),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MathmlContent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MathmlPresentation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ation"), 658),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("content"), 657),
                (intern_str::CaseInsensitive("present"), 659),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 660),
            ],
            Some(Subtype::Mathml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("em"), 656),
                (intern_str::CaseInsensitive("ml"), 661),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 662),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 645),
                (intern_str::CaseInsensitive("d"), 647),
                (intern_str::CaseInsensitive("n"), 649),
                (intern_str::CaseInsensitive("r"), 654),
                (intern_str::CaseInsensitive("t"), 663),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsAssociatedProcedureDescription),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sociated-procedure-description"), 665),
            ],
            None,
            0,
            30,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsDeregister),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("register"), 667),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsEnvelope),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("velope"), 669),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsMskResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-response"), 671),
            ],
            Some(Subtype::MbmsMsk),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k"), 672),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsProtectionDescription),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("otection-description"), 674),
            ],
            None,
            0,
            20,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsReceptionReport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n-report"), 676),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsRegisterResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-response"), 678),
            ],
            Some(Subtype::MbmsRegister),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ceptio"), 677),
                (intern_str::CaseInsensitive("gister"), 679),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsSchedule),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hedule"), 681),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MbmsUserServiceDescription),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er-service-description"), 683),
            ],
            None,
            0,
            22,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("as"), 666),
                (intern_str::CaseInsensitive("de"), 668),
                (intern_str::CaseInsensitive("en"), 670),
                (intern_str::CaseInsensitive("ms"), 673),
                (intern_str::CaseInsensitive("pr"), 675),
                (intern_str::CaseInsensitive("re"), 680),
                (intern_str::CaseInsensitive("sc"), 682),
                (intern_str::CaseInsensitive("us"), 684),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 685),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mbox),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ms"), 686),
                (intern_str::CaseInsensitive("ox"), 687),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MediaPolicyDataset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dataset"), 689),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MediaControl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mediaservercontrol),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ntrol"), 692),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-policy-"), 690),
                (intern_str::CaseInsensitive("_control"), 691),
                (intern_str::CaseInsensitive("serverco"), 693),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ia"), 694),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Melp1200),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 696),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Melp2400),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 698),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Melp600),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("120"), 697),
                (intern_str::CaseInsensitive("240"), 699),
                (intern_str::CaseInsensitive("600"), 700),
            ],
            Some(Subtype::Melp),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 701),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MergePatch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ge-patch"), 703),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mesh),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 705),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Metalink4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("link4"), 707),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mets),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 708),
                (intern_str::CaseInsensitive("s"), 709),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 695),
                (intern_str::CaseInsensitive("l"), 702),
                (intern_str::CaseInsensitive("r"), 704),
                (intern_str::CaseInsensitive("s"), 706),
                (intern_str::CaseInsensitive("t"), 710),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mf4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("4"), 712),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mhas),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("as"), 714),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mikey),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("y"), 716),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mipc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MissingBlocks),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ing-blocks"), 719),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mixed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 721),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mizar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 723),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ke"), 717),
                (intern_str::CaseInsensitive("pc"), 718),
                (intern_str::CaseInsensitive("ss"), 720),
                (intern_str::CaseInsensitive("xe"), 722),
                (intern_str::CaseInsensitive("za"), 724),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mj2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 726),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MmtAei),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MmtUsd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aei"), 728),
                (intern_str::CaseInsensitive("usd"), 729),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t-"), 730),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MobileXmf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("le-xmf"), 732),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mods),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MossKeys),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MossSignature),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ature"), 736),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("keys"), 735),
                (intern_str::CaseInsensitive("sign"), 737),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MosskeyData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MosskeyRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("est"), 740),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("data"), 739),
                (intern_str::CaseInsensitive("requ"), 741),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ey-"), 742),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 738),
                (intern_str::CaseInsensitive("k"), 743),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bi"), 733),
                (intern_str::CaseInsensitive("ds"), 734),
                (intern_str::CaseInsensitive("ss"), 744),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mp1s),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 746),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mp21),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mp2p),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mp2t),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 748),
                (intern_str::CaseInsensitive("p"), 749),
                (intern_str::CaseInsensitive("t"), 750),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mp4aLatm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tm"), 752),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mp4vEs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a-la"), 753),
                (intern_str::CaseInsensitive("v-es"), 754),
            ],
            Some(Subtype::Mp4),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MpaRobust),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-robust"), 756),
            ],
            Some(Subtype::Mpa),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mpeg4Generic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eric"), 758),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mpeg4IodXmt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-xmt"), 760),
            ],
            Some(Subtype::Mpeg4Iod),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gen"), 759),
                (intern_str::CaseInsensitive("iod"), 761),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mpegurl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 763),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("4-"), 762),
                (intern_str::CaseInsensitive("ur"), 764),
            ],
            Some(Subtype::Mpeg),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 765),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mpv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 747),
                (intern_str::CaseInsensitive("2"), 751),
                (intern_str::CaseInsensitive("4"), 755),
                (intern_str::CaseInsensitive("a"), 757),
                (intern_str::CaseInsensitive("e"), 766),
                (intern_str::CaseInsensitive("v"), 767),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MrbConsumer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 769),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MrbPublish),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("consume"), 770),
                (intern_str::CaseInsensitive("publish"), 771),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b-"), 772),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Msaccess),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cess"), 774),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MscIvr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MscMixer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 777),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ivr"), 776),
                (intern_str::CaseInsensitive("mix"), 778),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Msword),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rd"), 780),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ac"), 775),
                (intern_str::CaseInsensitive("c-"), 779),
                (intern_str::CaseInsensitive("wo"), 781),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mtl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 783),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mud),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Multilingual),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::MultipartCore),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("re"), 787),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lingual"), 786),
                (intern_str::CaseInsensitive("part-co"), 788),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ti"), 789),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 785),
                (intern_str::CaseInsensitive("l"), 790),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Mxf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 792),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 638),
                (intern_str::CaseInsensitive("a"), 664),
                (intern_str::CaseInsensitive("b"), 688),
                (intern_str::CaseInsensitive("e"), 711),
                (intern_str::CaseInsensitive("f"), 713),
                (intern_str::CaseInsensitive("h"), 715),
                (intern_str::CaseInsensitive("i"), 725),
                (intern_str::CaseInsensitive("j"), 727),
                (intern_str::CaseInsensitive("m"), 731),
                (intern_str::CaseInsensitive("o"), 745),
                (intern_str::CaseInsensitive("p"), 768),
                (intern_str::CaseInsensitive("r"), 773),
                (intern_str::CaseInsensitive("s"), 782),
                (intern_str::CaseInsensitive("t"), 784),
                (intern_str::CaseInsensitive("u"), 791),
                (intern_str::CaseInsensitive("x"), 793),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::NQuads),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::NTriples),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es"), 796),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quads"), 795),
                (intern_str::CaseInsensitive("tripl"), 797),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::N3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Naplps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Nasdata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 801),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("plps"), 800),
                (intern_str::CaseInsensitive("sdat"), 802),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::NewsCheckgroups),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ps"), 804),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::NewsGroupinfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::NewsTransmission),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ion"), 807),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("checkgrou"), 805),
                (intern_str::CaseInsensitive("groupinfo"), 806),
                (intern_str::CaseInsensitive("transmiss"), 808),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ws-"), 809),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Nlsml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sml"), 811),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Node),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("de"), 813),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Nss),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 815),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Nv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 798),
                (intern_str::CaseInsensitive("3"), 799),
                (intern_str::CaseInsensitive("a"), 803),
                (intern_str::CaseInsensitive("e"), 810),
                (intern_str::CaseInsensitive("l"), 812),
                (intern_str::CaseInsensitive("o"), 814),
                (intern_str::CaseInsensitive("s"), 816),
                (intern_str::CaseInsensitive("v"), 817),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::OauthAuthzReq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uth-authz-req"), 819),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Obj),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ObliviousDnsMessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ivious-dns-message"), 822),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("j"), 821),
                (intern_str::CaseInsensitive("l"), 823),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::OcspRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::OcspResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 826),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quest"), 825),
                (intern_str::CaseInsensitive("spons"), 827),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::OctetStream),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tream"), 829),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sp-re"), 828),
                (intern_str::CaseInsensitive("tet-s"), 830),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Oda),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Odm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Odx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 832),
                (intern_str::CaseInsensitive("m"), 833),
                (intern_str::CaseInsensitive("x"), 834),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::OebpsPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bps-package"), 836),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ogg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 838),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Onenote),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("enote"), 840),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::OpcNodeset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nodeset"), 842),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Opus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-"), 843),
                (intern_str::CaseInsensitive("us"), 844),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Oscore),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("core"), 846),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Otf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 848),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Oxps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ps"), 850),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 820),
                (intern_str::CaseInsensitive("b"), 824),
                (intern_str::CaseInsensitive("c"), 831),
                (intern_str::CaseInsensitive("d"), 835),
                (intern_str::CaseInsensitive("e"), 837),
                (intern_str::CaseInsensitive("g"), 839),
                (intern_str::CaseInsensitive("n"), 841),
                (intern_str::CaseInsensitive("p"), 845),
                (intern_str::CaseInsensitive("s"), 847),
                (intern_str::CaseInsensitive("t"), 849),
                (intern_str::CaseInsensitive("x"), 851),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::P21),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::P2pOverlay),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-overlay"), 854),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 853),
                (intern_str::CaseInsensitive("p"), 855),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Parallel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Parameters),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rs"), 858),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("llel"), 857),
                (intern_str::CaseInsensitive("mete"), 859),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Parityfec),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tyfec"), 861),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Partial),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ial"), 863),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 860),
                (intern_str::CaseInsensitive("i"), 862),
                (intern_str::CaseInsensitive("t"), 864),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Passport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sport"), 866),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PatchOpsError),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ch-ops-error"), 868),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 865),
                (intern_str::CaseInsensitive("s"), 867),
                (intern_str::CaseInsensitive("t"), 869),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PcmaWb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wb"), 871),
            ],
            Some(Subtype::Pcma),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PcmuWb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wb"), 873),
            ],
            Some(Subtype::Pcmu),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 872),
                (intern_str::CaseInsensitive("u"), 874),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 875),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pdx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 877),
                (intern_str::CaseInsensitive("x"), 878),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PemCertificateChain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m-certificate-chain"), 880),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PgpEncrypted),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ypted"), 882),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PgpKeys),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PgpSignature),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ature"), 885),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("encr"), 883),
                (intern_str::CaseInsensitive("keys"), 884),
                (intern_str::CaseInsensitive("sign"), 886),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p-"), 887),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PicsRules),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-rules"), 889),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PidfDiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-diff"), 891),
            ],
            Some(Subtype::Pidf),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cs"), 890),
                (intern_str::CaseInsensitive("df"), 892),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pkcs10),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pkcs12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("0"), 894),
                (intern_str::CaseInsensitive("2"), 895),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pkcs7Mime),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pkcs7Signature),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ature"), 898),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mime"), 897),
                (intern_str::CaseInsensitive("sign"), 899),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 900),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pkcs8Encrypted),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-encrypted"), 902),
            ],
            Some(Subtype::Pkcs8),
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 896),
                (intern_str::CaseInsensitive("7"), 901),
                (intern_str::CaseInsensitive("8"), 903),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PkixAttrCert),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ttr-cert"), 905),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PkixCert),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 907),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PkixCrl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 908),
                (intern_str::CaseInsensitive("rl"), 909),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PkixPkipath),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kipath"), 911),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 906),
                (intern_str::CaseInsensitive("c"), 910),
                (intern_str::CaseInsensitive("p"), 912),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pkixcmp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mp"), 914),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 913),
                (intern_str::CaseInsensitive("c"), 915),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cs"), 904),
                (intern_str::CaseInsensitive("ix"), 916),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Plain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("in"), 918),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pls),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 919),
                (intern_str::CaseInsensitive("s"), 920),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Png),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 922),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PocSettings),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tings"), 924),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pointer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Postscript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ipt"), 927),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-set"), 925),
                (intern_str::CaseInsensitive("inter"), 926),
                (intern_str::CaseInsensitive("stscr"), 928),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PpspTracker),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sp-tracker"), 930),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Prc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Problem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ProvenanceNotation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-notation"), 934),
            ],
            Some(Subtype::Provenance),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nce"), 935),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("blem"), 933),
                (intern_str::CaseInsensitive("vena"), 936),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsAlvestrandTitraxSheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lvestrand.titrax-sheet"), 938),
            ],
            None,
            0,
            22,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsBtif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tif"), 940),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsCww),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsCyn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ww"), 942),
                (intern_str::CaseInsensitive("yn"), 943),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsFallensteinRst),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("allenstein.rst"), 945),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsHpub),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pub"), 947),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsLinesTag),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ines.tag"), 949),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsNprend),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("prend"), 951),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsPlucker),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cker"), 953),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsPropLogic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p.logic"), 955),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsPti),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lu"), 954),
                (intern_str::CaseInsensitive("ro"), 956),
                (intern_str::CaseInsensitive("ti"), 957),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsRdfXmlCrypt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("df-xml-crypt"), 959),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsSid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("id"), 961),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PrsXsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sf"), 963),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 939),
                (intern_str::CaseInsensitive("b"), 941),
                (intern_str::CaseInsensitive("c"), 944),
                (intern_str::CaseInsensitive("f"), 946),
                (intern_str::CaseInsensitive("h"), 948),
                (intern_str::CaseInsensitive("l"), 950),
                (intern_str::CaseInsensitive("n"), 952),
                (intern_str::CaseInsensitive("p"), 958),
                (intern_str::CaseInsensitive("r"), 960),
                (intern_str::CaseInsensitive("s"), 962),
                (intern_str::CaseInsensitive("x"), 964),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 965),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 932),
                (intern_str::CaseInsensitive("o"), 937),
                (intern_str::CaseInsensitive("s"), 966),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pskc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kc"), 968),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Pvd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 970),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::PwgRaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g-raster"), 972),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 856),
                (intern_str::CaseInsensitive("a"), 870),
                (intern_str::CaseInsensitive("c"), 876),
                (intern_str::CaseInsensitive("d"), 879),
                (intern_str::CaseInsensitive("e"), 881),
                (intern_str::CaseInsensitive("g"), 888),
                (intern_str::CaseInsensitive("i"), 893),
                (intern_str::CaseInsensitive("k"), 917),
                (intern_str::CaseInsensitive("l"), 921),
                (intern_str::CaseInsensitive("n"), 923),
                (intern_str::CaseInsensitive("o"), 929),
                (intern_str::CaseInsensitive("p"), 931),
                (intern_str::CaseInsensitive("r"), 967),
                (intern_str::CaseInsensitive("s"), 969),
                (intern_str::CaseInsensitive("v"), 971),
                (intern_str::CaseInsensitive("w"), 973),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Qcelp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 975),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Qsig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Quicktime),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ktime"), 978),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cel"), 976),
                (intern_str::CaseInsensitive("sig"), 977),
                (intern_str::CaseInsensitive("uic"), 979),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Raptorfec),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("torfec"), 981),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Raw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 982),
                (intern_str::CaseInsensitive("w"), 983),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rdap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 985),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 986),
                (intern_str::CaseInsensitive("f"), 987),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Red),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Reginfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("info"), 990),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Related),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RelaxNgCompactSyntax),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g-compact-syntax"), 993),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ted"), 992),
                (intern_str::CaseInsensitive("x-n"), 994),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 995),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RemotePrinting),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ote-printing"), 997),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Report),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Reputon),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 1000),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ort"), 999),
                (intern_str::CaseInsensitive("uto"), 1001),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ResourceListsDiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-diff"), 1003),
            ],
            Some(Subtype::ResourceLists),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ource-lists"), 1004),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 989),
                (intern_str::CaseInsensitive("g"), 991),
                (intern_str::CaseInsensitive("l"), 996),
                (intern_str::CaseInsensitive("m"), 998),
                (intern_str::CaseInsensitive("p"), 1002),
                (intern_str::CaseInsensitive("s"), 1005),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rfc822Headers),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-headers"), 1007),
            ],
            Some(Subtype::Rfc822),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("822"), 1008),
            ],
            Some(Subtype::Rfc),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1009),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Riscos),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("scos"), 1011),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rlmi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RlsServices),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("services"), 1014),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mi"), 1013),
                (intern_str::CaseInsensitive("s-"), 1015),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RouteApd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RouteSTsid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sid"), 1018),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RouteUsd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("apd"), 1017),
                (intern_str::CaseInsensitive("s-t"), 1019),
                (intern_str::CaseInsensitive("usd"), 1020),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ute-"), 1021),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RpkiGhostbusters),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("stbusters"), 1023),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RpkiManifest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ifest"), 1025),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RpkiPublication),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lication"), 1027),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RpkiRoa),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RpkiUpdown),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("own"), 1030),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gho"), 1024),
                (intern_str::CaseInsensitive("man"), 1026),
                (intern_str::CaseInsensitive("pub"), 1028),
                (intern_str::CaseInsensitive("roa"), 1029),
                (intern_str::CaseInsensitive("upd"), 1031),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ki-"), 1032),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rtf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RtpEncAescm128),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aescm128"), 1035),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::RtpMidi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("enc-"), 1036),
                (intern_str::CaseInsensitive("midi"), 1037),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rtploopback),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oopback"), 1039),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1038),
                (intern_str::CaseInsensitive("l"), 1040),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Rtx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1034),
                (intern_str::CaseInsensitive("p"), 1041),
                (intern_str::CaseInsensitive("x"), 1042),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 984),
                (intern_str::CaseInsensitive("d"), 988),
                (intern_str::CaseInsensitive("e"), 1006),
                (intern_str::CaseInsensitive("f"), 1010),
                (intern_str::CaseInsensitive("i"), 1012),
                (intern_str::CaseInsensitive("l"), 1016),
                (intern_str::CaseInsensitive("o"), 1022),
                (intern_str::CaseInsensitive("p"), 1033),
                (intern_str::CaseInsensitive("t"), 1043),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SHttp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("http"), 1045),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Samlassertion),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 1047),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Samlmetadata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("assertio"), 1048),
                (intern_str::CaseInsensitive("metadata"), 1049),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SarifExternalProperties),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-external-properties"), 1051),
            ],
            Some(Subtype::Sarif),
            0,
            20,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1052),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 1050),
                (intern_str::CaseInsensitive("ri"), 1053),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sbe),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sbml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1056),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1055),
                (intern_str::CaseInsensitive("m"), 1057),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Scaip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ip"), 1059),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Scim),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Scip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 1061),
                (intern_str::CaseInsensitive("p"), 1062),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ScvpCvRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ScvpCvResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1065),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quest"), 1064),
                (intern_str::CaseInsensitive("spons"), 1066),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ScvpVpRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::ScvpVpResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1069),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quest"), 1068),
                (intern_str::CaseInsensitive("spons"), 1070),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cv-re"), 1067),
                (intern_str::CaseInsensitive("vp-re"), 1071),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p-"), 1072),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1060),
                (intern_str::CaseInsensitive("i"), 1063),
                (intern_str::CaseInsensitive("v"), 1073),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sdp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1075),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Secevent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("event"), 1077),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SenmlEtch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 1079),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SenmlExi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tc"), 1080),
                (intern_str::CaseInsensitive("xi"), 1081),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-e"), 1082),
            ],
            Some(Subtype::Senml),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SensmlExi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-exi"), 1084),
            ],
            Some(Subtype::Sensml),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1085),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 1083),
                (intern_str::CaseInsensitive("sm"), 1086),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SepExi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-exi"), 1088),
            ],
            Some(Subtype::Sep),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SessionInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sion-info"), 1090),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SetPaymentInitiation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-initiation"), 1092),
            ],
            Some(Subtype::SetPayment),
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SetRegistrationInitiation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-initiation"), 1094),
            ],
            Some(Subtype::SetRegistration),
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ation"), 1095),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("payment"), 1093),
                (intern_str::CaseInsensitive("registr"), 1096),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1097),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1078),
                (intern_str::CaseInsensitive("n"), 1087),
                (intern_str::CaseInsensitive("p"), 1089),
                (intern_str::CaseInsensitive("s"), 1091),
                (intern_str::CaseInsensitive("t"), 1098),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sfnt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt"), 1100),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SgmlOpenCatalog),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-open-catalog"), 1102),
            ],
            Some(Subtype::Sgml),
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 1103),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Shaclc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("clc"), 1105),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Shex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 1107),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Shf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1106),
                (intern_str::CaseInsensitive("e"), 1108),
                (intern_str::CaseInsensitive("f"), 1109),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sieve),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ve"), 1111),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Signed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ned"), 1113),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SimpleFilter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SimpleMessageSummary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-summary"), 1116),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("filter"), 1115),
                (intern_str::CaseInsensitive("messag"), 1117),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SimpleSymbolContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ymbolcontainer"), 1119),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1118),
                (intern_str::CaseInsensitive("s"), 1120),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ple"), 1121),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sipc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sipfrag),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rag"), 1124),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1123),
                (intern_str::CaseInsensitive("f"), 1125),
            ],
            Some(Subtype::Sip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1112),
                (intern_str::CaseInsensitive("g"), 1114),
                (intern_str::CaseInsensitive("m"), 1122),
                (intern_str::CaseInsensitive("p"), 1126),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Slate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ate"), 1128),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Smil),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1130),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Smpte291),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Smpte292m),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 1133),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1132),
                (intern_str::CaseInsensitive("2"), 1134),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Smpte336m),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("6m"), 1136),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("29"), 1135),
                (intern_str::CaseInsensitive("33"), 1137),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("te"), 1138),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SmvQcp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("qcp"), 1140),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Smv0),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1141),
                (intern_str::CaseInsensitive("0"), 1142),
            ],
            Some(Subtype::Smv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1131),
                (intern_str::CaseInsensitive("p"), 1139),
                (intern_str::CaseInsensitive("v"), 1143),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Soap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Socket),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("et"), 1146),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sofa),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ap"), 1145),
                (intern_str::CaseInsensitive("ck"), 1147),
                (intern_str::CaseInsensitive("fa"), 1148),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SpMidi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("idi"), 1150),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SparqlQuery),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SparqlResults),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ts"), 1153),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("query"), 1152),
                (intern_str::CaseInsensitive("resul"), 1154),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ql-"), 1155),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Spdx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Speex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 1158),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::SpiritsEvent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("its-event"), 1160),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-m"), 1151),
                (intern_str::CaseInsensitive("ar"), 1156),
                (intern_str::CaseInsensitive("dx"), 1157),
                (intern_str::CaseInsensitive("ee"), 1159),
                (intern_str::CaseInsensitive("ir"), 1161),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sql),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1163),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Srgs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 1165),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Sru),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 1166),
                (intern_str::CaseInsensitive("u"), 1167),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ssml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 1169),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::StepXml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-xml"), 1171),
            ],
            Some(Subtype::Step),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1172),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Stix),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 1174),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Stl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Strings),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ings"), 1177),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1173),
                (intern_str::CaseInsensitive("i"), 1175),
                (intern_str::CaseInsensitive("l"), 1176),
                (intern_str::CaseInsensitive("r"), 1178),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Svg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 1180),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Swid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("id"), 1182),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1046),
                (intern_str::CaseInsensitive("a"), 1054),
                (intern_str::CaseInsensitive("b"), 1058),
                (intern_str::CaseInsensitive("c"), 1074),
                (intern_str::CaseInsensitive("d"), 1076),
                (intern_str::CaseInsensitive("e"), 1099),
                (intern_str::CaseInsensitive("f"), 1101),
                (intern_str::CaseInsensitive("g"), 1104),
                (intern_str::CaseInsensitive("h"), 1110),
                (intern_str::CaseInsensitive("i"), 1127),
                (intern_str::CaseInsensitive("l"), 1129),
                (intern_str::CaseInsensitive("m"), 1144),
                (intern_str::CaseInsensitive("o"), 1149),
                (intern_str::CaseInsensitive("p"), 1162),
                (intern_str::CaseInsensitive("q"), 1164),
                (intern_str::CaseInsensitive("r"), 1168),
                (intern_str::CaseInsensitive("s"), 1170),
                (intern_str::CaseInsensitive("t"), 1179),
                (intern_str::CaseInsensitive("v"), 1181),
                (intern_str::CaseInsensitive("w"), 1183),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::T140c),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1185),
            ],
            Some(Subtype::T140),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("40"), 1186),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::T38),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("8"), 1188),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TabSeparatedValues),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eparated-values"), 1190),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampApexUpdateConfirm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-confirm"), 1192),
            ],
            Some(Subtype::TampApexUpdate),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pex-update"), 1193),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampCommunityUpdateConfirm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-confirm"), 1195),
            ],
            Some(Subtype::TampCommunityUpdate),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ommunity-update"), 1196),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampError),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rror"), 1198),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampSequenceAdjustConfirm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-confirm"), 1200),
            ],
            Some(Subtype::TampSequenceAdjust),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-adjust"), 1201),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampStatusQuery),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampStatusResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nse"), 1204),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("query"), 1203),
                (intern_str::CaseInsensitive("respo"), 1205),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("equenc"), 1202),
                (intern_str::CaseInsensitive("tatus-"), 1206),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TampUpdateConfirm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-confirm"), 1208),
            ],
            Some(Subtype::TampUpdate),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pdate"), 1209),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1194),
                (intern_str::CaseInsensitive("c"), 1197),
                (intern_str::CaseInsensitive("e"), 1199),
                (intern_str::CaseInsensitive("s"), 1207),
                (intern_str::CaseInsensitive("u"), 1210),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Taxii),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b-s"), 1191),
                (intern_str::CaseInsensitive("mp-"), 1211),
                (intern_str::CaseInsensitive("xii"), 1212),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Td),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Tei),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TelephoneEvent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ephone-event"), 1216),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TetraAcelpBb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("_bb"), 1218),
            ],
            Some(Subtype::TetraAcelp),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lp"), 1219),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TetraIsi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ace"), 1220),
                (intern_str::CaseInsensitive("isi"), 1221),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ra_"), 1222),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Texmacs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("macs"), 1224),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1215),
                (intern_str::CaseInsensitive("l"), 1217),
                (intern_str::CaseInsensitive("t"), 1223),
                (intern_str::CaseInsensitive("x"), 1225),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Thraud),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("raud"), 1227),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TiffFx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-fx"), 1229),
            ],
            Some(Subtype::Tiff),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TimestampQuery),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TimestampReply),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("query"), 1231),
                (intern_str::CaseInsensitive("reply"), 1232),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TimestampedData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d-data"), 1234),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1233),
                (intern_str::CaseInsensitive("e"), 1235),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("stamp"), 1236),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ff"), 1230),
                (intern_str::CaseInsensitive("me"), 1237),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Tlsrpt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("srpt"), 1239),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Tnauthlist),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("authlist"), 1241),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TokenIntrospection),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n-introspection"), 1243),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Tone),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ke"), 1244),
                (intern_str::CaseInsensitive("ne"), 1245),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TrackingStatus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cking-status"), 1247),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TrickleIceSdpfrag),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kle-ice-sdpfrag"), 1249),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Trig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1250),
                (intern_str::CaseInsensitive("g"), 1251),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Troff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ff"), 1253),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1248),
                (intern_str::CaseInsensitive("i"), 1252),
                (intern_str::CaseInsensitive("o"), 1254),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Tsvcis),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vcis"), 1256),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ttf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ttml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1259),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1258),
                (intern_str::CaseInsensitive("m"), 1260),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Turtle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rtle"), 1262),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TveTrigger),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-trigger"), 1264),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::TzifLeap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-leap"), 1266),
            ],
            Some(Subtype::Tzif),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("if"), 1267),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1187),
                (intern_str::CaseInsensitive("3"), 1189),
                (intern_str::CaseInsensitive("a"), 1213),
                (intern_str::CaseInsensitive("d"), 1214),
                (intern_str::CaseInsensitive("e"), 1226),
                (intern_str::CaseInsensitive("h"), 1228),
                (intern_str::CaseInsensitive("i"), 1238),
                (intern_str::CaseInsensitive("l"), 1240),
                (intern_str::CaseInsensitive("n"), 1242),
                (intern_str::CaseInsensitive("o"), 1246),
                (intern_str::CaseInsensitive("r"), 1255),
                (intern_str::CaseInsensitive("s"), 1257),
                (intern_str::CaseInsensitive("t"), 1261),
                (intern_str::CaseInsensitive("u"), 1263),
                (intern_str::CaseInsensitive("v"), 1265),
                (intern_str::CaseInsensitive("z"), 1268),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::U3d),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1270),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Uemclip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mclip"), 1272),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Ulpfec),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pfec"), 1274),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::UrcGrpsheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::UrcRessheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::UrcTargetdesc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sc"), 1278),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::UrcUisocketdesc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("desc"), 1280),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("grpsheet"), 1276),
                (intern_str::CaseInsensitive("ressheet"), 1277),
                (intern_str::CaseInsensitive("targetde"), 1279),
                (intern_str::CaseInsensitive("uisocket"), 1281),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::UriList),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("list"), 1283),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-"), 1282),
                (intern_str::CaseInsensitive("i-"), 1284),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Usac),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ac"), 1286),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 1271),
                (intern_str::CaseInsensitive("e"), 1273),
                (intern_str::CaseInsensitive("l"), 1275),
                (intern_str::CaseInsensitive("r"), 1285),
                (intern_str::CaseInsensitive("s"), 1287),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vc1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vc2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vcard),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rd"), 1291),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1289),
                (intern_str::CaseInsensitive("2"), 1290),
                (intern_str::CaseInsensitive("a"), 1292),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vdvi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vi"), 1294),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vemmi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mmi"), 1296),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VmrWb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r-wb"), 1298),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd1000mindsDecisionModel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("000minds.decision-model"), 1300),
            ],
            None,
            0,
            23,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppProsePc3ch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-pc3ch"), 1302),
            ],
            Some(Subtype::Vnd3gppProse),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppV2xLocalServiceInformation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ocal-service-information"), 1304),
            ],
            None,
            0,
            24,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("prose"), 1303),
                (intern_str::CaseInsensitive("v2x-l"), 1305),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gpp5gnas),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gnas"), 1307),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppAccessTransferEvents),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ccess-transfer-events"), 1309),
            ],
            None,
            0,
            21,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppBsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sf"), 1311),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppGmop),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppGtpc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mop"), 1313),
                (intern_str::CaseInsensitive("tpc"), 1314),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppInterworkingData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rworking-data"), 1316),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppIufp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nte"), 1317),
                (intern_str::CaseInsensitive("ufp"), 1318),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppLpp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pp"), 1320),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcSignallingEar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nalling-ear"), 1322),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataAffiliationCommand),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ffiliation-command"), 1324),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfo"), 1326),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataPayload),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ayload"), 1328),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataServiceConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfig"), 1330),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataSignalling),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ervice-co"), 1331),
                (intern_str::CaseInsensitive("ignalling"), 1332),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataUeConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcdataUserProfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ile"), 1335),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-config"), 1334),
                (intern_str::CaseInsensitive("ser-prof"), 1336),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1325),
                (intern_str::CaseInsensitive("i"), 1327),
                (intern_str::CaseInsensitive("p"), 1329),
                (intern_str::CaseInsensitive("s"), 1333),
                (intern_str::CaseInsensitive("u"), 1337),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1338),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttAffiliationCommand),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ffiliation-command"), 1340),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttFloorRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("loor-request"), 1342),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfo"), 1344),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttLocationInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ocation-info"), 1346),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttMbmsUsageInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bms-usage-info"), 1348),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttServiceConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-config"), 1350),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttSigned),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ervic"), 1351),
                (intern_str::CaseInsensitive("igned"), 1352),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttUeConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttUeInitConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("onfig"), 1355),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("config"), 1354),
                (intern_str::CaseInsensitive("init-c"), 1356),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcpttUserProfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r-profile"), 1358),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-"), 1357),
                (intern_str::CaseInsensitive("se"), 1359),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1341),
                (intern_str::CaseInsensitive("f"), 1343),
                (intern_str::CaseInsensitive("i"), 1345),
                (intern_str::CaseInsensitive("l"), 1347),
                (intern_str::CaseInsensitive("m"), 1349),
                (intern_str::CaseInsensitive("s"), 1353),
                (intern_str::CaseInsensitive("u"), 1360),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoAffiliationCommand),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ffiliation-command"), 1362),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfo"), 1364),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoLocationInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ocation-info"), 1366),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoMbmsUsageInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bms-usage-info"), 1368),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoServiceConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ervice-config"), 1370),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoTransmissionRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ransmission-request"), 1372),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoUeConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMcvideoUserProfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ile"), 1375),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-config"), 1374),
                (intern_str::CaseInsensitive("ser-prof"), 1376),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1363),
                (intern_str::CaseInsensitive("i"), 1365),
                (intern_str::CaseInsensitive("l"), 1367),
                (intern_str::CaseInsensitive("m"), 1369),
                (intern_str::CaseInsensitive("s"), 1371),
                (intern_str::CaseInsensitive("t"), 1373),
                (intern_str::CaseInsensitive("u"), 1377),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o-"), 1378),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-sig"), 1323),
                (intern_str::CaseInsensitive("data"), 1339),
                (intern_str::CaseInsensitive("ptt-"), 1361),
                (intern_str::CaseInsensitive("vide"), 1379),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppMidCall),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d-call"), 1381),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1380),
                (intern_str::CaseInsensitive("i"), 1382),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppNgap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gap"), 1384),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppPfcp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppPicBwLarge),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ge"), 1387),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppPicBwSmall),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ll"), 1389),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppPicBwVar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lar"), 1388),
                (intern_str::CaseInsensitive("sma"), 1390),
                (intern_str::CaseInsensitive("var"), 1391),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bw-"), 1392),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fcp"), 1386),
                (intern_str::CaseInsensitive("ic-"), 1393),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppS1ap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1395),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppSms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppSrvccExt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppSrvccInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 1399),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ext"), 1398),
                (intern_str::CaseInsensitive("inf"), 1400),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cc-"), 1401),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppStateAndEventInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("te-and-event-info"), 1403),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1a"), 1396),
                (intern_str::CaseInsensitive("ms"), 1397),
                (intern_str::CaseInsensitive("rv"), 1402),
                (intern_str::CaseInsensitive("ta"), 1404),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gppUssd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ssd"), 1406),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("5"), 1308),
                (intern_str::CaseInsensitive("a"), 1310),
                (intern_str::CaseInsensitive("b"), 1312),
                (intern_str::CaseInsensitive("g"), 1315),
                (intern_str::CaseInsensitive("i"), 1319),
                (intern_str::CaseInsensitive("l"), 1321),
                (intern_str::CaseInsensitive("m"), 1383),
                (intern_str::CaseInsensitive("n"), 1385),
                (intern_str::CaseInsensitive("p"), 1394),
                (intern_str::CaseInsensitive("s"), 1405),
                (intern_str::CaseInsensitive("u"), 1407),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gpp2Bcmcsinfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("csinfo"), 1409),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gpp2Sms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3gpp2Tcap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1412),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bcm"), 1410),
                (intern_str::CaseInsensitive("sms"), 1411),
                (intern_str::CaseInsensitive("tca"), 1413),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 1414),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1306),
                (intern_str::CaseInsensitive("."), 1408),
                (intern_str::CaseInsensitive("2"), 1415),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3lightssoftwareImagescal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("htssoftware.imagescal"), 1417),
            ],
            None,
            0,
            21,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd3mPostItNotes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ost-it-notes"), 1419),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gpp"), 1416),
                (intern_str::CaseInsensitive("lig"), 1418),
                (intern_str::CaseInsensitive("m.p"), 1420),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vnd4sb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sb"), 1422),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAbc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1424),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAccpacSimplyAso),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAccpacSimplyImp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aso"), 1426),
                (intern_str::CaseInsensitive("imp"), 1427),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c.simply."), 1428),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAcucobol),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1430),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAcucorp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bo"), 1431),
                (intern_str::CaseInsensitive("rp"), 1432),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cpa"), 1429),
                (intern_str::CaseInsensitive("uco"), 1433),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobeFlashMovie),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sh.movie"), 1435),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobeFormscentralFcdt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mscentral.fcdt"), 1437),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobeFxp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("la"), 1436),
                (intern_str::CaseInsensitive("or"), 1438),
                (intern_str::CaseInsensitive("xp"), 1439),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobePartialUpload),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pload"), 1441),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobePhotoshop),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("artial-u"), 1442),
                (intern_str::CaseInsensitive("hotoshop"), 1443),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobeXdp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAdobeXfdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1446),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dp"), 1445),
                (intern_str::CaseInsensitive("fd"), 1447),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1440),
                (intern_str::CaseInsensitive("p"), 1444),
                (intern_str::CaseInsensitive("x"), 1448),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("obe."), 1449),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAetherImp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ther.imp"), 1451),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcAfplinedataPagedef),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-pagedef"), 1453),
            ],
            Some(Subtype::VndAfpcAfplinedata),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nedata"), 1454),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcCmocaCmresource),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-cmresource"), 1456),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcFocaCharset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("set"), 1458),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcFocaCodedfont),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1460),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcFocaCodepage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dfon"), 1461),
                (intern_str::CaseInsensitive("page"), 1462),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("har"), 1459),
                (intern_str::CaseInsensitive("ode"), 1463),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1464),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcModcaFormdef),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ormdef"), 1466),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcModcaMediummap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ediummap"), 1468),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcModcaObjectcontainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ontainer"), 1470),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcModcaOverlay),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bjectc"), 1471),
                (intern_str::CaseInsensitive("verlay"), 1472),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAfpcModcaPagesegment),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("agesegment"), 1474),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1467),
                (intern_str::CaseInsensitive("m"), 1469),
                (intern_str::CaseInsensitive("o"), 1473),
                (intern_str::CaseInsensitive("p"), 1475),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1476),
            ],
            Some(Subtype::VndAfpcModca),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("afpli"), 1455),
                (intern_str::CaseInsensitive("cmoca"), 1457),
                (intern_str::CaseInsensitive("foca-"), 1465),
                (intern_str::CaseInsensitive("modca"), 1477),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pc."), 1478),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAge),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1480),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAhBarcode),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAheadSpace),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1483),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-barcode"), 1482),
                (intern_str::CaseInsensitive("ead.spac"), 1484),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAirzipAcceleratorAzv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("zv"), 1486),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAirzipFilesecureAzf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAirzipFilesecureAzs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1488),
                (intern_str::CaseInsensitive("s"), 1489),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("accelerator.a"), 1487),
                (intern_str::CaseInsensitive("filesecure.az"), 1490),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rzip."), 1491),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAmadeus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAmazonMobi8Ebook),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mobi8-ebook"), 1494),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("deus"), 1493),
                (intern_str::CaseInsensitive("zon."), 1495),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAmericandynamicsAcc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ricandynamics.acc"), 1497),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAmigaAmi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ga.ami"), 1499),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAmundsenMaze),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ndsen.maze"), 1501),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1496),
                (intern_str::CaseInsensitive("e"), 1498),
                (intern_str::CaseInsensitive("i"), 1500),
                (intern_str::CaseInsensitive("u"), 1502),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAndroidOta),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAndroidPackageArchive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kage-archive"), 1505),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ota"), 1504),
                (intern_str::CaseInsensitive("pac"), 1506),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oid."), 1507),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAnki),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAnserWebCertificateIssueInitiation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ion"), 1510),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAnserWebFundsTransferInitiation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("certificate-issue-initiat"), 1511),
                (intern_str::CaseInsensitive("funds-transfer-initiation"), 1512),
            ],
            None,
            0,
            25,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r-web-"), 1513),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAntixGameComponent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x.game-component"), 1515),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dr"), 1508),
                (intern_str::CaseInsensitive("ki"), 1509),
                (intern_str::CaseInsensitive("se"), 1514),
                (intern_str::CaseInsensitive("ti"), 1516),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApacheArrowFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApacheArrowStream),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("am"), 1519),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("file"), 1518),
                (intern_str::CaseInsensitive("stre"), 1520),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApacheThriftBinary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ry"), 1522),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApacheThriftCompact),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("act"), 1524),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApacheThriftJson),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bina"), 1523),
                (intern_str::CaseInsensitive("comp"), 1525),
                (intern_str::CaseInsensitive("json"), 1526),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 1527),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("arrow."), 1521),
                (intern_str::CaseInsensitive("thrift"), 1528),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("che."), 1529),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAplextorWarrp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("extor.warrp"), 1532),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApothekendeReservation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("thekende.reservation"), 1534),
            ],
            None,
            0,
            20,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAppleInstaller),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ller"), 1536),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAppleKeynote),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("te"), 1538),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAppleMpegurl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rl"), 1540),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAppleNumbers),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rs"), 1542),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndApplePages),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("insta"), 1537),
                (intern_str::CaseInsensitive("keyno"), 1539),
                (intern_str::CaseInsensitive("mpegu"), 1541),
                (intern_str::CaseInsensitive("numbe"), 1543),
                (intern_str::CaseInsensitive("pages"), 1544),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("le."), 1545),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1530),
                (intern_str::CaseInsensitive("i"), 1531),
                (intern_str::CaseInsensitive("l"), 1533),
                (intern_str::CaseInsensitive("o"), 1535),
                (intern_str::CaseInsensitive("p"), 1546),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAristanetworksSwi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("stanetworks.swi"), 1548),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndArtisan),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndArtsquare),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("re"), 1551),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("isan"), 1550),
                (intern_str::CaseInsensitive("squa"), 1552),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1549),
                (intern_str::CaseInsensitive("t"), 1553),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAsciiArt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAstraeaSoftwareIota),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oftware.iota"), 1556),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cii-art"), 1555),
                (intern_str::CaseInsensitive("traea-s"), 1557),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAudiograph),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ph"), 1559),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAudiokoz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gra"), 1560),
                (intern_str::CaseInsensitive("koz"), 1561),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAutopackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ackage"), 1563),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dio"), 1562),
                (intern_str::CaseInsensitive("top"), 1564),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAvalon),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndAvistar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 1567),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("alon"), 1566),
                (intern_str::CaseInsensitive("ista"), 1568),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 1425),
                (intern_str::CaseInsensitive("c"), 1434),
                (intern_str::CaseInsensitive("d"), 1450),
                (intern_str::CaseInsensitive("e"), 1452),
                (intern_str::CaseInsensitive("f"), 1479),
                (intern_str::CaseInsensitive("g"), 1481),
                (intern_str::CaseInsensitive("h"), 1485),
                (intern_str::CaseInsensitive("i"), 1492),
                (intern_str::CaseInsensitive("m"), 1503),
                (intern_str::CaseInsensitive("n"), 1517),
                (intern_str::CaseInsensitive("p"), 1547),
                (intern_str::CaseInsensitive("r"), 1554),
                (intern_str::CaseInsensitive("s"), 1558),
                (intern_str::CaseInsensitive("u"), 1565),
                (intern_str::CaseInsensitive("v"), 1569),
            ],
            Some(Subtype::VndA),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBalsamiqBmml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBalsamiqBmpr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 1571),
                (intern_str::CaseInsensitive("pr"), 1572),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBananaAccounting),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("unting"), 1574),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lsamiq.bm"), 1573),
                (intern_str::CaseInsensitive("nana-acco"), 1575),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBbfUspError),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("or"), 1577),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBbfUspMsg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("err"), 1578),
                (intern_str::CaseInsensitive("msg"), 1579),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f.usp."), 1580),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBekitzurStech),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kitzur-stech"), 1582),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBintMedContent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ent"), 1584),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBintMedPlus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cont"), 1585),
                (intern_str::CaseInsensitive("plus"), 1586),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBiopaxRdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1588),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt.med-"), 1587),
                (intern_str::CaseInsensitive("opax.rd"), 1589),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBlinkIdbValueWrapper),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k-idb-value-wrapper"), 1591),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBlueiceMultipass),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ltipass"), 1593),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBluetoothEpOob),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBluetoothLeOob),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ep.oob"), 1595),
                (intern_str::CaseInsensitive("le.oob"), 1596),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ice.mu"), 1594),
                (intern_str::CaseInsensitive("tooth."), 1597),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("in"), 1592),
                (intern_str::CaseInsensitive("ue"), 1598),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBmi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1600),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBpf3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 1602),
            ],
            Some(Subtype::VndBpf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1603),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndBusinessobjects),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sinessobjects"), 1605),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndByuUapi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("u.uapi"), 1607),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1576),
                (intern_str::CaseInsensitive("b"), 1581),
                (intern_str::CaseInsensitive("e"), 1583),
                (intern_str::CaseInsensitive("i"), 1590),
                (intern_str::CaseInsensitive("l"), 1599),
                (intern_str::CaseInsensitive("m"), 1601),
                (intern_str::CaseInsensitive("p"), 1604),
                (intern_str::CaseInsensitive("u"), 1606),
                (intern_str::CaseInsensitive("y"), 1608),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCabJscript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cript"), 1610),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCanonCpdl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCanonLips),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cpdl"), 1612),
                (intern_str::CaseInsensitive("lips"), 1613),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCapasystemsPg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("stems-pg"), 1615),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b-js"), 1611),
                (intern_str::CaseInsensitive("non-"), 1614),
                (intern_str::CaseInsensitive("pasy"), 1616),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCctv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tv"), 1618),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCelp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1620),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCendioThinlincClientconf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCenturySystemsTcpStream),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dio.thinlinc.clientconf"), 1622),
                (intern_str::CaseInsensitive("tury-systems.tcp_stream"), 1623),
            ],
            None,
            0,
            23,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1621),
                (intern_str::CaseInsensitive("n"), 1624),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndChemdraw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndChessPgn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 1627),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mdraw"), 1626),
                (intern_str::CaseInsensitive("ss-pg"), 1628),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndChipnutsKaraokeMmd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pnuts.karaoke-mmd"), 1630),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1629),
                (intern_str::CaseInsensitive("i"), 1631),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCiedi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCinderella),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rella"), 1634),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCirpackIsdnExt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ck.isdn-ext"), 1636),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCiscoNse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".nse"), 1638),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCitationstylesStyle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ionstyles.style"), 1640),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("edi"), 1633),
                (intern_str::CaseInsensitive("nde"), 1635),
                (intern_str::CaseInsensitive("rpa"), 1637),
                (intern_str::CaseInsensitive("sco"), 1639),
                (intern_str::CaseInsensitive("tat"), 1641),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndClaymore),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ymore"), 1643),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCloantoRp9),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndClonkC4group),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("up"), 1646),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("anto.rp9"), 1645),
                (intern_str::CaseInsensitive("nk.c4gro"), 1647),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCluetrustCartomobileConfigPkg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-pkg"), 1649),
            ],
            Some(Subtype::VndCluetrustCartomobileConfig),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("etrust.cartomobile-config"), 1650),
            ],
            None,
            0,
            25,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1644),
                (intern_str::CaseInsensitive("o"), 1648),
                (intern_str::CaseInsensitive("u"), 1651),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCmlesRadioEvents),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("les.radio-events"), 1653),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCnsAnp1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1655),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCnsInf1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCnsInf2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1657),
                (intern_str::CaseInsensitive("2"), 1658),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("anp"), 1656),
                (intern_str::CaseInsensitive("inf"), 1659),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s."), 1660),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCoffeescript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("feescript"), 1662),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCollabioXodocumentsDocumentTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 1664),
            ],
            Some(Subtype::VndCollabioXodocumentsDocument),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCollabioXodocumentsPresentationTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 1666),
            ],
            Some(Subtype::VndCollabioXodocumentsPresentation),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tion"), 1667),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCollabioXodocumentsSpreadsheetTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 1669),
            ],
            Some(Subtype::VndCollabioXodocumentsSpreadsheet),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eet"), 1670),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("document"), 1665),
                (intern_str::CaseInsensitive("presenta"), 1668),
                (intern_str::CaseInsensitive("spreadsh"), 1671),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o.xodocuments."), 1672),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCollada),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bi"), 1673),
                (intern_str::CaseInsensitive("da"), 1674),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCollectionDoc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCollectionNext),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1677),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("doc"), 1676),
                (intern_str::CaseInsensitive("nex"), 1678),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 1679),
            ],
            Some(Subtype::VndCollection),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ction"), 1680),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1675),
                (intern_str::CaseInsensitive("e"), 1681),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 1682),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndComicbookRar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-rar"), 1684),
            ],
            Some(Subtype::VndComicbook),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cbook"), 1685),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCommerceBattelle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ttelle"), 1687),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCommonspace),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("erce-ba"), 1688),
                (intern_str::CaseInsensitive("onspace"), 1689),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1686),
                (intern_str::CaseInsensitive("m"), 1690),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndContactCmsg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tact.cmsg"), 1692),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCoreosIgnition),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eos.ignition"), 1694),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCosmocaller),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mocaller"), 1696),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1663),
                (intern_str::CaseInsensitive("l"), 1683),
                (intern_str::CaseInsensitive("m"), 1691),
                (intern_str::CaseInsensitive("n"), 1693),
                (intern_str::CaseInsensitive("r"), 1695),
                (intern_str::CaseInsensitive("s"), 1697),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCrickClickerKeyboard),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1699),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCrickClickerPalette),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCrickClickerTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1702),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCrickClickerWordbank),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k"), 1704),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("keyboar"), 1700),
                (intern_str::CaseInsensitive("palette"), 1701),
                (intern_str::CaseInsensitive("templat"), 1703),
                (intern_str::CaseInsensitive("wordban"), 1705),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 1706),
            ],
            Some(Subtype::VndCrickClicker),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCriticaltoolsWbs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".wbs"), 1708),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ck.clicker"), 1707),
                (intern_str::CaseInsensitive("ticaltools"), 1709),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCryptiiPipe),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i.pipe"), 1711),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCryptoShadeFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-file"), 1713),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCryptomatorEncrypted),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pted"), 1715),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCryptomatorVault),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("encry"), 1716),
                (intern_str::CaseInsensitive("vault"), 1717),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-shade"), 1714),
                (intern_str::CaseInsensitive("mator."), 1718),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1712),
                (intern_str::CaseInsensitive("o"), 1719),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pt"), 1720),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1710),
                (intern_str::CaseInsensitive("y"), 1721),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCtcPosml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 1723),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCtctWs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-pos"), 1724),
                (intern_str::CaseInsensitive("t.ws"), 1725),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1726),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCupsPdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCupsPostscript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tscript"), 1729),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCupsPpd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("df"), 1728),
                (intern_str::CaseInsensitive("os"), 1730),
                (intern_str::CaseInsensitive("pd"), 1731),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCupsRaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ter"), 1733),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCupsRaw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 1734),
                (intern_str::CaseInsensitive("w"), 1735),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1736),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1732),
                (intern_str::CaseInsensitive("r"), 1737),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 1738),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCurl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ps"), 1739),
                (intern_str::CaseInsensitive("rl"), 1740),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCyanDeanRoot),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ean.root"), 1742),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCybank),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndCyclonedx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("edx"), 1745),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("an.d"), 1743),
                (intern_str::CaseInsensitive("bank"), 1744),
                (intern_str::CaseInsensitive("clon"), 1746),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1617),
                (intern_str::CaseInsensitive("c"), 1619),
                (intern_str::CaseInsensitive("e"), 1625),
                (intern_str::CaseInsensitive("h"), 1632),
                (intern_str::CaseInsensitive("i"), 1642),
                (intern_str::CaseInsensitive("l"), 1652),
                (intern_str::CaseInsensitive("m"), 1654),
                (intern_str::CaseInsensitive("n"), 1661),
                (intern_str::CaseInsensitive("o"), 1698),
                (intern_str::CaseInsensitive("r"), 1722),
                (intern_str::CaseInsensitive("t"), 1727),
                (intern_str::CaseInsensitive("u"), 1741),
                (intern_str::CaseInsensitive("y"), 1747),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndD2lCoursepackage1p0),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l.coursepackage1p0"), 1749),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndD3mDataset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndD3mProblem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dataset"), 1751),
                (intern_str::CaseInsensitive("problem"), 1752),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m-"), 1753),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDart),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDataVisionRdz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".rdz"), 1756),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDatapackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDataresource),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1759),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-vision"), 1757),
                (intern_str::CaseInsensitive("package"), 1758),
                (intern_str::CaseInsensitive("resourc"), 1760),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rt"), 1755),
                (intern_str::CaseInsensitive("ta"), 1761),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDbf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1763),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDebianBinaryPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ckage"), 1765),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDebianCopyright),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("binary-pa"), 1766),
                (intern_str::CaseInsensitive("copyright"), 1767),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n."), 1768),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceAudio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("udio"), 1770),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ata"), 1772),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceGraphic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("raphic"), 1774),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceHd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1776),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceMobile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ile"), 1778),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceMp4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ob"), 1779),
                (intern_str::CaseInsensitive("p4"), 1780),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDecePd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1782),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceSd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1784),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceTtml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tml"), 1786),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceUnspecified),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nspecified"), 1788),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceVideo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ideo"), 1790),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDeceZip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ip"), 1792),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1771),
                (intern_str::CaseInsensitive("d"), 1773),
                (intern_str::CaseInsensitive("g"), 1775),
                (intern_str::CaseInsensitive("h"), 1777),
                (intern_str::CaseInsensitive("m"), 1781),
                (intern_str::CaseInsensitive("p"), 1783),
                (intern_str::CaseInsensitive("s"), 1785),
                (intern_str::CaseInsensitive("t"), 1787),
                (intern_str::CaseInsensitive("u"), 1789),
                (intern_str::CaseInsensitive("v"), 1791),
                (intern_str::CaseInsensitive("z"), 1793),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDenovoFcselayoutLink),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o.fcselayout-link"), 1795),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDesmumeMovie),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("me.movie"), 1797),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bia"), 1769),
                (intern_str::CaseInsensitive("ce."), 1794),
                (intern_str::CaseInsensitive("nov"), 1796),
                (intern_str::CaseInsensitive("smu"), 1798),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDigitalWinds),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ital-winds"), 1800),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDirBiPlateDlNosuffix),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-dl-nosuffix"), 1802),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDirectvMpegTts),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-tts"), 1804),
            ],
            Some(Subtype::VndDirectvMpeg),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-bi.plate"), 1803),
                (intern_str::CaseInsensitive("ectv.mpeg"), 1805),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 1801),
                (intern_str::CaseInsensitive("r"), 1806),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDjvu),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vu"), 1808),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDlnaAdts),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDlnaMpegTts),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-tts"), 1811),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("adts"), 1810),
                (intern_str::CaseInsensitive("mpeg"), 1812),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("na."), 1813),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDmDelegation),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDmClientScript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1816),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".delegation"), 1815),
                (intern_str::CaseInsensitive("clientscrip"), 1817),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDna),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1819),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDocument),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt"), 1821),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyHeaac1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyHeaac2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1823),
                (intern_str::CaseInsensitive("2"), 1824),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eaac."), 1825),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyMlp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyMobile1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyMobile2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1828),
                (intern_str::CaseInsensitive("2"), 1829),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ile."), 1830),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyMps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lp"), 1827),
                (intern_str::CaseInsensitive("ob"), 1831),
                (intern_str::CaseInsensitive("ps"), 1832),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyPl2x),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyPl2z),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 1834),
                (intern_str::CaseInsensitive("z"), 1835),
            ],
            Some(Subtype::VndDolbyPl2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDolbyPulse1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("se.1"), 1837),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l2"), 1836),
                (intern_str::CaseInsensitive("ul"), 1838),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 1826),
                (intern_str::CaseInsensitive("m"), 1833),
                (intern_str::CaseInsensitive("p"), 1839),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDoremirScorecloudBinaryDocument),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r.scorecloud-binary-document"), 1841),
            ],
            None,
            0,
            28,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cume"), 1822),
                (intern_str::CaseInsensitive("lby."), 1840),
                (intern_str::CaseInsensitive("remi"), 1842),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDpgraph),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("graph"), 1844),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDra),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDreamfactory),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amfactory"), 1847),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDrive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ve"), 1849),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1846),
                (intern_str::CaseInsensitive("e"), 1848),
                (intern_str::CaseInsensitive("i"), 1850),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDtgLocalFlash),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 1852),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDtgLocalHtml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("flas"), 1853),
                (intern_str::CaseInsensitive("html"), 1854),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 1855),
            ],
            Some(Subtype::VndDtgLocal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".local"), 1856),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDtsHd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDtsUhd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1859),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hd"), 1858),
                (intern_str::CaseInsensitive("uh"), 1860),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 1861),
            ],
            Some(Subtype::VndDts),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 1857),
                (intern_str::CaseInsensitive("s"), 1862),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbAit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("it"), 1864),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbDvbisl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sl"), 1866),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbDvbj),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 1867),
                (intern_str::CaseInsensitive("j"), 1868),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vb"), 1869),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbEsgcontainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sgcontainer"), 1871),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ile"), 1873),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbIpdcdftnotifaccess),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("notifaccess"), 1875),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbIpdcesgaccess2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 1877),
            ],
            Some(Subtype::VndDvbIpdcesgaccess),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ess"), 1878),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbIpdcesgpdd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("acc"), 1879),
                (intern_str::CaseInsensitive("pdd"), 1880),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbIpdcroaming),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ming"), 1882),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dft"), 1876),
                (intern_str::CaseInsensitive("esg"), 1881),
                (intern_str::CaseInsensitive("roa"), 1883),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbIptvAlfecBase),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbIptvAlfecEnhancement),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ncement"), 1886),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("base"), 1885),
                (intern_str::CaseInsensitive("enha"), 1887),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".alfec-"), 1888),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dc"), 1884),
                (intern_str::CaseInsensitive("tv"), 1889),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1890),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifAggregateRoot),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ggregate-root"), 1892),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ontainer"), 1894),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifGeneric),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eneric"), 1896),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifIaMsglist),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifIaRegistrationRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifIaRegistrationResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1900),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quest"), 1899),
                (intern_str::CaseInsensitive("spons"), 1901),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ation-re"), 1902),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("msglist"), 1898),
                (intern_str::CaseInsensitive("registr"), 1903),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbNotifInit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1905),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a-"), 1904),
                (intern_str::CaseInsensitive("ni"), 1906),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1893),
                (intern_str::CaseInsensitive("c"), 1895),
                (intern_str::CaseInsensitive("g"), 1897),
                (intern_str::CaseInsensitive("i"), 1907),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("otif-"), 1908),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbPfr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fr"), 1910),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbService),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDvbSubtitle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1913),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ervice"), 1912),
                (intern_str::CaseInsensitive("ubtitl"), 1914),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1865),
                (intern_str::CaseInsensitive("d"), 1870),
                (intern_str::CaseInsensitive("e"), 1872),
                (intern_str::CaseInsensitive("f"), 1874),
                (intern_str::CaseInsensitive("i"), 1891),
                (intern_str::CaseInsensitive("n"), 1909),
                (intern_str::CaseInsensitive("p"), 1911),
                (intern_str::CaseInsensitive("s"), 1915),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b."), 1916),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDwf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDwg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1918),
                (intern_str::CaseInsensitive("g"), 1919),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDxf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDxr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 1921),
                (intern_str::CaseInsensitive("r"), 1922),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDynageo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nageo"), 1924),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndDzr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 1926),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 1750),
                (intern_str::CaseInsensitive("3"), 1754),
                (intern_str::CaseInsensitive("a"), 1762),
                (intern_str::CaseInsensitive("b"), 1764),
                (intern_str::CaseInsensitive("e"), 1799),
                (intern_str::CaseInsensitive("i"), 1807),
                (intern_str::CaseInsensitive("j"), 1809),
                (intern_str::CaseInsensitive("l"), 1814),
                (intern_str::CaseInsensitive("m"), 1818),
                (intern_str::CaseInsensitive("n"), 1820),
                (intern_str::CaseInsensitive("o"), 1843),
                (intern_str::CaseInsensitive("p"), 1845),
                (intern_str::CaseInsensitive("r"), 1851),
                (intern_str::CaseInsensitive("t"), 1863),
                (intern_str::CaseInsensitive("v"), 1917),
                (intern_str::CaseInsensitive("w"), 1920),
                (intern_str::CaseInsensitive("x"), 1923),
                (intern_str::CaseInsensitive("y"), 1925),
                (intern_str::CaseInsensitive("z"), 1927),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEasykaraokeCdgdownload),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sykaraoke.cdgdownload"), 1929),
            ],
            None,
            0,
            21,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcdisUpdate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pdate"), 1931),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcipRlp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 1933),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEclipseDitto),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".ditto"), 1935),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcowinChart),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1937),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcowinFilerequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1939),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcowinFileupdate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("reques"), 1940),
                (intern_str::CaseInsensitive("update"), 1941),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcowinSeriesrequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1943),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEcowinSeriesupdate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("reques"), 1944),
                (intern_str::CaseInsensitive("update"), 1945),
            ],
            Some(Subtype::VndEcowinSeries),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es"), 1946),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("char"), 1938),
                (intern_str::CaseInsensitive("file"), 1942),
                (intern_str::CaseInsensitive("seri"), 1947),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dis-u"), 1932),
                (intern_str::CaseInsensitive("ip.rl"), 1934),
                (intern_str::CaseInsensitive("lipse"), 1936),
                (intern_str::CaseInsensitive("owin."), 1948),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEfiImg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEfiIso),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mg"), 1950),
                (intern_str::CaseInsensitive("so"), 1951),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i.i"), 1952),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEmclientAccessrequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("client.accessrequest"), 1954),
            ],
            None,
            0,
            20,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEnliven),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEnphaseEnvoy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".envoy"), 1957),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("liven"), 1956),
                (intern_str::CaseInsensitive("phase"), 1958),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEprintsData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s.data"), 1960),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEpsonEsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sf"), 1962),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEpsonMsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sf"), 1964),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEpsonQuickanime),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uickanime"), 1966),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEpsonSalt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 1968),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEpsonSsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("al"), 1969),
                (intern_str::CaseInsensitive("sf"), 1970),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1963),
                (intern_str::CaseInsensitive("m"), 1965),
                (intern_str::CaseInsensitive("q"), 1967),
                (intern_str::CaseInsensitive("s"), 1971),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rint"), 1961),
                (intern_str::CaseInsensitive("son."), 1972),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEricssonQuickcall),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("icsson.quickcall"), 1974),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEsmertecThemeDescriptor),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".theme-descriptor"), 1976),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEspassEspass),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("spass"), 1978),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEszigno3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mertec"), 1977),
                (intern_str::CaseInsensitive("pass-e"), 1979),
                (intern_str::CaseInsensitive("zigno3"), 1980),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiAoc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiAsicE),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiAsicS),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 1983),
                (intern_str::CaseInsensitive("s"), 1984),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-"), 1985),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oc"), 1982),
                (intern_str::CaseInsensitive("si"), 1986),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiCug),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ug"), 1988),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvcommand),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ommand"), 1990),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvdiscovery),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iscovery"), 1992),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rofile"), 1994),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvsadBc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvsadCod),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 1997),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvsadNpvr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vr"), 1999),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bc"), 1996),
                (intern_str::CaseInsensitive("co"), 1998),
                (intern_str::CaseInsensitive("np"), 2000),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvservice),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ice"), 2002),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvsync),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ad-"), 2001),
                (intern_str::CaseInsensitive("erv"), 2003),
                (intern_str::CaseInsensitive("ync"), 2004),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiIptvueprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eprofile"), 2006),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1991),
                (intern_str::CaseInsensitive("d"), 1993),
                (intern_str::CaseInsensitive("p"), 1995),
                (intern_str::CaseInsensitive("s"), 2005),
                (intern_str::CaseInsensitive("u"), 2007),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ptv"), 2008),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiMcid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiMheg5),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("5"), 2011),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cid"), 2010),
                (intern_str::CaseInsensitive("heg"), 2012),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiOverloadControlPolicyDataset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("verload-control-policy-dataset"), 2014),
            ],
            None,
            0,
            30,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiPstn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("stn"), 2016),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiSci),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiSimservs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("servs"), 2019),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ci"), 2018),
                (intern_str::CaseInsensitive("im"), 2020),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiTimestampToken),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("estamp-token"), 2022),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEtsiTslDer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".der"), 2024),
            ],
            Some(Subtype::VndEtsiTsl),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("im"), 2023),
                (intern_str::CaseInsensitive("sl"), 2025),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1987),
                (intern_str::CaseInsensitive("c"), 1989),
                (intern_str::CaseInsensitive("i"), 2009),
                (intern_str::CaseInsensitive("m"), 2013),
                (intern_str::CaseInsensitive("o"), 2015),
                (intern_str::CaseInsensitive("p"), 2017),
                (intern_str::CaseInsensitive("s"), 2021),
                (intern_str::CaseInsensitive("t"), 2026),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("si."), 2027),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEuKasparianCar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n.car"), 2029),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEudoraData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".kasparia"), 2030),
                (intern_str::CaseInsensitive("dora.data"), 2031),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEveradPlj),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEvolvEcigProfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("le"), 2034),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEvolvEcigSettings),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ngs"), 2036),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEvolvEcigTheme),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("profi"), 2035),
                (intern_str::CaseInsensitive("setti"), 2037),
                (intern_str::CaseInsensitive("theme"), 2038),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2039),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("erad.plj"), 2033),
                (intern_str::CaseInsensitive("olv.ecig"), 2040),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndExstreamEmpower),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndExstreamPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("empower"), 2042),
                (intern_str::CaseInsensitive("package"), 2043),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("stream-"), 2044),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEzpixAlbum),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndEzpixPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ge"), 2047),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("album"), 2046),
                (intern_str::CaseInsensitive("packa"), 2048),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pix-"), 2049),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 1930),
                (intern_str::CaseInsensitive("c"), 1949),
                (intern_str::CaseInsensitive("f"), 1953),
                (intern_str::CaseInsensitive("m"), 1955),
                (intern_str::CaseInsensitive("n"), 1959),
                (intern_str::CaseInsensitive("p"), 1973),
                (intern_str::CaseInsensitive("r"), 1975),
                (intern_str::CaseInsensitive("s"), 1981),
                (intern_str::CaseInsensitive("t"), 2028),
                (intern_str::CaseInsensitive("u"), 2032),
                (intern_str::CaseInsensitive("v"), 2041),
                (intern_str::CaseInsensitive("x"), 2045),
                (intern_str::CaseInsensitive("z"), 2050),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFSecureMobile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("secure.mobile"), 2052),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFamilysearchGedcom),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lysearch.gedcom"), 2054),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFastbidsheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFastcopyDiskImage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k-image"), 2057),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bidsheet"), 2056),
                (intern_str::CaseInsensitive("copy-dis"), 2058),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mi"), 2055),
                (intern_str::CaseInsensitive("st"), 2059),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFdsnMseed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2062),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFdsnSeed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("msee"), 2063),
                (intern_str::CaseInsensitive("seed"), 2064),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n."), 2065),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 2061),
                (intern_str::CaseInsensitive("s"), 2066),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFfsns),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sns"), 2068),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFiclabFlb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFiclabFlt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 2070),
                (intern_str::CaseInsensitive("t"), 2071),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b.fl"), 2072),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFilmitZfc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t.zfc"), 2074),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFints),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFiremonkeysCloudcell),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("onkeys.cloudcell"), 2077),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cla"), 2073),
                (intern_str::CaseInsensitive("lmi"), 2075),
                (intern_str::CaseInsensitive("nts"), 2076),
                (intern_str::CaseInsensitive("rem"), 2078),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFlatland3dml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tland.3dml"), 2080),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFloGraphIt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("graphit"), 2082),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFluxtimeClip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xtime.clip"), 2084),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFly),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2081),
                (intern_str::CaseInsensitive("o"), 2083),
                (intern_str::CaseInsensitive("u"), 2085),
                (intern_str::CaseInsensitive("y"), 2086),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFmiFlexstor),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i.flexstor"), 2088),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFontFontforgeSfd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt-fontforge-sfd"), 2090),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFpx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 2092),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFramemaker),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amemaker"), 2094),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFscWeblaunch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".weblaunch"), 2096),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFst),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2097),
                (intern_str::CaseInsensitive("t"), 2098),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujifilmFbDocuworksBinder),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujifilmFbDocuworksContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ner"), 2101),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("binder"), 2100),
                (intern_str::CaseInsensitive("contai"), 2102),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2103),
            ],
            Some(Subtype::VndFujifilmFbDocuworks),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uworks"), 2104),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujifilmFbJfi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("doc"), 2105),
                (intern_str::CaseInsensitive("jfi"), 2106),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b."), 2107),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujitsuOasys2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujitsuOasys3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujitsuOasysgp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 2111),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujitsuOasysprs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rs"), 2113),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 2109),
                (intern_str::CaseInsensitive("3"), 2110),
                (intern_str::CaseInsensitive("g"), 2112),
                (intern_str::CaseInsensitive("p"), 2114),
            ],
            Some(Subtype::VndFujitsuOasys),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sys"), 2115),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxArtEx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ex"), 2117),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxArt4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 2118),
                (intern_str::CaseInsensitive("4"), 2119),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rt"), 2120),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxDdd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxDocuworksBinder),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxDocuworksContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ner"), 2124),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("binder"), 2123),
                (intern_str::CaseInsensitive("contai"), 2125),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2126),
            ],
            Some(Subtype::VndFujixeroxDocuworks),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uworks"), 2127),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dd"), 2122),
                (intern_str::CaseInsensitive("oc"), 2128),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxEdmicsMmr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxEdmicsRlc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mmr"), 2130),
                (intern_str::CaseInsensitive("rlc"), 2131),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dmics-"), 2132),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFujixeroxHbpl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bpl"), 2134),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2121),
                (intern_str::CaseInsensitive("d"), 2129),
                (intern_str::CaseInsensitive("e"), 2133),
                (intern_str::CaseInsensitive("h"), 2135),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("film.f"), 2108),
                (intern_str::CaseInsensitive("tsu.oa"), 2116),
                (intern_str::CaseInsensitive("xerox."), 2136),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 2137),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFutMisnet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("snet"), 2139),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFutoin),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-mi"), 2140),
                (intern_str::CaseInsensitive("oin"), 2141),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFuzzysheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("zysheet"), 2143),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("j"), 2138),
                (intern_str::CaseInsensitive("t"), 2142),
                (intern_str::CaseInsensitive("z"), 2144),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndFvt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 2146),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 2053),
                (intern_str::CaseInsensitive("a"), 2060),
                (intern_str::CaseInsensitive("d"), 2067),
                (intern_str::CaseInsensitive("f"), 2069),
                (intern_str::CaseInsensitive("i"), 2079),
                (intern_str::CaseInsensitive("l"), 2087),
                (intern_str::CaseInsensitive("m"), 2089),
                (intern_str::CaseInsensitive("o"), 2091),
                (intern_str::CaseInsensitive("p"), 2093),
                (intern_str::CaseInsensitive("r"), 2095),
                (intern_str::CaseInsensitive("s"), 2099),
                (intern_str::CaseInsensitive("u"), 2145),
                (intern_str::CaseInsensitive("v"), 2147),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGdl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2149),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGenomatixTuxedo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uxedo"), 2151),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGenticsGrd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("omatix.t"), 2152),
                (intern_str::CaseInsensitive("tics.grd"), 2153),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeogebraFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeogebraSlides),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es"), 2156),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeogebraTool),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("file"), 2155),
                (intern_str::CaseInsensitive("slid"), 2157),
                (intern_str::CaseInsensitive("tool"), 2158),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a."), 2159),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeometryExplorer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("y-explorer"), 2161),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeonext),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeoplan),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGeospace),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2165),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gebr"), 2160),
                (intern_str::CaseInsensitive("metr"), 2162),
                (intern_str::CaseInsensitive("next"), 2163),
                (intern_str::CaseInsensitive("plan"), 2164),
                (intern_str::CaseInsensitive("spac"), 2166),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGerber),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ber"), 2168),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 2154),
                (intern_str::CaseInsensitive("o"), 2167),
                (intern_str::CaseInsensitive("r"), 2169),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGlobalgraphicsPgb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGlobalplatformCardContentMgtResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-response"), 2172),
            ],
            Some(Subtype::VndGlobalplatformCardContentMgt),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d-content-mgt"), 2173),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("graphics.pgb"), 2171),
                (intern_str::CaseInsensitive("platform.car"), 2174),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("obal"), 2175),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2177),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGnuTalerExchange),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGnuTalerMerchant),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("exchange"), 2179),
                (intern_str::CaseInsensitive("merchant"), 2180),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("u.taler."), 2181),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGoogleEarthKml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGoogleEarthKmz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2183),
                (intern_str::CaseInsensitive("z"), 2184),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("earth.km"), 2185),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGovSkEForm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGovSkXmldatacontainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("acontainer"), 2188),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-form"), 2187),
                (intern_str::CaseInsensitive("xmldat"), 2189),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ogle-"), 2186),
                (intern_str::CaseInsensitive("v.sk."), 2190),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrafeq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGraphviz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iz"), 2193),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("feq"), 2192),
                (intern_str::CaseInsensitive("phv"), 2194),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGridmp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dmp"), 2196),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveAccount),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ccount"), 2198),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveHelp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("elp"), 2200),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveIdentityMessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-message"), 2202),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveInjector),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dentity"), 2203),
                (intern_str::CaseInsensitive("njector"), 2204),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveToolMessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveToolTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2207),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("message"), 2206),
                (intern_str::CaseInsensitive("templat"), 2208),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ool-"), 2209),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGrooveVcard),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("card"), 2211),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2199),
                (intern_str::CaseInsensitive("h"), 2201),
                (intern_str::CaseInsensitive("i"), 2205),
                (intern_str::CaseInsensitive("t"), 2210),
                (intern_str::CaseInsensitive("v"), 2212),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ove-"), 2213),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2195),
                (intern_str::CaseInsensitive("i"), 2197),
                (intern_str::CaseInsensitive("o"), 2214),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGsGdl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-gdl"), 2216),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndGtw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("w"), 2218),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2150),
                (intern_str::CaseInsensitive("e"), 2170),
                (intern_str::CaseInsensitive("l"), 2176),
                (intern_str::CaseInsensitive("m"), 2178),
                (intern_str::CaseInsensitive("n"), 2182),
                (intern_str::CaseInsensitive("o"), 2191),
                (intern_str::CaseInsensitive("r"), 2215),
                (intern_str::CaseInsensitive("s"), 2217),
                (intern_str::CaseInsensitive("t"), 2219),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHandHeldEntertainment),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("held-entertainment"), 2222),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHans),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2223),
                (intern_str::CaseInsensitive("s"), 2224),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2221),
                (intern_str::CaseInsensitive("n"), 2225),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHbci),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ci"), 2227),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHclBireports),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l-bireports"), 2229),
            ],
            Some(Subtype::VndHc),
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHdt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 2231),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHeroku),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("roku"), 2233),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHgl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2235),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHheLessonPlayer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e.lesson-player"), 2237),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHl7cda),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2239),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHl7v2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cd"), 2240),
                (intern_str::CaseInsensitive("v2"), 2241),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("7"), 2242),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHnsAudio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHnsVideo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("audio"), 2244),
                (intern_str::CaseInsensitive("video"), 2245),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s."), 2246),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHpHpgl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2248),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHpHpid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2250),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHpHps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 2249),
                (intern_str::CaseInsensitive("i"), 2251),
                (intern_str::CaseInsensitive("s"), 2252),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHpJlyt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("yt"), 2254),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHpPclxl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xl"), 2256),
            ],
            Some(Subtype::VndHpPcl),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 2257),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hp"), 2253),
                (intern_str::CaseInsensitive("jl"), 2255),
                (intern_str::CaseInsensitive("pc"), 2258),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 2259),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHttphone),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tphone"), 2261),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHydrostatixSofData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("statix.sof-data"), 2263),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHyperItem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHyperdrive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-item"), 2265),
                (intern_str::CaseInsensitive("drive"), 2266),
            ],
            Some(Subtype::VndHyper),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dro"), 2264),
                (intern_str::CaseInsensitive("per"), 2267),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndHzn3dCrossword),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n-3d-crossword"), 2269),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2226),
                (intern_str::CaseInsensitive("b"), 2228),
                (intern_str::CaseInsensitive("c"), 2230),
                (intern_str::CaseInsensitive("d"), 2232),
                (intern_str::CaseInsensitive("e"), 2234),
                (intern_str::CaseInsensitive("g"), 2236),
                (intern_str::CaseInsensitive("h"), 2238),
                (intern_str::CaseInsensitive("l"), 2243),
                (intern_str::CaseInsensitive("n"), 2247),
                (intern_str::CaseInsensitive("p"), 2260),
                (intern_str::CaseInsensitive("t"), 2262),
                (intern_str::CaseInsensitive("y"), 2268),
                (intern_str::CaseInsensitive("z"), 2270),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIbmElectronicMedia),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nic-media"), 2272),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIbmMiniPay),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIbmRightsManagement),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("management"), 2275),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIbmSecureContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("container"), 2277),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("electro"), 2273),
                (intern_str::CaseInsensitive("minipay"), 2274),
                (intern_str::CaseInsensitive("rights-"), 2276),
                (intern_str::CaseInsensitive("secure-"), 2278),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m."), 2279),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIccprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cprofile"), 2281),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIeee1905),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ee.1905"), 2283),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIgloader),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("loader"), 2285),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImagemeterFolder),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 2287),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImagemeterImage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("folde"), 2288),
                (intern_str::CaseInsensitive("image"), 2289),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("emeter."), 2290),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImmervisionIvp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImmervisionIvu),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 2292),
                (intern_str::CaseInsensitive("u"), 2293),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rvision-iv"), 2294),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsImsccv1p1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsImsccv1p2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsImsccv1p3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 2296),
                (intern_str::CaseInsensitive("2"), 2297),
                (intern_str::CaseInsensitive("3"), 2298),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("msccv1p"), 2299),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsLisV2Result),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lt"), 2301),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsLtiV2Toolconsumerprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("merprofile"), 2303),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsLtiV2ToolproxyId),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".id"), 2305),
            ],
            Some(Subtype::VndImsLtiV2Toolproxy),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndImsLtiV2ToolsettingsSimple),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".simple"), 2307),
            ],
            Some(Subtype::VndImsLtiV2Toolsettings),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ngs"), 2308),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("consu"), 2304),
                (intern_str::CaseInsensitive("proxy"), 2306),
                (intern_str::CaseInsensitive("setti"), 2309),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("is.v2.resu"), 2302),
                (intern_str::CaseInsensitive("ti.v2.tool"), 2310),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 2300),
                (intern_str::CaseInsensitive("l"), 2311),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ag"), 2291),
                (intern_str::CaseInsensitive("me"), 2295),
                (intern_str::CaseInsensitive("s."), 2312),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIn3d3dml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIn3dSpot),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3dml"), 2314),
                (intern_str::CaseInsensitive("spot"), 2315),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d."), 2316),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndInformedcontrolRms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rms"), 2318),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndInfotechProject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rmedcontrol."), 2319),
                (intern_str::CaseInsensitive("tech.project"), 2320),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 2321),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndInnopathWampNotification),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("opath.wamp.notification"), 2323),
            ],
            None,
            0,
            23,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndInsorsIgm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ors.igm"), 2325),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndInterconFormnet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".formnet"), 2327),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIntergeo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIntertrustDigibox),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("box"), 2330),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIntertrustNncp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("digi"), 2331),
                (intern_str::CaseInsensitive("nncp"), 2332),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("st."), 2333),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("con"), 2328),
                (intern_str::CaseInsensitive("geo"), 2329),
                (intern_str::CaseInsensitive("tru"), 2334),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIntuQbo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIntuQfx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bo"), 2336),
                (intern_str::CaseInsensitive("fx"), 2337),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("q"), 2338),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 2335),
                (intern_str::CaseInsensitive("u."), 2339),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 2317),
                (intern_str::CaseInsensitive("f"), 2322),
                (intern_str::CaseInsensitive("n"), 2324),
                (intern_str::CaseInsensitive("s"), 2326),
                (intern_str::CaseInsensitive("t"), 2340),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Catalogitem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Conceptitem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("atalogitem"), 2342),
                (intern_str::CaseInsensitive("onceptitem"), 2343),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Knowledgeitem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nowledgeitem"), 2345),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Newsitem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Newsmessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("age"), 2348),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("item"), 2347),
                (intern_str::CaseInsensitive("mess"), 2349),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ews"), 2350),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Packageitem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcG2Planningitem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 2353),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ackageitem"), 2352),
                (intern_str::CaseInsensitive("lanningite"), 2354),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2344),
                (intern_str::CaseInsensitive("k"), 2346),
                (intern_str::CaseInsensitive("n"), 2351),
                (intern_str::CaseInsensitive("p"), 2355),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2."), 2356),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcNewsMl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 2358),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptcNitf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ews"), 2359),
                (intern_str::CaseInsensitive("itf"), 2360),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 2357),
                (intern_str::CaseInsensitive("n"), 2361),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptvforum1dparityfec1010),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptvforum1dparityfec2005),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1010"), 2363),
                (intern_str::CaseInsensitive("2005"), 2364),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("arityfec-"), 2365),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptvforum2dparityfec1010),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptvforum2dparityfec2005),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1010"), 2367),
                (intern_str::CaseInsensitive("2005"), 2368),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("arityfec-"), 2369),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptvforumTtsavc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIptvforumTtsmpeg2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g2"), 2372),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("avc"), 2371),
                (intern_str::CaseInsensitive("mpe"), 2373),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1dp"), 2366),
                (intern_str::CaseInsensitive("2dp"), 2370),
                (intern_str::CaseInsensitive("tts"), 2374),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("orum."), 2375),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c."), 2362),
                (intern_str::CaseInsensitive("vf"), 2376),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIpunpluggedRcprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nplugged.rcprofile"), 2378),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 2377),
                (intern_str::CaseInsensitive("u"), 2379),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIrepositoryPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("epository.package"), 2381),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIsXpr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIsacFcs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cs"), 2384),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndIso1178310),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("83-10"), 2386),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-xpr"), 2383),
                (intern_str::CaseInsensitive("ac.f"), 2385),
                (intern_str::CaseInsensitive("o117"), 2387),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 2280),
                (intern_str::CaseInsensitive("c"), 2282),
                (intern_str::CaseInsensitive("e"), 2284),
                (intern_str::CaseInsensitive("g"), 2286),
                (intern_str::CaseInsensitive("m"), 2313),
                (intern_str::CaseInsensitive("n"), 2341),
                (intern_str::CaseInsensitive("p"), 2380),
                (intern_str::CaseInsensitive("r"), 2382),
                (intern_str::CaseInsensitive("s"), 2388),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJam),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJapannetDirectoryService),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rvice"), 2391),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJapannetJpnstoreWakeup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eup"), 2393),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJapannetPaymentWakeup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("up"), 2395),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJapannetRegistrationWakeup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wakeup"), 2397),
            ],
            Some(Subtype::VndJapannetRegistration),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJapannetSetstoreWakeup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eup"), 2399),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJapannetVerificationWakeup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wakeup"), 2401),
            ],
            Some(Subtype::VndJapannetVerification),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("directory-se"), 2392),
                (intern_str::CaseInsensitive("jpnstore-wak"), 2394),
                (intern_str::CaseInsensitive("payment-wake"), 2396),
                (intern_str::CaseInsensitive("registration"), 2398),
                (intern_str::CaseInsensitive("setstore-wak"), 2400),
                (intern_str::CaseInsensitive("verification"), 2402),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("annet-"), 2403),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 2390),
                (intern_str::CaseInsensitive("p"), 2404),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJcpJavameMidletRms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p.javame.midlet-rms"), 2406),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJisp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sp"), 2408),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJoostJodaArchive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ost.joda-archive"), 2410),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndJskIsdnNgn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k.isdn-ngn"), 2412),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2405),
                (intern_str::CaseInsensitive("c"), 2407),
                (intern_str::CaseInsensitive("i"), 2409),
                (intern_str::CaseInsensitive("o"), 2411),
                (intern_str::CaseInsensitive("s"), 2413),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKahootz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hootz"), 2415),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKarbon),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 2417),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKchart),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 2419),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKformula),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ula"), 2421),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKivio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKontour),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ur"), 2424),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKpresenter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("enter"), 2426),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKspread),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ad"), 2428),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKdeKword),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("arbo"), 2418),
                (intern_str::CaseInsensitive("char"), 2420),
                (intern_str::CaseInsensitive("form"), 2422),
                (intern_str::CaseInsensitive("ivio"), 2423),
                (intern_str::CaseInsensitive("onto"), 2425),
                (intern_str::CaseInsensitive("pres"), 2427),
                (intern_str::CaseInsensitive("spre"), 2429),
                (intern_str::CaseInsensitive("word"), 2430),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e.k"), 2431),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKenameaapp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nameaapp"), 2433),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKidspiration),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iration"), 2435),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKinar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dsp"), 2436),
                (intern_str::CaseInsensitive("nar"), 2437),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKoan),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndKodakDescriptor),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k-descriptor"), 2440),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("an"), 2439),
                (intern_str::CaseInsensitive("da"), 2441),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2416),
                (intern_str::CaseInsensitive("d"), 2432),
                (intern_str::CaseInsensitive("e"), 2434),
                (intern_str::CaseInsensitive("i"), 2438),
                (intern_str::CaseInsensitive("o"), 2442),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLasLas),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 2444),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLaszip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".la"), 2445),
                (intern_str::CaseInsensitive("zip"), 2446),
            ],
            Some(Subtype::VndLas),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLatexZ),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ex-z"), 2448),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 2447),
                (intern_str::CaseInsensitive("t"), 2449),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLeap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ap"), 2451),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLibertyRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("berty-request"), 2453),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLlamagraphicsLifeBalanceDesktop),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLlamagraphicsLifeBalanceExchange),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2456),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("desktop"), 2455),
                (intern_str::CaseInsensitive("exchang"), 2457),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amagraphics.life-balance."), 2458),
            ],
            None,
            0,
            25,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLogipipeCircuit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pipe.circuit"), 2460),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLoom),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotus123),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotusApproach),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ach"), 2464),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotusFreelance),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ance"), 2466),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotusNotes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotusOrganizer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("izer"), 2469),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotusScreencam),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ncam"), 2471),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLotusWordpro),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ro"), 2473),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1-2-3"), 2463),
                (intern_str::CaseInsensitive("appro"), 2465),
                (intern_str::CaseInsensitive("freel"), 2467),
                (intern_str::CaseInsensitive("notes"), 2468),
                (intern_str::CaseInsensitive("organ"), 2470),
                (intern_str::CaseInsensitive("scree"), 2472),
                (intern_str::CaseInsensitive("wordp"), 2474),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-"), 2475),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gi"), 2461),
                (intern_str::CaseInsensitive("om"), 2462),
                (intern_str::CaseInsensitive("tu"), 2476),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndLucentVoice),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cent.voice"), 2478),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2450),
                (intern_str::CaseInsensitive("e"), 2452),
                (intern_str::CaseInsensitive("i"), 2454),
                (intern_str::CaseInsensitive("l"), 2459),
                (intern_str::CaseInsensitive("o"), 2477),
                (intern_str::CaseInsensitive("u"), 2479),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMacportsPortpkg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ports.portpkg"), 2481),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMapboxVectorTile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("box-vector-tile"), 2483),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMarlinDrmActiontoken),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ontoken"), 2485),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMarlinDrmConftoken),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("token"), 2487),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMarlinDrmLicense),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nse"), 2489),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMarlinDrmMdcf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("acti"), 2486),
                (intern_str::CaseInsensitive("conf"), 2488),
                (intern_str::CaseInsensitive("lice"), 2490),
                (intern_str::CaseInsensitive("mdcf"), 2491),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lin.drm."), 2492),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMason),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("on"), 2494),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMaxarArchive3tz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMaxmindMaxmindDb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 2497),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ar.archive.3tz"), 2496),
                (intern_str::CaseInsensitive("mind.maxmind-d"), 2498),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2482),
                (intern_str::CaseInsensitive("p"), 2484),
                (intern_str::CaseInsensitive("r"), 2493),
                (intern_str::CaseInsensitive("s"), 2495),
                (intern_str::CaseInsensitive("x"), 2499),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMcd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2501),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMedcalcdata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMediastationCdkey),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n.cdkey"), 2504),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("calcdata"), 2503),
                (intern_str::CaseInsensitive("iastatio"), 2505),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMeridianSlingshot),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("idian-slingshot"), 2507),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2506),
                (intern_str::CaseInsensitive("r"), 2508),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMfer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMfmp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 2510),
                (intern_str::CaseInsensitive("mp"), 2511),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMicrografxFlo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMicrografxIgx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("flo"), 2513),
                (intern_str::CaseInsensitive("igx"), 2514),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2515),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMicrosoftIcon),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMicrosoftPortableExecutable),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("able-executable"), 2518),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMicrosoftWindowsThumbnailCache),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ows.thumbnail-cache"), 2520),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("icon"), 2517),
                (intern_str::CaseInsensitive("port"), 2519),
                (intern_str::CaseInsensitive("wind"), 2521),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("grafx"), 2516),
                (intern_str::CaseInsensitive("soft."), 2522),
            ],
            Some(Subtype::VndMicro),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ro"), 2523),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMiele),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("le"), 2525),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMinisoftHp3000Save),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("isoft-hp3000-save"), 2528),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMitsubishiMistyGuardTrustweb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("subishi.misty-guard.trustweb"), 2530),
            ],
            None,
            0,
            28,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMix),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2524),
                (intern_str::CaseInsensitive("e"), 2526),
                (intern_str::CaseInsensitive("f"), 2527),
                (intern_str::CaseInsensitive("n"), 2529),
                (intern_str::CaseInsensitive("t"), 2531),
                (intern_str::CaseInsensitive("x"), 2532),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusDaf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusDis),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("af"), 2534),
                (intern_str::CaseInsensitive("is"), 2535),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusMbk),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusMqy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusMsl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bk"), 2537),
                (intern_str::CaseInsensitive("qy"), 2538),
                (intern_str::CaseInsensitive("sl"), 2539),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusPlc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lc"), 2541),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMobiusTxf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xf"), 2543),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2536),
                (intern_str::CaseInsensitive("m"), 2540),
                (intern_str::CaseInsensitive("p"), 2542),
                (intern_str::CaseInsensitive("t"), 2544),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("us."), 2545),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMoml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMophunApplication),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMophunCertificate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("application"), 2548),
                (intern_str::CaseInsensitive("certificate"), 2549),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("un."), 2550),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaFlexsuiteAdsi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 2552),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaFlexsuiteFis),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaFlexsuiteGotap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ap"), 2555),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaFlexsuiteKmr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaFlexsuiteTtc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaFlexsuiteWem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ads"), 2553),
                (intern_str::CaseInsensitive("fis"), 2554),
                (intern_str::CaseInsensitive("got"), 2556),
                (intern_str::CaseInsensitive("kmr"), 2557),
                (intern_str::CaseInsensitive("ttc"), 2558),
                (intern_str::CaseInsensitive("wem"), 2559),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2560),
            ],
            Some(Subtype::VndMotorolaFlexsuite),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("suite"), 2561),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaIprm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaReflex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ex"), 2564),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMotorolaVideop),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 2566),
            ],
            Some(Subtype::VndMotorolaVideo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 2567),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("flex"), 2562),
                (intern_str::CaseInsensitive("iprm"), 2563),
                (intern_str::CaseInsensitive("refl"), 2565),
                (intern_str::CaseInsensitive("vide"), 2568),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rola."), 2569),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMozillaApng),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 2571),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMozillaXul),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("apn"), 2572),
                (intern_str::CaseInsensitive("xul"), 2573),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lla."), 2574),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bi"), 2546),
                (intern_str::CaseInsensitive("ml"), 2547),
                (intern_str::CaseInsensitive("ph"), 2551),
                (intern_str::CaseInsensitive("to"), 2570),
                (intern_str::CaseInsensitive("zi"), 2575),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMpegurl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("egurl"), 2577),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMs3mfdocument),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mfdocument"), 2579),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsArtgalry),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("galry"), 2581),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsAsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rt"), 2582),
                (intern_str::CaseInsensitive("sf"), 2583),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsCabCompressed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ab-compressed"), 2585),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsExcelAddinMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("macroenabled.12"), 2587),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsExcelSheetBinaryMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bled.12"), 2589),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsExcelSheetMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("binary.macroena"), 2590),
                (intern_str::CaseInsensitive("macroenabled.12"), 2591),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsExcelTemplateMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("te.macroenabled.12"), 2593),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("addin."), 2588),
                (intern_str::CaseInsensitive("sheet."), 2592),
                (intern_str::CaseInsensitive("templa"), 2594),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2595),
            ],
            Some(Subtype::VndMsExcel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xcel"), 2596),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsFontobject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ontobject"), 2598),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsHtmlhelp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tmlhelp"), 2600),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsIms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ms"), 2602),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsLrm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rm"), 2604),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsMediapackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("apackage"), 2606),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsModi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("edi"), 2607),
                (intern_str::CaseInsensitive("odi"), 2608),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsOfficeActiveX),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vex"), 2610),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsOfficetheme),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".acti"), 2611),
                (intern_str::CaseInsensitive("theme"), 2612),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ffice"), 2613),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPkiSeccat),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i.seccat"), 2615),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPlayreadyInitiator),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 2617),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPlayreadyMediaPya),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPlayreadyMediaPyv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2619),
                (intern_str::CaseInsensitive("v"), 2620),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("initiato"), 2618),
                (intern_str::CaseInsensitive("media.py"), 2621),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ayready."), 2622),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPowerpointAddinMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".macroenabled.12"), 2624),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPowerpointPresentationMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ntation.macroenabled.12"), 2626),
            ],
            None,
            0,
            23,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPowerpointSlideMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPowerpointSlideshowMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d.12"), 2629),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".macroenabled.12"), 2628),
                (intern_str::CaseInsensitive("show.macroenable"), 2630),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPowerpointTemplateMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ate.macroenabled.12"), 2632),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("addin"), 2625),
                (intern_str::CaseInsensitive("prese"), 2627),
                (intern_str::CaseInsensitive("slide"), 2631),
                (intern_str::CaseInsensitive("templ"), 2633),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2634),
            ],
            Some(Subtype::VndMsPowerpoint),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("werpoint"), 2635),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPrintDeviceCapabilities),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lities"), 2637),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsPrintSchemaTicket),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("devicecapabi"), 2638),
                (intern_str::CaseInsensitive("schematicket"), 2639),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsProject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ct"), 2641),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("int"), 2640),
                (intern_str::CaseInsensitive("oje"), 2642),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k"), 2616),
                (intern_str::CaseInsensitive("l"), 2623),
                (intern_str::CaseInsensitive("o"), 2636),
                (intern_str::CaseInsensitive("r"), 2643),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsTnef),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nef"), 2645),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWindowsDevicepairing),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("airing"), 2647),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWindowsNwprintingOob),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ing.oob"), 2649),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWindowsPrinterpairing),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pairing"), 2651),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWindowsWsdOob),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("devicep"), 2648),
                (intern_str::CaseInsensitive("nwprint"), 2650),
                (intern_str::CaseInsensitive("printer"), 2652),
                (intern_str::CaseInsensitive("wsd.oob"), 2653),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dows."), 2654),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWmdrmLicChlgReq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-req"), 2656),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWmdrmLicResp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("chlg"), 2657),
                (intern_str::CaseInsensitive("resp"), 2658),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWmdrmMeterChlgReq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-req"), 2660),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWmdrmMeterResp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("chlg"), 2661),
                (intern_str::CaseInsensitive("resp"), 2662),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r-"), 2663),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lic-"), 2659),
                (intern_str::CaseInsensitive("mete"), 2664),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rm."), 2665),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWordDocumentMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWordTemplateMacroEnabled12),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("document.macroenabled.12"), 2667),
                (intern_str::CaseInsensitive("template.macroenabled.12"), 2668),
            ],
            None,
            0,
            24,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWorks),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d."), 2669),
                (intern_str::CaseInsensitive("ks"), 2670),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsWpl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("in"), 2655),
                (intern_str::CaseInsensitive("md"), 2666),
                (intern_str::CaseInsensitive("or"), 2671),
                (intern_str::CaseInsensitive("pl"), 2672),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsXpsdocument),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("psdocument"), 2674),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 2580),
                (intern_str::CaseInsensitive("a"), 2584),
                (intern_str::CaseInsensitive("c"), 2586),
                (intern_str::CaseInsensitive("e"), 2597),
                (intern_str::CaseInsensitive("f"), 2599),
                (intern_str::CaseInsensitive("h"), 2601),
                (intern_str::CaseInsensitive("i"), 2603),
                (intern_str::CaseInsensitive("l"), 2605),
                (intern_str::CaseInsensitive("m"), 2609),
                (intern_str::CaseInsensitive("o"), 2614),
                (intern_str::CaseInsensitive("p"), 2644),
                (intern_str::CaseInsensitive("t"), 2646),
                (intern_str::CaseInsensitive("w"), 2673),
                (intern_str::CaseInsensitive("x"), 2675),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsaDiskImage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-disk-image"), 2677),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMseq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("q"), 2679),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMsign),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gn"), 2681),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 2676),
                (intern_str::CaseInsensitive("a"), 2678),
                (intern_str::CaseInsensitive("e"), 2680),
                (intern_str::CaseInsensitive("i"), 2682),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMts),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 2684),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMultiadCreatorCif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".cif"), 2686),
            ],
            Some(Subtype::VndMultiadCreator),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ad.creator"), 2687),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMusicNiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ff"), 2689),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMusician),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-ni"), 2690),
                (intern_str::CaseInsensitive("ian"), 2691),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMuveeStyle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".style"), 2693),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lti"), 2688),
                (intern_str::CaseInsensitive("sic"), 2692),
                (intern_str::CaseInsensitive("vee"), 2694),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndMynfc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfc"), 2696),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2500),
                (intern_str::CaseInsensitive("c"), 2502),
                (intern_str::CaseInsensitive("e"), 2509),
                (intern_str::CaseInsensitive("f"), 2512),
                (intern_str::CaseInsensitive("i"), 2533),
                (intern_str::CaseInsensitive("o"), 2576),
                (intern_str::CaseInsensitive("p"), 2578),
                (intern_str::CaseInsensitive("s"), 2683),
                (intern_str::CaseInsensitive("t"), 2685),
                (intern_str::CaseInsensitive("u"), 2695),
                (intern_str::CaseInsensitive("y"), 2697),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNacamarYbrid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("camar.ybrid"), 2699),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNcdControl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNcdReference),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ce"), 2702),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("control"), 2701),
                (intern_str::CaseInsensitive("referen"), 2703),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d."), 2704),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNearstInv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rst.inv"), 2706),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNebumindLine),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("umind.line"), 2708),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNervana),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("vana"), 2710),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNetFpx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 2712),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNet2phoneCommcenterCommand),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("one.commcenter.command"), 2714),
            ],
            None,
            0,
            22,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNetfpx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-fp"), 2713),
                (intern_str::CaseInsensitive("2ph"), 2715),
                (intern_str::CaseInsensitive("fpx"), 2716),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNeurolanguageNlu),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rolanguage.nlu"), 2718),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2707),
                (intern_str::CaseInsensitive("b"), 2709),
                (intern_str::CaseInsensitive("r"), 2711),
                (intern_str::CaseInsensitive("t"), 2717),
                (intern_str::CaseInsensitive("u"), 2719),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNimn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNintendoNitroRom),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 2722),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNintendoSnesRom),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nitro.ro"), 2723),
                (intern_str::CaseInsensitive("snes.rom"), 2724),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("endo."), 2725),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNitf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mn"), 2721),
                (intern_str::CaseInsensitive("nt"), 2726),
                (intern_str::CaseInsensitive("tf"), 2727),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNoblenetDirectory),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ectory"), 2729),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNoblenetSealer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ler"), 2731),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNoblenetWeb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dir"), 2730),
                (intern_str::CaseInsensitive("sea"), 2732),
                (intern_str::CaseInsensitive("web"), 2733),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("et-"), 2734),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaCatalogs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ogs"), 2736),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaConml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("atal"), 2737),
                (intern_str::CaseInsensitive("onml"), 2738),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaInterleavedMultimedia),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-multimedia"), 2740),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaIptvConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaISdsRadioPresets),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("presets"), 2743),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nterleaved"), 2741),
                (intern_str::CaseInsensitive("ptv.config"), 2742),
                (intern_str::CaseInsensitive("sds-radio-"), 2744),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaLandmarkcollection),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("collection"), 2746),
            ],
            Some(Subtype::VndNokiaLandmark),
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("andmark"), 2747),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaMobileXmf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-xmf"), 2749),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaMp4vr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("obil"), 2750),
                (intern_str::CaseInsensitive("p4vr"), 2751),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaNGageAc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaNGageData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ta"), 2754),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ac"), 2753),
                (intern_str::CaseInsensitive("da"), 2755),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("age."), 2756),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaNcd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-g"), 2757),
                (intern_str::CaseInsensitive("cd"), 2758),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaPcd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cd"), 2760),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaRadioPresets),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 2762),
            ],
            Some(Subtype::VndNokiaRadioPreset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("adio-preset"), 2763),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNokiaVideovoip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ideovoip"), 2765),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2739),
                (intern_str::CaseInsensitive("i"), 2745),
                (intern_str::CaseInsensitive("l"), 2748),
                (intern_str::CaseInsensitive("m"), 2752),
                (intern_str::CaseInsensitive("n"), 2759),
                (intern_str::CaseInsensitive("p"), 2761),
                (intern_str::CaseInsensitive("r"), 2764),
                (intern_str::CaseInsensitive("v"), 2766),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNortelVbk),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".vbk"), 2768),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNovadigmEdm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNovadigmEdx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 2770),
                (intern_str::CaseInsensitive("x"), 2771),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNovadigmExt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 2773),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2772),
                (intern_str::CaseInsensitive("x"), 2774),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gm.e"), 2775),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("blen"), 2735),
                (intern_str::CaseInsensitive("kia."), 2767),
                (intern_str::CaseInsensitive("rtel"), 2769),
                (intern_str::CaseInsensitive("vadi"), 2776),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNttLocalContentShare),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-share"), 2778),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNttLocalFileTransfer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ansfer"), 2780),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNttLocalOgwRemoteAccess),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ote-access"), 2782),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNttLocalSipTaRemote),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNttLocalSipTaTcpStream),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ream"), 2785),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("remote"), 2784),
                (intern_str::CaseInsensitive("tcp_st"), 2786),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("content"), 2779),
                (intern_str::CaseInsensitive("file-tr"), 2781),
                (intern_str::CaseInsensitive("ogw_rem"), 2783),
                (intern_str::CaseInsensitive("sip-ta_"), 2787),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t-local."), 2788),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNueraEcelp4800),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNueraEcelp7470),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndNueraEcelp9600),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("4800"), 2790),
                (intern_str::CaseInsensitive("7470"), 2791),
                (intern_str::CaseInsensitive("9600"), 2792),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("era.ecelp"), 2793),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2700),
                (intern_str::CaseInsensitive("c"), 2705),
                (intern_str::CaseInsensitive("e"), 2720),
                (intern_str::CaseInsensitive("i"), 2728),
                (intern_str::CaseInsensitive("o"), 2777),
                (intern_str::CaseInsensitive("t"), 2789),
                (intern_str::CaseInsensitive("u"), 2794),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentChartTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 2796),
            ],
            Some(Subtype::VndOasisOpendocumentChart),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 2797),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentDatabase),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("base"), 2799),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentFormulaTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 2801),
            ],
            Some(Subtype::VndOasisOpendocumentFormula),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ula"), 2802),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentGraphicsTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 2804),
            ],
            Some(Subtype::VndOasisOpendocumentGraphics),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hics"), 2805),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentImageTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 2807),
            ],
            Some(Subtype::VndOasisOpendocumentImage),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2808),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentPresentationTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 2810),
            ],
            Some(Subtype::VndOasisOpendocumentPresentation),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("entation"), 2811),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentSpreadsheetTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-template"), 2813),
            ],
            Some(Subtype::VndOasisOpendocumentSpreadsheet),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("adsheet"), 2814),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentTextMaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ter"), 2816),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentTextTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("plate"), 2818),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOasisOpendocumentTextWeb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mas"), 2817),
                (intern_str::CaseInsensitive("tem"), 2819),
                (intern_str::CaseInsensitive("web"), 2820),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 2821),
            ],
            Some(Subtype::VndOasisOpendocumentText),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("char"), 2798),
                (intern_str::CaseInsensitive("data"), 2800),
                (intern_str::CaseInsensitive("form"), 2803),
                (intern_str::CaseInsensitive("grap"), 2806),
                (intern_str::CaseInsensitive("imag"), 2809),
                (intern_str::CaseInsensitive("pres"), 2812),
                (intern_str::CaseInsensitive("spre"), 2815),
                (intern_str::CaseInsensitive("text"), 2822),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sis.opendocument."), 2823),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndObjectvideo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ectvideo"), 2825),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndObn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("j"), 2826),
                (intern_str::CaseInsensitive("n"), 2827),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOcf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOciImageManifestV1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".image.manifest.v1"), 2830),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOctelSbc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("el.sbc"), 2832),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 2829),
                (intern_str::CaseInsensitive("i"), 2831),
                (intern_str::CaseInsensitive("t"), 2833),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOftnL10n),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tn.l10n"), 2835),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfContentaccessdownload),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfContentaccessstreaming),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 2838),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("download"), 2837),
                (intern_str::CaseInsensitive("streamin"), 2839),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfCspgHexbinary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("y"), 2841),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ontentaccess"), 2840),
                (intern_str::CaseInsensitive("spg-hexbinar"), 2842),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfDaeSvg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfDaeXhtml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 2845),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("svg"), 2844),
                (intern_str::CaseInsensitive("xht"), 2846),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ae."), 2847),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfMippvcontrolmessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ippvcontrolmessage"), 2849),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfPaeGem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ae.gem"), 2851),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfSpdiscovery),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("very"), 2853),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfSpdlist),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("isco"), 2854),
                (intern_str::CaseInsensitive("list"), 2855),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pd"), 2856),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfUeprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOipfUserprofile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("le"), 2859),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eprofile"), 2858),
                (intern_str::CaseInsensitive("serprofi"), 2860),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2843),
                (intern_str::CaseInsensitive("d"), 2848),
                (intern_str::CaseInsensitive("m"), 2850),
                (intern_str::CaseInsensitive("p"), 2852),
                (intern_str::CaseInsensitive("s"), 2857),
                (intern_str::CaseInsensitive("u"), 2861),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pf."), 2862),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOlpcSugar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pc-sugar"), 2864),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaScwsConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaScwsHttpRequest),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaScwsHttpResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2868),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("quest"), 2867),
                (intern_str::CaseInsensitive("spons"), 2869),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2870),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("config"), 2866),
                (intern_str::CaseInsensitive("http-r"), 2871),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("scws-"), 2872),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastAssociatedProcedureParameter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ssociated-procedure-parameter"), 2874),
            ],
            None,
            0,
            29,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastDrmTrigger),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rm-trigger"), 2876),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastImd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("md"), 2878),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastLtkm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tkm"), 2880),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastNotification),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("otification"), 2882),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastProvisioningtrigger),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rovisioningtrigger"), 2884),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastSgboot),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oot"), 2886),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastSgdd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastSgdu),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 2888),
                (intern_str::CaseInsensitive("u"), 2889),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 2887),
                (intern_str::CaseInsensitive("d"), 2890),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastSimpleSymbolContainer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mple-symbol-container"), 2892),
            ],
            None,
            0,
            21,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastSmartcardTrigger),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("artcard-trigger"), 2894),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastSprov),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rov"), 2896),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaBcastStkm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("km"), 2898),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 2891),
                (intern_str::CaseInsensitive("i"), 2893),
                (intern_str::CaseInsensitive("m"), 2895),
                (intern_str::CaseInsensitive("p"), 2897),
                (intern_str::CaseInsensitive("t"), 2899),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2875),
                (intern_str::CaseInsensitive("d"), 2877),
                (intern_str::CaseInsensitive("i"), 2879),
                (intern_str::CaseInsensitive("l"), 2881),
                (intern_str::CaseInsensitive("n"), 2883),
                (intern_str::CaseInsensitive("p"), 2885),
                (intern_str::CaseInsensitive("s"), 2900),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cast."), 2901),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaCabAddressBook),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ress-book"), 2903),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaCabFeatureHandler),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ture-handler"), 2905),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaCabPcc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaCabSubsInvite),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-invite"), 2908),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaCabUserPrefs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r-prefs"), 2910),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("add"), 2904),
                (intern_str::CaseInsensitive("fea"), 2906),
                (intern_str::CaseInsensitive("pcc"), 2907),
                (intern_str::CaseInsensitive("sub"), 2909),
                (intern_str::CaseInsensitive("use"), 2911),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ab-"), 2912),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaDcdc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 2914),
            ],
            Some(Subtype::VndOmaDcd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaDd2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaDrmRisd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".risd"), 2917),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cd"), 2915),
                (intern_str::CaseInsensitive("d2"), 2916),
                (intern_str::CaseInsensitive("rm"), 2918),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaGroupUsageList),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("roup-usage-list"), 2920),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaLwm2m),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("wm2m"), 2922),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPocDetailedProgressReport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ed-progress-report"), 2925),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPocFinalReport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("report"), 2927),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPocGroups),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPocInvocationDescriptor),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tion-descriptor"), 2930),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPocOptimizedProgressReport),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("zed-progress-report"), 2932),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("detail"), 2926),
                (intern_str::CaseInsensitive("final-"), 2928),
                (intern_str::CaseInsensitive("groups"), 2929),
                (intern_str::CaseInsensitive("invoca"), 2931),
                (intern_str::CaseInsensitive("optimi"), 2933),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 2934),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaPush),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 2936),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("al"), 2924),
                (intern_str::CaseInsensitive("oc"), 2935),
                (intern_str::CaseInsensitive("us"), 2937),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaScidmMessages),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cidm.messages"), 2939),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmaXcapDirectory),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cap-directory"), 2941),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 2902),
                (intern_str::CaseInsensitive("c"), 2913),
                (intern_str::CaseInsensitive("d"), 2919),
                (intern_str::CaseInsensitive("g"), 2921),
                (intern_str::CaseInsensitive("l"), 2923),
                (intern_str::CaseInsensitive("p"), 2938),
                (intern_str::CaseInsensitive("s"), 2940),
                (intern_str::CaseInsensitive("x"), 2942),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmadsEmail),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mail"), 2944),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmadsFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmadsFolder),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 2947),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ile"), 2946),
                (intern_str::CaseInsensitive("old"), 2948),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2945),
                (intern_str::CaseInsensitive("f"), 2949),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-"), 2950),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOmalocSuplInit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oc-supl-init"), 2952),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 2873),
                (intern_str::CaseInsensitive("."), 2943),
                (intern_str::CaseInsensitive("d"), 2951),
                (intern_str::CaseInsensitive("l"), 2953),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2954),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOnepagertamp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOnepagertamx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 2956),
                (intern_str::CaseInsensitive("x"), 2957),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOnepagertatp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOnepagertatx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 2959),
                (intern_str::CaseInsensitive("x"), 2960),
            ],
            Some(Subtype::VndOnepagertat),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 2958),
                (intern_str::CaseInsensitive("t"), 2961),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ta"), 2962),
            ],
            Some(Subtype::VndOnepager),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("epager"), 2963),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenbloxGameBinary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-binary"), 2965),
            ],
            Some(Subtype::VndOpenbloxGame),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x.game"), 2966),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpeneyeOeb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".oeb"), 2968),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpengex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenofficeorgExtension),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iceorg.extension"), 2971),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenstreetmapData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eetmap.data"), 2973),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpentimestampsOts),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("estamps.ots"), 2975),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentCustomProperties),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentCustomXmlProperties),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es"), 2978),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-properties"), 2977),
                (intern_str::CaseInsensitive("xmlproperti"), 2979),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 2980),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChartshapes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("shapes"), 2982),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChart),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramColors),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rs"), 2984),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramLayout),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ut"), 2987),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramStyle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 2989),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("colo"), 2985),
                (intern_str::CaseInsensitive("data"), 2986),
                (intern_str::CaseInsensitive("layo"), 2988),
                (intern_str::CaseInsensitive("styl"), 2990),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("am"), 2991),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("chart"), 2983),
                (intern_str::CaseInsensitive("diagr"), 2992),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml."), 2993),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentDrawing),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ng"), 2994),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentExtendedProperties),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ded-properties"), 2996),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlCommentAuthors),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uthors"), 2998),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlComments),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2999),
                (intern_str::CaseInsensitive("s"), 3000),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("omment"), 3001),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlHandoutMaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("andoutmaster"), 3003),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesMaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 3005),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesSlide),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("maste"), 3006),
                (intern_str::CaseInsensitive("slide"), 3007),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("otes"), 3008),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentationMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".main"), 3010),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentation),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ion"), 3011),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresProps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("entat"), 3012),
                (intern_str::CaseInsensitive("props"), 3013),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("res"), 3014),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideLayout),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ut"), 3016),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideMaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 3018),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshowMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".main"), 3020),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshow),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideUpdateInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("teinfo"), 3022),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("layo"), 3017),
                (intern_str::CaseInsensitive("mast"), 3019),
                (intern_str::CaseInsensitive("show"), 3021),
                (intern_str::CaseInsensitive("upda"), 3023),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlide),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lide"), 3024),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTableStyles),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("estyles"), 3026),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTags),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bl"), 3027),
                (intern_str::CaseInsensitive("gs"), 3028),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplateMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".main"), 3030),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplate),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mplate"), 3031),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3029),
                (intern_str::CaseInsensitive("e"), 3032),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlViewProps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iewprops"), 3034),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3002),
                (intern_str::CaseInsensitive("h"), 3004),
                (intern_str::CaseInsensitive("n"), 3009),
                (intern_str::CaseInsensitive("p"), 3015),
                (intern_str::CaseInsensitive("s"), 3025),
                (intern_str::CaseInsensitive("t"), 3033),
                (intern_str::CaseInsensitive("v"), 3035),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ntationml."), 3036),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlCalcChain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lcchain"), 3038),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlChartsheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("artsheet"), 3040),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlComments),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlConnections),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ons"), 3043),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mments"), 3042),
                (intern_str::CaseInsensitive("nnecti"), 3044),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3039),
                (intern_str::CaseInsensitive("h"), 3041),
                (intern_str::CaseInsensitive("o"), 3045),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlDialogsheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ialogsheet"), 3047),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlExternalLink),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xternallink"), 3049),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheDefinition),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ion"), 3051),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheRecords),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("definit"), 3052),
                (intern_str::CaseInsensitive("records"), 3053),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotTable),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cache"), 3054),
                (intern_str::CaseInsensitive("table"), 3055),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ivot"), 3056),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlQueryTable),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uerytable"), 3058),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionHeaders),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ders"), 3060),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionLog),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hea"), 3061),
                (intern_str::CaseInsensitive("log"), 3062),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("evision"), 3063),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSharedStrings),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dstrings"), 3065),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMetadata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ata"), 3068),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".main"), 3067),
                (intern_str::CaseInsensitive("metad"), 3069),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheet),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("are"), 3066),
                (intern_str::CaseInsensitive("eet"), 3070),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlStyles),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("yles"), 3072),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 3071),
                (intern_str::CaseInsensitive("t"), 3073),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTableSingleCells),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("singlecells"), 3075),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTable),
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplateMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".main"), 3077),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ate"), 3078),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("able"), 3076),
                (intern_str::CaseInsensitive("empl"), 3079),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlUserNames),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sernames"), 3081),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlVolatileDependencies),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("olatiledependencies"), 3083),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlWorksheet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("orksheet"), 3085),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3046),
                (intern_str::CaseInsensitive("d"), 3048),
                (intern_str::CaseInsensitive("e"), 3050),
                (intern_str::CaseInsensitive("p"), 3057),
                (intern_str::CaseInsensitive("q"), 3059),
                (intern_str::CaseInsensitive("r"), 3064),
                (intern_str::CaseInsensitive("s"), 3074),
                (intern_str::CaseInsensitive("t"), 3080),
                (intern_str::CaseInsensitive("u"), 3082),
                (intern_str::CaseInsensitive("v"), 3084),
                (intern_str::CaseInsensitive("w"), 3086),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dsheetml."), 3087),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentThemeOverride),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("override"), 3089),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentTheme),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentVmlDrawing),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("awing"), 3091),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlComments),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("omments"), 3093),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentGlossary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sary"), 3095),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("glos"), 3096),
                (intern_str::CaseInsensitive("main"), 3097),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 3098),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocument),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ocument"), 3099),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlEndnotes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ndnotes"), 3101),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFontTable),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("table"), 3103),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFooter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFootnotes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tes"), 3106),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 3105),
                (intern_str::CaseInsensitive("no"), 3107),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt"), 3104),
                (intern_str::CaseInsensitive("ot"), 3108),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 3109),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlNumbering),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("umbering"), 3111),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlSettings),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gs"), 3113),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlStyles),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ettin"), 3114),
                (intern_str::CaseInsensitive("tyles"), 3115),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplateMain),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".main"), 3117),
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplate),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("emplate"), 3118),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlWebSettings),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ebsettings"), 3120),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3094),
                (intern_str::CaseInsensitive("d"), 3100),
                (intern_str::CaseInsensitive("e"), 3102),
                (intern_str::CaseInsensitive("f"), 3110),
                (intern_str::CaseInsensitive("n"), 3112),
                (intern_str::CaseInsensitive("s"), 3116),
                (intern_str::CaseInsensitive("t"), 3119),
                (intern_str::CaseInsensitive("w"), 3121),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rocessingml."), 3122),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("custo"), 2981),
                (intern_str::CaseInsensitive("drawi"), 2995),
                (intern_str::CaseInsensitive("exten"), 2997),
                (intern_str::CaseInsensitive("prese"), 3037),
                (intern_str::CaseInsensitive("sprea"), 3088),
                (intern_str::CaseInsensitive("theme"), 3090),
                (intern_str::CaseInsensitive("vmldr"), 3092),
                (intern_str::CaseInsensitive("wordp"), 3123),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cument."), 3124),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsPackageCoreProperties),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("es"), 3126),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsPackageDigitalSignatureXmlsignature),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ture-xmlsignature"), 3128),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOpenxmlformatsPackageRelationships),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("core-properti"), 3127),
                (intern_str::CaseInsensitive("digital-signa"), 3129),
                (intern_str::CaseInsensitive("relationships"), 3130),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("officedo"), 3125),
                (intern_str::CaseInsensitive("package."), 3131),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("formats-"), 3132),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("blo"), 2967),
                (intern_str::CaseInsensitive("eye"), 2969),
                (intern_str::CaseInsensitive("gex"), 2970),
                (intern_str::CaseInsensitive("off"), 2972),
                (intern_str::CaseInsensitive("str"), 2974),
                (intern_str::CaseInsensitive("tim"), 2976),
                (intern_str::CaseInsensitive("xml"), 3133),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("en"), 3134),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOracleResource),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ce"), 3136),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOrangeIndata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cle.resour"), 3137),
                (intern_str::CaseInsensitive("nge.indata"), 3138),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3139),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOsaNetdeploy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".netdeploy"), 3141),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOsgeoMapguidePackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".mapguide.package"), 3143),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOsgiBundle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ndle"), 3145),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOsgiDp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOsgiSubsystem),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bsystem"), 3148),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bu"), 3146),
                (intern_str::CaseInsensitive("dp"), 3147),
                (intern_str::CaseInsensitive("su"), 3149),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eo"), 3144),
                (intern_str::CaseInsensitive("i."), 3150),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3142),
                (intern_str::CaseInsensitive("g"), 3151),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOtpsCtKip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ps.ct-kip"), 3153),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndOxliCountgraph),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("li.countgraph"), 3155),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 2824),
                (intern_str::CaseInsensitive("b"), 2828),
                (intern_str::CaseInsensitive("c"), 2834),
                (intern_str::CaseInsensitive("f"), 2836),
                (intern_str::CaseInsensitive("i"), 2863),
                (intern_str::CaseInsensitive("l"), 2865),
                (intern_str::CaseInsensitive("m"), 2955),
                (intern_str::CaseInsensitive("n"), 2964),
                (intern_str::CaseInsensitive("p"), 3135),
                (intern_str::CaseInsensitive("r"), 3140),
                (intern_str::CaseInsensitive("s"), 3152),
                (intern_str::CaseInsensitive("t"), 3154),
                (intern_str::CaseInsensitive("x"), 3156),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPagerduty),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("erduty"), 3158),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPalm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3160),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPanoply),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oply"), 3162),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPaosXml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s.xml"), 3164),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndParasolidTransmitBinary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ry"), 3166),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndParasolidTransmitText),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bina"), 3167),
                (intern_str::CaseInsensitive("text"), 3168),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("asolid.transmit."), 3169),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPatentdive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPatientecommsdoc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mmsdoc"), 3172),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("entdive"), 3171),
                (intern_str::CaseInsensitive("ienteco"), 3173),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPawaafile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aafile"), 3175),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3159),
                (intern_str::CaseInsensitive("l"), 3161),
                (intern_str::CaseInsensitive("n"), 3163),
                (intern_str::CaseInsensitive("o"), 3165),
                (intern_str::CaseInsensitive("r"), 3170),
                (intern_str::CaseInsensitive("t"), 3174),
                (intern_str::CaseInsensitive("w"), 3176),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPcoB16),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b16"), 3178),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPcos),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 3179),
                (intern_str::CaseInsensitive("s"), 3180),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 3181),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPgFormat),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPgOsasli),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("format"), 3183),
                (intern_str::CaseInsensitive("osasli"), 3184),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 3185),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPiaccessApplicationLicence),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ss.application-licence"), 3187),
            ],
            None,
            0,
            22,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPicsel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("acce"), 3188),
                (intern_str::CaseInsensitive("csel"), 3189),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPmiWidget),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i.widget"), 3191),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPocGroupAdvertisement),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dvertisement"), 3193),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPocketlearn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".group-a"), 3194),
                (intern_str::CaseInsensitive("ketlearn"), 3195),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPowerbuilder6S),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-s"), 3197),
            ],
            Some(Subtype::VndPowerbuilder6),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPowerbuilder7S),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 3199),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPowerbuilder75S),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-s"), 3201),
            ],
            Some(Subtype::VndPowerbuilder75),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 3200),
                (intern_str::CaseInsensitive("5"), 3202),
            ],
            Some(Subtype::VndPowerbuilder7),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("6"), 3198),
                (intern_str::CaseInsensitive("7"), 3203),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("erbuilder"), 3204),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3196),
                (intern_str::CaseInsensitive("w"), 3205),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPreminet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPresonusMultitrack),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".multitrack"), 3208),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPreviewsystemsBox),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ystems.box"), 3210),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("minet"), 3207),
                (intern_str::CaseInsensitive("sonus"), 3209),
                (intern_str::CaseInsensitive("views"), 3211),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndProteusMagazine),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("teus.magazine"), 3213),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 3212),
                (intern_str::CaseInsensitive("o"), 3214),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPsfs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fs"), 3216),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPublishareDeltaTree),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("blishare-delta-tree"), 3218),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPviPtid1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i.ptid1"), 3220),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPwgMultiplexed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPwgXhtmlPrint),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("multiplexed"), 3222),
                (intern_str::CaseInsensitive("xhtml-print"), 3223),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g-"), 3224),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndPythaPyox),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tha.pyox"), 3226),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3177),
                (intern_str::CaseInsensitive("c"), 3182),
                (intern_str::CaseInsensitive("g"), 3186),
                (intern_str::CaseInsensitive("i"), 3190),
                (intern_str::CaseInsensitive("m"), 3192),
                (intern_str::CaseInsensitive("o"), 3206),
                (intern_str::CaseInsensitive("r"), 3215),
                (intern_str::CaseInsensitive("s"), 3217),
                (intern_str::CaseInsensitive("u"), 3219),
                (intern_str::CaseInsensitive("v"), 3221),
                (intern_str::CaseInsensitive("w"), 3225),
                (intern_str::CaseInsensitive("y"), 3227),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndQualcommBrewAppRes),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("comm.brew-app-res"), 3229),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndQuarantainenet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndQuarkQuarkXPress),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ess"), 3232),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("antainenet"), 3231),
                (intern_str::CaseInsensitive("k.quarkxpr"), 3233),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 3230),
                (intern_str::CaseInsensitive("r"), 3234),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndQuobjectQuoxdocument),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bject-quoxdocument"), 3236),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3235),
                (intern_str::CaseInsensitive("o"), 3237),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("u"), 3238),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadgamettoolsBink),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadgamettoolsSmacker),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ker"), 3241),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bink"), 3240),
                (intern_str::CaseInsensitive("smac"), 3242),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amettools."), 3243),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadiance),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMoml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlAuditConf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlAuditConn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3247),
                (intern_str::CaseInsensitive("n"), 3248),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlAuditDialog),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("log"), 3250),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlAuditStream),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eam"), 3252),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("con"), 3249),
                (intern_str::CaseInsensitive("dia"), 3251),
                (intern_str::CaseInsensitive("str"), 3253),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 3254),
            ],
            Some(Subtype::VndRadisysMsmlAudit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 3255),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlBasicLayout),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c-layout"), 3257),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlConf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlDialogBase),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlDialogFaxDetect),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlDialogFaxSendrecv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cv"), 3262),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("detect"), 3261),
                (intern_str::CaseInsensitive("sendre"), 3263),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlDialogGroup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 3265),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlDialogSpeech),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ch"), 3267),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRadisysMsmlDialogTransform),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sform"), 3269),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("base"), 3260),
                (intern_str::CaseInsensitive("fax-"), 3264),
                (intern_str::CaseInsensitive("grou"), 3266),
                (intern_str::CaseInsensitive("spee"), 3268),
                (intern_str::CaseInsensitive("tran"), 3270),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 3271),
            ],
            Some(Subtype::VndRadisysMsmlDialog),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("og"), 3272),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("audi"), 3256),
                (intern_str::CaseInsensitive("basi"), 3258),
                (intern_str::CaseInsensitive("conf"), 3259),
                (intern_str::CaseInsensitive("dial"), 3273),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 3274),
            ],
            Some(Subtype::VndRadisysMsml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oml"), 3246),
                (intern_str::CaseInsensitive("sml"), 3275),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3276),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ance"), 3245),
                (intern_str::CaseInsensitive("sys."), 3277),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3244),
                (intern_str::CaseInsensitive("i"), 3278),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRainstorData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nstor.data"), 3280),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRapid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("id"), 3282),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 3279),
                (intern_str::CaseInsensitive("i"), 3281),
                (intern_str::CaseInsensitive("p"), 3283),
                (intern_str::CaseInsensitive("r"), 3284),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRealvncBed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lvnc.bed"), 3286),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRecordareMusicxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ordare.musicxml"), 3288),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRenLearnRlprint),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("learn.rlprint"), 3290),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndResilientLogic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt.logic"), 3292),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRestful),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ilie"), 3293),
                (intern_str::CaseInsensitive("tful"), 3294),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3287),
                (intern_str::CaseInsensitive("c"), 3289),
                (intern_str::CaseInsensitive("n"), 3291),
                (intern_str::CaseInsensitive("s"), 3295),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRhetorex32kadpcm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("etorex.32kadpcm"), 3297),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRigCryptonote),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".cryptonote"), 3299),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRimCod),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".cod"), 3301),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3300),
                (intern_str::CaseInsensitive("m"), 3302),
                (intern_str::CaseInsensitive("p"), 3303),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRosetteAnnotatedDataModel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ted-data-model"), 3305),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRoute66Link66),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sette.annota"), 3306),
                (intern_str::CaseInsensitive("ute66.link66"), 3307),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRs274x),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-274x"), 3309),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndRuckusDownload),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ckus.download"), 3311),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3285),
                (intern_str::CaseInsensitive("e"), 3296),
                (intern_str::CaseInsensitive("h"), 3298),
                (intern_str::CaseInsensitive("i"), 3304),
                (intern_str::CaseInsensitive("o"), 3308),
                (intern_str::CaseInsensitive("s"), 3310),
                (intern_str::CaseInsensitive("u"), 3312),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndS3sms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sms"), 3314),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSailingtrackerTrack),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lingtracker.track"), 3316),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSapVds),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".vds"), 3318),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3317),
                (intern_str::CaseInsensitive("p"), 3319),
                (intern_str::CaseInsensitive("r"), 3320),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSbmCid),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSbmMid2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 3323),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cid"), 3322),
                (intern_str::CaseInsensitive("mid"), 3324),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m."), 3325),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndScribus),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ribus"), 3327),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealed3df),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("df"), 3329),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedCsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sf"), 3331),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedDoc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oc"), 3333),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedEml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 3335),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedMht),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedMpeg1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedMpeg4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 3338),
                (intern_str::CaseInsensitive("4"), 3339),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3340),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ht"), 3337),
                (intern_str::CaseInsensitive("pe"), 3341),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedNet),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("et"), 3343),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedPng),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedPpt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ng"), 3345),
                (intern_str::CaseInsensitive("pt"), 3346),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedSwf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("wf"), 3348),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedTiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iff"), 3350),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedXls),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ls"), 3352),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 3330),
                (intern_str::CaseInsensitive("c"), 3332),
                (intern_str::CaseInsensitive("d"), 3334),
                (intern_str::CaseInsensitive("e"), 3336),
                (intern_str::CaseInsensitive("m"), 3342),
                (intern_str::CaseInsensitive("n"), 3344),
                (intern_str::CaseInsensitive("p"), 3347),
                (intern_str::CaseInsensitive("s"), 3349),
                (intern_str::CaseInsensitive("t"), 3351),
                (intern_str::CaseInsensitive("x"), 3353),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedmediaSoftsealGif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("if"), 3355),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedmediaSoftsealHtml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tml"), 3357),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedmediaSoftsealJpg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pg"), 3359),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedmediaSoftsealMov),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedmediaSoftsealMpeg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3362),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ov"), 3361),
                (intern_str::CaseInsensitive("pe"), 3363),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSealedmediaSoftsealPdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("df"), 3365),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3356),
                (intern_str::CaseInsensitive("h"), 3358),
                (intern_str::CaseInsensitive("j"), 3360),
                (intern_str::CaseInsensitive("m"), 3364),
                (intern_str::CaseInsensitive("p"), 3366),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("edia.softseal."), 3367),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 3354),
                (intern_str::CaseInsensitive("m"), 3368),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("led"), 3369),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSeemail),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mail"), 3371),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSeis),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 3373),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSema),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSemd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSemf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3375),
                (intern_str::CaseInsensitive("d"), 3376),
                (intern_str::CaseInsensitive("f"), 3377),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSenxWarpscript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x.warpscript"), 3379),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3370),
                (intern_str::CaseInsensitive("e"), 3372),
                (intern_str::CaseInsensitive("i"), 3374),
                (intern_str::CaseInsensitive("m"), 3378),
                (intern_str::CaseInsensitive("n"), 3380),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShadeSaveFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShanaInformedFormdata),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShanaInformedFormtemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("late"), 3384),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("data"), 3383),
                (intern_str::CaseInsensitive("temp"), 3385),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShanaInformedInterchange),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rchange"), 3387),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShanaInformedPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("age"), 3389),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("form"), 3386),
                (intern_str::CaseInsensitive("inte"), 3388),
                (intern_str::CaseInsensitive("pack"), 3390),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("de-save-file"), 3382),
                (intern_str::CaseInsensitive("na.informed."), 3391),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShootproof),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("of"), 3393),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShopkick),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("otpro"), 3394),
                (intern_str::CaseInsensitive("pkick"), 3395),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndShx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3392),
                (intern_str::CaseInsensitive("o"), 3396),
                (intern_str::CaseInsensitive("p"), 3397),
                (intern_str::CaseInsensitive("x"), 3398),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSigrokSession),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k.session"), 3400),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSimTechMindMapper),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ch-mindmapper"), 3402),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSiren),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gro"), 3401),
                (intern_str::CaseInsensitive("mte"), 3403),
                (intern_str::CaseInsensitive("ren"), 3404),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSmaf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSmartNotebook),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("k"), 3407),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSmartTeacher),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("noteboo"), 3408),
                (intern_str::CaseInsensitive("teacher"), 3409),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t."), 3410),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3406),
                (intern_str::CaseInsensitive("r"), 3411),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3412),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSnesdevPageTable),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("esdev-page-table"), 3414),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSoftware602FillerFormXmlZip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-xml-zip"), 3416),
            ],
            Some(Subtype::VndSoftware602FillerForm),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ware602.filler.form"), 3417),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSolentSdkm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt.sdkm"), 3419),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSosi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ft"), 3418),
                (intern_str::CaseInsensitive("le"), 3420),
                (intern_str::CaseInsensitive("si"), 3421),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSpotfireDxp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSpotfireSfs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dxp"), 3423),
                (intern_str::CaseInsensitive("sfs"), 3424),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("otfire."), 3425),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSqlite3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lite3"), 3427),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSssCod),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSssDtf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSssNtf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cod"), 3429),
                (intern_str::CaseInsensitive("dtf"), 3430),
                (intern_str::CaseInsensitive("ntf"), 3431),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-"), 3432),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStardivisionCalc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStardivisionChart),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 3435),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("alc"), 3434),
                (intern_str::CaseInsensitive("har"), 3436),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStardivisionDraw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("raw"), 3438),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStardivisionImpress),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mpress"), 3440),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStardivisionMath),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ath"), 3442),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStardivisionWriterGlobal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-global"), 3444),
            ],
            Some(Subtype::VndStardivisionWriter),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("riter"), 3445),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3437),
                (intern_str::CaseInsensitive("d"), 3439),
                (intern_str::CaseInsensitive("i"), 3441),
                (intern_str::CaseInsensitive("m"), 3443),
                (intern_str::CaseInsensitive("w"), 3446),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("on."), 3447),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStepmaniaPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStepmaniaStepchart),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rt"), 3450),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("package"), 3449),
                (intern_str::CaseInsensitive("stepcha"), 3451),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndStreetStream),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eam"), 3453),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ardivisi"), 3448),
                (intern_str::CaseInsensitive("epmania."), 3452),
                (intern_str::CaseInsensitive("reet-str"), 3454),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunJ2meAppDescriptor),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".app-descriptor"), 3456),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunWadl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunXmlCalcTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".template"), 3459),
            ],
            Some(Subtype::VndSunXmlCalc),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunXmlDrawTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".template"), 3461),
            ],
            Some(Subtype::VndSunXmlDraw),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunXmlImpressTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".template"), 3463),
            ],
            Some(Subtype::VndSunXmlImpress),
            0,
            9,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ess"), 3464),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunXmlMath),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunXmlWriterGlobal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSunXmlWriterTemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("te"), 3468),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("global"), 3467),
                (intern_str::CaseInsensitive("templa"), 3469),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 3470),
            ],
            Some(Subtype::VndSunXmlWriter),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 3471),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("calc"), 3460),
                (intern_str::CaseInsensitive("draw"), 3462),
                (intern_str::CaseInsensitive("impr"), 3465),
                (intern_str::CaseInsensitive("math"), 3466),
                (intern_str::CaseInsensitive("writ"), 3472),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("j2me"), 3457),
                (intern_str::CaseInsensitive("wadl"), 3458),
                (intern_str::CaseInsensitive("xml."), 3473),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSusCalendar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("calendar"), 3475),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n."), 3474),
                (intern_str::CaseInsensitive("s-"), 3476),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSvd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSvf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 3478),
                (intern_str::CaseInsensitive("f"), 3479),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSwiftviewIcs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iftview-ics"), 3481),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSycle),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 3483),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSyft),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSymbianInstall),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ian.install"), 3486),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSyncmlDmNotification),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tification"), 3488),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSyncmlDmddf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSyncmlDmtnds),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 3491),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".no"), 3489),
                (intern_str::CaseInsensitive("ddf"), 3490),
                (intern_str::CaseInsensitive("tnd"), 3492),
            ],
            Some(Subtype::VndSyncmlDm),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndSyncmlDsNotification),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".notification"), 3494),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3493),
                (intern_str::CaseInsensitive("s"), 3495),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".d"), 3496),
            ],
            Some(Subtype::VndSyncml),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 3497),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cl"), 3484),
                (intern_str::CaseInsensitive("ft"), 3485),
                (intern_str::CaseInsensitive("mb"), 3487),
                (intern_str::CaseInsensitive("nc"), 3498),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3"), 3315),
                (intern_str::CaseInsensitive("a"), 3321),
                (intern_str::CaseInsensitive("b"), 3326),
                (intern_str::CaseInsensitive("c"), 3328),
                (intern_str::CaseInsensitive("e"), 3381),
                (intern_str::CaseInsensitive("h"), 3399),
                (intern_str::CaseInsensitive("i"), 3405),
                (intern_str::CaseInsensitive("m"), 3413),
                (intern_str::CaseInsensitive("n"), 3415),
                (intern_str::CaseInsensitive("o"), 3422),
                (intern_str::CaseInsensitive("p"), 3426),
                (intern_str::CaseInsensitive("q"), 3428),
                (intern_str::CaseInsensitive("s"), 3433),
                (intern_str::CaseInsensitive("t"), 3455),
                (intern_str::CaseInsensitive("u"), 3477),
                (intern_str::CaseInsensitive("v"), 3480),
                (intern_str::CaseInsensitive("w"), 3482),
                (intern_str::CaseInsensitive("y"), 3499),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTableschema),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTaoIntentModuleArchive),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("module-archive"), 3502),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bleschema"), 3501),
                (intern_str::CaseInsensitive("o.intent-"), 3503),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTcpdumpPcap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pdump.pcap"), 3505),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTencentTap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ncent.tap"), 3507),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTheqvd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndThinkCellPpttc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cell.ppttc"), 3510),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("eqvd"), 3509),
                (intern_str::CaseInsensitive("ink-"), 3511),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTmdMediaflexApi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".mediaflex.api"), 3513),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTmobileLivetv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bile-livetv"), 3516),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 3514),
                (intern_str::CaseInsensitive("l"), 3515),
                (intern_str::CaseInsensitive("o"), 3517),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTriOnesource),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ource"), 3519),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTridTpt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTriscapeMxs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".mxs"), 3522),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".ones"), 3520),
                (intern_str::CaseInsensitive("d.tpt"), 3521),
                (intern_str::CaseInsensitive("scape"), 3523),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTrolltechLinguist),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lltech.linguist"), 3525),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTrueapp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndTruedoc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("app"), 3527),
                (intern_str::CaseInsensitive("doc"), 3528),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 3529),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3524),
                (intern_str::CaseInsensitive("o"), 3526),
                (intern_str::CaseInsensitive("u"), 3530),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3504),
                (intern_str::CaseInsensitive("c"), 3506),
                (intern_str::CaseInsensitive("e"), 3508),
                (intern_str::CaseInsensitive("h"), 3512),
                (intern_str::CaseInsensitive("m"), 3518),
                (intern_str::CaseInsensitive("r"), 3531),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUbisoftWebplayer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oft.webplayer"), 3533),
            ],
            None,
            0,
            13,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUfdl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUiqTheme),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("theme"), 3536),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUmajin),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("in"), 3538),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUnity),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("y"), 3540),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUoml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetAlertWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wbxml"), 3543),
            ],
            Some(Subtype::VndUplanetAlert),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lert"), 3544),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetBearerChoiceWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wbxml"), 3546),
            ],
            Some(Subtype::VndUplanetBearerChoice),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("earer-choice"), 3547),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetCacheopWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wbxml"), 3549),
            ],
            Some(Subtype::VndUplanetCacheop),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetChannelWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wbxml"), 3551),
            ],
            Some(Subtype::VndUplanetChannel),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("acheop"), 3550),
                (intern_str::CaseInsensitive("hannel"), 3552),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetListWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xml"), 3554),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetListcmdWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wbxml"), 3556),
            ],
            Some(Subtype::VndUplanetListcmd),
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-wb"), 3555),
                (intern_str::CaseInsensitive("cmd"), 3557),
            ],
            Some(Subtype::VndUplanetList),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ist"), 3558),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUplanetSignal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ignal"), 3560),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3545),
                (intern_str::CaseInsensitive("b"), 3548),
                (intern_str::CaseInsensitive("c"), 3553),
                (intern_str::CaseInsensitive("l"), 3559),
                (intern_str::CaseInsensitive("s"), 3561),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("net."), 3562),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUriMap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("map"), 3564),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUsdz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndUvvuMp4),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".mp4"), 3567),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bis"), 3534),
                (intern_str::CaseInsensitive("fdl"), 3535),
                (intern_str::CaseInsensitive("iq."), 3537),
                (intern_str::CaseInsensitive("maj"), 3539),
                (intern_str::CaseInsensitive("nit"), 3541),
                (intern_str::CaseInsensitive("oml"), 3542),
                (intern_str::CaseInsensitive("pla"), 3563),
                (intern_str::CaseInsensitive("ri-"), 3565),
                (intern_str::CaseInsensitive("sdz"), 3566),
                (intern_str::CaseInsensitive("vvu"), 3568),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndValveSourceCompiledMap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d-map"), 3570),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndValveSourceMaterial),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 3572),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndValveSourceTexture),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("compile"), 3571),
                (intern_str::CaseInsensitive("materia"), 3573),
                (intern_str::CaseInsensitive("texture"), 3574),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lve.source."), 3575),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVcx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 3577),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVdStudy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-study"), 3579),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVectorworks),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("torworks"), 3581),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVerimatrixVcas),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("as"), 3584),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVeritoneAion),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("matrix.vc"), 3585),
                (intern_str::CaseInsensitive("tone.aion"), 3586),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVeryantThin),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ant.thin"), 3588),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3587),
                (intern_str::CaseInsensitive("y"), 3589),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVesEncrypted),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".encrypted"), 3591),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3582),
                (intern_str::CaseInsensitive("l"), 3583),
                (intern_str::CaseInsensitive("r"), 3590),
                (intern_str::CaseInsensitive("s"), 3592),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVidsoftVidconference),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("soft.vidconference"), 3594),
            ],
            None,
            0,
            18,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVisionary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nary"), 3596),
            ],
            Some(Subtype::VndVisio),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("io"), 3597),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVividenceScriptfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dence.scriptfile"), 3599),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVivo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3600),
                (intern_str::CaseInsensitive("o"), 3601),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 3595),
                (intern_str::CaseInsensitive("s"), 3598),
                (intern_str::CaseInsensitive("v"), 3602),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVmxCvsd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x.cvsd"), 3604),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3606),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndVtu),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("u"), 3608),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3576),
                (intern_str::CaseInsensitive("c"), 3578),
                (intern_str::CaseInsensitive("d"), 3580),
                (intern_str::CaseInsensitive("e"), 3593),
                (intern_str::CaseInsensitive("i"), 3603),
                (intern_str::CaseInsensitive("m"), 3605),
                (intern_str::CaseInsensitive("s"), 3607),
                (intern_str::CaseInsensitive("t"), 3609),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWapSic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3611),
            ],
            Some(Subtype::VndWapSi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWapSlc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3613),
            ],
            Some(Subtype::VndWapSl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3612),
                (intern_str::CaseInsensitive("l"), 3614),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWapWbmp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWapWbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 3617),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mp"), 3616),
                (intern_str::CaseInsensitive("xm"), 3618),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWapWmlc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWapWmlscriptc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3621),
            ],
            Some(Subtype::VndWapWmlscript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cript"), 3622),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3620),
                (intern_str::CaseInsensitive("s"), 3623),
            ],
            Some(Subtype::VndWapWml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 3624),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 3619),
                (intern_str::CaseInsensitive("m"), 3625),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 3615),
                (intern_str::CaseInsensitive("w"), 3626),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p."), 3627),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWebturbo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bturbo"), 3629),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWfaDpp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWfaP2p),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWfaWsc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dpp"), 3631),
                (intern_str::CaseInsensitive("p2p"), 3632),
                (intern_str::CaseInsensitive("wsc"), 3633),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a."), 3634),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWindowsDevicepairing),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ndows.devicepairing"), 3636),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWmc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWmfBootstrap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".bootstrap"), 3639),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3638),
                (intern_str::CaseInsensitive("f"), 3640),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWolframMathematicaPackage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".package"), 3642),
            ],
            Some(Subtype::VndWolframMathematica),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("atica"), 3643),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWolframPlayer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mathem"), 3644),
                (intern_str::CaseInsensitive("player"), 3645),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWordperfect51),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("5.1"), 3647),
            ],
            Some(Subtype::VndWordperfect),
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ect"), 3648),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lfram."), 3646),
                (intern_str::CaseInsensitive("rdperf"), 3649),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWqd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 3651),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWrqHp3000Labelled),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("q-hp3000-labelled"), 3653),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWtStf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".stf"), 3655),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWvCsp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndWvSsp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("csp"), 3657),
                (intern_str::CaseInsensitive("ssp"), 3658),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("."), 3659),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3628),
                (intern_str::CaseInsensitive("e"), 3630),
                (intern_str::CaseInsensitive("f"), 3635),
                (intern_str::CaseInsensitive("i"), 3637),
                (intern_str::CaseInsensitive("m"), 3641),
                (intern_str::CaseInsensitive("o"), 3650),
                (intern_str::CaseInsensitive("q"), 3652),
                (intern_str::CaseInsensitive("r"), 3654),
                (intern_str::CaseInsensitive("t"), 3656),
                (intern_str::CaseInsensitive("v"), 3660),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXacml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 3662),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXara),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cm"), 3663),
                (intern_str::CaseInsensitive("ra"), 3664),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXfdlWebform),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".webform"), 3666),
            ],
            Some(Subtype::VndXfdl),
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dl"), 3667),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ff"), 3669),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXmi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXmpieCpkg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pkg"), 3672),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXmpieDpkg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pkg"), 3674),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXmpiePlan),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXmpiePpkg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lan"), 3676),
                (intern_str::CaseInsensitive("pkg"), 3677),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndXmpieXlim),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lim"), 3679),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3673),
                (intern_str::CaseInsensitive("d"), 3675),
                (intern_str::CaseInsensitive("p"), 3678),
                (intern_str::CaseInsensitive("x"), 3680),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ie."), 3681),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3671),
                (intern_str::CaseInsensitive("p"), 3682),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3665),
                (intern_str::CaseInsensitive("f"), 3668),
                (intern_str::CaseInsensitive("i"), 3670),
                (intern_str::CaseInsensitive("m"), 3683),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaHvDic),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaHvScript),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ipt"), 3686),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaHvVoice),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ce"), 3688),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dic"), 3685),
                (intern_str::CaseInsensitive("scr"), 3687),
                (intern_str::CaseInsensitive("voi"), 3689),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("v-"), 3690),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaOpenscoreformatOsfpvg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive(".osfpvg"), 3692),
            ],
            Some(Subtype::VndYamahaOpenscoreformat),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("penscoreformat"), 3693),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaRemoteSetup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("emote-setup"), 3695),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaSmafAudio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaSmafPhrase),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 3698),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("audio"), 3697),
                (intern_str::CaseInsensitive("phras"), 3699),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("maf-"), 3700),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaThroughNgn),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYamahaTunnelUdpencap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ncap"), 3703),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hrough-ngn"), 3702),
                (intern_str::CaseInsensitive("unnel-udpe"), 3704),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 3691),
                (intern_str::CaseInsensitive("o"), 3694),
                (intern_str::CaseInsensitive("r"), 3696),
                (intern_str::CaseInsensitive("s"), 3701),
                (intern_str::CaseInsensitive("t"), 3705),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYaoweme),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("maha."), 3706),
                (intern_str::CaseInsensitive("oweme"), 3707),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYellowriverCustomMenu),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("llowriver-custom-menu"), 3709),
            ],
            None,
            0,
            21,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndYoutubeYt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("utube.yt"), 3711),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3708),
                (intern_str::CaseInsensitive("e"), 3710),
                (intern_str::CaseInsensitive("o"), 3712),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndZbrushPcx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ush.pcx"), 3714),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndZul),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VndZzazzDeck),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("zz.deck"), 3717),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("br"), 3715),
                (intern_str::CaseInsensitive("ul"), 3716),
                (intern_str::CaseInsensitive("za"), 3718),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 1301),
                (intern_str::CaseInsensitive("3"), 1421),
                (intern_str::CaseInsensitive("4"), 1423),
                (intern_str::CaseInsensitive("a"), 1570),
                (intern_str::CaseInsensitive("b"), 1609),
                (intern_str::CaseInsensitive("c"), 1748),
                (intern_str::CaseInsensitive("d"), 1928),
                (intern_str::CaseInsensitive("e"), 2051),
                (intern_str::CaseInsensitive("f"), 2148),
                (intern_str::CaseInsensitive("g"), 2220),
                (intern_str::CaseInsensitive("h"), 2271),
                (intern_str::CaseInsensitive("i"), 2389),
                (intern_str::CaseInsensitive("j"), 2414),
                (intern_str::CaseInsensitive("k"), 2443),
                (intern_str::CaseInsensitive("l"), 2480),
                (intern_str::CaseInsensitive("m"), 2698),
                (intern_str::CaseInsensitive("n"), 2795),
                (intern_str::CaseInsensitive("o"), 3157),
                (intern_str::CaseInsensitive("p"), 3228),
                (intern_str::CaseInsensitive("q"), 3239),
                (intern_str::CaseInsensitive("r"), 3313),
                (intern_str::CaseInsensitive("s"), 3500),
                (intern_str::CaseInsensitive("t"), 3532),
                (intern_str::CaseInsensitive("u"), 3569),
                (intern_str::CaseInsensitive("v"), 3610),
                (intern_str::CaseInsensitive("w"), 3661),
                (intern_str::CaseInsensitive("x"), 3684),
                (intern_str::CaseInsensitive("y"), 3713),
                (intern_str::CaseInsensitive("z"), 3719),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d."), 3720),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VoiceMessage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ssage"), 3722),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Voicexml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-me"), 3723),
                (intern_str::CaseInsensitive("xml"), 3724),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VorbisConfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-config"), 3726),
            ],
            Some(Subtype::Vorbis),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 3727),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VoucherCms),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er-cms"), 3729),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ice"), 3725),
                (intern_str::CaseInsensitive("rbi"), 3728),
                (intern_str::CaseInsensitive("uch"), 3730),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vp8),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vp9),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("8"), 3732),
                (intern_str::CaseInsensitive("9"), 3733),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::VqRtcpxr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-rtcpxr"), 3735),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vrml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 3737),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Vtt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 3739),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 1293),
                (intern_str::CaseInsensitive("d"), 1295),
                (intern_str::CaseInsensitive("e"), 1297),
                (intern_str::CaseInsensitive("m"), 1299),
                (intern_str::CaseInsensitive("n"), 3721),
                (intern_str::CaseInsensitive("o"), 3731),
                (intern_str::CaseInsensitive("p"), 3734),
                (intern_str::CaseInsensitive("q"), 3736),
                (intern_str::CaseInsensitive("r"), 3738),
                (intern_str::CaseInsensitive("t"), 3740),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Wasm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Watcherinfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("herinfo"), 3743),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("sm"), 3742),
                (intern_str::CaseInsensitive("tc"), 3744),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Webm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::WebpushOptions),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ush-options"), 3747),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3746),
                (intern_str::CaseInsensitive("p"), 3748),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 3749),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::WhoisppQuery),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::WhoisppResponse),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nse"), 3752),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("query"), 3751),
                (intern_str::CaseInsensitive("respo"), 3753),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("oispp-"), 3754),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Widget),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("et"), 3756),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Wita),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dg"), 3757),
                (intern_str::CaseInsensitive("ta"), 3758),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Wmf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3760),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Woff2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 3762),
            ],
            Some(Subtype::Woff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Wordperfect51),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("perfect5.1"), 3764),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ff"), 3763),
                (intern_str::CaseInsensitive("rd"), 3765),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Wsdl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Wspolicy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("licy"), 3768),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dl"), 3767),
                (intern_str::CaseInsensitive("po"), 3769),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3745),
                (intern_str::CaseInsensitive("e"), 3750),
                (intern_str::CaseInsensitive("h"), 3755),
                (intern_str::CaseInsensitive("i"), 3759),
                (intern_str::CaseInsensitive("m"), 3761),
                (intern_str::CaseInsensitive("o"), 3766),
                (intern_str::CaseInsensitive("s"), 3770),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::X123),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("23"), 3772),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::X7zCompressed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("z-compressed"), 3774),
            ],
            None,
            0,
            12,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XAbiword),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ord"), 3776),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XAiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XAlchemy),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("emy"), 3779),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XAppleDiskimage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e-diskimage"), 3781),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("biw"), 3777),
                (intern_str::CaseInsensitive("iff"), 3778),
                (intern_str::CaseInsensitive("lch"), 3780),
                (intern_str::CaseInsensitive("ppl"), 3782),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XBcpio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pio"), 3784),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XBibtex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XBittorrent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rent"), 3787),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("btex"), 3786),
                (intern_str::CaseInsensitive("ttor"), 3788),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XBoo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 3790),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3785),
                (intern_str::CaseInsensitive("i"), 3789),
                (intern_str::CaseInsensitive("o"), 3791),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCacheCsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-csf"), 3793),
            ],
            Some(Subtype::XCache),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCactvsBinary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-binary"), 3795),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("he"), 3794),
                (intern_str::CaseInsensitive("tv"), 3796),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCanonCr2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCanonCrw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 3798),
                (intern_str::CaseInsensitive("w"), 3799),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("on-cr"), 3800),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3797),
                (intern_str::CaseInsensitive("n"), 3801),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCdlink),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ink"), 3804),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCdx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3803),
                (intern_str::CaseInsensitive("l"), 3805),
                (intern_str::CaseInsensitive("x"), 3806),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCerius),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rius"), 3808),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XChdr),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XChem3d),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XChemdraw),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aw"), 3812),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("3d"), 3811),
                (intern_str::CaseInsensitive("dr"), 3813),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dr"), 3810),
                (intern_str::CaseInsensitive("em"), 3814),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3816),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCmdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3818),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCmuRaster),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-raster"), 3821),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 3819),
                (intern_str::CaseInsensitive("l"), 3820),
                (intern_str::CaseInsensitive("u"), 3822),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCompass),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XComponent),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nt"), 3825),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ass"), 3824),
                (intern_str::CaseInsensitive("one"), 3826),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XComsol),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ol"), 3828),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 3827),
                (intern_str::CaseInsensitive("s"), 3829),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCoreldrawpattern),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCoreldrawtemplate),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 3832),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pattern"), 3831),
                (intern_str::CaseInsensitive("templat"), 3833),
            ],
            Some(Subtype::XCoreldraw),
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCorelphotopaint),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("opaint"), 3835),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("draw"), 3834),
                (intern_str::CaseInsensitive("phot"), 3836),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("el"), 3837),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3830),
                (intern_str::CaseInsensitive("r"), 3838),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCpio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("io"), 3840),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCrossfire),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ossfire"), 3842),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCsh),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCsml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 3845),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCsrc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3847),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 3844),
                (intern_str::CaseInsensitive("m"), 3846),
                (intern_str::CaseInsensitive("r"), 3848),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCtx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 3850),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XCxf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3852),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3802),
                (intern_str::CaseInsensitive("d"), 3807),
                (intern_str::CaseInsensitive("e"), 3809),
                (intern_str::CaseInsensitive("h"), 3815),
                (intern_str::CaseInsensitive("i"), 3817),
                (intern_str::CaseInsensitive("m"), 3823),
                (intern_str::CaseInsensitive("o"), 3839),
                (intern_str::CaseInsensitive("p"), 3841),
                (intern_str::CaseInsensitive("r"), 3843),
                (intern_str::CaseInsensitive("s"), 3849),
                (intern_str::CaseInsensitive("t"), 3851),
                (intern_str::CaseInsensitive("x"), 3853),
            ],
            Some(Subtype::XC),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XDiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XDirector),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ctor"), 3856),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ff"), 3855),
                (intern_str::CaseInsensitive("re"), 3857),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XDoom),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("om"), 3859),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XDsrc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rc"), 3861),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XDvi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3863),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3858),
                (intern_str::CaseInsensitive("o"), 3860),
                (intern_str::CaseInsensitive("s"), 3862),
                (intern_str::CaseInsensitive("v"), 3864),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XEmblDlNucleotide),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ucleotide"), 3866),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XEpsonErf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("mbl-dl-n"), 3867),
                (intern_str::CaseInsensitive("pson-erf"), 3868),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XFlv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XFontPcf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-pcf"), 3871),
            ],
            Some(Subtype::XFont),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("t"), 3872),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XFreemind),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("emind"), 3874),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lv"), 3870),
                (intern_str::CaseInsensitive("on"), 3873),
                (intern_str::CaseInsensitive("re"), 3875),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGalacticSpc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("spc"), 3877),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGamessInput),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("put"), 3879),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGanttproject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ect"), 3881),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGaussianCheckpoint),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kpoint"), 3883),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGaussianCube),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hec"), 3884),
                (intern_str::CaseInsensitive("ube"), 3885),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGaussianInput),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nput"), 3887),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGaussianLog),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("og"), 3889),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3886),
                (intern_str::CaseInsensitive("i"), 3888),
                (intern_str::CaseInsensitive("l"), 3890),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lactic-"), 3878),
                (intern_str::CaseInsensitive("mess-in"), 3880),
                (intern_str::CaseInsensitive("nttproj"), 3882),
                (intern_str::CaseInsensitive("ussian-"), 3891),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGcg8Sequence),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g8-sequence"), 3893),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGenbank),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nbank"), 3895),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGnumeric),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("umeric"), 3897),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGoSgf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-sgf"), 3899),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGraphingCalculator),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aphing-calculator"), 3901),
            ],
            None,
            0,
            17,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGsm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3903),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XGtarCompressed),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-compressed"), 3905),
            ],
            Some(Subtype::XGtar),
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ar"), 3906),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3892),
                (intern_str::CaseInsensitive("c"), 3894),
                (intern_str::CaseInsensitive("e"), 3896),
                (intern_str::CaseInsensitive("n"), 3898),
                (intern_str::CaseInsensitive("o"), 3900),
                (intern_str::CaseInsensitive("r"), 3902),
                (intern_str::CaseInsensitive("s"), 3904),
                (intern_str::CaseInsensitive("t"), 3907),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XHaskell),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("kell"), 3909),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XHdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XHin),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XHwp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("as"), 3910),
                (intern_str::CaseInsensitive("df"), 3911),
                (intern_str::CaseInsensitive("in"), 3912),
                (intern_str::CaseInsensitive("wp"), 3913),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XIca),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3915),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XInfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XInternetSignup),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("rnet-signup"), 3918),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("fo"), 3917),
                (intern_str::CaseInsensitive("te"), 3919),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XIphone),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hone"), 3921),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XIso9660Image),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-image"), 3923),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XIsostar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("9660"), 3924),
                (intern_str::CaseInsensitive("star"), 3925),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 3926),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3916),
                (intern_str::CaseInsensitive("n"), 3920),
                (intern_str::CaseInsensitive("p"), 3922),
                (intern_str::CaseInsensitive("s"), 3927),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XJavaJnlpFile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-jnlp-file"), 3929),
            ],
            Some(Subtype::XJava),
            0,
            10,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("va"), 3930),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XJcampDx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("amp-dx"), 3932),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XJg),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XJmol),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ol"), 3935),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XJng),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3937),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3931),
                (intern_str::CaseInsensitive("c"), 3933),
                (intern_str::CaseInsensitive("g"), 3934),
                (intern_str::CaseInsensitive("m"), 3936),
                (intern_str::CaseInsensitive("n"), 3938),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XKillustrator),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ator"), 3940),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XKinemage),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("llustr"), 3941),
                (intern_str::CaseInsensitive("nemage"), 3942),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 3943),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLaAsf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 3945),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLatex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-as"), 3946),
                (intern_str::CaseInsensitive("tex"), 3947),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLha),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3949),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLilypond),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLiterateHaskell),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-haskell"), 3952),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lypond"), 3951),
                (intern_str::CaseInsensitive("terate"), 3953),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLyx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 3955),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLzh),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XLzx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 3957),
                (intern_str::CaseInsensitive("x"), 3958),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3948),
                (intern_str::CaseInsensitive("h"), 3950),
                (intern_str::CaseInsensitive("i"), 3954),
                (intern_str::CaseInsensitive("y"), 3956),
                (intern_str::CaseInsensitive("z"), 3959),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMacmolecule),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMacromodelInput),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("input"), 3962),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("molecule"), 3961),
                (intern_str::CaseInsensitive("romodel-"), 3963),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMaker),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 3965),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMatroska),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("roska"), 3967),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3964),
                (intern_str::CaseInsensitive("k"), 3966),
                (intern_str::CaseInsensitive("t"), 3968),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMdlMolfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("olfile"), 3970),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMdlRdfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMdlRxnfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("e"), 3973),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dfile"), 3972),
                (intern_str::CaseInsensitive("xnfil"), 3974),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMdlSdfile),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dfile"), 3976),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMdlTgf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gf"), 3978),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("m"), 3971),
                (intern_str::CaseInsensitive("r"), 3975),
                (intern_str::CaseInsensitive("s"), 3977),
                (intern_str::CaseInsensitive("t"), 3979),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l-"), 3980),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMixedReplace),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("xed-replace"), 3982),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMmcif),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cif"), 3984),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMng),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 3986),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMoc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMol2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMolconnZ),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("onn-z"), 3990),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 3989),
                (intern_str::CaseInsensitive("c"), 3991),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMopacGraph),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ph"), 3993),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMopacInput),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ut"), 3995),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMopacOut),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMopacVib),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gra"), 3994),
                (intern_str::CaseInsensitive("inp"), 3996),
                (intern_str::CaseInsensitive("out"), 3997),
                (intern_str::CaseInsensitive("vib"), 3998),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ac-"), 3999),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3988),
                (intern_str::CaseInsensitive("l"), 3992),
                (intern_str::CaseInsensitive("p"), 4000),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWax),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 4002),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWma),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWmd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWmv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWmx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWmz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 4004),
                (intern_str::CaseInsensitive("d"), 4005),
                (intern_str::CaseInsensitive("v"), 4006),
                (intern_str::CaseInsensitive("x"), 4007),
                (intern_str::CaseInsensitive("z"), 4008),
            ],
            Some(Subtype::XMsWm),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsWvx),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 4010),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 4003),
                (intern_str::CaseInsensitive("m"), 4009),
                (intern_str::CaseInsensitive("v"), 4011),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("w"), 4012),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsdosProgram),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("os-program"), 4014),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsi),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XMsvideo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ideo"), 4017),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 4013),
                (intern_str::CaseInsensitive("d"), 4015),
                (intern_str::CaseInsensitive("i"), 4016),
                (intern_str::CaseInsensitive("v"), 4018),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 3969),
                (intern_str::CaseInsensitive("d"), 3981),
                (intern_str::CaseInsensitive("i"), 3983),
                (intern_str::CaseInsensitive("m"), 3985),
                (intern_str::CaseInsensitive("n"), 3987),
                (intern_str::CaseInsensitive("o"), 4001),
                (intern_str::CaseInsensitive("s"), 4019),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNcbiAsn1Ascii),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 4021),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNcbiAsn1Binary),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ry"), 4023),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNcbiAsn1Spec),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("asci"), 4022),
                (intern_str::CaseInsensitive("bina"), 4024),
                (intern_str::CaseInsensitive("spec"), 4025),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 4026),
            ],
            Some(Subtype::XNcbiAsn1),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i-asn1"), 4027),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNetcdf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cdf"), 4029),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNikonNef),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("on-nef"), 4031),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNsProxyAutoconfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("proxy-autoconfig"), 4033),
            ],
            None,
            0,
            16,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XNwc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cb"), 4028),
                (intern_str::CaseInsensitive("et"), 4030),
                (intern_str::CaseInsensitive("ik"), 4032),
                (intern_str::CaseInsensitive("s-"), 4034),
                (intern_str::CaseInsensitive("wc"), 4035),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XObject),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XOlympusOrf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-orf"), 4038),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XOzApplication),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lication"), 4040),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bject"), 4037),
                (intern_str::CaseInsensitive("lympu"), 4039),
                (intern_str::CaseInsensitive("z-app"), 4041),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPascal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cal"), 4043),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPcsGcd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-gcd"), 4045),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPdb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPerl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 4048),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPkcs7Certreqresp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s7-certreqresp"), 4050),
            ],
            None,
            0,
            14,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPnRealaudio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("realaudio"), 4052),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPortableAnymap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPortableBitmap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPortableGraymap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 4056),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPortablePixmap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("anymap"), 4054),
                (intern_str::CaseInsensitive("bitmap"), 4055),
                (intern_str::CaseInsensitive("grayma"), 4057),
                (intern_str::CaseInsensitive("pixmap"), 4058),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("table-"), 4059),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XPythonCode),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-code"), 4061),
            ],
            Some(Subtype::XPython),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hon"), 4062),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("as"), 4044),
                (intern_str::CaseInsensitive("cs"), 4046),
                (intern_str::CaseInsensitive("db"), 4047),
                (intern_str::CaseInsensitive("er"), 4049),
                (intern_str::CaseInsensitive("kc"), 4051),
                (intern_str::CaseInsensitive("n-"), 4053),
                (intern_str::CaseInsensitive("or"), 4060),
                (intern_str::CaseInsensitive("yt"), 4063),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XQgis),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XQuicktimeplayer),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ktimeplayer"), 4066),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gis"), 4065),
                (intern_str::CaseInsensitive("uic"), 4067),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XRdp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XRedhatPackageManager),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("hat-package-manager"), 4070),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XRgb),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XRosdal),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dal"), 4073),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XRss),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XRuby),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("y"), 4076),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dp"), 4069),
                (intern_str::CaseInsensitive("ed"), 4071),
                (intern_str::CaseInsensitive("gb"), 4072),
                (intern_str::CaseInsensitive("os"), 4074),
                (intern_str::CaseInsensitive("ss"), 4075),
                (intern_str::CaseInsensitive("ub"), 4077),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XScala),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XScilabXcos),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-xcos"), 4080),
            ],
            Some(Subtype::XScilab),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 4081),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XScpls),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ala"), 4079),
                (intern_str::CaseInsensitive("ila"), 4082),
                (intern_str::CaseInsensitive("pls"), 4083),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSd2),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("2"), 4085),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSetext),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("text"), 4087),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSfv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("v"), 4089),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSgiMovie),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i-movie"), 4091),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XShar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ar"), 4093),
            ],
            Some(Subtype::XSh),
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSilverlight),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lverlight"), 4095),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XStuffit),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("uffit"), 4097),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSv4cpio),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("o"), 4099),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSv4crc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("pi"), 4100),
                (intern_str::CaseInsensitive("rc"), 4101),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("4c"), 4102),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XSwissprot),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("issprot"), 4104),
            ],
            None,
            0,
            7,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 4084),
                (intern_str::CaseInsensitive("d"), 4086),
                (intern_str::CaseInsensitive("e"), 4088),
                (intern_str::CaseInsensitive("f"), 4090),
                (intern_str::CaseInsensitive("g"), 4092),
                (intern_str::CaseInsensitive("h"), 4094),
                (intern_str::CaseInsensitive("i"), 4096),
                (intern_str::CaseInsensitive("t"), 4098),
                (intern_str::CaseInsensitive("v"), 4103),
                (intern_str::CaseInsensitive("w"), 4105),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("r"), 4107),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTcl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 4109),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTexGf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTexPk),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("gf"), 4111),
                (intern_str::CaseInsensitive("pk"), 4112),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTexinfo),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nfo"), 4114),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 4113),
                (intern_str::CaseInsensitive("i"), 4115),
            ],
            Some(Subtype::XTex),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("x"), 4116),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTrash),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTroffMan),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 4119),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTroffMe),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XTroffMs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 4120),
                (intern_str::CaseInsensitive("e"), 4121),
                (intern_str::CaseInsensitive("s"), 4122),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-m"), 4123),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ash"), 4118),
                (intern_str::CaseInsensitive("off"), 4124),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 4108),
                (intern_str::CaseInsensitive("c"), 4110),
                (intern_str::CaseInsensitive("e"), 4117),
                (intern_str::CaseInsensitive("r"), 4125),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XUstar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("star"), 4127),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XVamasIso14976),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("as-iso14976"), 4129),
            ],
            None,
            0,
            11,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XVcalendar),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lendar"), 4131),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XVmd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("am"), 4130),
                (intern_str::CaseInsensitive("ca"), 4132),
                (intern_str::CaseInsensitive("md"), 4133),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XWaisSource),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s-source"), 4135),
            ],
            None,
            0,
            8,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XWav),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 4136),
                (intern_str::CaseInsensitive("v"), 4137),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XWingz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ngz"), 4139),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 4138),
                (intern_str::CaseInsensitive("i"), 4140),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XX509CaCert),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("09-ca-cert"), 4142),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXbitmap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("itmap"), 4144),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXcf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("f"), 4146),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXfig),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ig"), 4148),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXpinstall),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ll"), 4150),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXpixmap),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nsta"), 4151),
                (intern_str::CaseInsensitive("xmap"), 4152),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("i"), 4153),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXtel),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("el"), 4155),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXwindowdump),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("indowdump"), 4157),
            ],
            None,
            0,
            9,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXyz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("z"), 4159),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XXz),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("5"), 4143),
                (intern_str::CaseInsensitive("b"), 4145),
                (intern_str::CaseInsensitive("c"), 4147),
                (intern_str::CaseInsensitive("f"), 4149),
                (intern_str::CaseInsensitive("p"), 4154),
                (intern_str::CaseInsensitive("t"), 4156),
                (intern_str::CaseInsensitive("w"), 4158),
                (intern_str::CaseInsensitive("y"), 4160),
                (intern_str::CaseInsensitive("z"), 4161),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("1"), 3773),
                (intern_str::CaseInsensitive("7"), 3775),
                (intern_str::CaseInsensitive("a"), 3783),
                (intern_str::CaseInsensitive("b"), 3792),
                (intern_str::CaseInsensitive("c"), 3854),
                (intern_str::CaseInsensitive("d"), 3865),
                (intern_str::CaseInsensitive("e"), 3869),
                (intern_str::CaseInsensitive("f"), 3876),
                (intern_str::CaseInsensitive("g"), 3908),
                (intern_str::CaseInsensitive("h"), 3914),
                (intern_str::CaseInsensitive("i"), 3928),
                (intern_str::CaseInsensitive("j"), 3939),
                (intern_str::CaseInsensitive("k"), 3944),
                (intern_str::CaseInsensitive("l"), 3960),
                (intern_str::CaseInsensitive("m"), 4020),
                (intern_str::CaseInsensitive("n"), 4036),
                (intern_str::CaseInsensitive("o"), 4042),
                (intern_str::CaseInsensitive("p"), 4064),
                (intern_str::CaseInsensitive("q"), 4068),
                (intern_str::CaseInsensitive("r"), 4078),
                (intern_str::CaseInsensitive("s"), 4106),
                (intern_str::CaseInsensitive("t"), 4126),
                (intern_str::CaseInsensitive("u"), 4128),
                (intern_str::CaseInsensitive("v"), 4134),
                (intern_str::CaseInsensitive("w"), 4141),
                (intern_str::CaseInsensitive("x"), 4162),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::X3dVrml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-vrml"), 4164),
            ],
            Some(Subtype::X3d),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 4165),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::X400Bp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("00-bp"), 4167),
            ],
            None,
            0,
            5,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xacml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("cml"), 4169),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XcapAtt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tt"), 4171),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XcapCaps),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("aps"), 4173),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XcapDiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iff"), 4175),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XcapEl),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XcapError),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ror"), 4178),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 4177),
                (intern_str::CaseInsensitive("r"), 4179),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XcapNs),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("s"), 4181),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("a"), 4172),
                (intern_str::CaseInsensitive("c"), 4174),
                (intern_str::CaseInsensitive("d"), 4176),
                (intern_str::CaseInsensitive("e"), 4180),
                (intern_str::CaseInsensitive("n"), 4182),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XconConferenceInfoDiff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-diff"), 4184),
            ],
            Some(Subtype::XconConferenceInfo),
            0,
            5,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("conference-info"), 4185),
            ],
            None,
            0,
            15,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ap-"), 4183),
                (intern_str::CaseInsensitive("on-"), 4186),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xenc),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("nc"), 4188),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xhtml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("tml"), 4190),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xliff),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("iff"), 4192),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XmlDtd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XmlExternalParsedEntity),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ernal-parsed-entity"), 4195),
            ],
            None,
            0,
            19,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::XmlPatch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ch"), 4197),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("dtd"), 4194),
                (intern_str::CaseInsensitive("ext"), 4196),
                (intern_str::CaseInsensitive("pat"), 4198),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 4199),
            ],
            Some(Subtype::Xml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xmpp),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 4201),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("l"), 4200),
                (intern_str::CaseInsensitive("p"), 4202),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xop),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("p"), 4204),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xslt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xspf),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lt"), 4206),
                (intern_str::CaseInsensitive("pf"), 4207),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Xv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 4163),
                (intern_str::CaseInsensitive("3"), 4166),
                (intern_str::CaseInsensitive("4"), 4168),
                (intern_str::CaseInsensitive("a"), 4170),
                (intern_str::CaseInsensitive("c"), 4187),
                (intern_str::CaseInsensitive("e"), 4189),
                (intern_str::CaseInsensitive("h"), 4191),
                (intern_str::CaseInsensitive("l"), 4193),
                (intern_str::CaseInsensitive("m"), 4203),
                (intern_str::CaseInsensitive("o"), 4205),
                (intern_str::CaseInsensitive("s"), 4208),
                (intern_str::CaseInsensitive("v"), 4209),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::YangData),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::YangPatch),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("h"), 4212),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("data"), 4211),
                (intern_str::CaseInsensitive("patc"), 4213),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-"), 4214),
            ],
            Some(Subtype::Yang),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("g"), 4215),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Yin),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("an"), 4216),
                (intern_str::CaseInsensitive("in"), 4217),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Zip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Zlib),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("b"), 4220),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Subtype::Zstd),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("d"), 4222),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ip"), 4219),
                (intern_str::CaseInsensitive("li"), 4221),
                (intern_str::CaseInsensitive("st"), 4223),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("*"), 1),
                (intern_str::CaseInsensitive("a"), 109),
                (intern_str::CaseInsensitive("b"), 132),
                (intern_str::CaseInsensitive("c"), 238),
                (intern_str::CaseInsensitive("d"), 297),
                (intern_str::CaseInsensitive("e"), 382),
                (intern_str::CaseInsensitive("f"), 416),
                (intern_str::CaseInsensitive("g"), 474),
                (intern_str::CaseInsensitive("h"), 512),
                (intern_str::CaseInsensitive("i"), 554),
                (intern_str::CaseInsensitive("j"), 606),
                (intern_str::CaseInsensitive("k"), 614),
                (intern_str::CaseInsensitive("l"), 636),
                (intern_str::CaseInsensitive("m"), 794),
                (intern_str::CaseInsensitive("n"), 818),
                (intern_str::CaseInsensitive("o"), 852),
                (intern_str::CaseInsensitive("p"), 974),
                (intern_str::CaseInsensitive("q"), 980),
                (intern_str::CaseInsensitive("r"), 1044),
                (intern_str::CaseInsensitive("s"), 1184),
                (intern_str::CaseInsensitive("t"), 1269),
                (intern_str::CaseInsensitive("u"), 1288),
                (intern_str::CaseInsensitive("v"), 3741),
                (intern_str::CaseInsensitive("w"), 3771),
                (intern_str::CaseInsensitive("x"), 4210),
                (intern_str::CaseInsensitive("y"), 4218),
                (intern_str::CaseInsensitive("z"), 4224),
            ],
            None,
            0,
            1,
        ),
    ];
    const GRAPH: intern_str::Graph<'static, 'static, intern_str::CaseInsensitive<&'static str>, Option<Subtype>> = intern_str::Graph::new(NODES, 4225);
    GRAPH
}
;
        GRAPH.process(intern_str::CaseInsensitive(s)).as_ref().copied().ok_or(crate::InvalidName)
    }
}

#[test]
fn subtype_from_str() {
    assert_eq!("*".parse::<Subtype>(), Ok(Subtype::Star));
    assert_eq!("A2L".parse::<Subtype>(), Ok(Subtype::A2l));
    assert_eq!("A2l".parse::<Subtype>(), Ok(Subtype::A2l));
    assert_eq!("aac".parse::<Subtype>(), Ok(Subtype::Aac));
    assert_eq!("aaC".parse::<Subtype>(), Ok(Subtype::Aac));
    assert_eq!("ac3".parse::<Subtype>(), Ok(Subtype::Ac3));
    assert_eq!("Ac3".parse::<Subtype>(), Ok(Subtype::Ac3));
    assert_eq!("ace".parse::<Subtype>(), Ok(Subtype::Ace));
    assert_eq!("ACe".parse::<Subtype>(), Ok(Subtype::Ace));
    assert_eq!("aces".parse::<Subtype>(), Ok(Subtype::Aces));
    assert_eq!("aCes".parse::<Subtype>(), Ok(Subtype::Aces));
    assert_eq!("activemessage".parse::<Subtype>(), Ok(Subtype::Activemessage));
    assert_eq!("aCtiVEMessaGe".parse::<Subtype>(), Ok(Subtype::Activemessage));
    assert_eq!("activity".parse::<Subtype>(), Ok(Subtype::Activity));
    assert_eq!("actIviTy".parse::<Subtype>(), Ok(Subtype::Activity));
    assert_eq!("alternative".parse::<Subtype>(), Ok(Subtype::Alternative));
    assert_eq!("aLTERNativE".parse::<Subtype>(), Ok(Subtype::Alternative));
    assert_eq!("alto-cdni".parse::<Subtype>(), Ok(Subtype::AltoCdni));
    assert_eq!("Alto-CdnI".parse::<Subtype>(), Ok(Subtype::AltoCdni));
    assert_eq!("alto-cdnifilter".parse::<Subtype>(), Ok(Subtype::AltoCdnifilter));
    assert_eq!("ALtO-CdNIFilTEr".parse::<Subtype>(), Ok(Subtype::AltoCdnifilter));
    assert_eq!("alto-costmap".parse::<Subtype>(), Ok(Subtype::AltoCostmap));
    assert_eq!("alto-CoStmaP".parse::<Subtype>(), Ok(Subtype::AltoCostmap));
    assert_eq!("alto-costmapfilter".parse::<Subtype>(), Ok(Subtype::AltoCostmapfilter));
    assert_eq!("ALTo-COsTmapfILTEr".parse::<Subtype>(), Ok(Subtype::AltoCostmapfilter));
    assert_eq!("alto-directory".parse::<Subtype>(), Ok(Subtype::AltoDirectory));
    assert_eq!("aLTO-diREctory".parse::<Subtype>(), Ok(Subtype::AltoDirectory));
    assert_eq!("alto-endpointcost".parse::<Subtype>(), Ok(Subtype::AltoEndpointcost));
    assert_eq!("aLtO-ENDpoiNtcOst".parse::<Subtype>(), Ok(Subtype::AltoEndpointcost));
    assert_eq!("alto-endpointcostparams".parse::<Subtype>(), Ok(Subtype::AltoEndpointcostparams));
    assert_eq!("AltO-eNDPoIntcoSTpAramS".parse::<Subtype>(), Ok(Subtype::AltoEndpointcostparams));
    assert_eq!("alto-endpointprop".parse::<Subtype>(), Ok(Subtype::AltoEndpointprop));
    assert_eq!("aLtO-ENdPOINtprOp".parse::<Subtype>(), Ok(Subtype::AltoEndpointprop));
    assert_eq!("alto-endpointpropparams".parse::<Subtype>(), Ok(Subtype::AltoEndpointpropparams));
    assert_eq!("AlTO-ENDpOIntprOpParaMs".parse::<Subtype>(), Ok(Subtype::AltoEndpointpropparams));
    assert_eq!("alto-error".parse::<Subtype>(), Ok(Subtype::AltoError));
    assert_eq!("Alto-ErRor".parse::<Subtype>(), Ok(Subtype::AltoError));
    assert_eq!("alto-networkmap".parse::<Subtype>(), Ok(Subtype::AltoNetworkmap));
    assert_eq!("aLTo-NETworkMap".parse::<Subtype>(), Ok(Subtype::AltoNetworkmap));
    assert_eq!("alto-networkmapfilter".parse::<Subtype>(), Ok(Subtype::AltoNetworkmapfilter));
    assert_eq!("AlTo-netWORKMaPfIlTer".parse::<Subtype>(), Ok(Subtype::AltoNetworkmapfilter));
    assert_eq!("alto-propmap".parse::<Subtype>(), Ok(Subtype::AltoPropmap));
    assert_eq!("altO-PRoPmaP".parse::<Subtype>(), Ok(Subtype::AltoPropmap));
    assert_eq!("alto-propmapparams".parse::<Subtype>(), Ok(Subtype::AltoPropmapparams));
    assert_eq!("aLtO-PRopmApPArAmS".parse::<Subtype>(), Ok(Subtype::AltoPropmapparams));
    assert_eq!("alto-updatestreamcontrol".parse::<Subtype>(), Ok(Subtype::AltoUpdatestreamcontrol));
    assert_eq!("ALtO-UPDatEstreamcOnTroL".parse::<Subtype>(), Ok(Subtype::AltoUpdatestreamcontrol));
    assert_eq!("alto-updatestreamparams".parse::<Subtype>(), Ok(Subtype::AltoUpdatestreamparams));
    assert_eq!("ALto-upDAtesTReaMpaRaMS".parse::<Subtype>(), Ok(Subtype::AltoUpdatestreamparams));
    assert_eq!("AML".parse::<Subtype>(), Ok(Subtype::Aml));
    assert_eq!("AML".parse::<Subtype>(), Ok(Subtype::Aml));
    assert_eq!("AMR".parse::<Subtype>(), Ok(Subtype::Amr));
    assert_eq!("Amr".parse::<Subtype>(), Ok(Subtype::Amr));
    assert_eq!("AMR-WB".parse::<Subtype>(), Ok(Subtype::AmrWb));
    assert_eq!("amr-WB".parse::<Subtype>(), Ok(Subtype::AmrWb));
    assert_eq!("andrew-inset".parse::<Subtype>(), Ok(Subtype::AndrewInset));
    assert_eq!("ANdReW-InSet".parse::<Subtype>(), Ok(Subtype::AndrewInset));
    assert_eq!("annodex".parse::<Subtype>(), Ok(Subtype::Annodex));
    assert_eq!("annoDEX".parse::<Subtype>(), Ok(Subtype::Annodex));
    assert_eq!("appledouble".parse::<Subtype>(), Ok(Subtype::Appledouble));
    assert_eq!("APPlEDOUBlE".parse::<Subtype>(), Ok(Subtype::Appledouble));
    assert_eq!("applefile".parse::<Subtype>(), Ok(Subtype::Applefile));
    assert_eq!("AppleFile".parse::<Subtype>(), Ok(Subtype::Applefile));
    assert_eq!("aptx".parse::<Subtype>(), Ok(Subtype::Aptx));
    assert_eq!("apTx".parse::<Subtype>(), Ok(Subtype::Aptx));
    assert_eq!("asc".parse::<Subtype>(), Ok(Subtype::Asc));
    assert_eq!("aSC".parse::<Subtype>(), Ok(Subtype::Asc));
    assert_eq!("at".parse::<Subtype>(), Ok(Subtype::At));
    assert_eq!("At".parse::<Subtype>(), Ok(Subtype::At));
    assert_eq!("ATF".parse::<Subtype>(), Ok(Subtype::Atf));
    assert_eq!("atf".parse::<Subtype>(), Ok(Subtype::Atf));
    assert_eq!("ATFX".parse::<Subtype>(), Ok(Subtype::Atfx));
    assert_eq!("Atfx".parse::<Subtype>(), Ok(Subtype::Atfx));
    assert_eq!("atom".parse::<Subtype>(), Ok(Subtype::Atom));
    assert_eq!("ATOM".parse::<Subtype>(), Ok(Subtype::Atom));
    assert_eq!("atomcat".parse::<Subtype>(), Ok(Subtype::Atomcat));
    assert_eq!("AtOmcAT".parse::<Subtype>(), Ok(Subtype::Atomcat));
    assert_eq!("atomdeleted".parse::<Subtype>(), Ok(Subtype::Atomdeleted));
    assert_eq!("AtomDELEtEd".parse::<Subtype>(), Ok(Subtype::Atomdeleted));
    assert_eq!("atomicmail".parse::<Subtype>(), Ok(Subtype::Atomicmail));
    assert_eq!("atoMiCmAil".parse::<Subtype>(), Ok(Subtype::Atomicmail));
    assert_eq!("atomserv".parse::<Subtype>(), Ok(Subtype::Atomserv));
    assert_eq!("ATomserv".parse::<Subtype>(), Ok(Subtype::Atomserv));
    assert_eq!("atomsvc".parse::<Subtype>(), Ok(Subtype::Atomsvc));
    assert_eq!("AtOMsvC".parse::<Subtype>(), Ok(Subtype::Atomsvc));
    assert_eq!("ATRAC3".parse::<Subtype>(), Ok(Subtype::Atrac3));
    assert_eq!("aTRAc3".parse::<Subtype>(), Ok(Subtype::Atrac3));
    assert_eq!("ATRAC-ADVANCED-LOSSLESS".parse::<Subtype>(), Ok(Subtype::AtracAdvancedLossless));
    assert_eq!("aTrAC-ADVancED-losSleSs".parse::<Subtype>(), Ok(Subtype::AtracAdvancedLossless));
    assert_eq!("ATRAC-X".parse::<Subtype>(), Ok(Subtype::AtracX));
    assert_eq!("ATraC-x".parse::<Subtype>(), Ok(Subtype::AtracX));
    assert_eq!("atsc-dwd".parse::<Subtype>(), Ok(Subtype::AtscDwd));
    assert_eq!("aTSC-dwD".parse::<Subtype>(), Ok(Subtype::AtscDwd));
    assert_eq!("atsc-dynamic-event-message".parse::<Subtype>(), Ok(Subtype::AtscDynamicEventMessage));
    assert_eq!("AtsC-DYNamIC-EVeNt-MeSsaGE".parse::<Subtype>(), Ok(Subtype::AtscDynamicEventMessage));
    assert_eq!("atsc-held".parse::<Subtype>(), Ok(Subtype::AtscHeld));
    assert_eq!("ATsC-hEld".parse::<Subtype>(), Ok(Subtype::AtscHeld));
    assert_eq!("atsc-rdt".parse::<Subtype>(), Ok(Subtype::AtscRdt));
    assert_eq!("ATsc-rdT".parse::<Subtype>(), Ok(Subtype::AtscRdt));
    assert_eq!("atsc-rsat".parse::<Subtype>(), Ok(Subtype::AtscRsat));
    assert_eq!("ATsc-rSAT".parse::<Subtype>(), Ok(Subtype::AtscRsat));
    assert_eq!("ATXML".parse::<Subtype>(), Ok(Subtype::Atxml));
    assert_eq!("AtXML".parse::<Subtype>(), Ok(Subtype::Atxml));
    assert_eq!("auth-policy".parse::<Subtype>(), Ok(Subtype::AuthPolicy));
    assert_eq!("AUtH-POLIcY".parse::<Subtype>(), Ok(Subtype::AuthPolicy));
    assert_eq!("AV1".parse::<Subtype>(), Ok(Subtype::Av1));
    assert_eq!("av1".parse::<Subtype>(), Ok(Subtype::Av1));
    assert_eq!("avci".parse::<Subtype>(), Ok(Subtype::Avci));
    assert_eq!("aVCI".parse::<Subtype>(), Ok(Subtype::Avci));
    assert_eq!("avcs".parse::<Subtype>(), Ok(Subtype::Avcs));
    assert_eq!("AVcS".parse::<Subtype>(), Ok(Subtype::Avcs));
    assert_eq!("avif".parse::<Subtype>(), Ok(Subtype::Avif));
    assert_eq!("aviF".parse::<Subtype>(), Ok(Subtype::Avif));
    assert_eq!("bacnet-xdd".parse::<Subtype>(), Ok(Subtype::BacnetXdd));
    assert_eq!("baCNeT-xDD".parse::<Subtype>(), Ok(Subtype::BacnetXdd));
    assert_eq!("basic".parse::<Subtype>(), Ok(Subtype::Basic));
    assert_eq!("bASiC".parse::<Subtype>(), Ok(Subtype::Basic));
    assert_eq!("batch-SMTP".parse::<Subtype>(), Ok(Subtype::BatchSmtp));
    assert_eq!("batch-SMtp".parse::<Subtype>(), Ok(Subtype::BatchSmtp));
    assert_eq!("bbolin".parse::<Subtype>(), Ok(Subtype::Bbolin));
    assert_eq!("bBolin".parse::<Subtype>(), Ok(Subtype::Bbolin));
    assert_eq!("beep".parse::<Subtype>(), Ok(Subtype::Beep));
    assert_eq!("BEEP".parse::<Subtype>(), Ok(Subtype::Beep));
    assert_eq!("blockdevice".parse::<Subtype>(), Ok(Subtype::Blockdevice));
    assert_eq!("bLockdeViCe".parse::<Subtype>(), Ok(Subtype::Blockdevice));
    assert_eq!("bmp".parse::<Subtype>(), Ok(Subtype::Bmp));
    assert_eq!("BMp".parse::<Subtype>(), Ok(Subtype::Bmp));
    assert_eq!("BMPEG".parse::<Subtype>(), Ok(Subtype::Bmpeg));
    assert_eq!("bmPEG".parse::<Subtype>(), Ok(Subtype::Bmpeg));
    assert_eq!("BT656".parse::<Subtype>(), Ok(Subtype::Bt656));
    assert_eq!("Bt656".parse::<Subtype>(), Ok(Subtype::Bt656));
    assert_eq!("BV16".parse::<Subtype>(), Ok(Subtype::Bv16));
    assert_eq!("bV16".parse::<Subtype>(), Ok(Subtype::Bv16));
    assert_eq!("BV32".parse::<Subtype>(), Ok(Subtype::Bv32));
    assert_eq!("BV32".parse::<Subtype>(), Ok(Subtype::Bv32));
    assert_eq!("byteranges".parse::<Subtype>(), Ok(Subtype::Byteranges));
    assert_eq!("BYtERANgeS".parse::<Subtype>(), Ok(Subtype::Byteranges));
    assert_eq!("cache-manifest".parse::<Subtype>(), Ok(Subtype::CacheManifest));
    assert_eq!("CaChe-MaNifesT".parse::<Subtype>(), Ok(Subtype::CacheManifest));
    assert_eq!("calendar".parse::<Subtype>(), Ok(Subtype::Calendar));
    assert_eq!("CAlenDar".parse::<Subtype>(), Ok(Subtype::Calendar));
    assert_eq!("call-completion".parse::<Subtype>(), Ok(Subtype::CallCompletion));
    assert_eq!("cAlL-comPLeTIon".parse::<Subtype>(), Ok(Subtype::CallCompletion));
    assert_eq!("CALS-1840".parse::<Subtype>(), Ok(Subtype::Cals1840));
    assert_eq!("CalS-1840".parse::<Subtype>(), Ok(Subtype::Cals1840));
    assert_eq!("captive".parse::<Subtype>(), Ok(Subtype::Captive));
    assert_eq!("caPTIve".parse::<Subtype>(), Ok(Subtype::Captive));
    assert_eq!("cbor".parse::<Subtype>(), Ok(Subtype::Cbor));
    assert_eq!("cboR".parse::<Subtype>(), Ok(Subtype::Cbor));
    assert_eq!("cbor-seq".parse::<Subtype>(), Ok(Subtype::CborSeq));
    assert_eq!("CBor-SEQ".parse::<Subtype>(), Ok(Subtype::CborSeq));
    assert_eq!("cccex".parse::<Subtype>(), Ok(Subtype::Cccex));
    assert_eq!("cCcex".parse::<Subtype>(), Ok(Subtype::Cccex));
    assert_eq!("ccmp".parse::<Subtype>(), Ok(Subtype::Ccmp));
    assert_eq!("ccmp".parse::<Subtype>(), Ok(Subtype::Ccmp));
    assert_eq!("ccxml".parse::<Subtype>(), Ok(Subtype::Ccxml));
    assert_eq!("cCxMl".parse::<Subtype>(), Ok(Subtype::Ccxml));
    assert_eq!("CDFX".parse::<Subtype>(), Ok(Subtype::Cdfx));
    assert_eq!("cDFX".parse::<Subtype>(), Ok(Subtype::Cdfx));
    assert_eq!("cdmi-capability".parse::<Subtype>(), Ok(Subtype::CdmiCapability));
    assert_eq!("CDmI-CAPABILitY".parse::<Subtype>(), Ok(Subtype::CdmiCapability));
    assert_eq!("cdmi-container".parse::<Subtype>(), Ok(Subtype::CdmiContainer));
    assert_eq!("CdmI-ConTaInEr".parse::<Subtype>(), Ok(Subtype::CdmiContainer));
    assert_eq!("cdmi-domain".parse::<Subtype>(), Ok(Subtype::CdmiDomain));
    assert_eq!("CdmI-doMAin".parse::<Subtype>(), Ok(Subtype::CdmiDomain));
    assert_eq!("cdmi-object".parse::<Subtype>(), Ok(Subtype::CdmiObject));
    assert_eq!("cDmI-obJect".parse::<Subtype>(), Ok(Subtype::CdmiObject));
    assert_eq!("cdmi-queue".parse::<Subtype>(), Ok(Subtype::CdmiQueue));
    assert_eq!("cDMI-quEUE".parse::<Subtype>(), Ok(Subtype::CdmiQueue));
    assert_eq!("cdni".parse::<Subtype>(), Ok(Subtype::Cdni));
    assert_eq!("CdNi".parse::<Subtype>(), Ok(Subtype::Cdni));
    assert_eq!("CEA".parse::<Subtype>(), Ok(Subtype::Cea));
    assert_eq!("cea".parse::<Subtype>(), Ok(Subtype::Cea));
    assert_eq!("cea-2018".parse::<Subtype>(), Ok(Subtype::Cea2018));
    assert_eq!("CEA-2018".parse::<Subtype>(), Ok(Subtype::Cea2018));
    assert_eq!("CelB".parse::<Subtype>(), Ok(Subtype::CelB));
    assert_eq!("celB".parse::<Subtype>(), Ok(Subtype::CelB));
    assert_eq!("cellml".parse::<Subtype>(), Ok(Subtype::Cellml));
    assert_eq!("cellML".parse::<Subtype>(), Ok(Subtype::Cellml));
    assert_eq!("cfw".parse::<Subtype>(), Ok(Subtype::Cfw));
    assert_eq!("CFw".parse::<Subtype>(), Ok(Subtype::Cfw));
    assert_eq!("cgm".parse::<Subtype>(), Ok(Subtype::Cgm));
    assert_eq!("Cgm".parse::<Subtype>(), Ok(Subtype::Cgm));
    assert_eq!("chardevice".parse::<Subtype>(), Ok(Subtype::Chardevice));
    assert_eq!("ChArDEVICE".parse::<Subtype>(), Ok(Subtype::Chardevice));
    assert_eq!("city".parse::<Subtype>(), Ok(Subtype::City));
    assert_eq!("City".parse::<Subtype>(), Ok(Subtype::City));
    assert_eq!("clearmode".parse::<Subtype>(), Ok(Subtype::Clearmode));
    assert_eq!("cLeArmoDE".parse::<Subtype>(), Ok(Subtype::Clearmode));
    assert_eq!("clr".parse::<Subtype>(), Ok(Subtype::Clr));
    assert_eq!("clR".parse::<Subtype>(), Ok(Subtype::Clr));
    assert_eq!("clue".parse::<Subtype>(), Ok(Subtype::Clue));
    assert_eq!("cLUe".parse::<Subtype>(), Ok(Subtype::Clue));
    assert_eq!("clue_info".parse::<Subtype>(), Ok(Subtype::ClueInfo));
    assert_eq!("CLue_info".parse::<Subtype>(), Ok(Subtype::ClueInfo));
    assert_eq!("cms".parse::<Subtype>(), Ok(Subtype::Cms));
    assert_eq!("cMS".parse::<Subtype>(), Ok(Subtype::Cms));
    assert_eq!("CN".parse::<Subtype>(), Ok(Subtype::Cn));
    assert_eq!("Cn".parse::<Subtype>(), Ok(Subtype::Cn));
    assert_eq!("cnrp".parse::<Subtype>(), Ok(Subtype::Cnrp));
    assert_eq!("CNRp".parse::<Subtype>(), Ok(Subtype::Cnrp));
    assert_eq!("coap-group".parse::<Subtype>(), Ok(Subtype::CoapGroup));
    assert_eq!("COaP-groUP".parse::<Subtype>(), Ok(Subtype::CoapGroup));
    assert_eq!("coap-payload".parse::<Subtype>(), Ok(Subtype::CoapPayload));
    assert_eq!("COap-pAYLOAD".parse::<Subtype>(), Ok(Subtype::CoapPayload));
    assert_eq!("collection".parse::<Subtype>(), Ok(Subtype::Collection));
    assert_eq!("COLleCTIon".parse::<Subtype>(), Ok(Subtype::Collection));
    assert_eq!("commonground".parse::<Subtype>(), Ok(Subtype::Commonground));
    assert_eq!("cOmMonGROund".parse::<Subtype>(), Ok(Subtype::Commonground));
    assert_eq!("conference-info".parse::<Subtype>(), Ok(Subtype::ConferenceInfo));
    assert_eq!("cOnFERenCE-InFO".parse::<Subtype>(), Ok(Subtype::ConferenceInfo));
    assert_eq!("cose".parse::<Subtype>(), Ok(Subtype::Cose));
    assert_eq!("COSE".parse::<Subtype>(), Ok(Subtype::Cose));
    assert_eq!("cose-key".parse::<Subtype>(), Ok(Subtype::CoseKey));
    assert_eq!("coSE-kEy".parse::<Subtype>(), Ok(Subtype::CoseKey));
    assert_eq!("cose-key-set".parse::<Subtype>(), Ok(Subtype::CoseKeySet));
    assert_eq!("CosE-Key-SET".parse::<Subtype>(), Ok(Subtype::CoseKeySet));
    assert_eq!("CPIM".parse::<Subtype>(), Ok(Subtype::Cpim));
    assert_eq!("cPim".parse::<Subtype>(), Ok(Subtype::Cpim));
    assert_eq!("cpl".parse::<Subtype>(), Ok(Subtype::Cpl));
    assert_eq!("cpl".parse::<Subtype>(), Ok(Subtype::Cpl));
    assert_eq!("cql".parse::<Subtype>(), Ok(Subtype::Cql));
    assert_eq!("CQl".parse::<Subtype>(), Ok(Subtype::Cql));
    assert_eq!("cql-extension".parse::<Subtype>(), Ok(Subtype::CqlExtension));
    assert_eq!("Cql-EXTeNsiOn".parse::<Subtype>(), Ok(Subtype::CqlExtension));
    assert_eq!("cql-identifier".parse::<Subtype>(), Ok(Subtype::CqlIdentifier));
    assert_eq!("cqL-identiFiEr".parse::<Subtype>(), Ok(Subtype::CqlIdentifier));
    assert_eq!("csound".parse::<Subtype>(), Ok(Subtype::Csound));
    assert_eq!("cSoUNd".parse::<Subtype>(), Ok(Subtype::Csound));
    assert_eq!("csrattrs".parse::<Subtype>(), Ok(Subtype::Csrattrs));
    assert_eq!("CsrATtrs".parse::<Subtype>(), Ok(Subtype::Csrattrs));
    assert_eq!("css".parse::<Subtype>(), Ok(Subtype::Css));
    assert_eq!("cSs".parse::<Subtype>(), Ok(Subtype::Css));
    assert_eq!("CSTAdata".parse::<Subtype>(), Ok(Subtype::CstAdata));
    assert_eq!("CstadATA".parse::<Subtype>(), Ok(Subtype::CstAdata));
    assert_eq!("csta".parse::<Subtype>(), Ok(Subtype::Csta));
    assert_eq!("csTa".parse::<Subtype>(), Ok(Subtype::Csta));
    assert_eq!("csv".parse::<Subtype>(), Ok(Subtype::Csv));
    assert_eq!("csv".parse::<Subtype>(), Ok(Subtype::Csv));
    assert_eq!("csv-schema".parse::<Subtype>(), Ok(Subtype::CsvSchema));
    assert_eq!("Csv-sCheMA".parse::<Subtype>(), Ok(Subtype::CsvSchema));
    assert_eq!("csvm".parse::<Subtype>(), Ok(Subtype::Csvm));
    assert_eq!("csVM".parse::<Subtype>(), Ok(Subtype::Csvm));
    assert_eq!("cu-seeme".parse::<Subtype>(), Ok(Subtype::CuSeeme));
    assert_eq!("CU-SEeMe".parse::<Subtype>(), Ok(Subtype::CuSeeme));
    assert_eq!("cwt".parse::<Subtype>(), Ok(Subtype::Cwt));
    assert_eq!("cwt".parse::<Subtype>(), Ok(Subtype::Cwt));
    assert_eq!("cybercash".parse::<Subtype>(), Ok(Subtype::Cybercash));
    assert_eq!("cybERCasH".parse::<Subtype>(), Ok(Subtype::Cybercash));
    assert_eq!("dash".parse::<Subtype>(), Ok(Subtype::Dash));
    assert_eq!("Dash".parse::<Subtype>(), Ok(Subtype::Dash));
    assert_eq!("dash-patch".parse::<Subtype>(), Ok(Subtype::DashPatch));
    assert_eq!("dasH-PATCH".parse::<Subtype>(), Ok(Subtype::DashPatch));
    assert_eq!("dashdelta".parse::<Subtype>(), Ok(Subtype::Dashdelta));
    assert_eq!("DashdeLTa".parse::<Subtype>(), Ok(Subtype::Dashdelta));
    assert_eq!("DAT12".parse::<Subtype>(), Ok(Subtype::Dat12));
    assert_eq!("dat12".parse::<Subtype>(), Ok(Subtype::Dat12));
    assert_eq!("davmount".parse::<Subtype>(), Ok(Subtype::Davmount));
    assert_eq!("DaVmOunT".parse::<Subtype>(), Ok(Subtype::Davmount));
    assert_eq!("dca-rft".parse::<Subtype>(), Ok(Subtype::DcaRft));
    assert_eq!("DCa-rFT".parse::<Subtype>(), Ok(Subtype::DcaRft));
    assert_eq!("DCD".parse::<Subtype>(), Ok(Subtype::Dcd));
    assert_eq!("Dcd".parse::<Subtype>(), Ok(Subtype::Dcd));
    assert_eq!("dec-dx".parse::<Subtype>(), Ok(Subtype::DecDx));
    assert_eq!("deC-Dx".parse::<Subtype>(), Ok(Subtype::DecDx));
    assert_eq!("delivery-status".parse::<Subtype>(), Ok(Subtype::DeliveryStatus));
    assert_eq!("dEliveRy-STaTUS".parse::<Subtype>(), Ok(Subtype::DeliveryStatus));
    assert_eq!("dialog-info".parse::<Subtype>(), Ok(Subtype::DialogInfo));
    assert_eq!("DIAlOg-iNfo".parse::<Subtype>(), Ok(Subtype::DialogInfo));
    assert_eq!("dicom".parse::<Subtype>(), Ok(Subtype::Dicom));
    assert_eq!("DiCOM".parse::<Subtype>(), Ok(Subtype::Dicom));
    assert_eq!("dicom-rle".parse::<Subtype>(), Ok(Subtype::DicomRle));
    assert_eq!("DiCoM-rLE".parse::<Subtype>(), Ok(Subtype::DicomRle));
    assert_eq!("digest".parse::<Subtype>(), Ok(Subtype::Digest));
    assert_eq!("diGeSt".parse::<Subtype>(), Ok(Subtype::Digest));
    assert_eq!("DII".parse::<Subtype>(), Ok(Subtype::Dii));
    assert_eq!("diI".parse::<Subtype>(), Ok(Subtype::Dii));
    assert_eq!("directory".parse::<Subtype>(), Ok(Subtype::Directory));
    assert_eq!("DirectoRY".parse::<Subtype>(), Ok(Subtype::Directory));
    assert_eq!("directory-locked".parse::<Subtype>(), Ok(Subtype::DirectoryLocked));
    assert_eq!("DirEcTory-LoCkEd".parse::<Subtype>(), Ok(Subtype::DirectoryLocked));
    assert_eq!("disposition-notification".parse::<Subtype>(), Ok(Subtype::DispositionNotification));
    assert_eq!("DisPOSitIon-NOTIFICAtION".parse::<Subtype>(), Ok(Subtype::DispositionNotification));
    assert_eq!("DIT".parse::<Subtype>(), Ok(Subtype::Dit));
    assert_eq!("DiT".parse::<Subtype>(), Ok(Subtype::Dit));
    assert_eq!("dl".parse::<Subtype>(), Ok(Subtype::Dl));
    assert_eq!("DL".parse::<Subtype>(), Ok(Subtype::Dl));
    assert_eq!("dls".parse::<Subtype>(), Ok(Subtype::Dls));
    assert_eq!("DLs".parse::<Subtype>(), Ok(Subtype::Dls));
    assert_eq!("dns".parse::<Subtype>(), Ok(Subtype::Dns));
    assert_eq!("dNS".parse::<Subtype>(), Ok(Subtype::Dns));
    assert_eq!("dns-message".parse::<Subtype>(), Ok(Subtype::DnsMessage));
    assert_eq!("Dns-MEsSAgE".parse::<Subtype>(), Ok(Subtype::DnsMessage));
    assert_eq!("dots".parse::<Subtype>(), Ok(Subtype::Dots));
    assert_eq!("doTS".parse::<Subtype>(), Ok(Subtype::Dots));
    assert_eq!("dskpp".parse::<Subtype>(), Ok(Subtype::Dskpp));
    assert_eq!("dskPp".parse::<Subtype>(), Ok(Subtype::Dskpp));
    assert_eq!("dsptype".parse::<Subtype>(), Ok(Subtype::Dsptype));
    assert_eq!("dsPTYPe".parse::<Subtype>(), Ok(Subtype::Dsptype));
    assert_eq!("dsr-es201108".parse::<Subtype>(), Ok(Subtype::DsrEs201108));
    assert_eq!("Dsr-eS201108".parse::<Subtype>(), Ok(Subtype::DsrEs201108));
    assert_eq!("dsr-es202050".parse::<Subtype>(), Ok(Subtype::DsrEs202050));
    assert_eq!("DSr-eS202050".parse::<Subtype>(), Ok(Subtype::DsrEs202050));
    assert_eq!("dsr-es202211".parse::<Subtype>(), Ok(Subtype::DsrEs202211));
    assert_eq!("dSR-es202211".parse::<Subtype>(), Ok(Subtype::DsrEs202211));
    assert_eq!("dsr-es202212".parse::<Subtype>(), Ok(Subtype::DsrEs202212));
    assert_eq!("dSr-ES202212".parse::<Subtype>(), Ok(Subtype::DsrEs202212));
    assert_eq!("dssc".parse::<Subtype>(), Ok(Subtype::Dssc));
    assert_eq!("DsSc".parse::<Subtype>(), Ok(Subtype::Dssc));
    assert_eq!("DV".parse::<Subtype>(), Ok(Subtype::Dv));
    assert_eq!("dV".parse::<Subtype>(), Ok(Subtype::Dv));
    assert_eq!("dvcs".parse::<Subtype>(), Ok(Subtype::Dvcs));
    assert_eq!("Dvcs".parse::<Subtype>(), Ok(Subtype::Dvcs));
    assert_eq!("DVI4".parse::<Subtype>(), Ok(Subtype::Dvi4));
    assert_eq!("dVi4".parse::<Subtype>(), Ok(Subtype::Dvi4));
    assert_eq!("e57".parse::<Subtype>(), Ok(Subtype::E57));
    assert_eq!("E57".parse::<Subtype>(), Ok(Subtype::E57));
    assert_eq!("eac3".parse::<Subtype>(), Ok(Subtype::Eac3));
    assert_eq!("EAC3".parse::<Subtype>(), Ok(Subtype::Eac3));
    assert_eq!("EDI-consent".parse::<Subtype>(), Ok(Subtype::EdiConsent));
    assert_eq!("Edi-CoNSeNT".parse::<Subtype>(), Ok(Subtype::EdiConsent));
    assert_eq!("EDI-X12".parse::<Subtype>(), Ok(Subtype::EdiX12));
    assert_eq!("EDI-x12".parse::<Subtype>(), Ok(Subtype::EdiX12));
    assert_eq!("EDIFACT".parse::<Subtype>(), Ok(Subtype::Edifact));
    assert_eq!("EdIFAct".parse::<Subtype>(), Ok(Subtype::Edifact));
    assert_eq!("efi".parse::<Subtype>(), Ok(Subtype::Efi));
    assert_eq!("EFI".parse::<Subtype>(), Ok(Subtype::Efi));
    assert_eq!("elm".parse::<Subtype>(), Ok(Subtype::Elm));
    assert_eq!("elM".parse::<Subtype>(), Ok(Subtype::Elm));
    assert_eq!("EmergencyCallData.cap".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataCap));
    assert_eq!("EmergEnCYCalLData.CAP".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataCap));
    assert_eq!("EmergencyCallData.Comment".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataComment));
    assert_eq!("emeRgeNCycALLDATa.cOmmeNT".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataComment));
    assert_eq!("EmergencyCallData.Control".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataControl));
    assert_eq!("EmerGEnCycalldaTa.CONTROl".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataControl));
    assert_eq!("EmergencyCallData.DeviceInfo".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataDeviceInfo));
    assert_eq!("eMeRGencyCaLLdAtA.devicEInfo".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataDeviceInfo));
    assert_eq!("EmergencyCallData.eCall.MSD".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataECallMsd));
    assert_eq!("emeRgeNCycAlldaTA.EcalL.Msd".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataECallMsd));
    assert_eq!("EmergencyCallData.ProviderInfo".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataProviderInfo));
    assert_eq!("EMeRgenCYCaLldatA.pROvIDerInfO".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataProviderInfo));
    assert_eq!("EmergencyCallData.ServiceInfo".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataServiceInfo));
    assert_eq!("EmeRgeNCYcALLdatA.ServICEiNFO".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataServiceInfo));
    assert_eq!("EmergencyCallData.SubscriberInfo".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataSubscriberInfo));
    assert_eq!("EMERgENCycaLldaTA.sUbscriBEriNFO".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataSubscriberInfo));
    assert_eq!("EmergencyCallData.VEDS".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataVeds));
    assert_eq!("emERGENCYcAlLdATA.VEdS".parse::<Subtype>(), Ok(Subtype::EmergencyCallDataVeds));
    assert_eq!("emf".parse::<Subtype>(), Ok(Subtype::Emf));
    assert_eq!("eMF".parse::<Subtype>(), Ok(Subtype::Emf));
    assert_eq!("emma".parse::<Subtype>(), Ok(Subtype::Emma));
    assert_eq!("EmMA".parse::<Subtype>(), Ok(Subtype::Emma));
    assert_eq!("emotionml".parse::<Subtype>(), Ok(Subtype::Emotionml));
    assert_eq!("EmotIonMl".parse::<Subtype>(), Ok(Subtype::Emotionml));
    assert_eq!("encaprtp".parse::<Subtype>(), Ok(Subtype::Encaprtp));
    assert_eq!("ENCapRTP".parse::<Subtype>(), Ok(Subtype::Encaprtp));
    assert_eq!("encrypted".parse::<Subtype>(), Ok(Subtype::Encrypted));
    assert_eq!("ENcRYPTeD".parse::<Subtype>(), Ok(Subtype::Encrypted));
    assert_eq!("enriched".parse::<Subtype>(), Ok(Subtype::Enriched));
    assert_eq!("enrIcheD".parse::<Subtype>(), Ok(Subtype::Enriched));
    assert_eq!("epp".parse::<Subtype>(), Ok(Subtype::Epp));
    assert_eq!("EPP".parse::<Subtype>(), Ok(Subtype::Epp));
    assert_eq!("epub".parse::<Subtype>(), Ok(Subtype::Epub));
    assert_eq!("ePUB".parse::<Subtype>(), Ok(Subtype::Epub));
    assert_eq!("eshop".parse::<Subtype>(), Ok(Subtype::Eshop));
    assert_eq!("esHop".parse::<Subtype>(), Ok(Subtype::Eshop));
    assert_eq!("EVRC".parse::<Subtype>(), Ok(Subtype::Evrc));
    assert_eq!("EVRC".parse::<Subtype>(), Ok(Subtype::Evrc));
    assert_eq!("EVRC0".parse::<Subtype>(), Ok(Subtype::Evrc0));
    assert_eq!("EVRc0".parse::<Subtype>(), Ok(Subtype::Evrc0));
    assert_eq!("EVRC1".parse::<Subtype>(), Ok(Subtype::Evrc1));
    assert_eq!("eVRc1".parse::<Subtype>(), Ok(Subtype::Evrc1));
    assert_eq!("EVRC-QCP".parse::<Subtype>(), Ok(Subtype::EvrcQcp));
    assert_eq!("evrc-QCP".parse::<Subtype>(), Ok(Subtype::EvrcQcp));
    assert_eq!("EVRCB".parse::<Subtype>(), Ok(Subtype::Evrcb));
    assert_eq!("evrCB".parse::<Subtype>(), Ok(Subtype::Evrcb));
    assert_eq!("EVRCB0".parse::<Subtype>(), Ok(Subtype::Evrcb0));
    assert_eq!("eVRcb0".parse::<Subtype>(), Ok(Subtype::Evrcb0));
    assert_eq!("EVRCB1".parse::<Subtype>(), Ok(Subtype::Evrcb1));
    assert_eq!("EVrcB1".parse::<Subtype>(), Ok(Subtype::Evrcb1));
    assert_eq!("EVRCNW".parse::<Subtype>(), Ok(Subtype::Evrcnw));
    assert_eq!("Evrcnw".parse::<Subtype>(), Ok(Subtype::Evrcnw));
    assert_eq!("EVRCNW0".parse::<Subtype>(), Ok(Subtype::Evrcnw0));
    assert_eq!("EvRCNw0".parse::<Subtype>(), Ok(Subtype::Evrcnw0));
    assert_eq!("EVRCNW1".parse::<Subtype>(), Ok(Subtype::Evrcnw1));
    assert_eq!("EVrcNW1".parse::<Subtype>(), Ok(Subtype::Evrcnw1));
    assert_eq!("EVRCWB".parse::<Subtype>(), Ok(Subtype::Evrcwb));
    assert_eq!("EvrcWb".parse::<Subtype>(), Ok(Subtype::Evrcwb));
    assert_eq!("EVRCWB0".parse::<Subtype>(), Ok(Subtype::Evrcwb0));
    assert_eq!("evRcWb0".parse::<Subtype>(), Ok(Subtype::Evrcwb0));
    assert_eq!("EVRCWB1".parse::<Subtype>(), Ok(Subtype::Evrcwb1));
    assert_eq!("EVRCwB1".parse::<Subtype>(), Ok(Subtype::Evrcwb1));
    assert_eq!("EVS".parse::<Subtype>(), Ok(Subtype::Evs));
    assert_eq!("evS".parse::<Subtype>(), Ok(Subtype::Evs));
    assert_eq!("example".parse::<Subtype>(), Ok(Subtype::Example));
    assert_eq!("exAmPlE".parse::<Subtype>(), Ok(Subtype::Example));
    assert_eq!("exi".parse::<Subtype>(), Ok(Subtype::Exi));
    assert_eq!("ExI".parse::<Subtype>(), Ok(Subtype::Exi));
    assert_eq!("expect-ct-report".parse::<Subtype>(), Ok(Subtype::ExpectCtReport));
    assert_eq!("eXPEct-ct-repOrt".parse::<Subtype>(), Ok(Subtype::ExpectCtReport));
    assert_eq!("express".parse::<Subtype>(), Ok(Subtype::Express));
    assert_eq!("eXPReSS".parse::<Subtype>(), Ok(Subtype::Express));
    assert_eq!("external-body".parse::<Subtype>(), Ok(Subtype::ExternalBody));
    assert_eq!("extERnaL-BODY".parse::<Subtype>(), Ok(Subtype::ExternalBody));
    assert_eq!("fastinfoset".parse::<Subtype>(), Ok(Subtype::Fastinfoset));
    assert_eq!("faSTINfOset".parse::<Subtype>(), Ok(Subtype::Fastinfoset));
    assert_eq!("fastsoap".parse::<Subtype>(), Ok(Subtype::Fastsoap));
    assert_eq!("fasTsOaP".parse::<Subtype>(), Ok(Subtype::Fastsoap));
    assert_eq!("fdt".parse::<Subtype>(), Ok(Subtype::Fdt));
    assert_eq!("fdT".parse::<Subtype>(), Ok(Subtype::Fdt));
    assert_eq!("feedback-report".parse::<Subtype>(), Ok(Subtype::FeedbackReport));
    assert_eq!("FEeDBacK-RePorT".parse::<Subtype>(), Ok(Subtype::FeedbackReport));
    assert_eq!("FFV1".parse::<Subtype>(), Ok(Subtype::Ffv1));
    assert_eq!("ffV1".parse::<Subtype>(), Ok(Subtype::Ffv1));
    assert_eq!("fhir".parse::<Subtype>(), Ok(Subtype::Fhir));
    assert_eq!("fHIR".parse::<Subtype>(), Ok(Subtype::Fhir));
    assert_eq!("fhirpath".parse::<Subtype>(), Ok(Subtype::Fhirpath));
    assert_eq!("fHirPath".parse::<Subtype>(), Ok(Subtype::Fhirpath));
    assert_eq!("fifo".parse::<Subtype>(), Ok(Subtype::Fifo));
    assert_eq!("fIfO".parse::<Subtype>(), Ok(Subtype::Fifo));
    assert_eq!("fits".parse::<Subtype>(), Ok(Subtype::Fits));
    assert_eq!("Fits".parse::<Subtype>(), Ok(Subtype::Fits));
    assert_eq!("flac".parse::<Subtype>(), Ok(Subtype::Flac));
    assert_eq!("fLac".parse::<Subtype>(), Ok(Subtype::Flac));
    assert_eq!("flexfec".parse::<Subtype>(), Ok(Subtype::Flexfec));
    assert_eq!("FLExfeC".parse::<Subtype>(), Ok(Subtype::Flexfec));
    assert_eq!("fli".parse::<Subtype>(), Ok(Subtype::Fli));
    assert_eq!("FLi".parse::<Subtype>(), Ok(Subtype::Fli));
    assert_eq!("font-tdpfr".parse::<Subtype>(), Ok(Subtype::FontTdpfr));
    assert_eq!("FOnt-tDpfr".parse::<Subtype>(), Ok(Subtype::FontTdpfr));
    assert_eq!("form-data".parse::<Subtype>(), Ok(Subtype::FormData));
    assert_eq!("forM-dAta".parse::<Subtype>(), Ok(Subtype::FormData));
    assert_eq!("framework-attributes".parse::<Subtype>(), Ok(Subtype::FrameworkAttributes));
    assert_eq!("frAMEWork-ATtRIbutES".parse::<Subtype>(), Ok(Subtype::FrameworkAttributes));
    assert_eq!("futuresplash".parse::<Subtype>(), Ok(Subtype::Futuresplash));
    assert_eq!("futUrEsplaSH".parse::<Subtype>(), Ok(Subtype::Futuresplash));
    assert_eq!("fwdred".parse::<Subtype>(), Ok(Subtype::Fwdred));
    assert_eq!("Fwdred".parse::<Subtype>(), Ok(Subtype::Fwdred));
    assert_eq!("g3fax".parse::<Subtype>(), Ok(Subtype::G3fax));
    assert_eq!("G3fAX".parse::<Subtype>(), Ok(Subtype::G3fax));
    assert_eq!("G711-0".parse::<Subtype>(), Ok(Subtype::G7110));
    assert_eq!("g711-0".parse::<Subtype>(), Ok(Subtype::G7110));
    assert_eq!("G719".parse::<Subtype>(), Ok(Subtype::G719));
    assert_eq!("g719".parse::<Subtype>(), Ok(Subtype::G719));
    assert_eq!("G722".parse::<Subtype>(), Ok(Subtype::G722));
    assert_eq!("G722".parse::<Subtype>(), Ok(Subtype::G722));
    assert_eq!("G7221".parse::<Subtype>(), Ok(Subtype::G7221));
    assert_eq!("g7221".parse::<Subtype>(), Ok(Subtype::G7221));
    assert_eq!("G723".parse::<Subtype>(), Ok(Subtype::G723));
    assert_eq!("g723".parse::<Subtype>(), Ok(Subtype::G723));
    assert_eq!("G726-16".parse::<Subtype>(), Ok(Subtype::G72616));
    assert_eq!("g726-16".parse::<Subtype>(), Ok(Subtype::G72616));
    assert_eq!("G726-24".parse::<Subtype>(), Ok(Subtype::G72624));
    assert_eq!("G726-24".parse::<Subtype>(), Ok(Subtype::G72624));
    assert_eq!("G726-32".parse::<Subtype>(), Ok(Subtype::G72632));
    assert_eq!("g726-32".parse::<Subtype>(), Ok(Subtype::G72632));
    assert_eq!("G726-40".parse::<Subtype>(), Ok(Subtype::G72640));
    assert_eq!("g726-40".parse::<Subtype>(), Ok(Subtype::G72640));
    assert_eq!("G728".parse::<Subtype>(), Ok(Subtype::G728));
    assert_eq!("G728".parse::<Subtype>(), Ok(Subtype::G728));
    assert_eq!("G729".parse::<Subtype>(), Ok(Subtype::G729));
    assert_eq!("G729".parse::<Subtype>(), Ok(Subtype::G729));
    assert_eq!("G7291".parse::<Subtype>(), Ok(Subtype::G7291));
    assert_eq!("g7291".parse::<Subtype>(), Ok(Subtype::G7291));
    assert_eq!("G729D".parse::<Subtype>(), Ok(Subtype::G729d));
    assert_eq!("g729d".parse::<Subtype>(), Ok(Subtype::G729d));
    assert_eq!("G729E".parse::<Subtype>(), Ok(Subtype::G729e));
    assert_eq!("G729e".parse::<Subtype>(), Ok(Subtype::G729e));
    assert_eq!("geo".parse::<Subtype>(), Ok(Subtype::Geo));
    assert_eq!("GeO".parse::<Subtype>(), Ok(Subtype::Geo));
    assert_eq!("geopackage".parse::<Subtype>(), Ok(Subtype::Geopackage));
    assert_eq!("gEoPaCkAGe".parse::<Subtype>(), Ok(Subtype::Geopackage));
    assert_eq!("geoxacml".parse::<Subtype>(), Ok(Subtype::Geoxacml));
    assert_eq!("GEOxaCMl".parse::<Subtype>(), Ok(Subtype::Geoxacml));
    assert_eq!("gff3".parse::<Subtype>(), Ok(Subtype::Gff3));
    assert_eq!("GfF3".parse::<Subtype>(), Ok(Subtype::Gff3));
    assert_eq!("gif".parse::<Subtype>(), Ok(Subtype::Gif));
    assert_eq!("gif".parse::<Subtype>(), Ok(Subtype::Gif));
    assert_eq!("gl".parse::<Subtype>(), Ok(Subtype::Gl));
    assert_eq!("Gl".parse::<Subtype>(), Ok(Subtype::Gl));
    assert_eq!("global".parse::<Subtype>(), Ok(Subtype::Global));
    assert_eq!("GLOBAl".parse::<Subtype>(), Ok(Subtype::Global));
    assert_eq!("global-delivery-status".parse::<Subtype>(), Ok(Subtype::GlobalDeliveryStatus));
    assert_eq!("GLObaL-deliVeRY-StaTus".parse::<Subtype>(), Ok(Subtype::GlobalDeliveryStatus));
    assert_eq!("global-disposition-notification".parse::<Subtype>(), Ok(Subtype::GlobalDispositionNotification));
    assert_eq!("GlObal-dIspoSItION-NOTIfIcAtioN".parse::<Subtype>(), Ok(Subtype::GlobalDispositionNotification));
    assert_eq!("global-headers".parse::<Subtype>(), Ok(Subtype::GlobalHeaders));
    assert_eq!("glObAL-HeAders".parse::<Subtype>(), Ok(Subtype::GlobalHeaders));
    assert_eq!("gltf".parse::<Subtype>(), Ok(Subtype::Gltf));
    assert_eq!("Gltf".parse::<Subtype>(), Ok(Subtype::Gltf));
    assert_eq!("gltf-binary".parse::<Subtype>(), Ok(Subtype::GltfBinary));
    assert_eq!("GLTf-bInarY".parse::<Subtype>(), Ok(Subtype::GltfBinary));
    assert_eq!("gltf-buffer".parse::<Subtype>(), Ok(Subtype::GltfBuffer));
    assert_eq!("GLtf-BUfFER".parse::<Subtype>(), Ok(Subtype::GltfBuffer));
    assert_eq!("gml".parse::<Subtype>(), Ok(Subtype::Gml));
    assert_eq!("GMl".parse::<Subtype>(), Ok(Subtype::Gml));
    assert_eq!("grammar-ref-list".parse::<Subtype>(), Ok(Subtype::GrammarRefList));
    assert_eq!("gRAMMar-ref-LISt".parse::<Subtype>(), Ok(Subtype::GrammarRefList));
    assert_eq!("GSM".parse::<Subtype>(), Ok(Subtype::Gsm));
    assert_eq!("GSm".parse::<Subtype>(), Ok(Subtype::Gsm));
    assert_eq!("GSM-EFR".parse::<Subtype>(), Ok(Subtype::GsmEfr));
    assert_eq!("GSm-EfR".parse::<Subtype>(), Ok(Subtype::GsmEfr));
    assert_eq!("GSM-HR-08".parse::<Subtype>(), Ok(Subtype::GsmHr08));
    assert_eq!("GSM-hr-08".parse::<Subtype>(), Ok(Subtype::GsmHr08));
    assert_eq!("gzip".parse::<Subtype>(), Ok(Subtype::Gzip));
    assert_eq!("gzip".parse::<Subtype>(), Ok(Subtype::Gzip));
    assert_eq!("H224".parse::<Subtype>(), Ok(Subtype::H224));
    assert_eq!("H224".parse::<Subtype>(), Ok(Subtype::H224));
    assert_eq!("H261".parse::<Subtype>(), Ok(Subtype::H261));
    assert_eq!("H261".parse::<Subtype>(), Ok(Subtype::H261));
    assert_eq!("H263".parse::<Subtype>(), Ok(Subtype::H263));
    assert_eq!("h263".parse::<Subtype>(), Ok(Subtype::H263));
    assert_eq!("H263-1998".parse::<Subtype>(), Ok(Subtype::H2631998));
    assert_eq!("h263-1998".parse::<Subtype>(), Ok(Subtype::H2631998));
    assert_eq!("H263-2000".parse::<Subtype>(), Ok(Subtype::H2632000));
    assert_eq!("h263-2000".parse::<Subtype>(), Ok(Subtype::H2632000));
    assert_eq!("H264".parse::<Subtype>(), Ok(Subtype::H264));
    assert_eq!("H264".parse::<Subtype>(), Ok(Subtype::H264));
    assert_eq!("H264-RCDO".parse::<Subtype>(), Ok(Subtype::H264Rcdo));
    assert_eq!("H264-rCDO".parse::<Subtype>(), Ok(Subtype::H264Rcdo));
    assert_eq!("H264-SVC".parse::<Subtype>(), Ok(Subtype::H264Svc));
    assert_eq!("h264-Svc".parse::<Subtype>(), Ok(Subtype::H264Svc));
    assert_eq!("H265".parse::<Subtype>(), Ok(Subtype::H265));
    assert_eq!("H265".parse::<Subtype>(), Ok(Subtype::H265));
    assert_eq!("header-set".parse::<Subtype>(), Ok(Subtype::HeaderSet));
    assert_eq!("heaDeR-SeT".parse::<Subtype>(), Ok(Subtype::HeaderSet));
    assert_eq!("heic".parse::<Subtype>(), Ok(Subtype::Heic));
    assert_eq!("Heic".parse::<Subtype>(), Ok(Subtype::Heic));
    assert_eq!("heic-sequence".parse::<Subtype>(), Ok(Subtype::HeicSequence));
    assert_eq!("HEIc-sEqUenCe".parse::<Subtype>(), Ok(Subtype::HeicSequence));
    assert_eq!("heif".parse::<Subtype>(), Ok(Subtype::Heif));
    assert_eq!("hEif".parse::<Subtype>(), Ok(Subtype::Heif));
    assert_eq!("heif-sequence".parse::<Subtype>(), Ok(Subtype::HeifSequence));
    assert_eq!("HeiF-SeQUENcE".parse::<Subtype>(), Ok(Subtype::HeifSequence));
    assert_eq!("hej2k".parse::<Subtype>(), Ok(Subtype::Hej2k));
    assert_eq!("HeJ2K".parse::<Subtype>(), Ok(Subtype::Hej2k));
    assert_eq!("held".parse::<Subtype>(), Ok(Subtype::Held));
    assert_eq!("helD".parse::<Subtype>(), Ok(Subtype::Held));
    assert_eq!("hsj2".parse::<Subtype>(), Ok(Subtype::Hsj2));
    assert_eq!("HsJ2".parse::<Subtype>(), Ok(Subtype::Hsj2));
    assert_eq!("hta".parse::<Subtype>(), Ok(Subtype::Hta));
    assert_eq!("htA".parse::<Subtype>(), Ok(Subtype::Hta));
    assert_eq!("html".parse::<Subtype>(), Ok(Subtype::Html));
    assert_eq!("HTML".parse::<Subtype>(), Ok(Subtype::Html));
    assert_eq!("http".parse::<Subtype>(), Ok(Subtype::Http));
    assert_eq!("HTTP".parse::<Subtype>(), Ok(Subtype::Http));
    assert_eq!("hyperstudio".parse::<Subtype>(), Ok(Subtype::Hyperstudio));
    assert_eq!("HYPERSTUdIO".parse::<Subtype>(), Ok(Subtype::Hyperstudio));
    assert_eq!("iLBC".parse::<Subtype>(), Ok(Subtype::ILbc));
    assert_eq!("iLBC".parse::<Subtype>(), Ok(Subtype::ILbc));
    assert_eq!("ibe-key-request".parse::<Subtype>(), Ok(Subtype::IbeKeyRequest));
    assert_eq!("iBE-kEY-REQUest".parse::<Subtype>(), Ok(Subtype::IbeKeyRequest));
    assert_eq!("ibe-pkg-reply".parse::<Subtype>(), Ok(Subtype::IbePkgReply));
    assert_eq!("IbE-pkG-replY".parse::<Subtype>(), Ok(Subtype::IbePkgReply));
    assert_eq!("ibe-pp-data".parse::<Subtype>(), Ok(Subtype::IbePpData));
    assert_eq!("ibe-pP-DAta".parse::<Subtype>(), Ok(Subtype::IbePpData));
    assert_eq!("ief".parse::<Subtype>(), Ok(Subtype::Ief));
    assert_eq!("iEf".parse::<Subtype>(), Ok(Subtype::Ief));
    assert_eq!("iges".parse::<Subtype>(), Ok(Subtype::Iges));
    assert_eq!("iGES".parse::<Subtype>(), Ok(Subtype::Iges));
    assert_eq!("im-iscomposing".parse::<Subtype>(), Ok(Subtype::ImIscomposing));
    assert_eq!("im-iscOMPOsiNg".parse::<Subtype>(), Ok(Subtype::ImIscomposing));
    assert_eq!("imdn".parse::<Subtype>(), Ok(Subtype::Imdn));
    assert_eq!("ImDN".parse::<Subtype>(), Ok(Subtype::Imdn));
    assert_eq!("index".parse::<Subtype>(), Ok(Subtype::Index));
    assert_eq!("inDEx".parse::<Subtype>(), Ok(Subtype::Index));
    assert_eq!("index.cmd".parse::<Subtype>(), Ok(Subtype::IndexCmd));
    assert_eq!("InDex.Cmd".parse::<Subtype>(), Ok(Subtype::IndexCmd));
    assert_eq!("index.obj".parse::<Subtype>(), Ok(Subtype::IndexObj));
    assert_eq!("IndEX.ObJ".parse::<Subtype>(), Ok(Subtype::IndexObj));
    assert_eq!("index.response".parse::<Subtype>(), Ok(Subtype::IndexResponse));
    assert_eq!("INdEX.rESPOnse".parse::<Subtype>(), Ok(Subtype::IndexResponse));
    assert_eq!("index.vnd".parse::<Subtype>(), Ok(Subtype::IndexVnd));
    assert_eq!("INdeX.vnD".parse::<Subtype>(), Ok(Subtype::IndexVnd));
    assert_eq!("inkml".parse::<Subtype>(), Ok(Subtype::Inkml));
    assert_eq!("iNKMl".parse::<Subtype>(), Ok(Subtype::Inkml));
    assert_eq!("IOTP".parse::<Subtype>(), Ok(Subtype::Iotp));
    assert_eq!("IotP".parse::<Subtype>(), Ok(Subtype::Iotp));
    assert_eq!("ip-mr_v2.5".parse::<Subtype>(), Ok(Subtype::IpMrV25));
    assert_eq!("ip-MR_v2.5".parse::<Subtype>(), Ok(Subtype::IpMrV25));
    assert_eq!("ipfix".parse::<Subtype>(), Ok(Subtype::Ipfix));
    assert_eq!("IPFiX".parse::<Subtype>(), Ok(Subtype::Ipfix));
    assert_eq!("ipp".parse::<Subtype>(), Ok(Subtype::Ipp));
    assert_eq!("IPP".parse::<Subtype>(), Ok(Subtype::Ipp));
    assert_eq!("iso.segment".parse::<Subtype>(), Ok(Subtype::IsoSegment));
    assert_eq!("IsO.SeGMeNt".parse::<Subtype>(), Ok(Subtype::IsoSegment));
    assert_eq!("ISUP".parse::<Subtype>(), Ok(Subtype::Isup));
    assert_eq!("ISUp".parse::<Subtype>(), Ok(Subtype::Isup));
    assert_eq!("its".parse::<Subtype>(), Ok(Subtype::Its));
    assert_eq!("ItS".parse::<Subtype>(), Ok(Subtype::Its));
    assert_eq!("java-archive".parse::<Subtype>(), Ok(Subtype::JavaArchive));
    assert_eq!("JAva-ArchIve".parse::<Subtype>(), Ok(Subtype::JavaArchive));
    assert_eq!("java-serialized-object".parse::<Subtype>(), Ok(Subtype::JavaSerializedObject));
    assert_eq!("jAva-serIalIzED-oBject".parse::<Subtype>(), Ok(Subtype::JavaSerializedObject));
    assert_eq!("java-vm".parse::<Subtype>(), Ok(Subtype::JavaVm));
    assert_eq!("JaVA-vM".parse::<Subtype>(), Ok(Subtype::JavaVm));
    assert_eq!("javascript".parse::<Subtype>(), Ok(Subtype::Javascript));
    assert_eq!("jAVASCrIPT".parse::<Subtype>(), Ok(Subtype::Javascript));
    assert_eq!("jcr-cnd".parse::<Subtype>(), Ok(Subtype::JcrCnd));
    assert_eq!("JCr-CNd".parse::<Subtype>(), Ok(Subtype::JcrCnd));
    assert_eq!("jf2feed".parse::<Subtype>(), Ok(Subtype::Jf2feed));
    assert_eq!("JF2feEd".parse::<Subtype>(), Ok(Subtype::Jf2feed));
    assert_eq!("jls".parse::<Subtype>(), Ok(Subtype::Jls));
    assert_eq!("JLS".parse::<Subtype>(), Ok(Subtype::Jls));
    assert_eq!("jose".parse::<Subtype>(), Ok(Subtype::Jose));
    assert_eq!("JOSE".parse::<Subtype>(), Ok(Subtype::Jose));
    assert_eq!("jp2".parse::<Subtype>(), Ok(Subtype::Jp2));
    assert_eq!("Jp2".parse::<Subtype>(), Ok(Subtype::Jp2));
    assert_eq!("jpeg".parse::<Subtype>(), Ok(Subtype::Jpeg));
    assert_eq!("jPeg".parse::<Subtype>(), Ok(Subtype::Jpeg));
    assert_eq!("jpeg2000".parse::<Subtype>(), Ok(Subtype::Jpeg2000));
    assert_eq!("jPeg2000".parse::<Subtype>(), Ok(Subtype::Jpeg2000));
    assert_eq!("jph".parse::<Subtype>(), Ok(Subtype::Jph));
    assert_eq!("jpH".parse::<Subtype>(), Ok(Subtype::Jph));
    assert_eq!("jphc".parse::<Subtype>(), Ok(Subtype::Jphc));
    assert_eq!("jPHc".parse::<Subtype>(), Ok(Subtype::Jphc));
    assert_eq!("jpm".parse::<Subtype>(), Ok(Subtype::Jpm));
    assert_eq!("JPm".parse::<Subtype>(), Ok(Subtype::Jpm));
    assert_eq!("jpx".parse::<Subtype>(), Ok(Subtype::Jpx));
    assert_eq!("Jpx".parse::<Subtype>(), Ok(Subtype::Jpx));
    assert_eq!("jrd".parse::<Subtype>(), Ok(Subtype::Jrd));
    assert_eq!("jrd".parse::<Subtype>(), Ok(Subtype::Jrd));
    assert_eq!("jscalendar".parse::<Subtype>(), Ok(Subtype::Jscalendar));
    assert_eq!("jsCALEnDAr".parse::<Subtype>(), Ok(Subtype::Jscalendar));
    assert_eq!("json".parse::<Subtype>(), Ok(Subtype::Json));
    assert_eq!("JSoN".parse::<Subtype>(), Ok(Subtype::Json));
    assert_eq!("json-patch".parse::<Subtype>(), Ok(Subtype::JsonPatch));
    assert_eq!("JSoN-pATCH".parse::<Subtype>(), Ok(Subtype::JsonPatch));
    assert_eq!("json-seq".parse::<Subtype>(), Ok(Subtype::JsonSeq));
    assert_eq!("jSON-SeQ".parse::<Subtype>(), Ok(Subtype::JsonSeq));
    assert_eq!("jwk".parse::<Subtype>(), Ok(Subtype::Jwk));
    assert_eq!("JWK".parse::<Subtype>(), Ok(Subtype::Jwk));
    assert_eq!("jwk-set".parse::<Subtype>(), Ok(Subtype::JwkSet));
    assert_eq!("Jwk-Set".parse::<Subtype>(), Ok(Subtype::JwkSet));
    assert_eq!("jwt".parse::<Subtype>(), Ok(Subtype::Jwt));
    assert_eq!("jwT".parse::<Subtype>(), Ok(Subtype::Jwt));
    assert_eq!("jxl".parse::<Subtype>(), Ok(Subtype::Jxl));
    assert_eq!("jxL".parse::<Subtype>(), Ok(Subtype::Jxl));
    assert_eq!("jxr".parse::<Subtype>(), Ok(Subtype::Jxr));
    assert_eq!("jXR".parse::<Subtype>(), Ok(Subtype::Jxr));
    assert_eq!("jxrA".parse::<Subtype>(), Ok(Subtype::JxrA));
    assert_eq!("jXRa".parse::<Subtype>(), Ok(Subtype::JxrA));
    assert_eq!("jxrS".parse::<Subtype>(), Ok(Subtype::JxrS));
    assert_eq!("jxRS".parse::<Subtype>(), Ok(Subtype::JxrS));
    assert_eq!("jxs".parse::<Subtype>(), Ok(Subtype::Jxs));
    assert_eq!("jXS".parse::<Subtype>(), Ok(Subtype::Jxs));
    assert_eq!("jxsc".parse::<Subtype>(), Ok(Subtype::Jxsc));
    assert_eq!("jXsc".parse::<Subtype>(), Ok(Subtype::Jxsc));
    assert_eq!("jxsi".parse::<Subtype>(), Ok(Subtype::Jxsi));
    assert_eq!("JxSI".parse::<Subtype>(), Ok(Subtype::Jxsi));
    assert_eq!("jxss".parse::<Subtype>(), Ok(Subtype::Jxss));
    assert_eq!("jxSS".parse::<Subtype>(), Ok(Subtype::Jxss));
    assert_eq!("jxsv".parse::<Subtype>(), Ok(Subtype::Jxsv));
    assert_eq!("JXSV".parse::<Subtype>(), Ok(Subtype::Jxsv));
    assert_eq!("kpml-request".parse::<Subtype>(), Ok(Subtype::KpmlRequest));
    assert_eq!("KpmL-rEquEsT".parse::<Subtype>(), Ok(Subtype::KpmlRequest));
    assert_eq!("kpml-response".parse::<Subtype>(), Ok(Subtype::KpmlResponse));
    assert_eq!("kPml-RESpOnSe".parse::<Subtype>(), Ok(Subtype::KpmlResponse));
    assert_eq!("ktx".parse::<Subtype>(), Ok(Subtype::Ktx));
    assert_eq!("Ktx".parse::<Subtype>(), Ok(Subtype::Ktx));
    assert_eq!("ktx2".parse::<Subtype>(), Ok(Subtype::Ktx2));
    assert_eq!("KtX2".parse::<Subtype>(), Ok(Subtype::Ktx2));
    assert_eq!("L16".parse::<Subtype>(), Ok(Subtype::L16));
    assert_eq!("l16".parse::<Subtype>(), Ok(Subtype::L16));
    assert_eq!("L20".parse::<Subtype>(), Ok(Subtype::L20));
    assert_eq!("L20".parse::<Subtype>(), Ok(Subtype::L20));
    assert_eq!("L24".parse::<Subtype>(), Ok(Subtype::L24));
    assert_eq!("L24".parse::<Subtype>(), Ok(Subtype::L24));
    assert_eq!("L8".parse::<Subtype>(), Ok(Subtype::L8));
    assert_eq!("L8".parse::<Subtype>(), Ok(Subtype::L8));
    assert_eq!("ld".parse::<Subtype>(), Ok(Subtype::Ld));
    assert_eq!("LD".parse::<Subtype>(), Ok(Subtype::Ld));
    assert_eq!("lgr".parse::<Subtype>(), Ok(Subtype::Lgr));
    assert_eq!("lgr".parse::<Subtype>(), Ok(Subtype::Lgr));
    assert_eq!("link-format".parse::<Subtype>(), Ok(Subtype::LinkFormat));
    assert_eq!("LInK-FORMaT".parse::<Subtype>(), Ok(Subtype::LinkFormat));
    assert_eq!("load-control".parse::<Subtype>(), Ok(Subtype::LoadControl));
    assert_eq!("loAd-controL".parse::<Subtype>(), Ok(Subtype::LoadControl));
    assert_eq!("lost".parse::<Subtype>(), Ok(Subtype::Lost));
    assert_eq!("LoST".parse::<Subtype>(), Ok(Subtype::Lost));
    assert_eq!("lostsync".parse::<Subtype>(), Ok(Subtype::Lostsync));
    assert_eq!("lOStSyNc".parse::<Subtype>(), Ok(Subtype::Lostsync));
    assert_eq!("LPC".parse::<Subtype>(), Ok(Subtype::Lpc));
    assert_eq!("LPc".parse::<Subtype>(), Ok(Subtype::Lpc));
    assert_eq!("lpf".parse::<Subtype>(), Ok(Subtype::Lpf));
    assert_eq!("lpf".parse::<Subtype>(), Ok(Subtype::Lpf));
    assert_eq!("LXF".parse::<Subtype>(), Ok(Subtype::Lxf));
    assert_eq!("lXf".parse::<Subtype>(), Ok(Subtype::Lxf));
    assert_eq!("m3g".parse::<Subtype>(), Ok(Subtype::M3g));
    assert_eq!("m3g".parse::<Subtype>(), Ok(Subtype::M3g));
    assert_eq!("mac-binhex40".parse::<Subtype>(), Ok(Subtype::MacBinhex40));
    assert_eq!("MAc-biNHeX40".parse::<Subtype>(), Ok(Subtype::MacBinhex40));
    assert_eq!("mac-compactpro".parse::<Subtype>(), Ok(Subtype::MacCompactpro));
    assert_eq!("Mac-coMpacTpRo".parse::<Subtype>(), Ok(Subtype::MacCompactpro));
    assert_eq!("macwriteii".parse::<Subtype>(), Ok(Subtype::Macwriteii));
    assert_eq!("MACWritEiI".parse::<Subtype>(), Ok(Subtype::Macwriteii));
    assert_eq!("mads".parse::<Subtype>(), Ok(Subtype::Mads));
    assert_eq!("MadS".parse::<Subtype>(), Ok(Subtype::Mads));
    assert_eq!("manifest".parse::<Subtype>(), Ok(Subtype::Manifest));
    assert_eq!("MAnifeST".parse::<Subtype>(), Ok(Subtype::Manifest));
    assert_eq!("marc".parse::<Subtype>(), Ok(Subtype::Marc));
    assert_eq!("mARc".parse::<Subtype>(), Ok(Subtype::Marc));
    assert_eq!("marcxml".parse::<Subtype>(), Ok(Subtype::Marcxml));
    assert_eq!("MARcxML".parse::<Subtype>(), Ok(Subtype::Marcxml));
    assert_eq!("markdown".parse::<Subtype>(), Ok(Subtype::Markdown));
    assert_eq!("mARKdoWN".parse::<Subtype>(), Ok(Subtype::Markdown));
    assert_eq!("mathematica".parse::<Subtype>(), Ok(Subtype::Mathematica));
    assert_eq!("matHeMATica".parse::<Subtype>(), Ok(Subtype::Mathematica));
    assert_eq!("mathml".parse::<Subtype>(), Ok(Subtype::Mathml));
    assert_eq!("maTHml".parse::<Subtype>(), Ok(Subtype::Mathml));
    assert_eq!("mathml-content".parse::<Subtype>(), Ok(Subtype::MathmlContent));
    assert_eq!("MatHmL-cOnTENt".parse::<Subtype>(), Ok(Subtype::MathmlContent));
    assert_eq!("mathml-presentation".parse::<Subtype>(), Ok(Subtype::MathmlPresentation));
    assert_eq!("MaThml-PreSENTATion".parse::<Subtype>(), Ok(Subtype::MathmlPresentation));
    assert_eq!("mbms-associated-procedure-description".parse::<Subtype>(), Ok(Subtype::MbmsAssociatedProcedureDescription));
    assert_eq!("MBms-assOCIATEd-PrOceduRe-dEsCRiPTioN".parse::<Subtype>(), Ok(Subtype::MbmsAssociatedProcedureDescription));
    assert_eq!("mbms-deregister".parse::<Subtype>(), Ok(Subtype::MbmsDeregister));
    assert_eq!("Mbms-derEGIsTER".parse::<Subtype>(), Ok(Subtype::MbmsDeregister));
    assert_eq!("mbms-envelope".parse::<Subtype>(), Ok(Subtype::MbmsEnvelope));
    assert_eq!("MBms-ENVeloPe".parse::<Subtype>(), Ok(Subtype::MbmsEnvelope));
    assert_eq!("mbms-msk".parse::<Subtype>(), Ok(Subtype::MbmsMsk));
    assert_eq!("MBMs-mSK".parse::<Subtype>(), Ok(Subtype::MbmsMsk));
    assert_eq!("mbms-msk-response".parse::<Subtype>(), Ok(Subtype::MbmsMskResponse));
    assert_eq!("mbmS-MsK-ReSPoNse".parse::<Subtype>(), Ok(Subtype::MbmsMskResponse));
    assert_eq!("mbms-protection-description".parse::<Subtype>(), Ok(Subtype::MbmsProtectionDescription));
    assert_eq!("mbMS-prOTEcTioN-DeScription".parse::<Subtype>(), Ok(Subtype::MbmsProtectionDescription));
    assert_eq!("mbms-reception-report".parse::<Subtype>(), Ok(Subtype::MbmsReceptionReport));
    assert_eq!("mBms-reCEpTioN-REPoRT".parse::<Subtype>(), Ok(Subtype::MbmsReceptionReport));
    assert_eq!("mbms-register".parse::<Subtype>(), Ok(Subtype::MbmsRegister));
    assert_eq!("mbMS-REgISTer".parse::<Subtype>(), Ok(Subtype::MbmsRegister));
    assert_eq!("mbms-register-response".parse::<Subtype>(), Ok(Subtype::MbmsRegisterResponse));
    assert_eq!("Mbms-reGiSter-ResPoNSE".parse::<Subtype>(), Ok(Subtype::MbmsRegisterResponse));
    assert_eq!("mbms-schedule".parse::<Subtype>(), Ok(Subtype::MbmsSchedule));
    assert_eq!("mbMs-sChEdULe".parse::<Subtype>(), Ok(Subtype::MbmsSchedule));
    assert_eq!("mbms-user-service-description".parse::<Subtype>(), Ok(Subtype::MbmsUserServiceDescription));
    assert_eq!("Mbms-User-sERViCe-dEScriPTIoN".parse::<Subtype>(), Ok(Subtype::MbmsUserServiceDescription));
    assert_eq!("mbox".parse::<Subtype>(), Ok(Subtype::Mbox));
    assert_eq!("mbox".parse::<Subtype>(), Ok(Subtype::Mbox));
    assert_eq!("media_control".parse::<Subtype>(), Ok(Subtype::MediaControl));
    assert_eq!("mEDIa_CoNTrOl".parse::<Subtype>(), Ok(Subtype::MediaControl));
    assert_eq!("media-policy-dataset".parse::<Subtype>(), Ok(Subtype::MediaPolicyDataset));
    assert_eq!("media-PoLiCy-dataSEt".parse::<Subtype>(), Ok(Subtype::MediaPolicyDataset));
    assert_eq!("mediaservercontrol".parse::<Subtype>(), Ok(Subtype::Mediaservercontrol));
    assert_eq!("mEdiaseRVerContROL".parse::<Subtype>(), Ok(Subtype::Mediaservercontrol));
    assert_eq!("MELP".parse::<Subtype>(), Ok(Subtype::Melp));
    assert_eq!("MElp".parse::<Subtype>(), Ok(Subtype::Melp));
    assert_eq!("MELP1200".parse::<Subtype>(), Ok(Subtype::Melp1200));
    assert_eq!("mElp1200".parse::<Subtype>(), Ok(Subtype::Melp1200));
    assert_eq!("MELP2400".parse::<Subtype>(), Ok(Subtype::Melp2400));
    assert_eq!("mELp2400".parse::<Subtype>(), Ok(Subtype::Melp2400));
    assert_eq!("MELP600".parse::<Subtype>(), Ok(Subtype::Melp600));
    assert_eq!("melp600".parse::<Subtype>(), Ok(Subtype::Melp600));
    assert_eq!("merge-patch".parse::<Subtype>(), Ok(Subtype::MergePatch));
    assert_eq!("MERgE-patcH".parse::<Subtype>(), Ok(Subtype::MergePatch));
    assert_eq!("mesh".parse::<Subtype>(), Ok(Subtype::Mesh));
    assert_eq!("MeSH".parse::<Subtype>(), Ok(Subtype::Mesh));
    assert_eq!("metalink4".parse::<Subtype>(), Ok(Subtype::Metalink4));
    assert_eq!("METaLiNk4".parse::<Subtype>(), Ok(Subtype::Metalink4));
    assert_eq!("mets".parse::<Subtype>(), Ok(Subtype::Mets));
    assert_eq!("mEts".parse::<Subtype>(), Ok(Subtype::Mets));
    assert_eq!("MF4".parse::<Subtype>(), Ok(Subtype::Mf4));
    assert_eq!("Mf4".parse::<Subtype>(), Ok(Subtype::Mf4));
    assert_eq!("mhas".parse::<Subtype>(), Ok(Subtype::Mhas));
    assert_eq!("MhaS".parse::<Subtype>(), Ok(Subtype::Mhas));
    assert_eq!("mikey".parse::<Subtype>(), Ok(Subtype::Mikey));
    assert_eq!("mIkeY".parse::<Subtype>(), Ok(Subtype::Mikey));
    assert_eq!("mipc".parse::<Subtype>(), Ok(Subtype::Mipc));
    assert_eq!("mIPc".parse::<Subtype>(), Ok(Subtype::Mipc));
    assert_eq!("missing-blocks".parse::<Subtype>(), Ok(Subtype::MissingBlocks));
    assert_eq!("MISSing-BLOCKS".parse::<Subtype>(), Ok(Subtype::MissingBlocks));
    assert_eq!("mixed".parse::<Subtype>(), Ok(Subtype::Mixed));
    assert_eq!("Mixed".parse::<Subtype>(), Ok(Subtype::Mixed));
    assert_eq!("mizar".parse::<Subtype>(), Ok(Subtype::Mizar));
    assert_eq!("MiZAR".parse::<Subtype>(), Ok(Subtype::Mizar));
    assert_eq!("mj2".parse::<Subtype>(), Ok(Subtype::Mj2));
    assert_eq!("mj2".parse::<Subtype>(), Ok(Subtype::Mj2));
    assert_eq!("mmt-aei".parse::<Subtype>(), Ok(Subtype::MmtAei));
    assert_eq!("MMt-AeI".parse::<Subtype>(), Ok(Subtype::MmtAei));
    assert_eq!("mmt-usd".parse::<Subtype>(), Ok(Subtype::MmtUsd));
    assert_eq!("MMt-USD".parse::<Subtype>(), Ok(Subtype::MmtUsd));
    assert_eq!("mobile-xmf".parse::<Subtype>(), Ok(Subtype::MobileXmf));
    assert_eq!("moBile-Xmf".parse::<Subtype>(), Ok(Subtype::MobileXmf));
    assert_eq!("mods".parse::<Subtype>(), Ok(Subtype::Mods));
    assert_eq!("modS".parse::<Subtype>(), Ok(Subtype::Mods));
    assert_eq!("moss-keys".parse::<Subtype>(), Ok(Subtype::MossKeys));
    assert_eq!("mOss-keys".parse::<Subtype>(), Ok(Subtype::MossKeys));
    assert_eq!("moss-signature".parse::<Subtype>(), Ok(Subtype::MossSignature));
    assert_eq!("moSs-SiGnAtURE".parse::<Subtype>(), Ok(Subtype::MossSignature));
    assert_eq!("mosskey-data".parse::<Subtype>(), Ok(Subtype::MosskeyData));
    assert_eq!("mOSSkey-datA".parse::<Subtype>(), Ok(Subtype::MosskeyData));
    assert_eq!("mosskey-request".parse::<Subtype>(), Ok(Subtype::MosskeyRequest));
    assert_eq!("MosSKey-ReqUESt".parse::<Subtype>(), Ok(Subtype::MosskeyRequest));
    assert_eq!("MP1S".parse::<Subtype>(), Ok(Subtype::Mp1s));
    assert_eq!("MP1S".parse::<Subtype>(), Ok(Subtype::Mp1s));
    assert_eq!("mp21".parse::<Subtype>(), Ok(Subtype::Mp21));
    assert_eq!("mP21".parse::<Subtype>(), Ok(Subtype::Mp21));
    assert_eq!("MP2P".parse::<Subtype>(), Ok(Subtype::Mp2p));
    assert_eq!("Mp2P".parse::<Subtype>(), Ok(Subtype::Mp2p));
    assert_eq!("MP2T".parse::<Subtype>(), Ok(Subtype::Mp2t));
    assert_eq!("mp2t".parse::<Subtype>(), Ok(Subtype::Mp2t));
    assert_eq!("mp4".parse::<Subtype>(), Ok(Subtype::Mp4));
    assert_eq!("MP4".parse::<Subtype>(), Ok(Subtype::Mp4));
    assert_eq!("MP4A-LATM".parse::<Subtype>(), Ok(Subtype::Mp4aLatm));
    assert_eq!("mp4a-LAtM".parse::<Subtype>(), Ok(Subtype::Mp4aLatm));
    assert_eq!("MP4V-ES".parse::<Subtype>(), Ok(Subtype::Mp4vEs));
    assert_eq!("mp4v-eS".parse::<Subtype>(), Ok(Subtype::Mp4vEs));
    assert_eq!("MPA".parse::<Subtype>(), Ok(Subtype::Mpa));
    assert_eq!("Mpa".parse::<Subtype>(), Ok(Subtype::Mpa));
    assert_eq!("mpa-robust".parse::<Subtype>(), Ok(Subtype::MpaRobust));
    assert_eq!("mpa-RobUST".parse::<Subtype>(), Ok(Subtype::MpaRobust));
    assert_eq!("mpeg".parse::<Subtype>(), Ok(Subtype::Mpeg));
    assert_eq!("mPEg".parse::<Subtype>(), Ok(Subtype::Mpeg));
    assert_eq!("mpeg4-generic".parse::<Subtype>(), Ok(Subtype::Mpeg4Generic));
    assert_eq!("mPeG4-gENERic".parse::<Subtype>(), Ok(Subtype::Mpeg4Generic));
    assert_eq!("mpeg4-iod".parse::<Subtype>(), Ok(Subtype::Mpeg4Iod));
    assert_eq!("mpeG4-IOd".parse::<Subtype>(), Ok(Subtype::Mpeg4Iod));
    assert_eq!("mpeg4-iod-xmt".parse::<Subtype>(), Ok(Subtype::Mpeg4IodXmt));
    assert_eq!("mpeG4-IOD-XMT".parse::<Subtype>(), Ok(Subtype::Mpeg4IodXmt));
    assert_eq!("mpegurl".parse::<Subtype>(), Ok(Subtype::Mpegurl));
    assert_eq!("mpEGuRL".parse::<Subtype>(), Ok(Subtype::Mpegurl));
    assert_eq!("MPV".parse::<Subtype>(), Ok(Subtype::Mpv));
    assert_eq!("MPv".parse::<Subtype>(), Ok(Subtype::Mpv));
    assert_eq!("mrb-consumer".parse::<Subtype>(), Ok(Subtype::MrbConsumer));
    assert_eq!("mRb-consUMeR".parse::<Subtype>(), Ok(Subtype::MrbConsumer));
    assert_eq!("mrb-publish".parse::<Subtype>(), Ok(Subtype::MrbPublish));
    assert_eq!("mRb-puBliSh".parse::<Subtype>(), Ok(Subtype::MrbPublish));
    assert_eq!("msaccess".parse::<Subtype>(), Ok(Subtype::Msaccess));
    assert_eq!("msAcCeSS".parse::<Subtype>(), Ok(Subtype::Msaccess));
    assert_eq!("msc-ivr".parse::<Subtype>(), Ok(Subtype::MscIvr));
    assert_eq!("MsC-iVr".parse::<Subtype>(), Ok(Subtype::MscIvr));
    assert_eq!("msc-mixer".parse::<Subtype>(), Ok(Subtype::MscMixer));
    assert_eq!("Msc-MIXEr".parse::<Subtype>(), Ok(Subtype::MscMixer));
    assert_eq!("msword".parse::<Subtype>(), Ok(Subtype::Msword));
    assert_eq!("mSWorD".parse::<Subtype>(), Ok(Subtype::Msword));
    assert_eq!("mtl".parse::<Subtype>(), Ok(Subtype::Mtl));
    assert_eq!("Mtl".parse::<Subtype>(), Ok(Subtype::Mtl));
    assert_eq!("mud".parse::<Subtype>(), Ok(Subtype::Mud));
    assert_eq!("MuD".parse::<Subtype>(), Ok(Subtype::Mud));
    assert_eq!("multilingual".parse::<Subtype>(), Ok(Subtype::Multilingual));
    assert_eq!("MuLtiLinguAl".parse::<Subtype>(), Ok(Subtype::Multilingual));
    assert_eq!("multipart-core".parse::<Subtype>(), Ok(Subtype::MultipartCore));
    assert_eq!("mulTipaRt-coRe".parse::<Subtype>(), Ok(Subtype::MultipartCore));
    assert_eq!("mxf".parse::<Subtype>(), Ok(Subtype::Mxf));
    assert_eq!("mxf".parse::<Subtype>(), Ok(Subtype::Mxf));
    assert_eq!("n3".parse::<Subtype>(), Ok(Subtype::N3));
    assert_eq!("N3".parse::<Subtype>(), Ok(Subtype::N3));
    assert_eq!("n-quads".parse::<Subtype>(), Ok(Subtype::NQuads));
    assert_eq!("N-QUaDs".parse::<Subtype>(), Ok(Subtype::NQuads));
    assert_eq!("n-triples".parse::<Subtype>(), Ok(Subtype::NTriples));
    assert_eq!("n-triPLEs".parse::<Subtype>(), Ok(Subtype::NTriples));
    assert_eq!("naplps".parse::<Subtype>(), Ok(Subtype::Naplps));
    assert_eq!("NApLps".parse::<Subtype>(), Ok(Subtype::Naplps));
    assert_eq!("nasdata".parse::<Subtype>(), Ok(Subtype::Nasdata));
    assert_eq!("nasdATa".parse::<Subtype>(), Ok(Subtype::Nasdata));
    assert_eq!("news-checkgroups".parse::<Subtype>(), Ok(Subtype::NewsCheckgroups));
    assert_eq!("nEwS-checKGROUpS".parse::<Subtype>(), Ok(Subtype::NewsCheckgroups));
    assert_eq!("news-groupinfo".parse::<Subtype>(), Ok(Subtype::NewsGroupinfo));
    assert_eq!("NEws-GROupiNFO".parse::<Subtype>(), Ok(Subtype::NewsGroupinfo));
    assert_eq!("news-transmission".parse::<Subtype>(), Ok(Subtype::NewsTransmission));
    assert_eq!("neWs-TRansMISsiOn".parse::<Subtype>(), Ok(Subtype::NewsTransmission));
    assert_eq!("nlsml".parse::<Subtype>(), Ok(Subtype::Nlsml));
    assert_eq!("NlsmL".parse::<Subtype>(), Ok(Subtype::Nlsml));
    assert_eq!("node".parse::<Subtype>(), Ok(Subtype::Node));
    assert_eq!("noDe".parse::<Subtype>(), Ok(Subtype::Node));
    assert_eq!("nss".parse::<Subtype>(), Ok(Subtype::Nss));
    assert_eq!("NsS".parse::<Subtype>(), Ok(Subtype::Nss));
    assert_eq!("nv".parse::<Subtype>(), Ok(Subtype::Nv));
    assert_eq!("nv".parse::<Subtype>(), Ok(Subtype::Nv));
    assert_eq!("oauth-authz-req".parse::<Subtype>(), Ok(Subtype::OauthAuthzReq));
    assert_eq!("OaUTH-auThz-rEQ".parse::<Subtype>(), Ok(Subtype::OauthAuthzReq));
    assert_eq!("obj".parse::<Subtype>(), Ok(Subtype::Obj));
    assert_eq!("OBJ".parse::<Subtype>(), Ok(Subtype::Obj));
    assert_eq!("oblivious-dns-message".parse::<Subtype>(), Ok(Subtype::ObliviousDnsMessage));
    assert_eq!("OBLIVIous-dNS-mEsSAGe".parse::<Subtype>(), Ok(Subtype::ObliviousDnsMessage));
    assert_eq!("ocsp-request".parse::<Subtype>(), Ok(Subtype::OcspRequest));
    assert_eq!("OcsP-ReQUESt".parse::<Subtype>(), Ok(Subtype::OcspRequest));
    assert_eq!("ocsp-response".parse::<Subtype>(), Ok(Subtype::OcspResponse));
    assert_eq!("OcSP-ReSpONse".parse::<Subtype>(), Ok(Subtype::OcspResponse));
    assert_eq!("octet-stream".parse::<Subtype>(), Ok(Subtype::OctetStream));
    assert_eq!("oCtET-STrEam".parse::<Subtype>(), Ok(Subtype::OctetStream));
    assert_eq!("ODA".parse::<Subtype>(), Ok(Subtype::Oda));
    assert_eq!("oDa".parse::<Subtype>(), Ok(Subtype::Oda));
    assert_eq!("odm".parse::<Subtype>(), Ok(Subtype::Odm));
    assert_eq!("odM".parse::<Subtype>(), Ok(Subtype::Odm));
    assert_eq!("ODX".parse::<Subtype>(), Ok(Subtype::Odx));
    assert_eq!("ODx".parse::<Subtype>(), Ok(Subtype::Odx));
    assert_eq!("oebps-package".parse::<Subtype>(), Ok(Subtype::OebpsPackage));
    assert_eq!("OEBPs-PackAGE".parse::<Subtype>(), Ok(Subtype::OebpsPackage));
    assert_eq!("ogg".parse::<Subtype>(), Ok(Subtype::Ogg));
    assert_eq!("ogg".parse::<Subtype>(), Ok(Subtype::Ogg));
    assert_eq!("onenote".parse::<Subtype>(), Ok(Subtype::Onenote));
    assert_eq!("oneNoTE".parse::<Subtype>(), Ok(Subtype::Onenote));
    assert_eq!("opc-nodeset".parse::<Subtype>(), Ok(Subtype::OpcNodeset));
    assert_eq!("oPC-nOdeSeT".parse::<Subtype>(), Ok(Subtype::OpcNodeset));
    assert_eq!("opus".parse::<Subtype>(), Ok(Subtype::Opus));
    assert_eq!("OPus".parse::<Subtype>(), Ok(Subtype::Opus));
    assert_eq!("oscore".parse::<Subtype>(), Ok(Subtype::Oscore));
    assert_eq!("OsCOre".parse::<Subtype>(), Ok(Subtype::Oscore));
    assert_eq!("otf".parse::<Subtype>(), Ok(Subtype::Otf));
    assert_eq!("OTF".parse::<Subtype>(), Ok(Subtype::Otf));
    assert_eq!("oxps".parse::<Subtype>(), Ok(Subtype::Oxps));
    assert_eq!("oXPS".parse::<Subtype>(), Ok(Subtype::Oxps));
    assert_eq!("p21".parse::<Subtype>(), Ok(Subtype::P21));
    assert_eq!("P21".parse::<Subtype>(), Ok(Subtype::P21));
    assert_eq!("p2p-overlay".parse::<Subtype>(), Ok(Subtype::P2pOverlay));
    assert_eq!("p2p-OveRlAy".parse::<Subtype>(), Ok(Subtype::P2pOverlay));
    assert_eq!("parallel".parse::<Subtype>(), Ok(Subtype::Parallel));
    assert_eq!("ParALlEl".parse::<Subtype>(), Ok(Subtype::Parallel));
    assert_eq!("parameters".parse::<Subtype>(), Ok(Subtype::Parameters));
    assert_eq!("PARaMeTeRs".parse::<Subtype>(), Ok(Subtype::Parameters));
    assert_eq!("parityfec".parse::<Subtype>(), Ok(Subtype::Parityfec));
    assert_eq!("PARItyFeC".parse::<Subtype>(), Ok(Subtype::Parityfec));
    assert_eq!("partial".parse::<Subtype>(), Ok(Subtype::Partial));
    assert_eq!("ParTiaL".parse::<Subtype>(), Ok(Subtype::Partial));
    assert_eq!("passport".parse::<Subtype>(), Ok(Subtype::Passport));
    assert_eq!("pAssPOrT".parse::<Subtype>(), Ok(Subtype::Passport));
    assert_eq!("patch-ops-error".parse::<Subtype>(), Ok(Subtype::PatchOpsError));
    assert_eq!("PAtcH-oPS-ERroR".parse::<Subtype>(), Ok(Subtype::PatchOpsError));
    assert_eq!("PCMA".parse::<Subtype>(), Ok(Subtype::Pcma));
    assert_eq!("Pcma".parse::<Subtype>(), Ok(Subtype::Pcma));
    assert_eq!("PCMA-WB".parse::<Subtype>(), Ok(Subtype::PcmaWb));
    assert_eq!("PCMa-wb".parse::<Subtype>(), Ok(Subtype::PcmaWb));
    assert_eq!("PCMU".parse::<Subtype>(), Ok(Subtype::Pcmu));
    assert_eq!("pcmu".parse::<Subtype>(), Ok(Subtype::Pcmu));
    assert_eq!("PCMU-WB".parse::<Subtype>(), Ok(Subtype::PcmuWb));
    assert_eq!("pCMU-WB".parse::<Subtype>(), Ok(Subtype::PcmuWb));
    assert_eq!("pdf".parse::<Subtype>(), Ok(Subtype::Pdf));
    assert_eq!("Pdf".parse::<Subtype>(), Ok(Subtype::Pdf));
    assert_eq!("PDX".parse::<Subtype>(), Ok(Subtype::Pdx));
    assert_eq!("Pdx".parse::<Subtype>(), Ok(Subtype::Pdx));
    assert_eq!("pem-certificate-chain".parse::<Subtype>(), Ok(Subtype::PemCertificateChain));
    assert_eq!("peM-cErtiFICaTe-chAIN".parse::<Subtype>(), Ok(Subtype::PemCertificateChain));
    assert_eq!("pgp-encrypted".parse::<Subtype>(), Ok(Subtype::PgpEncrypted));
    assert_eq!("pgp-eNcRyPTEd".parse::<Subtype>(), Ok(Subtype::PgpEncrypted));
    assert_eq!("pgp-keys".parse::<Subtype>(), Ok(Subtype::PgpKeys));
    assert_eq!("PGp-KEyS".parse::<Subtype>(), Ok(Subtype::PgpKeys));
    assert_eq!("pgp-signature".parse::<Subtype>(), Ok(Subtype::PgpSignature));
    assert_eq!("PGP-siGnatURE".parse::<Subtype>(), Ok(Subtype::PgpSignature));
    assert_eq!("pics-rules".parse::<Subtype>(), Ok(Subtype::PicsRules));
    assert_eq!("PICS-RUleS".parse::<Subtype>(), Ok(Subtype::PicsRules));
    assert_eq!("pidf".parse::<Subtype>(), Ok(Subtype::Pidf));
    assert_eq!("piDF".parse::<Subtype>(), Ok(Subtype::Pidf));
    assert_eq!("pidf-diff".parse::<Subtype>(), Ok(Subtype::PidfDiff));
    assert_eq!("piDF-dIFf".parse::<Subtype>(), Ok(Subtype::PidfDiff));
    assert_eq!("pkcs10".parse::<Subtype>(), Ok(Subtype::Pkcs10));
    assert_eq!("PkcS10".parse::<Subtype>(), Ok(Subtype::Pkcs10));
    assert_eq!("pkcs12".parse::<Subtype>(), Ok(Subtype::Pkcs12));
    assert_eq!("Pkcs12".parse::<Subtype>(), Ok(Subtype::Pkcs12));
    assert_eq!("pkcs7-mime".parse::<Subtype>(), Ok(Subtype::Pkcs7Mime));
    assert_eq!("PkCS7-MIMe".parse::<Subtype>(), Ok(Subtype::Pkcs7Mime));
    assert_eq!("pkcs7-signature".parse::<Subtype>(), Ok(Subtype::Pkcs7Signature));
    assert_eq!("pKcs7-signAtuRe".parse::<Subtype>(), Ok(Subtype::Pkcs7Signature));
    assert_eq!("pkcs8".parse::<Subtype>(), Ok(Subtype::Pkcs8));
    assert_eq!("pKCS8".parse::<Subtype>(), Ok(Subtype::Pkcs8));
    assert_eq!("pkcs8-encrypted".parse::<Subtype>(), Ok(Subtype::Pkcs8Encrypted));
    assert_eq!("pKCS8-encryPteD".parse::<Subtype>(), Ok(Subtype::Pkcs8Encrypted));
    assert_eq!("pkix-attr-cert".parse::<Subtype>(), Ok(Subtype::PkixAttrCert));
    assert_eq!("PkiX-ATtr-ceRt".parse::<Subtype>(), Ok(Subtype::PkixAttrCert));
    assert_eq!("pkix-cert".parse::<Subtype>(), Ok(Subtype::PkixCert));
    assert_eq!("pKiX-CeRt".parse::<Subtype>(), Ok(Subtype::PkixCert));
    assert_eq!("pkix-crl".parse::<Subtype>(), Ok(Subtype::PkixCrl));
    assert_eq!("pKix-crl".parse::<Subtype>(), Ok(Subtype::PkixCrl));
    assert_eq!("pkix-pkipath".parse::<Subtype>(), Ok(Subtype::PkixPkipath));
    assert_eq!("pKIx-pkIPaTh".parse::<Subtype>(), Ok(Subtype::PkixPkipath));
    assert_eq!("pkixcmp".parse::<Subtype>(), Ok(Subtype::Pkixcmp));
    assert_eq!("PkIxcmP".parse::<Subtype>(), Ok(Subtype::Pkixcmp));
    assert_eq!("plain".parse::<Subtype>(), Ok(Subtype::Plain));
    assert_eq!("PlaiN".parse::<Subtype>(), Ok(Subtype::Plain));
    assert_eq!("pls".parse::<Subtype>(), Ok(Subtype::Pls));
    assert_eq!("Pls".parse::<Subtype>(), Ok(Subtype::Pls));
    assert_eq!("png".parse::<Subtype>(), Ok(Subtype::Png));
    assert_eq!("pNg".parse::<Subtype>(), Ok(Subtype::Png));
    assert_eq!("poc-settings".parse::<Subtype>(), Ok(Subtype::PocSettings));
    assert_eq!("PoC-sETtINgS".parse::<Subtype>(), Ok(Subtype::PocSettings));
    assert_eq!("pointer".parse::<Subtype>(), Ok(Subtype::Pointer));
    assert_eq!("poINtEr".parse::<Subtype>(), Ok(Subtype::Pointer));
    assert_eq!("postscript".parse::<Subtype>(), Ok(Subtype::Postscript));
    assert_eq!("POStSCrIPt".parse::<Subtype>(), Ok(Subtype::Postscript));
    assert_eq!("ppsp-tracker".parse::<Subtype>(), Ok(Subtype::PpspTracker));
    assert_eq!("PPSp-tRaCkeR".parse::<Subtype>(), Ok(Subtype::PpspTracker));
    assert_eq!("prc".parse::<Subtype>(), Ok(Subtype::Prc));
    assert_eq!("pRC".parse::<Subtype>(), Ok(Subtype::Prc));
    assert_eq!("problem".parse::<Subtype>(), Ok(Subtype::Problem));
    assert_eq!("prObLEm".parse::<Subtype>(), Ok(Subtype::Problem));
    assert_eq!("provenance".parse::<Subtype>(), Ok(Subtype::Provenance));
    assert_eq!("proVenanCe".parse::<Subtype>(), Ok(Subtype::Provenance));
    assert_eq!("provenance-notation".parse::<Subtype>(), Ok(Subtype::ProvenanceNotation));
    assert_eq!("proVeNAnCE-NOtATIon".parse::<Subtype>(), Ok(Subtype::ProvenanceNotation));
    assert_eq!("prs.alvestrand.titrax-sheet".parse::<Subtype>(), Ok(Subtype::PrsAlvestrandTitraxSheet));
    assert_eq!("prs.ALVEStraND.Titrax-SHeET".parse::<Subtype>(), Ok(Subtype::PrsAlvestrandTitraxSheet));
    assert_eq!("prs.btif".parse::<Subtype>(), Ok(Subtype::PrsBtif));
    assert_eq!("Prs.bTif".parse::<Subtype>(), Ok(Subtype::PrsBtif));
    assert_eq!("prs.cww".parse::<Subtype>(), Ok(Subtype::PrsCww));
    assert_eq!("PRs.Cww".parse::<Subtype>(), Ok(Subtype::PrsCww));
    assert_eq!("prs.cyn".parse::<Subtype>(), Ok(Subtype::PrsCyn));
    assert_eq!("PRs.CYn".parse::<Subtype>(), Ok(Subtype::PrsCyn));
    assert_eq!("prs.fallenstein.rst".parse::<Subtype>(), Ok(Subtype::PrsFallensteinRst));
    assert_eq!("PRs.FaLlEnsTein.rST".parse::<Subtype>(), Ok(Subtype::PrsFallensteinRst));
    assert_eq!("prs.hpub".parse::<Subtype>(), Ok(Subtype::PrsHpub));
    assert_eq!("pRS.hPUB".parse::<Subtype>(), Ok(Subtype::PrsHpub));
    assert_eq!("prs.lines.tag".parse::<Subtype>(), Ok(Subtype::PrsLinesTag));
    assert_eq!("pRS.LInes.tAg".parse::<Subtype>(), Ok(Subtype::PrsLinesTag));
    assert_eq!("prs.nprend".parse::<Subtype>(), Ok(Subtype::PrsNprend));
    assert_eq!("PrS.npRENd".parse::<Subtype>(), Ok(Subtype::PrsNprend));
    assert_eq!("prs.plucker".parse::<Subtype>(), Ok(Subtype::PrsPlucker));
    assert_eq!("pRs.pLuCKEr".parse::<Subtype>(), Ok(Subtype::PrsPlucker));
    assert_eq!("prs.prop.logic".parse::<Subtype>(), Ok(Subtype::PrsPropLogic));
    assert_eq!("PrS.PROp.LoGIc".parse::<Subtype>(), Ok(Subtype::PrsPropLogic));
    assert_eq!("prs.pti".parse::<Subtype>(), Ok(Subtype::PrsPti));
    assert_eq!("PRS.Pti".parse::<Subtype>(), Ok(Subtype::PrsPti));
    assert_eq!("prs.rdf-xml-crypt".parse::<Subtype>(), Ok(Subtype::PrsRdfXmlCrypt));
    assert_eq!("prS.rDF-xmL-CrYPt".parse::<Subtype>(), Ok(Subtype::PrsRdfXmlCrypt));
    assert_eq!("prs.sid".parse::<Subtype>(), Ok(Subtype::PrsSid));
    assert_eq!("prs.sId".parse::<Subtype>(), Ok(Subtype::PrsSid));
    assert_eq!("prs.xsf".parse::<Subtype>(), Ok(Subtype::PrsXsf));
    assert_eq!("pRs.xsf".parse::<Subtype>(), Ok(Subtype::PrsXsf));
    assert_eq!("pskc".parse::<Subtype>(), Ok(Subtype::Pskc));
    assert_eq!("PsKc".parse::<Subtype>(), Ok(Subtype::Pskc));
    assert_eq!("pvd".parse::<Subtype>(), Ok(Subtype::Pvd));
    assert_eq!("pvD".parse::<Subtype>(), Ok(Subtype::Pvd));
    assert_eq!("pwg-raster".parse::<Subtype>(), Ok(Subtype::PwgRaster));
    assert_eq!("PwG-RAsTer".parse::<Subtype>(), Ok(Subtype::PwgRaster));
    assert_eq!("QCELP".parse::<Subtype>(), Ok(Subtype::Qcelp));
    assert_eq!("qceLp".parse::<Subtype>(), Ok(Subtype::Qcelp));
    assert_eq!("QSIG".parse::<Subtype>(), Ok(Subtype::Qsig));
    assert_eq!("qsIg".parse::<Subtype>(), Ok(Subtype::Qsig));
    assert_eq!("quicktime".parse::<Subtype>(), Ok(Subtype::Quicktime));
    assert_eq!("QUicktIME".parse::<Subtype>(), Ok(Subtype::Quicktime));
    assert_eq!("raptorfec".parse::<Subtype>(), Ok(Subtype::Raptorfec));
    assert_eq!("rAPtOrFec".parse::<Subtype>(), Ok(Subtype::Raptorfec));
    assert_eq!("raw".parse::<Subtype>(), Ok(Subtype::Raw));
    assert_eq!("rAw".parse::<Subtype>(), Ok(Subtype::Raw));
    assert_eq!("rdap".parse::<Subtype>(), Ok(Subtype::Rdap));
    assert_eq!("rdap".parse::<Subtype>(), Ok(Subtype::Rdap));
    assert_eq!("rdf".parse::<Subtype>(), Ok(Subtype::Rdf));
    assert_eq!("rDf".parse::<Subtype>(), Ok(Subtype::Rdf));
    assert_eq!("RED".parse::<Subtype>(), Ok(Subtype::Red));
    assert_eq!("ReD".parse::<Subtype>(), Ok(Subtype::Red));
    assert_eq!("reginfo".parse::<Subtype>(), Ok(Subtype::Reginfo));
    assert_eq!("rEgInfO".parse::<Subtype>(), Ok(Subtype::Reginfo));
    assert_eq!("related".parse::<Subtype>(), Ok(Subtype::Related));
    assert_eq!("rELAted".parse::<Subtype>(), Ok(Subtype::Related));
    assert_eq!("relax-ng-compact-syntax".parse::<Subtype>(), Ok(Subtype::RelaxNgCompactSyntax));
    assert_eq!("relax-nG-CoMpaCt-SyNTAX".parse::<Subtype>(), Ok(Subtype::RelaxNgCompactSyntax));
    assert_eq!("remote-printing".parse::<Subtype>(), Ok(Subtype::RemotePrinting));
    assert_eq!("reMoTe-PrIntING".parse::<Subtype>(), Ok(Subtype::RemotePrinting));
    assert_eq!("report".parse::<Subtype>(), Ok(Subtype::Report));
    assert_eq!("REPORT".parse::<Subtype>(), Ok(Subtype::Report));
    assert_eq!("reputon".parse::<Subtype>(), Ok(Subtype::Reputon));
    assert_eq!("rEPutoN".parse::<Subtype>(), Ok(Subtype::Reputon));
    assert_eq!("resource-lists".parse::<Subtype>(), Ok(Subtype::ResourceLists));
    assert_eq!("RESOUrCe-LiSTs".parse::<Subtype>(), Ok(Subtype::ResourceLists));
    assert_eq!("resource-lists-diff".parse::<Subtype>(), Ok(Subtype::ResourceListsDiff));
    assert_eq!("REsOurCE-LisTS-Diff".parse::<Subtype>(), Ok(Subtype::ResourceListsDiff));
    assert_eq!("rfc".parse::<Subtype>(), Ok(Subtype::Rfc));
    assert_eq!("rFc".parse::<Subtype>(), Ok(Subtype::Rfc));
    assert_eq!("rfc822".parse::<Subtype>(), Ok(Subtype::Rfc822));
    assert_eq!("rFc822".parse::<Subtype>(), Ok(Subtype::Rfc822));
    assert_eq!("rfc822-headers".parse::<Subtype>(), Ok(Subtype::Rfc822Headers));
    assert_eq!("Rfc822-heAders".parse::<Subtype>(), Ok(Subtype::Rfc822Headers));
    assert_eq!("riscos".parse::<Subtype>(), Ok(Subtype::Riscos));
    assert_eq!("RIScoS".parse::<Subtype>(), Ok(Subtype::Riscos));
    assert_eq!("rlmi".parse::<Subtype>(), Ok(Subtype::Rlmi));
    assert_eq!("rLmi".parse::<Subtype>(), Ok(Subtype::Rlmi));
    assert_eq!("rls-services".parse::<Subtype>(), Ok(Subtype::RlsServices));
    assert_eq!("RlS-SErVicES".parse::<Subtype>(), Ok(Subtype::RlsServices));
    assert_eq!("route-apd".parse::<Subtype>(), Ok(Subtype::RouteApd));
    assert_eq!("rOute-APd".parse::<Subtype>(), Ok(Subtype::RouteApd));
    assert_eq!("route-s-tsid".parse::<Subtype>(), Ok(Subtype::RouteSTsid));
    assert_eq!("rOutE-S-Tsid".parse::<Subtype>(), Ok(Subtype::RouteSTsid));
    assert_eq!("route-usd".parse::<Subtype>(), Ok(Subtype::RouteUsd));
    assert_eq!("ROutE-uSD".parse::<Subtype>(), Ok(Subtype::RouteUsd));
    assert_eq!("rpki-ghostbusters".parse::<Subtype>(), Ok(Subtype::RpkiGhostbusters));
    assert_eq!("rpKI-ghOStBUSTeRs".parse::<Subtype>(), Ok(Subtype::RpkiGhostbusters));
    assert_eq!("rpki-manifest".parse::<Subtype>(), Ok(Subtype::RpkiManifest));
    assert_eq!("rPkI-MAnifeSt".parse::<Subtype>(), Ok(Subtype::RpkiManifest));
    assert_eq!("rpki-publication".parse::<Subtype>(), Ok(Subtype::RpkiPublication));
    assert_eq!("rPkI-PUbLICAtION".parse::<Subtype>(), Ok(Subtype::RpkiPublication));
    assert_eq!("rpki-roa".parse::<Subtype>(), Ok(Subtype::RpkiRoa));
    assert_eq!("Rpki-ROa".parse::<Subtype>(), Ok(Subtype::RpkiRoa));
    assert_eq!("rpki-updown".parse::<Subtype>(), Ok(Subtype::RpkiUpdown));
    assert_eq!("RpkI-uPDown".parse::<Subtype>(), Ok(Subtype::RpkiUpdown));
    assert_eq!("rtf".parse::<Subtype>(), Ok(Subtype::Rtf));
    assert_eq!("RtF".parse::<Subtype>(), Ok(Subtype::Rtf));
    assert_eq!("rtp-enc-aescm128".parse::<Subtype>(), Ok(Subtype::RtpEncAescm128));
    assert_eq!("RTP-enc-aeSCM128".parse::<Subtype>(), Ok(Subtype::RtpEncAescm128));
    assert_eq!("rtp-midi".parse::<Subtype>(), Ok(Subtype::RtpMidi));
    assert_eq!("Rtp-midi".parse::<Subtype>(), Ok(Subtype::RtpMidi));
    assert_eq!("rtploopback".parse::<Subtype>(), Ok(Subtype::Rtploopback));
    assert_eq!("rtPLOOPbACk".parse::<Subtype>(), Ok(Subtype::Rtploopback));
    assert_eq!("rtx".parse::<Subtype>(), Ok(Subtype::Rtx));
    assert_eq!("Rtx".parse::<Subtype>(), Ok(Subtype::Rtx));
    assert_eq!("s-http".parse::<Subtype>(), Ok(Subtype::SHttp));
    assert_eq!("S-http".parse::<Subtype>(), Ok(Subtype::SHttp));
    assert_eq!("samlassertion".parse::<Subtype>(), Ok(Subtype::Samlassertion));
    assert_eq!("samLassErTioN".parse::<Subtype>(), Ok(Subtype::Samlassertion));
    assert_eq!("samlmetadata".parse::<Subtype>(), Ok(Subtype::Samlmetadata));
    assert_eq!("SamlMeTadatA".parse::<Subtype>(), Ok(Subtype::Samlmetadata));
    assert_eq!("sarif".parse::<Subtype>(), Ok(Subtype::Sarif));
    assert_eq!("SaRIF".parse::<Subtype>(), Ok(Subtype::Sarif));
    assert_eq!("sarif-external-properties".parse::<Subtype>(), Ok(Subtype::SarifExternalProperties));
    assert_eq!("sARIf-EXTERnal-PrOpERtIES".parse::<Subtype>(), Ok(Subtype::SarifExternalProperties));
    assert_eq!("sbe".parse::<Subtype>(), Ok(Subtype::Sbe));
    assert_eq!("SbE".parse::<Subtype>(), Ok(Subtype::Sbe));
    assert_eq!("sbml".parse::<Subtype>(), Ok(Subtype::Sbml));
    assert_eq!("SbML".parse::<Subtype>(), Ok(Subtype::Sbml));
    assert_eq!("scaip".parse::<Subtype>(), Ok(Subtype::Scaip));
    assert_eq!("sCAIp".parse::<Subtype>(), Ok(Subtype::Scaip));
    assert_eq!("scim".parse::<Subtype>(), Ok(Subtype::Scim));
    assert_eq!("SCim".parse::<Subtype>(), Ok(Subtype::Scim));
    assert_eq!("scip".parse::<Subtype>(), Ok(Subtype::Scip));
    assert_eq!("ScIp".parse::<Subtype>(), Ok(Subtype::Scip));
    assert_eq!("scvp-cv-request".parse::<Subtype>(), Ok(Subtype::ScvpCvRequest));
    assert_eq!("scVp-Cv-REQuest".parse::<Subtype>(), Ok(Subtype::ScvpCvRequest));
    assert_eq!("scvp-cv-response".parse::<Subtype>(), Ok(Subtype::ScvpCvResponse));
    assert_eq!("SCvp-CV-rEsPOnse".parse::<Subtype>(), Ok(Subtype::ScvpCvResponse));
    assert_eq!("scvp-vp-request".parse::<Subtype>(), Ok(Subtype::ScvpVpRequest));
    assert_eq!("scVP-VP-reQUesT".parse::<Subtype>(), Ok(Subtype::ScvpVpRequest));
    assert_eq!("scvp-vp-response".parse::<Subtype>(), Ok(Subtype::ScvpVpResponse));
    assert_eq!("sCvP-vP-ReSponsE".parse::<Subtype>(), Ok(Subtype::ScvpVpResponse));
    assert_eq!("sdp".parse::<Subtype>(), Ok(Subtype::Sdp));
    assert_eq!("sDp".parse::<Subtype>(), Ok(Subtype::Sdp));
    assert_eq!("secevent".parse::<Subtype>(), Ok(Subtype::Secevent));
    assert_eq!("secevenT".parse::<Subtype>(), Ok(Subtype::Secevent));
    assert_eq!("senml".parse::<Subtype>(), Ok(Subtype::Senml));
    assert_eq!("senML".parse::<Subtype>(), Ok(Subtype::Senml));
    assert_eq!("senml-etch".parse::<Subtype>(), Ok(Subtype::SenmlEtch));
    assert_eq!("SenmL-etCh".parse::<Subtype>(), Ok(Subtype::SenmlEtch));
    assert_eq!("senml-exi".parse::<Subtype>(), Ok(Subtype::SenmlExi));
    assert_eq!("sENML-ExI".parse::<Subtype>(), Ok(Subtype::SenmlExi));
    assert_eq!("sensml".parse::<Subtype>(), Ok(Subtype::Sensml));
    assert_eq!("SeNSmL".parse::<Subtype>(), Ok(Subtype::Sensml));
    assert_eq!("sensml-exi".parse::<Subtype>(), Ok(Subtype::SensmlExi));
    assert_eq!("SENSmL-EXI".parse::<Subtype>(), Ok(Subtype::SensmlExi));
    assert_eq!("sep".parse::<Subtype>(), Ok(Subtype::Sep));
    assert_eq!("sEP".parse::<Subtype>(), Ok(Subtype::Sep));
    assert_eq!("sep-exi".parse::<Subtype>(), Ok(Subtype::SepExi));
    assert_eq!("sEp-ExI".parse::<Subtype>(), Ok(Subtype::SepExi));
    assert_eq!("session-info".parse::<Subtype>(), Ok(Subtype::SessionInfo));
    assert_eq!("seSSion-iNFo".parse::<Subtype>(), Ok(Subtype::SessionInfo));
    assert_eq!("set-payment".parse::<Subtype>(), Ok(Subtype::SetPayment));
    assert_eq!("sET-pAYmEnt".parse::<Subtype>(), Ok(Subtype::SetPayment));
    assert_eq!("set-payment-initiation".parse::<Subtype>(), Ok(Subtype::SetPaymentInitiation));
    assert_eq!("sEt-pAymEnt-iNITiAtioN".parse::<Subtype>(), Ok(Subtype::SetPaymentInitiation));
    assert_eq!("set-registration".parse::<Subtype>(), Ok(Subtype::SetRegistration));
    assert_eq!("Set-rEgiSTRAtIon".parse::<Subtype>(), Ok(Subtype::SetRegistration));
    assert_eq!("set-registration-initiation".parse::<Subtype>(), Ok(Subtype::SetRegistrationInitiation));
    assert_eq!("sET-rEGiSTraTION-InItIATion".parse::<Subtype>(), Ok(Subtype::SetRegistrationInitiation));
    assert_eq!("sfnt".parse::<Subtype>(), Ok(Subtype::Sfnt));
    assert_eq!("SFNt".parse::<Subtype>(), Ok(Subtype::Sfnt));
    assert_eq!("SGML".parse::<Subtype>(), Ok(Subtype::Sgml));
    assert_eq!("sgml".parse::<Subtype>(), Ok(Subtype::Sgml));
    assert_eq!("sgml-open-catalog".parse::<Subtype>(), Ok(Subtype::SgmlOpenCatalog));
    assert_eq!("SgMl-opEn-CaTALOG".parse::<Subtype>(), Ok(Subtype::SgmlOpenCatalog));
    assert_eq!("shaclc".parse::<Subtype>(), Ok(Subtype::Shaclc));
    assert_eq!("sHaCLc".parse::<Subtype>(), Ok(Subtype::Shaclc));
    assert_eq!("shex".parse::<Subtype>(), Ok(Subtype::Shex));
    assert_eq!("shex".parse::<Subtype>(), Ok(Subtype::Shex));
    assert_eq!("shf".parse::<Subtype>(), Ok(Subtype::Shf));
    assert_eq!("SHf".parse::<Subtype>(), Ok(Subtype::Shf));
    assert_eq!("sieve".parse::<Subtype>(), Ok(Subtype::Sieve));
    assert_eq!("SIEVE".parse::<Subtype>(), Ok(Subtype::Sieve));
    assert_eq!("signed".parse::<Subtype>(), Ok(Subtype::Signed));
    assert_eq!("sigNed".parse::<Subtype>(), Ok(Subtype::Signed));
    assert_eq!("simple-filter".parse::<Subtype>(), Ok(Subtype::SimpleFilter));
    assert_eq!("sIMPLe-filTeR".parse::<Subtype>(), Ok(Subtype::SimpleFilter));
    assert_eq!("simple-message-summary".parse::<Subtype>(), Ok(Subtype::SimpleMessageSummary));
    assert_eq!("SiMplE-MesSAGe-sUMMaRY".parse::<Subtype>(), Ok(Subtype::SimpleMessageSummary));
    assert_eq!("simpleSymbolContainer".parse::<Subtype>(), Ok(Subtype::SimpleSymbolContainer));
    assert_eq!("simPlEsyMBoLCOnTaiNEr".parse::<Subtype>(), Ok(Subtype::SimpleSymbolContainer));
    assert_eq!("sip".parse::<Subtype>(), Ok(Subtype::Sip));
    assert_eq!("SIP".parse::<Subtype>(), Ok(Subtype::Sip));
    assert_eq!("sipc".parse::<Subtype>(), Ok(Subtype::Sipc));
    assert_eq!("SIPc".parse::<Subtype>(), Ok(Subtype::Sipc));
    assert_eq!("sipfrag".parse::<Subtype>(), Ok(Subtype::Sipfrag));
    assert_eq!("sIpfRag".parse::<Subtype>(), Ok(Subtype::Sipfrag));
    assert_eq!("slate".parse::<Subtype>(), Ok(Subtype::Slate));
    assert_eq!("SLATe".parse::<Subtype>(), Ok(Subtype::Slate));
    assert_eq!("smil".parse::<Subtype>(), Ok(Subtype::Smil));
    assert_eq!("Smil".parse::<Subtype>(), Ok(Subtype::Smil));
    assert_eq!("smpte291".parse::<Subtype>(), Ok(Subtype::Smpte291));
    assert_eq!("SmPtE291".parse::<Subtype>(), Ok(Subtype::Smpte291));
    assert_eq!("SMPTE292M".parse::<Subtype>(), Ok(Subtype::Smpte292m));
    assert_eq!("smPte292m".parse::<Subtype>(), Ok(Subtype::Smpte292m));
    assert_eq!("smpte336m".parse::<Subtype>(), Ok(Subtype::Smpte336m));
    assert_eq!("SmptE336M".parse::<Subtype>(), Ok(Subtype::Smpte336m));
    assert_eq!("SMV".parse::<Subtype>(), Ok(Subtype::Smv));
    assert_eq!("Smv".parse::<Subtype>(), Ok(Subtype::Smv));
    assert_eq!("SMV0".parse::<Subtype>(), Ok(Subtype::Smv0));
    assert_eq!("SMV0".parse::<Subtype>(), Ok(Subtype::Smv0));
    assert_eq!("SMV-QCP".parse::<Subtype>(), Ok(Subtype::SmvQcp));
    assert_eq!("SMV-qCp".parse::<Subtype>(), Ok(Subtype::SmvQcp));
    assert_eq!("soap".parse::<Subtype>(), Ok(Subtype::Soap));
    assert_eq!("SoaP".parse::<Subtype>(), Ok(Subtype::Soap));
    assert_eq!("socket".parse::<Subtype>(), Ok(Subtype::Socket));
    assert_eq!("SoCKET".parse::<Subtype>(), Ok(Subtype::Socket));
    assert_eq!("sofa".parse::<Subtype>(), Ok(Subtype::Sofa));
    assert_eq!("SofA".parse::<Subtype>(), Ok(Subtype::Sofa));
    assert_eq!("sp-midi".parse::<Subtype>(), Ok(Subtype::SpMidi));
    assert_eq!("Sp-MiDI".parse::<Subtype>(), Ok(Subtype::SpMidi));
    assert_eq!("sparql-query".parse::<Subtype>(), Ok(Subtype::SparqlQuery));
    assert_eq!("sparqL-qUERY".parse::<Subtype>(), Ok(Subtype::SparqlQuery));
    assert_eq!("sparql-results".parse::<Subtype>(), Ok(Subtype::SparqlResults));
    assert_eq!("sparQL-RESultS".parse::<Subtype>(), Ok(Subtype::SparqlResults));
    assert_eq!("spdx".parse::<Subtype>(), Ok(Subtype::Spdx));
    assert_eq!("SpDX".parse::<Subtype>(), Ok(Subtype::Spdx));
    assert_eq!("speex".parse::<Subtype>(), Ok(Subtype::Speex));
    assert_eq!("SpeEX".parse::<Subtype>(), Ok(Subtype::Speex));
    assert_eq!("spirits-event".parse::<Subtype>(), Ok(Subtype::SpiritsEvent));
    assert_eq!("spiRits-eveNT".parse::<Subtype>(), Ok(Subtype::SpiritsEvent));
    assert_eq!("sql".parse::<Subtype>(), Ok(Subtype::Sql));
    assert_eq!("SQl".parse::<Subtype>(), Ok(Subtype::Sql));
    assert_eq!("srgs".parse::<Subtype>(), Ok(Subtype::Srgs));
    assert_eq!("srgs".parse::<Subtype>(), Ok(Subtype::Srgs));
    assert_eq!("sru".parse::<Subtype>(), Ok(Subtype::Sru));
    assert_eq!("sru".parse::<Subtype>(), Ok(Subtype::Sru));
    assert_eq!("ssml".parse::<Subtype>(), Ok(Subtype::Ssml));
    assert_eq!("sSMl".parse::<Subtype>(), Ok(Subtype::Ssml));
    assert_eq!("step".parse::<Subtype>(), Ok(Subtype::Step));
    assert_eq!("sTEp".parse::<Subtype>(), Ok(Subtype::Step));
    assert_eq!("step-xml".parse::<Subtype>(), Ok(Subtype::StepXml));
    assert_eq!("SteP-xMl".parse::<Subtype>(), Ok(Subtype::StepXml));
    assert_eq!("stix".parse::<Subtype>(), Ok(Subtype::Stix));
    assert_eq!("stix".parse::<Subtype>(), Ok(Subtype::Stix));
    assert_eq!("stl".parse::<Subtype>(), Ok(Subtype::Stl));
    assert_eq!("stl".parse::<Subtype>(), Ok(Subtype::Stl));
    assert_eq!("strings".parse::<Subtype>(), Ok(Subtype::Strings));
    assert_eq!("StrINgS".parse::<Subtype>(), Ok(Subtype::Strings));
    assert_eq!("svg".parse::<Subtype>(), Ok(Subtype::Svg));
    assert_eq!("SVG".parse::<Subtype>(), Ok(Subtype::Svg));
    assert_eq!("swid".parse::<Subtype>(), Ok(Subtype::Swid));
    assert_eq!("Swid".parse::<Subtype>(), Ok(Subtype::Swid));
    assert_eq!("t140".parse::<Subtype>(), Ok(Subtype::T140));
    assert_eq!("T140".parse::<Subtype>(), Ok(Subtype::T140));
    assert_eq!("t140c".parse::<Subtype>(), Ok(Subtype::T140c));
    assert_eq!("t140c".parse::<Subtype>(), Ok(Subtype::T140c));
    assert_eq!("t38".parse::<Subtype>(), Ok(Subtype::T38));
    assert_eq!("t38".parse::<Subtype>(), Ok(Subtype::T38));
    assert_eq!("tab-separated-values".parse::<Subtype>(), Ok(Subtype::TabSeparatedValues));
    assert_eq!("TAB-sepAraTEd-ValueS".parse::<Subtype>(), Ok(Subtype::TabSeparatedValues));
    assert_eq!("tamp-apex-update".parse::<Subtype>(), Ok(Subtype::TampApexUpdate));
    assert_eq!("tAmp-Apex-UPDaTe".parse::<Subtype>(), Ok(Subtype::TampApexUpdate));
    assert_eq!("tamp-apex-update-confirm".parse::<Subtype>(), Ok(Subtype::TampApexUpdateConfirm));
    assert_eq!("TAMp-ApEx-uPdAtE-ConFIRM".parse::<Subtype>(), Ok(Subtype::TampApexUpdateConfirm));
    assert_eq!("tamp-community-update".parse::<Subtype>(), Ok(Subtype::TampCommunityUpdate));
    assert_eq!("taMP-cOMMUnITy-upDAtE".parse::<Subtype>(), Ok(Subtype::TampCommunityUpdate));
    assert_eq!("tamp-community-update-confirm".parse::<Subtype>(), Ok(Subtype::TampCommunityUpdateConfirm));
    assert_eq!("Tamp-CoMMunity-uPdAte-cONfirm".parse::<Subtype>(), Ok(Subtype::TampCommunityUpdateConfirm));
    assert_eq!("tamp-error".parse::<Subtype>(), Ok(Subtype::TampError));
    assert_eq!("tAMP-ERroR".parse::<Subtype>(), Ok(Subtype::TampError));
    assert_eq!("tamp-sequence-adjust".parse::<Subtype>(), Ok(Subtype::TampSequenceAdjust));
    assert_eq!("taMP-SEqUeNce-ADJusT".parse::<Subtype>(), Ok(Subtype::TampSequenceAdjust));
    assert_eq!("tamp-sequence-adjust-confirm".parse::<Subtype>(), Ok(Subtype::TampSequenceAdjustConfirm));
    assert_eq!("tAmp-SeQueNCe-ADjUsT-cONFIRM".parse::<Subtype>(), Ok(Subtype::TampSequenceAdjustConfirm));
    assert_eq!("tamp-status-query".parse::<Subtype>(), Ok(Subtype::TampStatusQuery));
    assert_eq!("TAmp-sTatus-Query".parse::<Subtype>(), Ok(Subtype::TampStatusQuery));
    assert_eq!("tamp-status-response".parse::<Subtype>(), Ok(Subtype::TampStatusResponse));
    assert_eq!("Tamp-StAtUs-REsPOnSe".parse::<Subtype>(), Ok(Subtype::TampStatusResponse));
    assert_eq!("tamp-update".parse::<Subtype>(), Ok(Subtype::TampUpdate));
    assert_eq!("tamp-UpdaTE".parse::<Subtype>(), Ok(Subtype::TampUpdate));
    assert_eq!("tamp-update-confirm".parse::<Subtype>(), Ok(Subtype::TampUpdateConfirm));
    assert_eq!("Tamp-UpDATE-cOnfirm".parse::<Subtype>(), Ok(Subtype::TampUpdateConfirm));
    assert_eq!("taxii".parse::<Subtype>(), Ok(Subtype::Taxii));
    assert_eq!("TAxIi".parse::<Subtype>(), Ok(Subtype::Taxii));
    assert_eq!("td".parse::<Subtype>(), Ok(Subtype::Td));
    assert_eq!("Td".parse::<Subtype>(), Ok(Subtype::Td));
    assert_eq!("tei".parse::<Subtype>(), Ok(Subtype::Tei));
    assert_eq!("tEi".parse::<Subtype>(), Ok(Subtype::Tei));
    assert_eq!("telephone-event".parse::<Subtype>(), Ok(Subtype::TelephoneEvent));
    assert_eq!("TElEPhone-event".parse::<Subtype>(), Ok(Subtype::TelephoneEvent));
    assert_eq!("TETRA_ACELP".parse::<Subtype>(), Ok(Subtype::TetraAcelp));
    assert_eq!("TeTRa_ACeLP".parse::<Subtype>(), Ok(Subtype::TetraAcelp));
    assert_eq!("TETRA_ACELP_BB".parse::<Subtype>(), Ok(Subtype::TetraAcelpBb));
    assert_eq!("teTRa_ACeLP_bb".parse::<Subtype>(), Ok(Subtype::TetraAcelpBb));
    assert_eq!("TETRA_ISI".parse::<Subtype>(), Ok(Subtype::TetraIsi));
    assert_eq!("tETRA_isi".parse::<Subtype>(), Ok(Subtype::TetraIsi));
    assert_eq!("texmacs".parse::<Subtype>(), Ok(Subtype::Texmacs));
    assert_eq!("tExmacs".parse::<Subtype>(), Ok(Subtype::Texmacs));
    assert_eq!("thraud".parse::<Subtype>(), Ok(Subtype::Thraud));
    assert_eq!("thRAUD".parse::<Subtype>(), Ok(Subtype::Thraud));
    assert_eq!("tiff".parse::<Subtype>(), Ok(Subtype::Tiff));
    assert_eq!("TIfF".parse::<Subtype>(), Ok(Subtype::Tiff));
    assert_eq!("tiff-fx".parse::<Subtype>(), Ok(Subtype::TiffFx));
    assert_eq!("TifF-fX".parse::<Subtype>(), Ok(Subtype::TiffFx));
    assert_eq!("timestamp-query".parse::<Subtype>(), Ok(Subtype::TimestampQuery));
    assert_eq!("tiMEsTAmp-QueRy".parse::<Subtype>(), Ok(Subtype::TimestampQuery));
    assert_eq!("timestamp-reply".parse::<Subtype>(), Ok(Subtype::TimestampReply));
    assert_eq!("TimesTAMP-REPLy".parse::<Subtype>(), Ok(Subtype::TimestampReply));
    assert_eq!("timestamped-data".parse::<Subtype>(), Ok(Subtype::TimestampedData));
    assert_eq!("tImEstAmpeD-DAta".parse::<Subtype>(), Ok(Subtype::TimestampedData));
    assert_eq!("tlsrpt".parse::<Subtype>(), Ok(Subtype::Tlsrpt));
    assert_eq!("tlsRPT".parse::<Subtype>(), Ok(Subtype::Tlsrpt));
    assert_eq!("tnauthlist".parse::<Subtype>(), Ok(Subtype::Tnauthlist));
    assert_eq!("tnaUTHLISt".parse::<Subtype>(), Ok(Subtype::Tnauthlist));
    assert_eq!("token-introspection".parse::<Subtype>(), Ok(Subtype::TokenIntrospection));
    assert_eq!("TOken-InTroSpECTiOn".parse::<Subtype>(), Ok(Subtype::TokenIntrospection));
    assert_eq!("tone".parse::<Subtype>(), Ok(Subtype::Tone));
    assert_eq!("TOne".parse::<Subtype>(), Ok(Subtype::Tone));
    assert_eq!("tracking-status".parse::<Subtype>(), Ok(Subtype::TrackingStatus));
    assert_eq!("TrackiNG-STAtus".parse::<Subtype>(), Ok(Subtype::TrackingStatus));
    assert_eq!("trickle-ice-sdpfrag".parse::<Subtype>(), Ok(Subtype::TrickleIceSdpfrag));
    assert_eq!("tricKLE-icE-sdpFRAg".parse::<Subtype>(), Ok(Subtype::TrickleIceSdpfrag));
    assert_eq!("trig".parse::<Subtype>(), Ok(Subtype::Trig));
    assert_eq!("trig".parse::<Subtype>(), Ok(Subtype::Trig));
    assert_eq!("troff".parse::<Subtype>(), Ok(Subtype::Troff));
    assert_eq!("troff".parse::<Subtype>(), Ok(Subtype::Troff));
    assert_eq!("TSVCIS".parse::<Subtype>(), Ok(Subtype::Tsvcis));
    assert_eq!("Tsvcis".parse::<Subtype>(), Ok(Subtype::Tsvcis));
    assert_eq!("ttf".parse::<Subtype>(), Ok(Subtype::Ttf));
    assert_eq!("Ttf".parse::<Subtype>(), Ok(Subtype::Ttf));
    assert_eq!("ttml".parse::<Subtype>(), Ok(Subtype::Ttml));
    assert_eq!("Ttml".parse::<Subtype>(), Ok(Subtype::Ttml));
    assert_eq!("turtle".parse::<Subtype>(), Ok(Subtype::Turtle));
    assert_eq!("TuRTLE".parse::<Subtype>(), Ok(Subtype::Turtle));
    assert_eq!("tve-trigger".parse::<Subtype>(), Ok(Subtype::TveTrigger));
    assert_eq!("TVe-tRiGGEr".parse::<Subtype>(), Ok(Subtype::TveTrigger));
    assert_eq!("tzif".parse::<Subtype>(), Ok(Subtype::Tzif));
    assert_eq!("TZIf".parse::<Subtype>(), Ok(Subtype::Tzif));
    assert_eq!("tzif-leap".parse::<Subtype>(), Ok(Subtype::TzifLeap));
    assert_eq!("TZIF-Leap".parse::<Subtype>(), Ok(Subtype::TzifLeap));
    assert_eq!("u3d".parse::<Subtype>(), Ok(Subtype::U3d));
    assert_eq!("U3D".parse::<Subtype>(), Ok(Subtype::U3d));
    assert_eq!("UEMCLIP".parse::<Subtype>(), Ok(Subtype::Uemclip));
    assert_eq!("uEmcLIp".parse::<Subtype>(), Ok(Subtype::Uemclip));
    assert_eq!("ulpfec".parse::<Subtype>(), Ok(Subtype::Ulpfec));
    assert_eq!("uLPFEC".parse::<Subtype>(), Ok(Subtype::Ulpfec));
    assert_eq!("urc-grpsheet".parse::<Subtype>(), Ok(Subtype::UrcGrpsheet));
    assert_eq!("urc-gRPsHEeT".parse::<Subtype>(), Ok(Subtype::UrcGrpsheet));
    assert_eq!("urc-ressheet".parse::<Subtype>(), Ok(Subtype::UrcRessheet));
    assert_eq!("urC-rEsSHEeT".parse::<Subtype>(), Ok(Subtype::UrcRessheet));
    assert_eq!("urc-targetdesc".parse::<Subtype>(), Ok(Subtype::UrcTargetdesc));
    assert_eq!("Urc-tARgeTdESC".parse::<Subtype>(), Ok(Subtype::UrcTargetdesc));
    assert_eq!("urc-uisocketdesc".parse::<Subtype>(), Ok(Subtype::UrcUisocketdesc));
    assert_eq!("urC-uisoCketdesc".parse::<Subtype>(), Ok(Subtype::UrcUisocketdesc));
    assert_eq!("uri-list".parse::<Subtype>(), Ok(Subtype::UriList));
    assert_eq!("UrI-lISt".parse::<Subtype>(), Ok(Subtype::UriList));
    assert_eq!("usac".parse::<Subtype>(), Ok(Subtype::Usac));
    assert_eq!("usAc".parse::<Subtype>(), Ok(Subtype::Usac));
    assert_eq!("vc1".parse::<Subtype>(), Ok(Subtype::Vc1));
    assert_eq!("vc1".parse::<Subtype>(), Ok(Subtype::Vc1));
    assert_eq!("vc2".parse::<Subtype>(), Ok(Subtype::Vc2));
    assert_eq!("vC2".parse::<Subtype>(), Ok(Subtype::Vc2));
    assert_eq!("vcard".parse::<Subtype>(), Ok(Subtype::Vcard));
    assert_eq!("vCArd".parse::<Subtype>(), Ok(Subtype::Vcard));
    assert_eq!("VDVI".parse::<Subtype>(), Ok(Subtype::Vdvi));
    assert_eq!("VdvI".parse::<Subtype>(), Ok(Subtype::Vdvi));
    assert_eq!("vemmi".parse::<Subtype>(), Ok(Subtype::Vemmi));
    assert_eq!("veMMi".parse::<Subtype>(), Ok(Subtype::Vemmi));
    assert_eq!("VMR-WB".parse::<Subtype>(), Ok(Subtype::VmrWb));
    assert_eq!("vMR-Wb".parse::<Subtype>(), Ok(Subtype::VmrWb));
    assert_eq!("vnd.1000minds.decision-model".parse::<Subtype>(), Ok(Subtype::Vnd1000mindsDecisionModel));
    assert_eq!("VnD.1000miNDs.deCIsIOn-moDeL".parse::<Subtype>(), Ok(Subtype::Vnd1000mindsDecisionModel));
    assert_eq!("vnd.3gpp2.bcmcsinfo".parse::<Subtype>(), Ok(Subtype::Vnd3gpp2Bcmcsinfo));
    assert_eq!("vnD.3GpP2.BcMcsINFO".parse::<Subtype>(), Ok(Subtype::Vnd3gpp2Bcmcsinfo));
    assert_eq!("vnd.3gpp2.sms".parse::<Subtype>(), Ok(Subtype::Vnd3gpp2Sms));
    assert_eq!("VnD.3GPP2.sms".parse::<Subtype>(), Ok(Subtype::Vnd3gpp2Sms));
    assert_eq!("vnd.3gpp2.tcap".parse::<Subtype>(), Ok(Subtype::Vnd3gpp2Tcap));
    assert_eq!("vND.3gPP2.tcap".parse::<Subtype>(), Ok(Subtype::Vnd3gpp2Tcap));
    assert_eq!("vnd.3gpp.5gnas".parse::<Subtype>(), Ok(Subtype::Vnd3gpp5gnas));
    assert_eq!("VNd.3Gpp.5gnaS".parse::<Subtype>(), Ok(Subtype::Vnd3gpp5gnas));
    assert_eq!("vnd.3gpp.access-transfer-events".parse::<Subtype>(), Ok(Subtype::Vnd3gppAccessTransferEvents));
    assert_eq!("vND.3gpp.ACCESS-tRanSfer-eVEnTs".parse::<Subtype>(), Ok(Subtype::Vnd3gppAccessTransferEvents));
    assert_eq!("vnd.3gpp.bsf".parse::<Subtype>(), Ok(Subtype::Vnd3gppBsf));
    assert_eq!("VNd.3GpP.bsF".parse::<Subtype>(), Ok(Subtype::Vnd3gppBsf));
    assert_eq!("vnd.3gpp.GMOP".parse::<Subtype>(), Ok(Subtype::Vnd3gppGmop));
    assert_eq!("VNd.3gPp.GmOP".parse::<Subtype>(), Ok(Subtype::Vnd3gppGmop));
    assert_eq!("vnd.3gpp.gtpc".parse::<Subtype>(), Ok(Subtype::Vnd3gppGtpc));
    assert_eq!("vnD.3gpp.gtPC".parse::<Subtype>(), Ok(Subtype::Vnd3gppGtpc));
    assert_eq!("vnd.3gpp.interworking-data".parse::<Subtype>(), Ok(Subtype::Vnd3gppInterworkingData));
    assert_eq!("vnd.3gPP.INTerWORKing-dAta".parse::<Subtype>(), Ok(Subtype::Vnd3gppInterworkingData));
    assert_eq!("vnd.3gpp.iufp".parse::<Subtype>(), Ok(Subtype::Vnd3gppIufp));
    assert_eq!("vNd.3gPP.iUfP".parse::<Subtype>(), Ok(Subtype::Vnd3gppIufp));
    assert_eq!("vnd.3gpp.lpp".parse::<Subtype>(), Ok(Subtype::Vnd3gppLpp));
    assert_eq!("vnD.3gpp.LPp".parse::<Subtype>(), Ok(Subtype::Vnd3gppLpp));
    assert_eq!("vnd.3gpp.mc-signalling-ear".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcSignallingEar));
    assert_eq!("vND.3gPP.Mc-sIgnalLIng-EAR".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcSignallingEar));
    assert_eq!("vnd.3gpp.mcdata-affiliation-command".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataAffiliationCommand));
    assert_eq!("vnD.3GPp.mcdAta-aFfiLIaTIon-cOmMAnD".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataAffiliationCommand));
    assert_eq!("vnd.3gpp.mcdata-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataInfo));
    assert_eq!("vND.3GPP.mcdatA-INFo".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataInfo));
    assert_eq!("vnd.3gpp.mcdata-payload".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataPayload));
    assert_eq!("vND.3gPP.mCdaTA-PaylOAD".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataPayload));
    assert_eq!("vnd.3gpp.mcdata-service-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataServiceConfig));
    assert_eq!("vNd.3gPP.McDAta-SeRVICE-COnfIG".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataServiceConfig));
    assert_eq!("vnd.3gpp.mcdata-signalling".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataSignalling));
    assert_eq!("VND.3gPP.mcDatA-sIGNallING".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataSignalling));
    assert_eq!("vnd.3gpp.mcdata-ue-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataUeConfig));
    assert_eq!("vND.3GpP.mCdaTa-uE-ConfiG".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataUeConfig));
    assert_eq!("vnd.3gpp.mcdata-user-profile".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataUserProfile));
    assert_eq!("vnd.3GPP.mcdAtA-user-ProfILe".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcdataUserProfile));
    assert_eq!("vnd.3gpp.mcptt-affiliation-command".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttAffiliationCommand));
    assert_eq!("Vnd.3gpP.McPtt-affiLIaTion-COmMANd".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttAffiliationCommand));
    assert_eq!("vnd.3gpp.mcptt-floor-request".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttFloorRequest));
    assert_eq!("Vnd.3gPP.McptT-flOOR-REqUESt".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttFloorRequest));
    assert_eq!("vnd.3gpp.mcptt-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttInfo));
    assert_eq!("vnD.3gPp.McPtT-infO".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttInfo));
    assert_eq!("vnd.3gpp.mcptt-location-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttLocationInfo));
    assert_eq!("Vnd.3gPP.MCpTt-loCATiON-InfO".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttLocationInfo));
    assert_eq!("vnd.3gpp.mcptt-mbms-usage-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttMbmsUsageInfo));
    assert_eq!("vNd.3GpP.mCptt-Mbms-usaGE-InFO".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttMbmsUsageInfo));
    assert_eq!("vnd.3gpp.mcptt-service-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttServiceConfig));
    assert_eq!("vnD.3Gpp.mCPTt-sErVice-CoNFiG".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttServiceConfig));
    assert_eq!("vnd.3gpp.mcptt-signed".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttSigned));
    assert_eq!("vND.3gpp.MCptT-sIgNED".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttSigned));
    assert_eq!("vnd.3gpp.mcptt-ue-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttUeConfig));
    assert_eq!("VNd.3gPp.McpTT-Ue-conFIg".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttUeConfig));
    assert_eq!("vnd.3gpp.mcptt-ue-init-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttUeInitConfig));
    assert_eq!("Vnd.3gPp.MCPTt-ue-inIT-cOnfIG".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttUeInitConfig));
    assert_eq!("vnd.3gpp.mcptt-user-profile".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttUserProfile));
    assert_eq!("vnd.3gPp.McPtT-USer-prOfILE".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcpttUserProfile));
    assert_eq!("vnd.3gpp.mcvideo-affiliation-command".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoAffiliationCommand));
    assert_eq!("VNd.3Gpp.mcViDEO-AFfiLiation-commanD".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoAffiliationCommand));
    assert_eq!("vnd.3gpp.mcvideo-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoInfo));
    assert_eq!("VNd.3GpP.mCVidEO-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoInfo));
    assert_eq!("vnd.3gpp.mcvideo-location-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoLocationInfo));
    assert_eq!("vNd.3GpP.MCvIdEO-loCatiOn-iNfo".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoLocationInfo));
    assert_eq!("vnd.3gpp.mcvideo-mbms-usage-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoMbmsUsageInfo));
    assert_eq!("VnD.3GPp.mcvIdEo-mBMs-UsAGE-INFO".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoMbmsUsageInfo));
    assert_eq!("vnd.3gpp.mcvideo-service-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoServiceConfig));
    assert_eq!("VND.3GPp.mCvIdeO-seRvICe-CONfig".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoServiceConfig));
    assert_eq!("vnd.3gpp.mcvideo-transmission-request".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoTransmissionRequest));
    assert_eq!("VnD.3GPp.McvIdeO-tRaNsMiSsiON-reQuEST".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoTransmissionRequest));
    assert_eq!("vnd.3gpp.mcvideo-ue-config".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoUeConfig));
    assert_eq!("vnD.3GPP.MCVideo-ue-cONfIG".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoUeConfig));
    assert_eq!("vnd.3gpp.mcvideo-user-profile".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoUserProfile));
    assert_eq!("VND.3gpp.mCvIdEO-USER-PRofiLE".parse::<Subtype>(), Ok(Subtype::Vnd3gppMcvideoUserProfile));
    assert_eq!("vnd.3gpp.mid-call".parse::<Subtype>(), Ok(Subtype::Vnd3gppMidCall));
    assert_eq!("vNd.3gPP.mID-calL".parse::<Subtype>(), Ok(Subtype::Vnd3gppMidCall));
    assert_eq!("vnd.3gpp.ngap".parse::<Subtype>(), Ok(Subtype::Vnd3gppNgap));
    assert_eq!("vNd.3GpP.ngAp".parse::<Subtype>(), Ok(Subtype::Vnd3gppNgap));
    assert_eq!("vnd.3gpp.pfcp".parse::<Subtype>(), Ok(Subtype::Vnd3gppPfcp));
    assert_eq!("VND.3GPp.pFCp".parse::<Subtype>(), Ok(Subtype::Vnd3gppPfcp));
    assert_eq!("vnd.3gpp.pic-bw-large".parse::<Subtype>(), Ok(Subtype::Vnd3gppPicBwLarge));
    assert_eq!("VnD.3GPp.piC-BW-lArGE".parse::<Subtype>(), Ok(Subtype::Vnd3gppPicBwLarge));
    assert_eq!("vnd.3gpp.pic-bw-small".parse::<Subtype>(), Ok(Subtype::Vnd3gppPicBwSmall));
    assert_eq!("VnD.3gpP.piC-bw-small".parse::<Subtype>(), Ok(Subtype::Vnd3gppPicBwSmall));
    assert_eq!("vnd.3gpp.pic-bw-var".parse::<Subtype>(), Ok(Subtype::Vnd3gppPicBwVar));
    assert_eq!("vnD.3gPp.Pic-Bw-VAr".parse::<Subtype>(), Ok(Subtype::Vnd3gppPicBwVar));
    assert_eq!("vnd.3gpp-prose".parse::<Subtype>(), Ok(Subtype::Vnd3gppProse));
    assert_eq!("vnD.3gPP-ProSe".parse::<Subtype>(), Ok(Subtype::Vnd3gppProse));
    assert_eq!("vnd.3gpp-prose-pc3ch".parse::<Subtype>(), Ok(Subtype::Vnd3gppProsePc3ch));
    assert_eq!("vnd.3gpp-PROsE-PC3cH".parse::<Subtype>(), Ok(Subtype::Vnd3gppProsePc3ch));
    assert_eq!("vnd.3gpp.s1ap".parse::<Subtype>(), Ok(Subtype::Vnd3gppS1ap));
    assert_eq!("Vnd.3gpp.s1aP".parse::<Subtype>(), Ok(Subtype::Vnd3gppS1ap));
    assert_eq!("vnd.3gpp.sms".parse::<Subtype>(), Ok(Subtype::Vnd3gppSms));
    assert_eq!("VND.3gpp.SMS".parse::<Subtype>(), Ok(Subtype::Vnd3gppSms));
    assert_eq!("vnd.3gpp.srvcc-ext".parse::<Subtype>(), Ok(Subtype::Vnd3gppSrvccExt));
    assert_eq!("Vnd.3Gpp.sRVCc-EXt".parse::<Subtype>(), Ok(Subtype::Vnd3gppSrvccExt));
    assert_eq!("vnd.3gpp.SRVCC-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppSrvccInfo));
    assert_eq!("vnD.3GPP.SRVcC-InFO".parse::<Subtype>(), Ok(Subtype::Vnd3gppSrvccInfo));
    assert_eq!("vnd.3gpp.state-and-event-info".parse::<Subtype>(), Ok(Subtype::Vnd3gppStateAndEventInfo));
    assert_eq!("vnD.3GPp.STaTe-AND-EVENt-inFo".parse::<Subtype>(), Ok(Subtype::Vnd3gppStateAndEventInfo));
    assert_eq!("vnd.3gpp.ussd".parse::<Subtype>(), Ok(Subtype::Vnd3gppUssd));
    assert_eq!("Vnd.3Gpp.UssD".parse::<Subtype>(), Ok(Subtype::Vnd3gppUssd));
    assert_eq!("vnd.3gpp-v2x-local-service-information".parse::<Subtype>(), Ok(Subtype::Vnd3gppV2xLocalServiceInformation));
    assert_eq!("vNd.3gPP-v2X-loCal-SeRVIcE-INfORMaTiOn".parse::<Subtype>(), Ok(Subtype::Vnd3gppV2xLocalServiceInformation));
    assert_eq!("vnd.3lightssoftware.imagescal".parse::<Subtype>(), Ok(Subtype::Vnd3lightssoftwareImagescal));
    assert_eq!("vNd.3LightSSOFTWare.IMaGEScAl".parse::<Subtype>(), Ok(Subtype::Vnd3lightssoftwareImagescal));
    assert_eq!("vnd.3M.Post-it-Notes".parse::<Subtype>(), Ok(Subtype::Vnd3mPostItNotes));
    assert_eq!("vnd.3M.PosT-IT-nOtES".parse::<Subtype>(), Ok(Subtype::Vnd3mPostItNotes));
    assert_eq!("vnd.4SB".parse::<Subtype>(), Ok(Subtype::Vnd4sb));
    assert_eq!("Vnd.4sB".parse::<Subtype>(), Ok(Subtype::Vnd4sb));
    assert_eq!("vnd.a".parse::<Subtype>(), Ok(Subtype::VndA));
    assert_eq!("vND.a".parse::<Subtype>(), Ok(Subtype::VndA));
    assert_eq!("vnd.abc".parse::<Subtype>(), Ok(Subtype::VndAbc));
    assert_eq!("VNd.Abc".parse::<Subtype>(), Ok(Subtype::VndAbc));
    assert_eq!("vnd.accpac.simply.aso".parse::<Subtype>(), Ok(Subtype::VndAccpacSimplyAso));
    assert_eq!("VND.ACCPac.SIMpLY.ASo".parse::<Subtype>(), Ok(Subtype::VndAccpacSimplyAso));
    assert_eq!("vnd.accpac.simply.imp".parse::<Subtype>(), Ok(Subtype::VndAccpacSimplyImp));
    assert_eq!("Vnd.ACcPAC.SimplY.imP".parse::<Subtype>(), Ok(Subtype::VndAccpacSimplyImp));
    assert_eq!("vnd.acucobol".parse::<Subtype>(), Ok(Subtype::VndAcucobol));
    assert_eq!("VnD.acUCObOl".parse::<Subtype>(), Ok(Subtype::VndAcucobol));
    assert_eq!("vnd.acucorp".parse::<Subtype>(), Ok(Subtype::VndAcucorp));
    assert_eq!("vNd.aCUcOrP".parse::<Subtype>(), Ok(Subtype::VndAcucorp));
    assert_eq!("vnd.adobe.flash.movie".parse::<Subtype>(), Ok(Subtype::VndAdobeFlashMovie));
    assert_eq!("vnD.adObE.fLasH.movIE".parse::<Subtype>(), Ok(Subtype::VndAdobeFlashMovie));
    assert_eq!("vnd.adobe.formscentral.fcdt".parse::<Subtype>(), Ok(Subtype::VndAdobeFormscentralFcdt));
    assert_eq!("vND.ADobE.FORMsceNTRAl.fCDt".parse::<Subtype>(), Ok(Subtype::VndAdobeFormscentralFcdt));
    assert_eq!("vnd.adobe.fxp".parse::<Subtype>(), Ok(Subtype::VndAdobeFxp));
    assert_eq!("VND.adObe.FXp".parse::<Subtype>(), Ok(Subtype::VndAdobeFxp));
    assert_eq!("vnd.adobe.partial-upload".parse::<Subtype>(), Ok(Subtype::VndAdobePartialUpload));
    assert_eq!("VNd.AdOBe.paRTiaL-uPloAD".parse::<Subtype>(), Ok(Subtype::VndAdobePartialUpload));
    assert_eq!("vnd.adobe.photoshop".parse::<Subtype>(), Ok(Subtype::VndAdobePhotoshop));
    assert_eq!("VNd.ADObe.PhOtoSHoP".parse::<Subtype>(), Ok(Subtype::VndAdobePhotoshop));
    assert_eq!("vnd.adobe.xdp".parse::<Subtype>(), Ok(Subtype::VndAdobeXdp));
    assert_eq!("vnD.adobe.xDp".parse::<Subtype>(), Ok(Subtype::VndAdobeXdp));
    assert_eq!("vnd.adobe.xfdf".parse::<Subtype>(), Ok(Subtype::VndAdobeXfdf));
    assert_eq!("vNd.AdoBe.XFdF".parse::<Subtype>(), Ok(Subtype::VndAdobeXfdf));
    assert_eq!("vnd.aether.imp".parse::<Subtype>(), Ok(Subtype::VndAetherImp));
    assert_eq!("VNd.aEtHER.iMP".parse::<Subtype>(), Ok(Subtype::VndAetherImp));
    assert_eq!("vnd.afpc.afplinedata".parse::<Subtype>(), Ok(Subtype::VndAfpcAfplinedata));
    assert_eq!("vND.AFpc.aFplInedAta".parse::<Subtype>(), Ok(Subtype::VndAfpcAfplinedata));
    assert_eq!("vnd.afpc.afplinedata-pagedef".parse::<Subtype>(), Ok(Subtype::VndAfpcAfplinedataPagedef));
    assert_eq!("VND.AFPc.afPLinEdAta-pagedEF".parse::<Subtype>(), Ok(Subtype::VndAfpcAfplinedataPagedef));
    assert_eq!("vnd.afpc.cmoca-cmresource".parse::<Subtype>(), Ok(Subtype::VndAfpcCmocaCmresource));
    assert_eq!("VNd.aFPC.cmoCA-CmRESoUrCE".parse::<Subtype>(), Ok(Subtype::VndAfpcCmocaCmresource));
    assert_eq!("vnd.afpc.foca-charset".parse::<Subtype>(), Ok(Subtype::VndAfpcFocaCharset));
    assert_eq!("vnD.afpc.FoCA-charSeT".parse::<Subtype>(), Ok(Subtype::VndAfpcFocaCharset));
    assert_eq!("vnd.afpc.foca-codedfont".parse::<Subtype>(), Ok(Subtype::VndAfpcFocaCodedfont));
    assert_eq!("VNd.AfPC.foCA-codedFOnt".parse::<Subtype>(), Ok(Subtype::VndAfpcFocaCodedfont));
    assert_eq!("vnd.afpc.foca-codepage".parse::<Subtype>(), Ok(Subtype::VndAfpcFocaCodepage));
    assert_eq!("VNd.afPc.foCA-codePagE".parse::<Subtype>(), Ok(Subtype::VndAfpcFocaCodepage));
    assert_eq!("vnd.afpc.modca".parse::<Subtype>(), Ok(Subtype::VndAfpcModca));
    assert_eq!("vNd.afPC.MoDCa".parse::<Subtype>(), Ok(Subtype::VndAfpcModca));
    assert_eq!("vnd.afpc.modca-formdef".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaFormdef));
    assert_eq!("vnd.aFpC.modCA-fORMDef".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaFormdef));
    assert_eq!("vnd.afpc.modca-mediummap".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaMediummap));
    assert_eq!("VnD.AFPc.modCA-mEDiummaP".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaMediummap));
    assert_eq!("vnd.afpc.modca-objectcontainer".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaObjectcontainer));
    assert_eq!("Vnd.afPC.ModcA-OBjecTcOnTaInEr".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaObjectcontainer));
    assert_eq!("vnd.afpc.modca-overlay".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaOverlay));
    assert_eq!("vnD.afPc.ModCa-oVErLAY".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaOverlay));
    assert_eq!("vnd.afpc.modca-pagesegment".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaPagesegment));
    assert_eq!("vnd.AFPC.modcA-pagesEGmEnT".parse::<Subtype>(), Ok(Subtype::VndAfpcModcaPagesegment));
    assert_eq!("vnd.age".parse::<Subtype>(), Ok(Subtype::VndAge));
    assert_eq!("vnD.agE".parse::<Subtype>(), Ok(Subtype::VndAge));
    assert_eq!("vnd.ah-barcode".parse::<Subtype>(), Ok(Subtype::VndAhBarcode));
    assert_eq!("vND.ah-bARCoDe".parse::<Subtype>(), Ok(Subtype::VndAhBarcode));
    assert_eq!("vnd.ahead.space".parse::<Subtype>(), Ok(Subtype::VndAheadSpace));
    assert_eq!("vNd.AhEAd.spAce".parse::<Subtype>(), Ok(Subtype::VndAheadSpace));
    assert_eq!("vnd.airzip.accelerator.azv".parse::<Subtype>(), Ok(Subtype::VndAirzipAcceleratorAzv));
    assert_eq!("vNd.aIrZip.ACCelEratOR.aZv".parse::<Subtype>(), Ok(Subtype::VndAirzipAcceleratorAzv));
    assert_eq!("vnd.airzip.filesecure.azf".parse::<Subtype>(), Ok(Subtype::VndAirzipFilesecureAzf));
    assert_eq!("Vnd.aIrZip.fIlEseCURe.aZF".parse::<Subtype>(), Ok(Subtype::VndAirzipFilesecureAzf));
    assert_eq!("vnd.airzip.filesecure.azs".parse::<Subtype>(), Ok(Subtype::VndAirzipFilesecureAzs));
    assert_eq!("vNd.AiRzip.fiLESECuRE.azS".parse::<Subtype>(), Ok(Subtype::VndAirzipFilesecureAzs));
    assert_eq!("vnd.amadeus".parse::<Subtype>(), Ok(Subtype::VndAmadeus));
    assert_eq!("Vnd.AmadEuS".parse::<Subtype>(), Ok(Subtype::VndAmadeus));
    assert_eq!("vnd.amazon.mobi8-ebook".parse::<Subtype>(), Ok(Subtype::VndAmazonMobi8Ebook));
    assert_eq!("vnd.AmazON.mOBi8-Ebook".parse::<Subtype>(), Ok(Subtype::VndAmazonMobi8Ebook));
    assert_eq!("vnd.americandynamics.acc".parse::<Subtype>(), Ok(Subtype::VndAmericandynamicsAcc));
    assert_eq!("VNd.ameRicANDynamicS.aCC".parse::<Subtype>(), Ok(Subtype::VndAmericandynamicsAcc));
    assert_eq!("vnd.amiga.ami".parse::<Subtype>(), Ok(Subtype::VndAmigaAmi));
    assert_eq!("vnd.amIGA.AMI".parse::<Subtype>(), Ok(Subtype::VndAmigaAmi));
    assert_eq!("vnd.amundsen.maze".parse::<Subtype>(), Ok(Subtype::VndAmundsenMaze));
    assert_eq!("vnd.aMUndSEN.maze".parse::<Subtype>(), Ok(Subtype::VndAmundsenMaze));
    assert_eq!("vnd.android.ota".parse::<Subtype>(), Ok(Subtype::VndAndroidOta));
    assert_eq!("VnD.AndROiD.Ota".parse::<Subtype>(), Ok(Subtype::VndAndroidOta));
    assert_eq!("vnd.android.package-archive".parse::<Subtype>(), Ok(Subtype::VndAndroidPackageArchive));
    assert_eq!("vND.ANdRoid.pACKAgE-arcHiVE".parse::<Subtype>(), Ok(Subtype::VndAndroidPackageArchive));
    assert_eq!("vnd.anki".parse::<Subtype>(), Ok(Subtype::VndAnki));
    assert_eq!("vnD.anki".parse::<Subtype>(), Ok(Subtype::VndAnki));
    assert_eq!("vnd.anser-web-certificate-issue-initiation".parse::<Subtype>(), Ok(Subtype::VndAnserWebCertificateIssueInitiation));
    assert_eq!("vnD.anSer-WeB-ceRTificaTe-iSsUe-InitiAtion".parse::<Subtype>(), Ok(Subtype::VndAnserWebCertificateIssueInitiation));
    assert_eq!("vnd.anser-web-funds-transfer-initiation".parse::<Subtype>(), Ok(Subtype::VndAnserWebFundsTransferInitiation));
    assert_eq!("VNd.aNSEr-WEB-FUnDS-tRaNsFeR-IniTIAtiON".parse::<Subtype>(), Ok(Subtype::VndAnserWebFundsTransferInitiation));
    assert_eq!("vnd.antix.game-component".parse::<Subtype>(), Ok(Subtype::VndAntixGameComponent));
    assert_eq!("vnD.AnTiX.gamE-COmpoNenT".parse::<Subtype>(), Ok(Subtype::VndAntixGameComponent));
    assert_eq!("vnd.apache.arrow.file".parse::<Subtype>(), Ok(Subtype::VndApacheArrowFile));
    assert_eq!("vNd.apacHE.arRow.filE".parse::<Subtype>(), Ok(Subtype::VndApacheArrowFile));
    assert_eq!("vnd.apache.arrow.stream".parse::<Subtype>(), Ok(Subtype::VndApacheArrowStream));
    assert_eq!("vND.APAche.arROW.stReam".parse::<Subtype>(), Ok(Subtype::VndApacheArrowStream));
    assert_eq!("vnd.apache.thrift.binary".parse::<Subtype>(), Ok(Subtype::VndApacheThriftBinary));
    assert_eq!("vnd.APAchE.thRift.BInaRY".parse::<Subtype>(), Ok(Subtype::VndApacheThriftBinary));
    assert_eq!("vnd.apache.thrift.compact".parse::<Subtype>(), Ok(Subtype::VndApacheThriftCompact));
    assert_eq!("vnd.ApacHe.thRIFT.COMPACT".parse::<Subtype>(), Ok(Subtype::VndApacheThriftCompact));
    assert_eq!("vnd.apache.thrift.json".parse::<Subtype>(), Ok(Subtype::VndApacheThriftJson));
    assert_eq!("vNd.aPaChE.THrIFT.jSon".parse::<Subtype>(), Ok(Subtype::VndApacheThriftJson));
    assert_eq!("vnd.api".parse::<Subtype>(), Ok(Subtype::VndApi));
    assert_eq!("vnd.API".parse::<Subtype>(), Ok(Subtype::VndApi));
    assert_eq!("vnd.aplextor.warrp".parse::<Subtype>(), Ok(Subtype::VndAplextorWarrp));
    assert_eq!("vNd.apleXTOR.wARrp".parse::<Subtype>(), Ok(Subtype::VndAplextorWarrp));
    assert_eq!("vnd.apothekende.reservation".parse::<Subtype>(), Ok(Subtype::VndApothekendeReservation));
    assert_eq!("Vnd.APOThEkENdE.REseRvaTiON".parse::<Subtype>(), Ok(Subtype::VndApothekendeReservation));
    assert_eq!("vnd.apple.installer".parse::<Subtype>(), Ok(Subtype::VndAppleInstaller));
    assert_eq!("VnD.apPLE.iNstaller".parse::<Subtype>(), Ok(Subtype::VndAppleInstaller));
    assert_eq!("vnd.apple.keynote".parse::<Subtype>(), Ok(Subtype::VndAppleKeynote));
    assert_eq!("VND.aPPLE.keynOtE".parse::<Subtype>(), Ok(Subtype::VndAppleKeynote));
    assert_eq!("vnd.apple.mpegurl".parse::<Subtype>(), Ok(Subtype::VndAppleMpegurl));
    assert_eq!("vnd.applE.MpeGURl".parse::<Subtype>(), Ok(Subtype::VndAppleMpegurl));
    assert_eq!("vnd.apple.numbers".parse::<Subtype>(), Ok(Subtype::VndAppleNumbers));
    assert_eq!("vnD.apPlE.NuMbErs".parse::<Subtype>(), Ok(Subtype::VndAppleNumbers));
    assert_eq!("vnd.apple.pages".parse::<Subtype>(), Ok(Subtype::VndApplePages));
    assert_eq!("VND.ApPLE.PAGEs".parse::<Subtype>(), Ok(Subtype::VndApplePages));
    assert_eq!("vnd.aristanetworks.swi".parse::<Subtype>(), Ok(Subtype::VndAristanetworksSwi));
    assert_eq!("vnD.aRistANEtwORkS.SwI".parse::<Subtype>(), Ok(Subtype::VndAristanetworksSwi));
    assert_eq!("vnd.artisan".parse::<Subtype>(), Ok(Subtype::VndArtisan));
    assert_eq!("vND.arTiSaN".parse::<Subtype>(), Ok(Subtype::VndArtisan));
    assert_eq!("vnd.artsquare".parse::<Subtype>(), Ok(Subtype::VndArtsquare));
    assert_eq!("VnD.arTSquARe".parse::<Subtype>(), Ok(Subtype::VndArtsquare));
    assert_eq!("vnd.ascii-art".parse::<Subtype>(), Ok(Subtype::VndAsciiArt));
    assert_eq!("vNd.aScii-ARt".parse::<Subtype>(), Ok(Subtype::VndAsciiArt));
    assert_eq!("vnd.astraea-software.iota".parse::<Subtype>(), Ok(Subtype::VndAstraeaSoftwareIota));
    assert_eq!("vnD.astrAEa-soFTWArE.iOta".parse::<Subtype>(), Ok(Subtype::VndAstraeaSoftwareIota));
    assert_eq!("vnd.audiograph".parse::<Subtype>(), Ok(Subtype::VndAudiograph));
    assert_eq!("vNd.AUDiOgRapH".parse::<Subtype>(), Ok(Subtype::VndAudiograph));
    assert_eq!("vnd.audiokoz".parse::<Subtype>(), Ok(Subtype::VndAudiokoz));
    assert_eq!("vND.AuDIoKoz".parse::<Subtype>(), Ok(Subtype::VndAudiokoz));
    assert_eq!("vnd.autopackage".parse::<Subtype>(), Ok(Subtype::VndAutopackage));
    assert_eq!("vNd.aUtopAckaGe".parse::<Subtype>(), Ok(Subtype::VndAutopackage));
    assert_eq!("vnd.avalon".parse::<Subtype>(), Ok(Subtype::VndAvalon));
    assert_eq!("vND.aVAlon".parse::<Subtype>(), Ok(Subtype::VndAvalon));
    assert_eq!("vnd.avistar".parse::<Subtype>(), Ok(Subtype::VndAvistar));
    assert_eq!("vND.AViSTar".parse::<Subtype>(), Ok(Subtype::VndAvistar));
    assert_eq!("vnd.balsamiq.bmml".parse::<Subtype>(), Ok(Subtype::VndBalsamiqBmml));
    assert_eq!("vND.bALSamIq.bMmL".parse::<Subtype>(), Ok(Subtype::VndBalsamiqBmml));
    assert_eq!("vnd.balsamiq.bmpr".parse::<Subtype>(), Ok(Subtype::VndBalsamiqBmpr));
    assert_eq!("VNd.BAlsamiq.BMPr".parse::<Subtype>(), Ok(Subtype::VndBalsamiqBmpr));
    assert_eq!("vnd.banana-accounting".parse::<Subtype>(), Ok(Subtype::VndBananaAccounting));
    assert_eq!("Vnd.baNANA-aCcOUNtiNg".parse::<Subtype>(), Ok(Subtype::VndBananaAccounting));
    assert_eq!("vnd.bbf.usp.error".parse::<Subtype>(), Ok(Subtype::VndBbfUspError));
    assert_eq!("VNd.bBf.UsP.eRrOR".parse::<Subtype>(), Ok(Subtype::VndBbfUspError));
    assert_eq!("vnd.bbf.usp.msg".parse::<Subtype>(), Ok(Subtype::VndBbfUspMsg));
    assert_eq!("VnD.bBF.uSp.MSG".parse::<Subtype>(), Ok(Subtype::VndBbfUspMsg));
    assert_eq!("vnd.bekitzur-stech".parse::<Subtype>(), Ok(Subtype::VndBekitzurStech));
    assert_eq!("vND.bEkitzuR-sTEcH".parse::<Subtype>(), Ok(Subtype::VndBekitzurStech));
    assert_eq!("vnd.bint.med-content".parse::<Subtype>(), Ok(Subtype::VndBintMedContent));
    assert_eq!("vnD.bInt.meD-ContEnT".parse::<Subtype>(), Ok(Subtype::VndBintMedContent));
    assert_eq!("vnd.bint.med-plus".parse::<Subtype>(), Ok(Subtype::VndBintMedPlus));
    assert_eq!("vnD.BinT.Med-PlUs".parse::<Subtype>(), Ok(Subtype::VndBintMedPlus));
    assert_eq!("vnd.biopax.rdf".parse::<Subtype>(), Ok(Subtype::VndBiopaxRdf));
    assert_eq!("vND.Biopax.rDF".parse::<Subtype>(), Ok(Subtype::VndBiopaxRdf));
    assert_eq!("vnd.blink-idb-value-wrapper".parse::<Subtype>(), Ok(Subtype::VndBlinkIdbValueWrapper));
    assert_eq!("vnd.BLiNk-idB-valuE-WRaPPeR".parse::<Subtype>(), Ok(Subtype::VndBlinkIdbValueWrapper));
    assert_eq!("vnd.blueice.multipass".parse::<Subtype>(), Ok(Subtype::VndBlueiceMultipass));
    assert_eq!("Vnd.BLueice.MulTIPAss".parse::<Subtype>(), Ok(Subtype::VndBlueiceMultipass));
    assert_eq!("vnd.bluetooth.ep.oob".parse::<Subtype>(), Ok(Subtype::VndBluetoothEpOob));
    assert_eq!("VnD.blueTooth.ep.OOB".parse::<Subtype>(), Ok(Subtype::VndBluetoothEpOob));
    assert_eq!("vnd.bluetooth.le.oob".parse::<Subtype>(), Ok(Subtype::VndBluetoothLeOob));
    assert_eq!("VNd.bluETOoTh.LE.oOb".parse::<Subtype>(), Ok(Subtype::VndBluetoothLeOob));
    assert_eq!("vnd.bmi".parse::<Subtype>(), Ok(Subtype::VndBmi));
    assert_eq!("Vnd.bMi".parse::<Subtype>(), Ok(Subtype::VndBmi));
    assert_eq!("vnd.bpf".parse::<Subtype>(), Ok(Subtype::VndBpf));
    assert_eq!("VNd.bPf".parse::<Subtype>(), Ok(Subtype::VndBpf));
    assert_eq!("vnd.bpf3".parse::<Subtype>(), Ok(Subtype::VndBpf3));
    assert_eq!("vNd.bPf3".parse::<Subtype>(), Ok(Subtype::VndBpf3));
    assert_eq!("vnd.businessobjects".parse::<Subtype>(), Ok(Subtype::VndBusinessobjects));
    assert_eq!("VND.buSiNeSsoBJECTs".parse::<Subtype>(), Ok(Subtype::VndBusinessobjects));
    assert_eq!("vnd.byu.uapi".parse::<Subtype>(), Ok(Subtype::VndByuUapi));
    assert_eq!("vND.BYu.Uapi".parse::<Subtype>(), Ok(Subtype::VndByuUapi));
    assert_eq!("vnd.cab-jscript".parse::<Subtype>(), Ok(Subtype::VndCabJscript));
    assert_eq!("Vnd.caB-JSCrIPT".parse::<Subtype>(), Ok(Subtype::VndCabJscript));
    assert_eq!("vnd.canon-cpdl".parse::<Subtype>(), Ok(Subtype::VndCanonCpdl));
    assert_eq!("vnD.cAnon-cPdl".parse::<Subtype>(), Ok(Subtype::VndCanonCpdl));
    assert_eq!("vnd.canon-lips".parse::<Subtype>(), Ok(Subtype::VndCanonLips));
    assert_eq!("VnD.cAnoN-liPs".parse::<Subtype>(), Ok(Subtype::VndCanonLips));
    assert_eq!("vnd.capasystems-pg".parse::<Subtype>(), Ok(Subtype::VndCapasystemsPg));
    assert_eq!("vnd.capaSYstemS-pG".parse::<Subtype>(), Ok(Subtype::VndCapasystemsPg));
    assert_eq!("vnd.CCTV".parse::<Subtype>(), Ok(Subtype::VndCctv));
    assert_eq!("Vnd.Cctv".parse::<Subtype>(), Ok(Subtype::VndCctv));
    assert_eq!("vnd.CELP".parse::<Subtype>(), Ok(Subtype::VndCelp));
    assert_eq!("VNd.CElP".parse::<Subtype>(), Ok(Subtype::VndCelp));
    assert_eq!("vnd.cendio.thinlinc.clientconf".parse::<Subtype>(), Ok(Subtype::VndCendioThinlincClientconf));
    assert_eq!("vnd.CENdIo.tHiNLiNc.ClIEnTCOnf".parse::<Subtype>(), Ok(Subtype::VndCendioThinlincClientconf));
    assert_eq!("vnd.century-systems.tcp_stream".parse::<Subtype>(), Ok(Subtype::VndCenturySystemsTcpStream));
    assert_eq!("VND.CEnTURY-sYstEMS.TcP_strEAM".parse::<Subtype>(), Ok(Subtype::VndCenturySystemsTcpStream));
    assert_eq!("vnd.chemdraw".parse::<Subtype>(), Ok(Subtype::VndChemdraw));
    assert_eq!("Vnd.ChemDrAw".parse::<Subtype>(), Ok(Subtype::VndChemdraw));
    assert_eq!("vnd.chess-pgn".parse::<Subtype>(), Ok(Subtype::VndChessPgn));
    assert_eq!("VnD.CHESS-PGn".parse::<Subtype>(), Ok(Subtype::VndChessPgn));
    assert_eq!("vnd.chipnuts.karaoke-mmd".parse::<Subtype>(), Ok(Subtype::VndChipnutsKaraokeMmd));
    assert_eq!("VND.CHipNUtS.karAOke-mMd".parse::<Subtype>(), Ok(Subtype::VndChipnutsKaraokeMmd));
    assert_eq!("vnd.ciedi".parse::<Subtype>(), Ok(Subtype::VndCiedi));
    assert_eq!("vnD.ciedi".parse::<Subtype>(), Ok(Subtype::VndCiedi));
    assert_eq!("vnd.cinderella".parse::<Subtype>(), Ok(Subtype::VndCinderella));
    assert_eq!("vnd.ciNDEreLLA".parse::<Subtype>(), Ok(Subtype::VndCinderella));
    assert_eq!("vnd.cirpack.isdn-ext".parse::<Subtype>(), Ok(Subtype::VndCirpackIsdnExt));
    assert_eq!("Vnd.cIrpACk.iSdn-eXt".parse::<Subtype>(), Ok(Subtype::VndCirpackIsdnExt));
    assert_eq!("vnd.cisco.nse".parse::<Subtype>(), Ok(Subtype::VndCiscoNse));
    assert_eq!("VnD.CisCO.nSe".parse::<Subtype>(), Ok(Subtype::VndCiscoNse));
    assert_eq!("vnd.citationstyles.style".parse::<Subtype>(), Ok(Subtype::VndCitationstylesStyle));
    assert_eq!("VnD.CITAtIONSTyLES.STyle".parse::<Subtype>(), Ok(Subtype::VndCitationstylesStyle));
    assert_eq!("vnd.claymore".parse::<Subtype>(), Ok(Subtype::VndClaymore));
    assert_eq!("Vnd.cLAymOrE".parse::<Subtype>(), Ok(Subtype::VndClaymore));
    assert_eq!("vnd.cloanto.rp9".parse::<Subtype>(), Ok(Subtype::VndCloantoRp9));
    assert_eq!("VnD.cloaNTO.RP9".parse::<Subtype>(), Ok(Subtype::VndCloantoRp9));
    assert_eq!("vnd.clonk.c4group".parse::<Subtype>(), Ok(Subtype::VndClonkC4group));
    assert_eq!("VnD.cLoNK.C4groUp".parse::<Subtype>(), Ok(Subtype::VndClonkC4group));
    assert_eq!("vnd.cluetrust.cartomobile-config".parse::<Subtype>(), Ok(Subtype::VndCluetrustCartomobileConfig));
    assert_eq!("VNd.cluetrUST.caRTOmobIlE-CONfIG".parse::<Subtype>(), Ok(Subtype::VndCluetrustCartomobileConfig));
    assert_eq!("vnd.cluetrust.cartomobile-config-pkg".parse::<Subtype>(), Ok(Subtype::VndCluetrustCartomobileConfigPkg));
    assert_eq!("VND.ClUetRust.CarTomoBIle-CoNfig-Pkg".parse::<Subtype>(), Ok(Subtype::VndCluetrustCartomobileConfigPkg));
    assert_eq!("vnd.cmles.radio-events".parse::<Subtype>(), Ok(Subtype::VndCmlesRadioEvents));
    assert_eq!("Vnd.CMlEs.RAdio-EVENtS".parse::<Subtype>(), Ok(Subtype::VndCmlesRadioEvents));
    assert_eq!("vnd.cns.anp1".parse::<Subtype>(), Ok(Subtype::VndCnsAnp1));
    assert_eq!("vNd.Cns.AnP1".parse::<Subtype>(), Ok(Subtype::VndCnsAnp1));
    assert_eq!("vnd.cns.inf1".parse::<Subtype>(), Ok(Subtype::VndCnsInf1));
    assert_eq!("vND.CNS.iNf1".parse::<Subtype>(), Ok(Subtype::VndCnsInf1));
    assert_eq!("vnd.cns.inf2".parse::<Subtype>(), Ok(Subtype::VndCnsInf2));
    assert_eq!("Vnd.CNS.InF2".parse::<Subtype>(), Ok(Subtype::VndCnsInf2));
    assert_eq!("vnd.coffeescript".parse::<Subtype>(), Ok(Subtype::VndCoffeescript));
    assert_eq!("vnD.COFFEeScRiPT".parse::<Subtype>(), Ok(Subtype::VndCoffeescript));
    assert_eq!("vnd.collabio.xodocuments.document".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsDocument));
    assert_eq!("VND.COllaBIo.xoDocUmEntS.DOCuMEnT".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsDocument));
    assert_eq!("vnd.collabio.xodocuments.document-template".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsDocumentTemplate));
    assert_eq!("vND.CoLlABIo.XODOCUmENTS.DOcumEnT-TEMplatE".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsDocumentTemplate));
    assert_eq!("vnd.collabio.xodocuments.presentation".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsPresentation));
    assert_eq!("VND.CollabiO.xoDoCUMEnTs.PResenTatIOn".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsPresentation));
    assert_eq!("vnd.collabio.xodocuments.presentation-template".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsPresentationTemplate));
    assert_eq!("vnD.cOLLabio.XODOCUMENTS.pReSentAtIOn-TEMPLaTe".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsPresentationTemplate));
    assert_eq!("vnd.collabio.xodocuments.spreadsheet".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsSpreadsheet));
    assert_eq!("vnd.cOllAbIO.xoDocUMentS.sPREAdsHeet".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsSpreadsheet));
    assert_eq!("vnd.collabio.xodocuments.spreadsheet-template".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsSpreadsheetTemplate));
    assert_eq!("vND.cOLLABIo.xoDOCuMents.SpReADsHEet-tEmPLatE".parse::<Subtype>(), Ok(Subtype::VndCollabioXodocumentsSpreadsheetTemplate));
    assert_eq!("vnd.collada".parse::<Subtype>(), Ok(Subtype::VndCollada));
    assert_eq!("vND.collAdA".parse::<Subtype>(), Ok(Subtype::VndCollada));
    assert_eq!("vnd.collection".parse::<Subtype>(), Ok(Subtype::VndCollection));
    assert_eq!("vnD.CoLLECtIOn".parse::<Subtype>(), Ok(Subtype::VndCollection));
    assert_eq!("vnd.collection.doc".parse::<Subtype>(), Ok(Subtype::VndCollectionDoc));
    assert_eq!("vNd.COLLecTioN.doc".parse::<Subtype>(), Ok(Subtype::VndCollectionDoc));
    assert_eq!("vnd.collection.next".parse::<Subtype>(), Ok(Subtype::VndCollectionNext));
    assert_eq!("VNd.COllecTiON.NEXT".parse::<Subtype>(), Ok(Subtype::VndCollectionNext));
    assert_eq!("vnd.comicbook".parse::<Subtype>(), Ok(Subtype::VndComicbook));
    assert_eq!("vND.coMIcbooK".parse::<Subtype>(), Ok(Subtype::VndComicbook));
    assert_eq!("vnd.comicbook-rar".parse::<Subtype>(), Ok(Subtype::VndComicbookRar));
    assert_eq!("VnD.cOMICbOOK-rAr".parse::<Subtype>(), Ok(Subtype::VndComicbookRar));
    assert_eq!("vnd.commerce-battelle".parse::<Subtype>(), Ok(Subtype::VndCommerceBattelle));
    assert_eq!("vnd.CoMMERcE-baTteLlE".parse::<Subtype>(), Ok(Subtype::VndCommerceBattelle));
    assert_eq!("vnd.commonspace".parse::<Subtype>(), Ok(Subtype::VndCommonspace));
    assert_eq!("VnD.cOmMonsPACE".parse::<Subtype>(), Ok(Subtype::VndCommonspace));
    assert_eq!("vnd.contact.cmsg".parse::<Subtype>(), Ok(Subtype::VndContactCmsg));
    assert_eq!("vNd.COntact.cMsg".parse::<Subtype>(), Ok(Subtype::VndContactCmsg));
    assert_eq!("vnd.coreos.ignition".parse::<Subtype>(), Ok(Subtype::VndCoreosIgnition));
    assert_eq!("vND.coReos.IGniTiON".parse::<Subtype>(), Ok(Subtype::VndCoreosIgnition));
    assert_eq!("vnd.cosmocaller".parse::<Subtype>(), Ok(Subtype::VndCosmocaller));
    assert_eq!("vnD.COsmOCAlLer".parse::<Subtype>(), Ok(Subtype::VndCosmocaller));
    assert_eq!("vnd.crick.clicker".parse::<Subtype>(), Ok(Subtype::VndCrickClicker));
    assert_eq!("vnd.CRICK.cLICkeR".parse::<Subtype>(), Ok(Subtype::VndCrickClicker));
    assert_eq!("vnd.crick.clicker.keyboard".parse::<Subtype>(), Ok(Subtype::VndCrickClickerKeyboard));
    assert_eq!("VnD.crIcK.cLickER.KeybOard".parse::<Subtype>(), Ok(Subtype::VndCrickClickerKeyboard));
    assert_eq!("vnd.crick.clicker.palette".parse::<Subtype>(), Ok(Subtype::VndCrickClickerPalette));
    assert_eq!("vNd.cRick.cLIcKer.paLEtte".parse::<Subtype>(), Ok(Subtype::VndCrickClickerPalette));
    assert_eq!("vnd.crick.clicker.template".parse::<Subtype>(), Ok(Subtype::VndCrickClickerTemplate));
    assert_eq!("vND.crICK.clickEr.teMPLaTe".parse::<Subtype>(), Ok(Subtype::VndCrickClickerTemplate));
    assert_eq!("vnd.crick.clicker.wordbank".parse::<Subtype>(), Ok(Subtype::VndCrickClickerWordbank));
    assert_eq!("vNd.cRiCK.ClIcker.WorDBaNk".parse::<Subtype>(), Ok(Subtype::VndCrickClickerWordbank));
    assert_eq!("vnd.criticaltools.wbs".parse::<Subtype>(), Ok(Subtype::VndCriticaltoolsWbs));
    assert_eq!("vnd.cRITicAltOoLs.wbS".parse::<Subtype>(), Ok(Subtype::VndCriticaltoolsWbs));
    assert_eq!("vnd.cryptii.pipe".parse::<Subtype>(), Ok(Subtype::VndCryptiiPipe));
    assert_eq!("VNd.cRYPtii.PiPE".parse::<Subtype>(), Ok(Subtype::VndCryptiiPipe));
    assert_eq!("vnd.crypto-shade-file".parse::<Subtype>(), Ok(Subtype::VndCryptoShadeFile));
    assert_eq!("vnD.CRyPTo-shADE-FiLE".parse::<Subtype>(), Ok(Subtype::VndCryptoShadeFile));
    assert_eq!("vnd.cryptomator.encrypted".parse::<Subtype>(), Ok(Subtype::VndCryptomatorEncrypted));
    assert_eq!("VNd.CrYptomAToR.enCrYPtEd".parse::<Subtype>(), Ok(Subtype::VndCryptomatorEncrypted));
    assert_eq!("vnd.cryptomator.vault".parse::<Subtype>(), Ok(Subtype::VndCryptomatorVault));
    assert_eq!("vnd.CRyPtOMAtOR.vAulT".parse::<Subtype>(), Ok(Subtype::VndCryptomatorVault));
    assert_eq!("vnd.ctc-posml".parse::<Subtype>(), Ok(Subtype::VndCtcPosml));
    assert_eq!("VNd.cTC-PoSMl".parse::<Subtype>(), Ok(Subtype::VndCtcPosml));
    assert_eq!("vnd.ctct.ws".parse::<Subtype>(), Ok(Subtype::VndCtctWs));
    assert_eq!("Vnd.cTCT.WS".parse::<Subtype>(), Ok(Subtype::VndCtctWs));
    assert_eq!("vnd.cups-pdf".parse::<Subtype>(), Ok(Subtype::VndCupsPdf));
    assert_eq!("VNd.Cups-Pdf".parse::<Subtype>(), Ok(Subtype::VndCupsPdf));
    assert_eq!("vnd.cups-postscript".parse::<Subtype>(), Ok(Subtype::VndCupsPostscript));
    assert_eq!("vNd.cUpS-pOSTscRIPt".parse::<Subtype>(), Ok(Subtype::VndCupsPostscript));
    assert_eq!("vnd.cups-ppd".parse::<Subtype>(), Ok(Subtype::VndCupsPpd));
    assert_eq!("vnd.CUPS-PPD".parse::<Subtype>(), Ok(Subtype::VndCupsPpd));
    assert_eq!("vnd.cups-raster".parse::<Subtype>(), Ok(Subtype::VndCupsRaster));
    assert_eq!("Vnd.cuPs-raSTeR".parse::<Subtype>(), Ok(Subtype::VndCupsRaster));
    assert_eq!("vnd.cups-raw".parse::<Subtype>(), Ok(Subtype::VndCupsRaw));
    assert_eq!("vnd.CUpS-raw".parse::<Subtype>(), Ok(Subtype::VndCupsRaw));
    assert_eq!("vnd.curl".parse::<Subtype>(), Ok(Subtype::VndCurl));
    assert_eq!("Vnd.curl".parse::<Subtype>(), Ok(Subtype::VndCurl));
    assert_eq!("vnd.cyan.dean.root".parse::<Subtype>(), Ok(Subtype::VndCyanDeanRoot));
    assert_eq!("VnD.CYAn.DEan.ROoT".parse::<Subtype>(), Ok(Subtype::VndCyanDeanRoot));
    assert_eq!("vnd.cybank".parse::<Subtype>(), Ok(Subtype::VndCybank));
    assert_eq!("vnd.cyBank".parse::<Subtype>(), Ok(Subtype::VndCybank));
    assert_eq!("vnd.cyclonedx".parse::<Subtype>(), Ok(Subtype::VndCyclonedx));
    assert_eq!("vnD.CYCloNeDx".parse::<Subtype>(), Ok(Subtype::VndCyclonedx));
    assert_eq!("vnd.d2l.coursepackage1p0".parse::<Subtype>(), Ok(Subtype::VndD2lCoursepackage1p0));
    assert_eq!("vnd.D2l.CoURSepackaGe1p0".parse::<Subtype>(), Ok(Subtype::VndD2lCoursepackage1p0));
    assert_eq!("vnd.d3m-dataset".parse::<Subtype>(), Ok(Subtype::VndD3mDataset));
    assert_eq!("vnD.d3M-daTASeT".parse::<Subtype>(), Ok(Subtype::VndD3mDataset));
    assert_eq!("vnd.d3m-problem".parse::<Subtype>(), Ok(Subtype::VndD3mProblem));
    assert_eq!("VnD.d3M-pROBLEM".parse::<Subtype>(), Ok(Subtype::VndD3mProblem));
    assert_eq!("vnd.dart".parse::<Subtype>(), Ok(Subtype::VndDart));
    assert_eq!("Vnd.DarT".parse::<Subtype>(), Ok(Subtype::VndDart));
    assert_eq!("vnd.data-vision.rdz".parse::<Subtype>(), Ok(Subtype::VndDataVisionRdz));
    assert_eq!("Vnd.DAta-visIon.rDZ".parse::<Subtype>(), Ok(Subtype::VndDataVisionRdz));
    assert_eq!("vnd.datapackage".parse::<Subtype>(), Ok(Subtype::VndDatapackage));
    assert_eq!("VnD.DaTaPaCkAgE".parse::<Subtype>(), Ok(Subtype::VndDatapackage));
    assert_eq!("vnd.dataresource".parse::<Subtype>(), Ok(Subtype::VndDataresource));
    assert_eq!("Vnd.DATAReSOUrcE".parse::<Subtype>(), Ok(Subtype::VndDataresource));
    assert_eq!("vnd.dbf".parse::<Subtype>(), Ok(Subtype::VndDbf));
    assert_eq!("Vnd.DBf".parse::<Subtype>(), Ok(Subtype::VndDbf));
    assert_eq!("vnd.debian.binary-package".parse::<Subtype>(), Ok(Subtype::VndDebianBinaryPackage));
    assert_eq!("vNd.DebIAn.BiNary-pAcKagE".parse::<Subtype>(), Ok(Subtype::VndDebianBinaryPackage));
    assert_eq!("vnd.debian.copyright".parse::<Subtype>(), Ok(Subtype::VndDebianCopyright));
    assert_eq!("VnD.debian.COPYrighT".parse::<Subtype>(), Ok(Subtype::VndDebianCopyright));
    assert_eq!("vnd.dece.audio".parse::<Subtype>(), Ok(Subtype::VndDeceAudio));
    assert_eq!("VNd.dEce.audio".parse::<Subtype>(), Ok(Subtype::VndDeceAudio));
    assert_eq!("vnd.dece.data".parse::<Subtype>(), Ok(Subtype::VndDeceData));
    assert_eq!("vND.dEcE.Data".parse::<Subtype>(), Ok(Subtype::VndDeceData));
    assert_eq!("vnd.dece.graphic".parse::<Subtype>(), Ok(Subtype::VndDeceGraphic));
    assert_eq!("VNd.deCE.GRaPhiC".parse::<Subtype>(), Ok(Subtype::VndDeceGraphic));
    assert_eq!("vnd.dece.hd".parse::<Subtype>(), Ok(Subtype::VndDeceHd));
    assert_eq!("VnD.DecE.hD".parse::<Subtype>(), Ok(Subtype::VndDeceHd));
    assert_eq!("vnd.dece.mobile".parse::<Subtype>(), Ok(Subtype::VndDeceMobile));
    assert_eq!("VND.dECe.MoBILe".parse::<Subtype>(), Ok(Subtype::VndDeceMobile));
    assert_eq!("vnd.dece.mp4".parse::<Subtype>(), Ok(Subtype::VndDeceMp4));
    assert_eq!("vnd.DeCe.MP4".parse::<Subtype>(), Ok(Subtype::VndDeceMp4));
    assert_eq!("vnd.dece.pd".parse::<Subtype>(), Ok(Subtype::VndDecePd));
    assert_eq!("vnd.dEce.pD".parse::<Subtype>(), Ok(Subtype::VndDecePd));
    assert_eq!("vnd.dece.sd".parse::<Subtype>(), Ok(Subtype::VndDeceSd));
    assert_eq!("vnd.Dece.SD".parse::<Subtype>(), Ok(Subtype::VndDeceSd));
    assert_eq!("vnd.dece.ttml".parse::<Subtype>(), Ok(Subtype::VndDeceTtml));
    assert_eq!("VND.DeCe.ttMl".parse::<Subtype>(), Ok(Subtype::VndDeceTtml));
    assert_eq!("vnd.dece.unspecified".parse::<Subtype>(), Ok(Subtype::VndDeceUnspecified));
    assert_eq!("vND.dEce.UNSPEcIfied".parse::<Subtype>(), Ok(Subtype::VndDeceUnspecified));
    assert_eq!("vnd.dece.video".parse::<Subtype>(), Ok(Subtype::VndDeceVideo));
    assert_eq!("vNd.DEcE.vIDeO".parse::<Subtype>(), Ok(Subtype::VndDeceVideo));
    assert_eq!("vnd.dece.zip".parse::<Subtype>(), Ok(Subtype::VndDeceZip));
    assert_eq!("VNd.decE.ziP".parse::<Subtype>(), Ok(Subtype::VndDeceZip));
    assert_eq!("vnd.denovo.fcselayout-link".parse::<Subtype>(), Ok(Subtype::VndDenovoFcselayoutLink));
    assert_eq!("vnD.DEnOvO.fCSElAYOut-LInk".parse::<Subtype>(), Ok(Subtype::VndDenovoFcselayoutLink));
    assert_eq!("vnd.desmume.movie".parse::<Subtype>(), Ok(Subtype::VndDesmumeMovie));
    assert_eq!("vnd.DESmuMe.movie".parse::<Subtype>(), Ok(Subtype::VndDesmumeMovie));
    assert_eq!("vnd.digital-winds".parse::<Subtype>(), Ok(Subtype::VndDigitalWinds));
    assert_eq!("vND.DiGItAl-winDS".parse::<Subtype>(), Ok(Subtype::VndDigitalWinds));
    assert_eq!("vnd.dir-bi.plate-dl-nosuffix".parse::<Subtype>(), Ok(Subtype::VndDirBiPlateDlNosuffix));
    assert_eq!("VND.DiR-bI.Plate-dl-nosuFFIx".parse::<Subtype>(), Ok(Subtype::VndDirBiPlateDlNosuffix));
    assert_eq!("vnd.directv.mpeg".parse::<Subtype>(), Ok(Subtype::VndDirectvMpeg));
    assert_eq!("vnd.DirECTv.mPeG".parse::<Subtype>(), Ok(Subtype::VndDirectvMpeg));
    assert_eq!("vnd.directv.mpeg-tts".parse::<Subtype>(), Ok(Subtype::VndDirectvMpegTts));
    assert_eq!("VNd.DIReCTv.mpeG-tts".parse::<Subtype>(), Ok(Subtype::VndDirectvMpegTts));
    assert_eq!("vnd.djvu".parse::<Subtype>(), Ok(Subtype::VndDjvu));
    assert_eq!("VND.dJVU".parse::<Subtype>(), Ok(Subtype::VndDjvu));
    assert_eq!("vnd.dlna.adts".parse::<Subtype>(), Ok(Subtype::VndDlnaAdts));
    assert_eq!("VnD.DLnA.ADtS".parse::<Subtype>(), Ok(Subtype::VndDlnaAdts));
    assert_eq!("vnd.dlna.mpeg-tts".parse::<Subtype>(), Ok(Subtype::VndDlnaMpegTts));
    assert_eq!("VNd.DLnA.mPeG-TTs".parse::<Subtype>(), Ok(Subtype::VndDlnaMpegTts));
    assert_eq!("vnd.DMClientScript".parse::<Subtype>(), Ok(Subtype::VndDmClientScript));
    assert_eq!("VND.dMclientScRIPt".parse::<Subtype>(), Ok(Subtype::VndDmClientScript));
    assert_eq!("vnd.dm.delegation".parse::<Subtype>(), Ok(Subtype::VndDmDelegation));
    assert_eq!("vNd.DM.delEgatIOn".parse::<Subtype>(), Ok(Subtype::VndDmDelegation));
    assert_eq!("vnd.dna".parse::<Subtype>(), Ok(Subtype::VndDna));
    assert_eq!("VnD.dNa".parse::<Subtype>(), Ok(Subtype::VndDna));
    assert_eq!("vnd.document".parse::<Subtype>(), Ok(Subtype::VndDocument));
    assert_eq!("vnd.dOCumEnT".parse::<Subtype>(), Ok(Subtype::VndDocument));
    assert_eq!("vnd.dolby.heaac.1".parse::<Subtype>(), Ok(Subtype::VndDolbyHeaac1));
    assert_eq!("VND.DoLbY.hEaAC.1".parse::<Subtype>(), Ok(Subtype::VndDolbyHeaac1));
    assert_eq!("vnd.dolby.heaac.2".parse::<Subtype>(), Ok(Subtype::VndDolbyHeaac2));
    assert_eq!("VND.dolbY.heaac.2".parse::<Subtype>(), Ok(Subtype::VndDolbyHeaac2));
    assert_eq!("vnd.dolby.mlp".parse::<Subtype>(), Ok(Subtype::VndDolbyMlp));
    assert_eq!("vND.dOlby.MLp".parse::<Subtype>(), Ok(Subtype::VndDolbyMlp));
    assert_eq!("vnd.dolby.mobile.1".parse::<Subtype>(), Ok(Subtype::VndDolbyMobile1));
    assert_eq!("vNd.DOLBY.mObiLE.1".parse::<Subtype>(), Ok(Subtype::VndDolbyMobile1));
    assert_eq!("vnd.dolby.mobile.2".parse::<Subtype>(), Ok(Subtype::VndDolbyMobile2));
    assert_eq!("vND.dOlbY.mobiLE.2".parse::<Subtype>(), Ok(Subtype::VndDolbyMobile2));
    assert_eq!("vnd.dolby.mps".parse::<Subtype>(), Ok(Subtype::VndDolbyMps));
    assert_eq!("VnD.DolBY.mps".parse::<Subtype>(), Ok(Subtype::VndDolbyMps));
    assert_eq!("vnd.dolby.pl2".parse::<Subtype>(), Ok(Subtype::VndDolbyPl2));
    assert_eq!("VND.DOlby.Pl2".parse::<Subtype>(), Ok(Subtype::VndDolbyPl2));
    assert_eq!("vnd.dolby.pl2x".parse::<Subtype>(), Ok(Subtype::VndDolbyPl2x));
    assert_eq!("VNd.DoLbY.pl2x".parse::<Subtype>(), Ok(Subtype::VndDolbyPl2x));
    assert_eq!("vnd.dolby.pl2z".parse::<Subtype>(), Ok(Subtype::VndDolbyPl2z));
    assert_eq!("VNd.DOlby.PL2Z".parse::<Subtype>(), Ok(Subtype::VndDolbyPl2z));
    assert_eq!("vnd.dolby.pulse.1".parse::<Subtype>(), Ok(Subtype::VndDolbyPulse1));
    assert_eq!("vNd.dolBy.pulsE.1".parse::<Subtype>(), Ok(Subtype::VndDolbyPulse1));
    assert_eq!("vnd.doremir.scorecloud-binary-document".parse::<Subtype>(), Ok(Subtype::VndDoremirScorecloudBinaryDocument));
    assert_eq!("VnD.DoReMir.ScoREcLoUD-BINaRY-DOCUMent".parse::<Subtype>(), Ok(Subtype::VndDoremirScorecloudBinaryDocument));
    assert_eq!("vnd.dpgraph".parse::<Subtype>(), Ok(Subtype::VndDpgraph));
    assert_eq!("vND.dPgrapH".parse::<Subtype>(), Ok(Subtype::VndDpgraph));
    assert_eq!("vnd.dra".parse::<Subtype>(), Ok(Subtype::VndDra));
    assert_eq!("vND.dRa".parse::<Subtype>(), Ok(Subtype::VndDra));
    assert_eq!("vnd.dreamfactory".parse::<Subtype>(), Ok(Subtype::VndDreamfactory));
    assert_eq!("VND.DreAmfacTOrY".parse::<Subtype>(), Ok(Subtype::VndDreamfactory));
    assert_eq!("vnd.drive".parse::<Subtype>(), Ok(Subtype::VndDrive));
    assert_eq!("Vnd.dRivE".parse::<Subtype>(), Ok(Subtype::VndDrive));
    assert_eq!("vnd.dtg.local".parse::<Subtype>(), Ok(Subtype::VndDtgLocal));
    assert_eq!("VNd.dTG.Local".parse::<Subtype>(), Ok(Subtype::VndDtgLocal));
    assert_eq!("vnd.dtg.local.flash".parse::<Subtype>(), Ok(Subtype::VndDtgLocalFlash));
    assert_eq!("vNd.dtg.lOCaL.fLash".parse::<Subtype>(), Ok(Subtype::VndDtgLocalFlash));
    assert_eq!("vnd.dtg.local.html".parse::<Subtype>(), Ok(Subtype::VndDtgLocalHtml));
    assert_eq!("VNd.Dtg.locAl.HTML".parse::<Subtype>(), Ok(Subtype::VndDtgLocalHtml));
    assert_eq!("vnd.dts".parse::<Subtype>(), Ok(Subtype::VndDts));
    assert_eq!("VND.Dts".parse::<Subtype>(), Ok(Subtype::VndDts));
    assert_eq!("vnd.dts.hd".parse::<Subtype>(), Ok(Subtype::VndDtsHd));
    assert_eq!("VND.Dts.Hd".parse::<Subtype>(), Ok(Subtype::VndDtsHd));
    assert_eq!("vnd.dts.uhd".parse::<Subtype>(), Ok(Subtype::VndDtsUhd));
    assert_eq!("VnD.dtS.Uhd".parse::<Subtype>(), Ok(Subtype::VndDtsUhd));
    assert_eq!("vnd.dvb.ait".parse::<Subtype>(), Ok(Subtype::VndDvbAit));
    assert_eq!("vnD.DVb.AiT".parse::<Subtype>(), Ok(Subtype::VndDvbAit));
    assert_eq!("vnd.dvb.dvbisl".parse::<Subtype>(), Ok(Subtype::VndDvbDvbisl));
    assert_eq!("vNd.DVB.DVBISl".parse::<Subtype>(), Ok(Subtype::VndDvbDvbisl));
    assert_eq!("vnd.dvb.dvbj".parse::<Subtype>(), Ok(Subtype::VndDvbDvbj));
    assert_eq!("VNd.dvB.dvbJ".parse::<Subtype>(), Ok(Subtype::VndDvbDvbj));
    assert_eq!("vnd.dvb.esgcontainer".parse::<Subtype>(), Ok(Subtype::VndDvbEsgcontainer));
    assert_eq!("vNd.dvb.ESgcONtainER".parse::<Subtype>(), Ok(Subtype::VndDvbEsgcontainer));
    assert_eq!("vnd.dvb.file".parse::<Subtype>(), Ok(Subtype::VndDvbFile));
    assert_eq!("VNd.dvb.fIlE".parse::<Subtype>(), Ok(Subtype::VndDvbFile));
    assert_eq!("vnd.dvb.ipdcdftnotifaccess".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcdftnotifaccess));
    assert_eq!("Vnd.dVB.IPDCDfTNotIfaccEsS".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcdftnotifaccess));
    assert_eq!("vnd.dvb.ipdcesgaccess".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcesgaccess));
    assert_eq!("vNd.DvB.iPDcEsGAcCEss".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcesgaccess));
    assert_eq!("vnd.dvb.ipdcesgaccess2".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcesgaccess2));
    assert_eq!("VND.dvB.IPdcesgACceSS2".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcesgaccess2));
    assert_eq!("vnd.dvb.ipdcesgpdd".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcesgpdd));
    assert_eq!("VND.DVB.IpDcESgPDD".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcesgpdd));
    assert_eq!("vnd.dvb.ipdcroaming".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcroaming));
    assert_eq!("vnd.Dvb.iPdCRoAmINg".parse::<Subtype>(), Ok(Subtype::VndDvbIpdcroaming));
    assert_eq!("vnd.dvb.iptv.alfec-base".parse::<Subtype>(), Ok(Subtype::VndDvbIptvAlfecBase));
    assert_eq!("VnD.dvb.iptV.AlfEC-basE".parse::<Subtype>(), Ok(Subtype::VndDvbIptvAlfecBase));
    assert_eq!("vnd.dvb.iptv.alfec-enhancement".parse::<Subtype>(), Ok(Subtype::VndDvbIptvAlfecEnhancement));
    assert_eq!("VNd.dvb.IPtv.alfeC-EnhancemEnT".parse::<Subtype>(), Ok(Subtype::VndDvbIptvAlfecEnhancement));
    assert_eq!("vnd.dvb.notif-aggregate-root".parse::<Subtype>(), Ok(Subtype::VndDvbNotifAggregateRoot));
    assert_eq!("VND.dvB.NotiF-agGREGaTe-rooT".parse::<Subtype>(), Ok(Subtype::VndDvbNotifAggregateRoot));
    assert_eq!("vnd.dvb.notif-container".parse::<Subtype>(), Ok(Subtype::VndDvbNotifContainer));
    assert_eq!("vND.Dvb.notiF-COnTaINER".parse::<Subtype>(), Ok(Subtype::VndDvbNotifContainer));
    assert_eq!("vnd.dvb.notif-generic".parse::<Subtype>(), Ok(Subtype::VndDvbNotifGeneric));
    assert_eq!("VND.dvB.nOtif-gEnERic".parse::<Subtype>(), Ok(Subtype::VndDvbNotifGeneric));
    assert_eq!("vnd.dvb.notif-ia-msglist".parse::<Subtype>(), Ok(Subtype::VndDvbNotifIaMsglist));
    assert_eq!("VNd.dVB.nOtIF-iA-MsGlIST".parse::<Subtype>(), Ok(Subtype::VndDvbNotifIaMsglist));
    assert_eq!("vnd.dvb.notif-ia-registration-request".parse::<Subtype>(), Ok(Subtype::VndDvbNotifIaRegistrationRequest));
    assert_eq!("vnd.dVB.nOTIF-iA-reGiStRAtIoN-reQUEST".parse::<Subtype>(), Ok(Subtype::VndDvbNotifIaRegistrationRequest));
    assert_eq!("vnd.dvb.notif-ia-registration-response".parse::<Subtype>(), Ok(Subtype::VndDvbNotifIaRegistrationResponse));
    assert_eq!("VNd.DVB.NOTIf-iA-RegISTratiON-reSpoNse".parse::<Subtype>(), Ok(Subtype::VndDvbNotifIaRegistrationResponse));
    assert_eq!("vnd.dvb.notif-init".parse::<Subtype>(), Ok(Subtype::VndDvbNotifInit));
    assert_eq!("vnD.DVB.nOTIf-init".parse::<Subtype>(), Ok(Subtype::VndDvbNotifInit));
    assert_eq!("vnd.dvb.pfr".parse::<Subtype>(), Ok(Subtype::VndDvbPfr));
    assert_eq!("VND.dvB.pFR".parse::<Subtype>(), Ok(Subtype::VndDvbPfr));
    assert_eq!("vnd.dvb.service".parse::<Subtype>(), Ok(Subtype::VndDvbService));
    assert_eq!("vND.dVb.SERViCE".parse::<Subtype>(), Ok(Subtype::VndDvbService));
    assert_eq!("vnd.dvb.subtitle".parse::<Subtype>(), Ok(Subtype::VndDvbSubtitle));
    assert_eq!("vNd.DVb.SUBtitle".parse::<Subtype>(), Ok(Subtype::VndDvbSubtitle));
    assert_eq!("vnd.dwf".parse::<Subtype>(), Ok(Subtype::VndDwf));
    assert_eq!("vNd.DWF".parse::<Subtype>(), Ok(Subtype::VndDwf));
    assert_eq!("vnd.dwg".parse::<Subtype>(), Ok(Subtype::VndDwg));
    assert_eq!("Vnd.dWG".parse::<Subtype>(), Ok(Subtype::VndDwg));
    assert_eq!("vnd.dxf".parse::<Subtype>(), Ok(Subtype::VndDxf));
    assert_eq!("Vnd.dXF".parse::<Subtype>(), Ok(Subtype::VndDxf));
    assert_eq!("vnd.dxr".parse::<Subtype>(), Ok(Subtype::VndDxr));
    assert_eq!("VND.dXR".parse::<Subtype>(), Ok(Subtype::VndDxr));
    assert_eq!("vnd.dynageo".parse::<Subtype>(), Ok(Subtype::VndDynageo));
    assert_eq!("vnD.DYnAgEO".parse::<Subtype>(), Ok(Subtype::VndDynageo));
    assert_eq!("vnd.dzr".parse::<Subtype>(), Ok(Subtype::VndDzr));
    assert_eq!("vnd.dzR".parse::<Subtype>(), Ok(Subtype::VndDzr));
    assert_eq!("vnd.easykaraoke.cdgdownload".parse::<Subtype>(), Ok(Subtype::VndEasykaraokeCdgdownload));
    assert_eq!("Vnd.eASykARAOKe.cdgDOwNloaD".parse::<Subtype>(), Ok(Subtype::VndEasykaraokeCdgdownload));
    assert_eq!("vnd.ecdis-update".parse::<Subtype>(), Ok(Subtype::VndEcdisUpdate));
    assert_eq!("vnd.eCDIs-uPdAtE".parse::<Subtype>(), Ok(Subtype::VndEcdisUpdate));
    assert_eq!("vnd.ecip.rlp".parse::<Subtype>(), Ok(Subtype::VndEcipRlp));
    assert_eq!("vnD.ecip.RlP".parse::<Subtype>(), Ok(Subtype::VndEcipRlp));
    assert_eq!("vnd.eclipse.ditto".parse::<Subtype>(), Ok(Subtype::VndEclipseDitto));
    assert_eq!("VNd.EcliPsE.ditTo".parse::<Subtype>(), Ok(Subtype::VndEclipseDitto));
    assert_eq!("vnd.ecowin.chart".parse::<Subtype>(), Ok(Subtype::VndEcowinChart));
    assert_eq!("Vnd.ecOWiN.charT".parse::<Subtype>(), Ok(Subtype::VndEcowinChart));
    assert_eq!("vnd.ecowin.filerequest".parse::<Subtype>(), Ok(Subtype::VndEcowinFilerequest));
    assert_eq!("Vnd.EcoWIn.FIlEreQUEST".parse::<Subtype>(), Ok(Subtype::VndEcowinFilerequest));
    assert_eq!("vnd.ecowin.fileupdate".parse::<Subtype>(), Ok(Subtype::VndEcowinFileupdate));
    assert_eq!("VNd.eCOWIn.FiLeUPDAte".parse::<Subtype>(), Ok(Subtype::VndEcowinFileupdate));
    assert_eq!("vnd.ecowin.series".parse::<Subtype>(), Ok(Subtype::VndEcowinSeries));
    assert_eq!("VNd.ECOWin.SERIes".parse::<Subtype>(), Ok(Subtype::VndEcowinSeries));
    assert_eq!("vnd.ecowin.seriesrequest".parse::<Subtype>(), Ok(Subtype::VndEcowinSeriesrequest));
    assert_eq!("VND.EcOWIn.SeRieSReQUEst".parse::<Subtype>(), Ok(Subtype::VndEcowinSeriesrequest));
    assert_eq!("vnd.ecowin.seriesupdate".parse::<Subtype>(), Ok(Subtype::VndEcowinSeriesupdate));
    assert_eq!("vNd.eCowIN.seRIeSUPdaTe".parse::<Subtype>(), Ok(Subtype::VndEcowinSeriesupdate));
    assert_eq!("vnd.efi.img".parse::<Subtype>(), Ok(Subtype::VndEfiImg));
    assert_eq!("vnD.EfI.IMG".parse::<Subtype>(), Ok(Subtype::VndEfiImg));
    assert_eq!("vnd.efi.iso".parse::<Subtype>(), Ok(Subtype::VndEfiIso));
    assert_eq!("vNd.EFI.iSO".parse::<Subtype>(), Ok(Subtype::VndEfiIso));
    assert_eq!("vnd.emclient.accessrequest".parse::<Subtype>(), Ok(Subtype::VndEmclientAccessrequest));
    assert_eq!("vND.EMClIenT.ACCESSreqUEsT".parse::<Subtype>(), Ok(Subtype::VndEmclientAccessrequest));
    assert_eq!("vnd.enliven".parse::<Subtype>(), Ok(Subtype::VndEnliven));
    assert_eq!("vNd.enLIVen".parse::<Subtype>(), Ok(Subtype::VndEnliven));
    assert_eq!("vnd.enphase.envoy".parse::<Subtype>(), Ok(Subtype::VndEnphaseEnvoy));
    assert_eq!("vND.EnphASe.ENVOy".parse::<Subtype>(), Ok(Subtype::VndEnphaseEnvoy));
    assert_eq!("vnd.eprints.data".parse::<Subtype>(), Ok(Subtype::VndEprintsData));
    assert_eq!("vNd.EprinTs.DAta".parse::<Subtype>(), Ok(Subtype::VndEprintsData));
    assert_eq!("vnd.epson.esf".parse::<Subtype>(), Ok(Subtype::VndEpsonEsf));
    assert_eq!("vND.ePSOn.esF".parse::<Subtype>(), Ok(Subtype::VndEpsonEsf));
    assert_eq!("vnd.epson.msf".parse::<Subtype>(), Ok(Subtype::VndEpsonMsf));
    assert_eq!("vnd.Epson.mSF".parse::<Subtype>(), Ok(Subtype::VndEpsonMsf));
    assert_eq!("vnd.epson.quickanime".parse::<Subtype>(), Ok(Subtype::VndEpsonQuickanime));
    assert_eq!("VnD.EpsOn.QuiCkAniMe".parse::<Subtype>(), Ok(Subtype::VndEpsonQuickanime));
    assert_eq!("vnd.epson.salt".parse::<Subtype>(), Ok(Subtype::VndEpsonSalt));
    assert_eq!("vNd.epSOn.SAlt".parse::<Subtype>(), Ok(Subtype::VndEpsonSalt));
    assert_eq!("vnd.epson.ssf".parse::<Subtype>(), Ok(Subtype::VndEpsonSsf));
    assert_eq!("VnD.EPSon.ssf".parse::<Subtype>(), Ok(Subtype::VndEpsonSsf));
    assert_eq!("vnd.ericsson.quickcall".parse::<Subtype>(), Ok(Subtype::VndEricssonQuickcall));
    assert_eq!("vnD.eRicsSOn.QuICKcall".parse::<Subtype>(), Ok(Subtype::VndEricssonQuickcall));
    assert_eq!("vnd.esmertec.theme-descriptor".parse::<Subtype>(), Ok(Subtype::VndEsmertecThemeDescriptor));
    assert_eq!("VNd.ESmErTEC.THemE-DeSCrIpTOr".parse::<Subtype>(), Ok(Subtype::VndEsmertecThemeDescriptor));
    assert_eq!("vnd.espass-espass".parse::<Subtype>(), Ok(Subtype::VndEspassEspass));
    assert_eq!("vND.ESPASS-ESPAss".parse::<Subtype>(), Ok(Subtype::VndEspassEspass));
    assert_eq!("vnd.eszigno3".parse::<Subtype>(), Ok(Subtype::VndEszigno3));
    assert_eq!("VnD.ESzIGNo3".parse::<Subtype>(), Ok(Subtype::VndEszigno3));
    assert_eq!("vnd.etsi.aoc".parse::<Subtype>(), Ok(Subtype::VndEtsiAoc));
    assert_eq!("vND.eTSi.AOc".parse::<Subtype>(), Ok(Subtype::VndEtsiAoc));
    assert_eq!("vnd.etsi.asic-e".parse::<Subtype>(), Ok(Subtype::VndEtsiAsicE));
    assert_eq!("VND.eTsi.aSIC-E".parse::<Subtype>(), Ok(Subtype::VndEtsiAsicE));
    assert_eq!("vnd.etsi.asic-s".parse::<Subtype>(), Ok(Subtype::VndEtsiAsicS));
    assert_eq!("VNd.eTSI.ASIc-s".parse::<Subtype>(), Ok(Subtype::VndEtsiAsicS));
    assert_eq!("vnd.etsi.cug".parse::<Subtype>(), Ok(Subtype::VndEtsiCug));
    assert_eq!("VNd.etSI.cuG".parse::<Subtype>(), Ok(Subtype::VndEtsiCug));
    assert_eq!("vnd.etsi.iptvcommand".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvcommand));
    assert_eq!("VnD.EtSI.ipTVcOMmAnd".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvcommand));
    assert_eq!("vnd.etsi.iptvdiscovery".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvdiscovery));
    assert_eq!("VNd.EtsI.IpTvdisCovERy".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvdiscovery));
    assert_eq!("vnd.etsi.iptvprofile".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvprofile));
    assert_eq!("vnD.ETsI.IPTVPrOFilE".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvprofile));
    assert_eq!("vnd.etsi.iptvsad-bc".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsadBc));
    assert_eq!("VnD.Etsi.IptVSAD-BC".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsadBc));
    assert_eq!("vnd.etsi.iptvsad-cod".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsadCod));
    assert_eq!("VnD.etsI.IPTVSad-cOd".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsadCod));
    assert_eq!("vnd.etsi.iptvsad-npvr".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsadNpvr));
    assert_eq!("vNd.eTsi.iPtVSad-npvr".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsadNpvr));
    assert_eq!("vnd.etsi.iptvservice".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvservice));
    assert_eq!("VND.eTSi.IPTvServIce".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvservice));
    assert_eq!("vnd.etsi.iptvsync".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsync));
    assert_eq!("vnD.etsI.IptVsyNC".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvsync));
    assert_eq!("vnd.etsi.iptvueprofile".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvueprofile));
    assert_eq!("vNd.ETsi.iPtVuepRoFile".parse::<Subtype>(), Ok(Subtype::VndEtsiIptvueprofile));
    assert_eq!("vnd.etsi.mcid".parse::<Subtype>(), Ok(Subtype::VndEtsiMcid));
    assert_eq!("VND.ETsi.MciD".parse::<Subtype>(), Ok(Subtype::VndEtsiMcid));
    assert_eq!("vnd.etsi.mheg5".parse::<Subtype>(), Ok(Subtype::VndEtsiMheg5));
    assert_eq!("vnd.eTsI.MHEg5".parse::<Subtype>(), Ok(Subtype::VndEtsiMheg5));
    assert_eq!("vnd.etsi.overload-control-policy-dataset".parse::<Subtype>(), Ok(Subtype::VndEtsiOverloadControlPolicyDataset));
    assert_eq!("vnd.eTsi.ovErload-cONTrOl-PoLIcY-daTASET".parse::<Subtype>(), Ok(Subtype::VndEtsiOverloadControlPolicyDataset));
    assert_eq!("vnd.etsi.pstn".parse::<Subtype>(), Ok(Subtype::VndEtsiPstn));
    assert_eq!("vnd.EtsI.Pstn".parse::<Subtype>(), Ok(Subtype::VndEtsiPstn));
    assert_eq!("vnd.etsi.sci".parse::<Subtype>(), Ok(Subtype::VndEtsiSci));
    assert_eq!("Vnd.eTSI.sCi".parse::<Subtype>(), Ok(Subtype::VndEtsiSci));
    assert_eq!("vnd.etsi.simservs".parse::<Subtype>(), Ok(Subtype::VndEtsiSimservs));
    assert_eq!("VnD.etsi.siMSeRVS".parse::<Subtype>(), Ok(Subtype::VndEtsiSimservs));
    assert_eq!("vnd.etsi.timestamp-token".parse::<Subtype>(), Ok(Subtype::VndEtsiTimestampToken));
    assert_eq!("VnD.Etsi.TimeStamp-TOKEn".parse::<Subtype>(), Ok(Subtype::VndEtsiTimestampToken));
    assert_eq!("vnd.etsi.tsl".parse::<Subtype>(), Ok(Subtype::VndEtsiTsl));
    assert_eq!("VnD.eTsI.tSl".parse::<Subtype>(), Ok(Subtype::VndEtsiTsl));
    assert_eq!("vnd.etsi.tsl.der".parse::<Subtype>(), Ok(Subtype::VndEtsiTslDer));
    assert_eq!("vnD.EtSI.tSL.Der".parse::<Subtype>(), Ok(Subtype::VndEtsiTslDer));
    assert_eq!("vnd.eu.kasparian.car".parse::<Subtype>(), Ok(Subtype::VndEuKasparianCar));
    assert_eq!("VnD.Eu.KAspArIaN.cAr".parse::<Subtype>(), Ok(Subtype::VndEuKasparianCar));
    assert_eq!("vnd.eudora.data".parse::<Subtype>(), Ok(Subtype::VndEudoraData));
    assert_eq!("VnD.EuDorA.daTA".parse::<Subtype>(), Ok(Subtype::VndEudoraData));
    assert_eq!("vnd.everad.plj".parse::<Subtype>(), Ok(Subtype::VndEveradPlj));
    assert_eq!("vND.eVeRAd.plJ".parse::<Subtype>(), Ok(Subtype::VndEveradPlj));
    assert_eq!("vnd.evolv.ecig.profile".parse::<Subtype>(), Ok(Subtype::VndEvolvEcigProfile));
    assert_eq!("Vnd.EvOlv.ecig.proFIlE".parse::<Subtype>(), Ok(Subtype::VndEvolvEcigProfile));
    assert_eq!("vnd.evolv.ecig.settings".parse::<Subtype>(), Ok(Subtype::VndEvolvEcigSettings));
    assert_eq!("vnD.evOlV.eCig.seTTINGs".parse::<Subtype>(), Ok(Subtype::VndEvolvEcigSettings));
    assert_eq!("vnd.evolv.ecig.theme".parse::<Subtype>(), Ok(Subtype::VndEvolvEcigTheme));
    assert_eq!("VNd.EVOlv.ECIG.TheME".parse::<Subtype>(), Ok(Subtype::VndEvolvEcigTheme));
    assert_eq!("vnd.exstream-empower".parse::<Subtype>(), Ok(Subtype::VndExstreamEmpower));
    assert_eq!("vnD.ExsTrEaM-EmPOWeR".parse::<Subtype>(), Ok(Subtype::VndExstreamEmpower));
    assert_eq!("vnd.exstream-package".parse::<Subtype>(), Ok(Subtype::VndExstreamPackage));
    assert_eq!("VNd.ExSTReAM-PaCKaGE".parse::<Subtype>(), Ok(Subtype::VndExstreamPackage));
    assert_eq!("vnd.ezpix-album".parse::<Subtype>(), Ok(Subtype::VndEzpixAlbum));
    assert_eq!("vnd.ezpIx-ALbum".parse::<Subtype>(), Ok(Subtype::VndEzpixAlbum));
    assert_eq!("vnd.ezpix-package".parse::<Subtype>(), Ok(Subtype::VndEzpixPackage));
    assert_eq!("Vnd.EZpiX-PaCKage".parse::<Subtype>(), Ok(Subtype::VndEzpixPackage));
    assert_eq!("vnd.f-secure.mobile".parse::<Subtype>(), Ok(Subtype::VndFSecureMobile));
    assert_eq!("VND.F-sEcUre.MobIle".parse::<Subtype>(), Ok(Subtype::VndFSecureMobile));
    assert_eq!("vnd.familysearch.gedcom".parse::<Subtype>(), Ok(Subtype::VndFamilysearchGedcom));
    assert_eq!("vnd.FaMilYsEarCh.gedcOm".parse::<Subtype>(), Ok(Subtype::VndFamilysearchGedcom));
    assert_eq!("vnd.fastbidsheet".parse::<Subtype>(), Ok(Subtype::VndFastbidsheet));
    assert_eq!("vnD.FasTbidSheeT".parse::<Subtype>(), Ok(Subtype::VndFastbidsheet));
    assert_eq!("vnd.fastcopy-disk-image".parse::<Subtype>(), Ok(Subtype::VndFastcopyDiskImage));
    assert_eq!("Vnd.fAsTcoPy-diSk-imAgE".parse::<Subtype>(), Ok(Subtype::VndFastcopyDiskImage));
    assert_eq!("vnd.fdf".parse::<Subtype>(), Ok(Subtype::VndFdf));
    assert_eq!("vNd.fdF".parse::<Subtype>(), Ok(Subtype::VndFdf));
    assert_eq!("vnd.fdsn.mseed".parse::<Subtype>(), Ok(Subtype::VndFdsnMseed));
    assert_eq!("Vnd.fDsN.MSeed".parse::<Subtype>(), Ok(Subtype::VndFdsnMseed));
    assert_eq!("vnd.fdsn.seed".parse::<Subtype>(), Ok(Subtype::VndFdsnSeed));
    assert_eq!("Vnd.fdsN.seeD".parse::<Subtype>(), Ok(Subtype::VndFdsnSeed));
    assert_eq!("vnd.ffsns".parse::<Subtype>(), Ok(Subtype::VndFfsns));
    assert_eq!("Vnd.fFsns".parse::<Subtype>(), Ok(Subtype::VndFfsns));
    assert_eq!("vnd.ficlab.flb".parse::<Subtype>(), Ok(Subtype::VndFiclabFlb));
    assert_eq!("Vnd.fIClab.fLb".parse::<Subtype>(), Ok(Subtype::VndFiclabFlb));
    assert_eq!("vnd.ficlab.flt".parse::<Subtype>(), Ok(Subtype::VndFiclabFlt));
    assert_eq!("Vnd.Ficlab.fLT".parse::<Subtype>(), Ok(Subtype::VndFiclabFlt));
    assert_eq!("vnd.filmit.zfc".parse::<Subtype>(), Ok(Subtype::VndFilmitZfc));
    assert_eq!("Vnd.FIlMiT.zFC".parse::<Subtype>(), Ok(Subtype::VndFilmitZfc));
    assert_eq!("vnd.fints".parse::<Subtype>(), Ok(Subtype::VndFints));
    assert_eq!("vnD.FintS".parse::<Subtype>(), Ok(Subtype::VndFints));
    assert_eq!("vnd.firemonkeys.cloudcell".parse::<Subtype>(), Ok(Subtype::VndFiremonkeysCloudcell));
    assert_eq!("vnd.FIReMoNKeYS.CLOudceLL".parse::<Subtype>(), Ok(Subtype::VndFiremonkeysCloudcell));
    assert_eq!("vnd.flatland.3dml".parse::<Subtype>(), Ok(Subtype::VndFlatland3dml));
    assert_eq!("vnd.FLaTland.3dmL".parse::<Subtype>(), Ok(Subtype::VndFlatland3dml));
    assert_eq!("vnd.FloGraphIt".parse::<Subtype>(), Ok(Subtype::VndFloGraphIt));
    assert_eq!("Vnd.flogrAPHIT".parse::<Subtype>(), Ok(Subtype::VndFloGraphIt));
    assert_eq!("vnd.fluxtime.clip".parse::<Subtype>(), Ok(Subtype::VndFluxtimeClip));
    assert_eq!("vnd.fLuxtiME.Clip".parse::<Subtype>(), Ok(Subtype::VndFluxtimeClip));
    assert_eq!("vnd.fly".parse::<Subtype>(), Ok(Subtype::VndFly));
    assert_eq!("VNd.fLy".parse::<Subtype>(), Ok(Subtype::VndFly));
    assert_eq!("vnd.fmi.flexstor".parse::<Subtype>(), Ok(Subtype::VndFmiFlexstor));
    assert_eq!("VND.fmI.fLexstOR".parse::<Subtype>(), Ok(Subtype::VndFmiFlexstor));
    assert_eq!("vnd.font-fontforge-sfd".parse::<Subtype>(), Ok(Subtype::VndFontFontforgeSfd));
    assert_eq!("VNd.fonT-fontfoRGe-sFd".parse::<Subtype>(), Ok(Subtype::VndFontFontforgeSfd));
    assert_eq!("vnd.fpx".parse::<Subtype>(), Ok(Subtype::VndFpx));
    assert_eq!("vNd.fpx".parse::<Subtype>(), Ok(Subtype::VndFpx));
    assert_eq!("vnd.framemaker".parse::<Subtype>(), Ok(Subtype::VndFramemaker));
    assert_eq!("VnD.FRaMEMAKEr".parse::<Subtype>(), Ok(Subtype::VndFramemaker));
    assert_eq!("vnd.fsc.weblaunch".parse::<Subtype>(), Ok(Subtype::VndFscWeblaunch));
    assert_eq!("vNd.fSc.WeBLAUnCh".parse::<Subtype>(), Ok(Subtype::VndFscWeblaunch));
    assert_eq!("vnd.fst".parse::<Subtype>(), Ok(Subtype::VndFst));
    assert_eq!("VND.FST".parse::<Subtype>(), Ok(Subtype::VndFst));
    assert_eq!("vnd.fujifilm.fb.docuworks".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbDocuworks));
    assert_eq!("Vnd.fujifiLm.fB.doCUwoRKS".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbDocuworks));
    assert_eq!("vnd.fujifilm.fb.docuworks.binder".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbDocuworksBinder));
    assert_eq!("VNd.FUjIFIlm.FB.DOcUWoRKs.BINdER".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbDocuworksBinder));
    assert_eq!("vnd.fujifilm.fb.docuworks.container".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbDocuworksContainer));
    assert_eq!("vNd.FujIFIlm.fB.dOcuwORkS.CoNtaiNer".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbDocuworksContainer));
    assert_eq!("vnd.fujifilm.fb.jfi".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbJfi));
    assert_eq!("vnD.FUjifilM.fB.jFI".parse::<Subtype>(), Ok(Subtype::VndFujifilmFbJfi));
    assert_eq!("vnd.fujitsu.oasys".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasys));
    assert_eq!("vnd.fUJitSu.OasYS".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasys));
    assert_eq!("vnd.fujitsu.oasys2".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasys2));
    assert_eq!("VNd.FujITSU.oASYs2".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasys2));
    assert_eq!("vnd.fujitsu.oasys3".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasys3));
    assert_eq!("vnd.FUJITsU.OAsyS3".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasys3));
    assert_eq!("vnd.fujitsu.oasysgp".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasysgp));
    assert_eq!("VnD.FUJitSu.oASysgp".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasysgp));
    assert_eq!("vnd.fujitsu.oasysprs".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasysprs));
    assert_eq!("vND.fujitSu.oAsySPrS".parse::<Subtype>(), Ok(Subtype::VndFujitsuOasysprs));
    assert_eq!("vnd.fujixerox.ART4".parse::<Subtype>(), Ok(Subtype::VndFujixeroxArt4));
    assert_eq!("VND.fuJixERox.ArT4".parse::<Subtype>(), Ok(Subtype::VndFujixeroxArt4));
    assert_eq!("vnd.fujixerox.ART-EX".parse::<Subtype>(), Ok(Subtype::VndFujixeroxArtEx));
    assert_eq!("Vnd.FUJiXErox.ARt-EX".parse::<Subtype>(), Ok(Subtype::VndFujixeroxArtEx));
    assert_eq!("vnd.fujixerox.ddd".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDdd));
    assert_eq!("VNd.FujiXerox.dDD".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDdd));
    assert_eq!("vnd.fujixerox.docuworks".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDocuworks));
    assert_eq!("vnd.FuJIXEroX.docUworks".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDocuworks));
    assert_eq!("vnd.fujixerox.docuworks.binder".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDocuworksBinder));
    assert_eq!("vND.fuJixERoX.dOcuworkS.bInder".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDocuworksBinder));
    assert_eq!("vnd.fujixerox.docuworks.container".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDocuworksContainer));
    assert_eq!("vnd.FUJIxErOx.DOCuWoRkS.ContaineR".parse::<Subtype>(), Ok(Subtype::VndFujixeroxDocuworksContainer));
    assert_eq!("vnd.fujixerox.edmics-mmr".parse::<Subtype>(), Ok(Subtype::VndFujixeroxEdmicsMmr));
    assert_eq!("Vnd.fujixErox.eDMIcS-mMr".parse::<Subtype>(), Ok(Subtype::VndFujixeroxEdmicsMmr));
    assert_eq!("vnd.fujixerox.edmics-rlc".parse::<Subtype>(), Ok(Subtype::VndFujixeroxEdmicsRlc));
    assert_eq!("VnD.fUjiXerox.EDMIcs-RLC".parse::<Subtype>(), Ok(Subtype::VndFujixeroxEdmicsRlc));
    assert_eq!("vnd.fujixerox.HBPL".parse::<Subtype>(), Ok(Subtype::VndFujixeroxHbpl));
    assert_eq!("vnD.FuJIXerOx.HBpl".parse::<Subtype>(), Ok(Subtype::VndFujixeroxHbpl));
    assert_eq!("vnd.fut-misnet".parse::<Subtype>(), Ok(Subtype::VndFutMisnet));
    assert_eq!("Vnd.fut-miSnet".parse::<Subtype>(), Ok(Subtype::VndFutMisnet));
    assert_eq!("vnd.futoin".parse::<Subtype>(), Ok(Subtype::VndFutoin));
    assert_eq!("VND.FUtOiN".parse::<Subtype>(), Ok(Subtype::VndFutoin));
    assert_eq!("vnd.fuzzysheet".parse::<Subtype>(), Ok(Subtype::VndFuzzysheet));
    assert_eq!("vNd.FuzZyShEET".parse::<Subtype>(), Ok(Subtype::VndFuzzysheet));
    assert_eq!("vnd.fvt".parse::<Subtype>(), Ok(Subtype::VndFvt));
    assert_eq!("vNd.fvT".parse::<Subtype>(), Ok(Subtype::VndFvt));
    assert_eq!("vnd.gdl".parse::<Subtype>(), Ok(Subtype::VndGdl));
    assert_eq!("vNd.gDL".parse::<Subtype>(), Ok(Subtype::VndGdl));
    assert_eq!("vnd.genomatix.tuxedo".parse::<Subtype>(), Ok(Subtype::VndGenomatixTuxedo));
    assert_eq!("VND.genOmAtiX.tUxedO".parse::<Subtype>(), Ok(Subtype::VndGenomatixTuxedo));
    assert_eq!("vnd.gentics.grd".parse::<Subtype>(), Ok(Subtype::VndGenticsGrd));
    assert_eq!("Vnd.GenTiCs.GrD".parse::<Subtype>(), Ok(Subtype::VndGenticsGrd));
    assert_eq!("vnd.geogebra.file".parse::<Subtype>(), Ok(Subtype::VndGeogebraFile));
    assert_eq!("VNd.GeOgEBra.FIle".parse::<Subtype>(), Ok(Subtype::VndGeogebraFile));
    assert_eq!("vnd.geogebra.slides".parse::<Subtype>(), Ok(Subtype::VndGeogebraSlides));
    assert_eq!("vNd.GeOgEbrA.sliDES".parse::<Subtype>(), Ok(Subtype::VndGeogebraSlides));
    assert_eq!("vnd.geogebra.tool".parse::<Subtype>(), Ok(Subtype::VndGeogebraTool));
    assert_eq!("VNd.gEoGebrA.tool".parse::<Subtype>(), Ok(Subtype::VndGeogebraTool));
    assert_eq!("vnd.geometry-explorer".parse::<Subtype>(), Ok(Subtype::VndGeometryExplorer));
    assert_eq!("VND.gEomEtry-ExPlOrER".parse::<Subtype>(), Ok(Subtype::VndGeometryExplorer));
    assert_eq!("vnd.geonext".parse::<Subtype>(), Ok(Subtype::VndGeonext));
    assert_eq!("vND.GEONext".parse::<Subtype>(), Ok(Subtype::VndGeonext));
    assert_eq!("vnd.geoplan".parse::<Subtype>(), Ok(Subtype::VndGeoplan));
    assert_eq!("vND.gEoPlAN".parse::<Subtype>(), Ok(Subtype::VndGeoplan));
    assert_eq!("vnd.geospace".parse::<Subtype>(), Ok(Subtype::VndGeospace));
    assert_eq!("Vnd.geOSpaCe".parse::<Subtype>(), Ok(Subtype::VndGeospace));
    assert_eq!("vnd.gerber".parse::<Subtype>(), Ok(Subtype::VndGerber));
    assert_eq!("VND.gErBeR".parse::<Subtype>(), Ok(Subtype::VndGerber));
    assert_eq!("vnd.globalgraphics.pgb".parse::<Subtype>(), Ok(Subtype::VndGlobalgraphicsPgb));
    assert_eq!("vNd.gLobALGRaPHICs.pgb".parse::<Subtype>(), Ok(Subtype::VndGlobalgraphicsPgb));
    assert_eq!("vnd.globalplatform.card-content-mgt".parse::<Subtype>(), Ok(Subtype::VndGlobalplatformCardContentMgt));
    assert_eq!("VND.gloBALPlatfORm.cARd-contEnT-mgT".parse::<Subtype>(), Ok(Subtype::VndGlobalplatformCardContentMgt));
    assert_eq!("vnd.globalplatform.card-content-mgt-response".parse::<Subtype>(), Ok(Subtype::VndGlobalplatformCardContentMgtResponse));
    assert_eq!("vNd.gLObaLPLATfOrM.cARD-CONtENT-MGT-ResPOnse".parse::<Subtype>(), Ok(Subtype::VndGlobalplatformCardContentMgtResponse));
    assert_eq!("vnd.gml".parse::<Subtype>(), Ok(Subtype::VndGml));
    assert_eq!("vNd.GmL".parse::<Subtype>(), Ok(Subtype::VndGml));
    assert_eq!("vnd.gnu.taler.exchange".parse::<Subtype>(), Ok(Subtype::VndGnuTalerExchange));
    assert_eq!("vnD.gnU.TalER.EXcHAngE".parse::<Subtype>(), Ok(Subtype::VndGnuTalerExchange));
    assert_eq!("vnd.gnu.taler.merchant".parse::<Subtype>(), Ok(Subtype::VndGnuTalerMerchant));
    assert_eq!("vNd.gNu.tAlEr.MERcHAnt".parse::<Subtype>(), Ok(Subtype::VndGnuTalerMerchant));
    assert_eq!("vnd.google-earth.kml".parse::<Subtype>(), Ok(Subtype::VndGoogleEarthKml));
    assert_eq!("vnD.goOGle-eArth.KmL".parse::<Subtype>(), Ok(Subtype::VndGoogleEarthKml));
    assert_eq!("vnd.google-earth.kmz".parse::<Subtype>(), Ok(Subtype::VndGoogleEarthKmz));
    assert_eq!("vND.gOoglE-eArTh.kMZ".parse::<Subtype>(), Ok(Subtype::VndGoogleEarthKmz));
    assert_eq!("vnd.gov.sk.e-form".parse::<Subtype>(), Ok(Subtype::VndGovSkEForm));
    assert_eq!("vNd.gOv.Sk.e-FORm".parse::<Subtype>(), Ok(Subtype::VndGovSkEForm));
    assert_eq!("vnd.gov.sk.xmldatacontainer".parse::<Subtype>(), Ok(Subtype::VndGovSkXmldatacontainer));
    assert_eq!("vNd.gOv.sK.XMlDAtacoNTaIneR".parse::<Subtype>(), Ok(Subtype::VndGovSkXmldatacontainer));
    assert_eq!("vnd.grafeq".parse::<Subtype>(), Ok(Subtype::VndGrafeq));
    assert_eq!("VND.gRaFeQ".parse::<Subtype>(), Ok(Subtype::VndGrafeq));
    assert_eq!("vnd.graphviz".parse::<Subtype>(), Ok(Subtype::VndGraphviz));
    assert_eq!("vND.GRAPHViz".parse::<Subtype>(), Ok(Subtype::VndGraphviz));
    assert_eq!("vnd.gridmp".parse::<Subtype>(), Ok(Subtype::VndGridmp));
    assert_eq!("vnD.GrIdMp".parse::<Subtype>(), Ok(Subtype::VndGridmp));
    assert_eq!("vnd.groove-account".parse::<Subtype>(), Ok(Subtype::VndGrooveAccount));
    assert_eq!("vNd.gROovE-AccounT".parse::<Subtype>(), Ok(Subtype::VndGrooveAccount));
    assert_eq!("vnd.groove-help".parse::<Subtype>(), Ok(Subtype::VndGrooveHelp));
    assert_eq!("VND.GroOVe-help".parse::<Subtype>(), Ok(Subtype::VndGrooveHelp));
    assert_eq!("vnd.groove-identity-message".parse::<Subtype>(), Ok(Subtype::VndGrooveIdentityMessage));
    assert_eq!("vnD.grooVE-IdenTiTy-MESsAGe".parse::<Subtype>(), Ok(Subtype::VndGrooveIdentityMessage));
    assert_eq!("vnd.groove-injector".parse::<Subtype>(), Ok(Subtype::VndGrooveInjector));
    assert_eq!("VnD.GroovE-INjEctOR".parse::<Subtype>(), Ok(Subtype::VndGrooveInjector));
    assert_eq!("vnd.groove-tool-message".parse::<Subtype>(), Ok(Subtype::VndGrooveToolMessage));
    assert_eq!("VnD.GrooVe-tool-MEssaGE".parse::<Subtype>(), Ok(Subtype::VndGrooveToolMessage));
    assert_eq!("vnd.groove-tool-template".parse::<Subtype>(), Ok(Subtype::VndGrooveToolTemplate));
    assert_eq!("VnD.GrOOVE-ToOl-temPlatE".parse::<Subtype>(), Ok(Subtype::VndGrooveToolTemplate));
    assert_eq!("vnd.groove-vcard".parse::<Subtype>(), Ok(Subtype::VndGrooveVcard));
    assert_eq!("vnD.GROOvE-vCard".parse::<Subtype>(), Ok(Subtype::VndGrooveVcard));
    assert_eq!("vnd.gs-gdl".parse::<Subtype>(), Ok(Subtype::VndGsGdl));
    assert_eq!("VND.GS-GdL".parse::<Subtype>(), Ok(Subtype::VndGsGdl));
    assert_eq!("vnd.gtw".parse::<Subtype>(), Ok(Subtype::VndGtw));
    assert_eq!("VNd.GtW".parse::<Subtype>(), Ok(Subtype::VndGtw));
    assert_eq!("vnd.hal".parse::<Subtype>(), Ok(Subtype::VndHal));
    assert_eq!("vND.hal".parse::<Subtype>(), Ok(Subtype::VndHal));
    assert_eq!("vnd.HandHeld-Entertainment".parse::<Subtype>(), Ok(Subtype::VndHandHeldEntertainment));
    assert_eq!("VnD.handHELd-enTertAinMEnT".parse::<Subtype>(), Ok(Subtype::VndHandHeldEntertainment));
    assert_eq!("vnd.hans".parse::<Subtype>(), Ok(Subtype::VndHans));
    assert_eq!("VnD.HaNs".parse::<Subtype>(), Ok(Subtype::VndHans));
    assert_eq!("vnd.hbci".parse::<Subtype>(), Ok(Subtype::VndHbci));
    assert_eq!("Vnd.HbcI".parse::<Subtype>(), Ok(Subtype::VndHbci));
    assert_eq!("vnd.hc".parse::<Subtype>(), Ok(Subtype::VndHc));
    assert_eq!("VNd.HC".parse::<Subtype>(), Ok(Subtype::VndHc));
    assert_eq!("vnd.hcl-bireports".parse::<Subtype>(), Ok(Subtype::VndHclBireports));
    assert_eq!("VnD.hcl-BIRePORtS".parse::<Subtype>(), Ok(Subtype::VndHclBireports));
    assert_eq!("vnd.hdt".parse::<Subtype>(), Ok(Subtype::VndHdt));
    assert_eq!("Vnd.hDT".parse::<Subtype>(), Ok(Subtype::VndHdt));
    assert_eq!("vnd.heroku".parse::<Subtype>(), Ok(Subtype::VndHeroku));
    assert_eq!("VNd.HEROKu".parse::<Subtype>(), Ok(Subtype::VndHeroku));
    assert_eq!("vnd.hgl".parse::<Subtype>(), Ok(Subtype::VndHgl));
    assert_eq!("vnd.hGl".parse::<Subtype>(), Ok(Subtype::VndHgl));
    assert_eq!("vnd.hhe.lesson-player".parse::<Subtype>(), Ok(Subtype::VndHheLessonPlayer));
    assert_eq!("vnD.hHe.LEsson-playER".parse::<Subtype>(), Ok(Subtype::VndHheLessonPlayer));
    assert_eq!("vnd.hl7cda".parse::<Subtype>(), Ok(Subtype::VndHl7cda));
    assert_eq!("VnD.Hl7cda".parse::<Subtype>(), Ok(Subtype::VndHl7cda));
    assert_eq!("vnd.hl7v2".parse::<Subtype>(), Ok(Subtype::VndHl7v2));
    assert_eq!("VNd.hL7V2".parse::<Subtype>(), Ok(Subtype::VndHl7v2));
    assert_eq!("vnd.hns.audio".parse::<Subtype>(), Ok(Subtype::VndHnsAudio));
    assert_eq!("vnD.hNs.AuDIo".parse::<Subtype>(), Ok(Subtype::VndHnsAudio));
    assert_eq!("vnd.hns.video".parse::<Subtype>(), Ok(Subtype::VndHnsVideo));
    assert_eq!("vnD.HnS.video".parse::<Subtype>(), Ok(Subtype::VndHnsVideo));
    assert_eq!("vnd.hp-HPGL".parse::<Subtype>(), Ok(Subtype::VndHpHpgl));
    assert_eq!("Vnd.Hp-HPgL".parse::<Subtype>(), Ok(Subtype::VndHpHpgl));
    assert_eq!("vnd.hp-hpid".parse::<Subtype>(), Ok(Subtype::VndHpHpid));
    assert_eq!("vnd.hP-HPid".parse::<Subtype>(), Ok(Subtype::VndHpHpid));
    assert_eq!("vnd.hp-hps".parse::<Subtype>(), Ok(Subtype::VndHpHps));
    assert_eq!("vND.HP-hPs".parse::<Subtype>(), Ok(Subtype::VndHpHps));
    assert_eq!("vnd.hp-jlyt".parse::<Subtype>(), Ok(Subtype::VndHpJlyt));
    assert_eq!("VND.hP-jlYt".parse::<Subtype>(), Ok(Subtype::VndHpJlyt));
    assert_eq!("vnd.hp-PCL".parse::<Subtype>(), Ok(Subtype::VndHpPcl));
    assert_eq!("VND.hP-PCl".parse::<Subtype>(), Ok(Subtype::VndHpPcl));
    assert_eq!("vnd.hp-PCLXL".parse::<Subtype>(), Ok(Subtype::VndHpPclxl));
    assert_eq!("VND.Hp-pclXL".parse::<Subtype>(), Ok(Subtype::VndHpPclxl));
    assert_eq!("vnd.httphone".parse::<Subtype>(), Ok(Subtype::VndHttphone));
    assert_eq!("vnd.htTphoNe".parse::<Subtype>(), Ok(Subtype::VndHttphone));
    assert_eq!("vnd.hydrostatix.sof-data".parse::<Subtype>(), Ok(Subtype::VndHydrostatixSofData));
    assert_eq!("VNd.hyDROsTatIx.SoF-dATA".parse::<Subtype>(), Ok(Subtype::VndHydrostatixSofData));
    assert_eq!("vnd.hyper".parse::<Subtype>(), Ok(Subtype::VndHyper));
    assert_eq!("VND.Hyper".parse::<Subtype>(), Ok(Subtype::VndHyper));
    assert_eq!("vnd.hyper-item".parse::<Subtype>(), Ok(Subtype::VndHyperItem));
    assert_eq!("Vnd.Hyper-ITem".parse::<Subtype>(), Ok(Subtype::VndHyperItem));
    assert_eq!("vnd.hyperdrive".parse::<Subtype>(), Ok(Subtype::VndHyperdrive));
    assert_eq!("VnD.hyperdRIVE".parse::<Subtype>(), Ok(Subtype::VndHyperdrive));
    assert_eq!("vnd.hzn-3d-crossword".parse::<Subtype>(), Ok(Subtype::VndHzn3dCrossword));
    assert_eq!("vND.HZN-3D-CrOSswoRd".parse::<Subtype>(), Ok(Subtype::VndHzn3dCrossword));
    assert_eq!("vnd.ibm.electronic-media".parse::<Subtype>(), Ok(Subtype::VndIbmElectronicMedia));
    assert_eq!("VnD.iBM.eLeCtroNiC-media".parse::<Subtype>(), Ok(Subtype::VndIbmElectronicMedia));
    assert_eq!("vnd.ibm.MiniPay".parse::<Subtype>(), Ok(Subtype::VndIbmMiniPay));
    assert_eq!("VND.IBM.MINipay".parse::<Subtype>(), Ok(Subtype::VndIbmMiniPay));
    assert_eq!("vnd.ibm.rights-management".parse::<Subtype>(), Ok(Subtype::VndIbmRightsManagement));
    assert_eq!("vnd.ibm.RIGhTs-mANaGeMeNt".parse::<Subtype>(), Ok(Subtype::VndIbmRightsManagement));
    assert_eq!("vnd.ibm.secure-container".parse::<Subtype>(), Ok(Subtype::VndIbmSecureContainer));
    assert_eq!("vnD.IbM.sECUrE-COntaIner".parse::<Subtype>(), Ok(Subtype::VndIbmSecureContainer));
    assert_eq!("vnd.iccprofile".parse::<Subtype>(), Ok(Subtype::VndIccprofile));
    assert_eq!("vND.icCProFIlE".parse::<Subtype>(), Ok(Subtype::VndIccprofile));
    assert_eq!("vnd.ieee.1905".parse::<Subtype>(), Ok(Subtype::VndIeee1905));
    assert_eq!("VNd.IeEE.1905".parse::<Subtype>(), Ok(Subtype::VndIeee1905));
    assert_eq!("vnd.igloader".parse::<Subtype>(), Ok(Subtype::VndIgloader));
    assert_eq!("vnd.IglOAdER".parse::<Subtype>(), Ok(Subtype::VndIgloader));
    assert_eq!("vnd.imagemeter.folder".parse::<Subtype>(), Ok(Subtype::VndImagemeterFolder));
    assert_eq!("vNd.IMagEMeTEr.FOLdeR".parse::<Subtype>(), Ok(Subtype::VndImagemeterFolder));
    assert_eq!("vnd.imagemeter.image".parse::<Subtype>(), Ok(Subtype::VndImagemeterImage));
    assert_eq!("vnd.IMAGEmETEr.iMage".parse::<Subtype>(), Ok(Subtype::VndImagemeterImage));
    assert_eq!("vnd.immervision-ivp".parse::<Subtype>(), Ok(Subtype::VndImmervisionIvp));
    assert_eq!("VnD.iMMERviSiOn-ivP".parse::<Subtype>(), Ok(Subtype::VndImmervisionIvp));
    assert_eq!("vnd.immervision-ivu".parse::<Subtype>(), Ok(Subtype::VndImmervisionIvu));
    assert_eq!("VnD.ImMERvISIoN-IVu".parse::<Subtype>(), Ok(Subtype::VndImmervisionIvu));
    assert_eq!("vnd.ims.imsccv1p1".parse::<Subtype>(), Ok(Subtype::VndImsImsccv1p1));
    assert_eq!("Vnd.Ims.imsccv1P1".parse::<Subtype>(), Ok(Subtype::VndImsImsccv1p1));
    assert_eq!("vnd.ims.imsccv1p2".parse::<Subtype>(), Ok(Subtype::VndImsImsccv1p2));
    assert_eq!("VnD.imS.imsccV1P2".parse::<Subtype>(), Ok(Subtype::VndImsImsccv1p2));
    assert_eq!("vnd.ims.imsccv1p3".parse::<Subtype>(), Ok(Subtype::VndImsImsccv1p3));
    assert_eq!("VNd.ImS.imScCv1p3".parse::<Subtype>(), Ok(Subtype::VndImsImsccv1p3));
    assert_eq!("vnd.ims.lis.v2.result".parse::<Subtype>(), Ok(Subtype::VndImsLisV2Result));
    assert_eq!("VND.ImS.lIS.v2.reSUlT".parse::<Subtype>(), Ok(Subtype::VndImsLisV2Result));
    assert_eq!("vnd.ims.lti.v2.toolconsumerprofile".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2Toolconsumerprofile));
    assert_eq!("VND.ImS.lti.V2.toOLCoNsumERprOfile".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2Toolconsumerprofile));
    assert_eq!("vnd.ims.lti.v2.toolproxy".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2Toolproxy));
    assert_eq!("vNd.ImS.LtI.V2.tooLPRoXy".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2Toolproxy));
    assert_eq!("vnd.ims.lti.v2.toolproxy.id".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2ToolproxyId));
    assert_eq!("VNd.IMs.lTI.v2.tOolPROXy.id".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2ToolproxyId));
    assert_eq!("vnd.ims.lti.v2.toolsettings".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2Toolsettings));
    assert_eq!("vND.IMs.LtI.V2.toOLSETtINgS".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2Toolsettings));
    assert_eq!("vnd.ims.lti.v2.toolsettings.simple".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2ToolsettingsSimple));
    assert_eq!("VNd.ImS.Lti.v2.TOOlSeTTinGS.SIMPLE".parse::<Subtype>(), Ok(Subtype::VndImsLtiV2ToolsettingsSimple));
    assert_eq!("vnd.in3d.3dml".parse::<Subtype>(), Ok(Subtype::VndIn3d3dml));
    assert_eq!("VND.iN3D.3dML".parse::<Subtype>(), Ok(Subtype::VndIn3d3dml));
    assert_eq!("vnd.in3d.spot".parse::<Subtype>(), Ok(Subtype::VndIn3dSpot));
    assert_eq!("VnD.iN3d.spOT".parse::<Subtype>(), Ok(Subtype::VndIn3dSpot));
    assert_eq!("vnd.informedcontrol.rms".parse::<Subtype>(), Ok(Subtype::VndInformedcontrolRms));
    assert_eq!("vnD.infoRMedcontrol.Rms".parse::<Subtype>(), Ok(Subtype::VndInformedcontrolRms));
    assert_eq!("vnd.infotech.project".parse::<Subtype>(), Ok(Subtype::VndInfotechProject));
    assert_eq!("VND.iNfoteCH.projeCT".parse::<Subtype>(), Ok(Subtype::VndInfotechProject));
    assert_eq!("vnd.innopath.wamp.notification".parse::<Subtype>(), Ok(Subtype::VndInnopathWampNotification));
    assert_eq!("VNd.INNOpatH.Wamp.NoTiFicatiOn".parse::<Subtype>(), Ok(Subtype::VndInnopathWampNotification));
    assert_eq!("vnd.insors.igm".parse::<Subtype>(), Ok(Subtype::VndInsorsIgm));
    assert_eq!("vnD.iNsORs.Igm".parse::<Subtype>(), Ok(Subtype::VndInsorsIgm));
    assert_eq!("vnd.intercon.formnet".parse::<Subtype>(), Ok(Subtype::VndInterconFormnet));
    assert_eq!("VND.INTERcoN.FormNET".parse::<Subtype>(), Ok(Subtype::VndInterconFormnet));
    assert_eq!("vnd.intergeo".parse::<Subtype>(), Ok(Subtype::VndIntergeo));
    assert_eq!("VND.IntERgEo".parse::<Subtype>(), Ok(Subtype::VndIntergeo));
    assert_eq!("vnd.intertrust.digibox".parse::<Subtype>(), Ok(Subtype::VndIntertrustDigibox));
    assert_eq!("vnD.iNteRTRuST.diGibOX".parse::<Subtype>(), Ok(Subtype::VndIntertrustDigibox));
    assert_eq!("vnd.intertrust.nncp".parse::<Subtype>(), Ok(Subtype::VndIntertrustNncp));
    assert_eq!("VND.IntErtruSt.nncp".parse::<Subtype>(), Ok(Subtype::VndIntertrustNncp));
    assert_eq!("vnd.intu.qbo".parse::<Subtype>(), Ok(Subtype::VndIntuQbo));
    assert_eq!("vNd.Intu.QbO".parse::<Subtype>(), Ok(Subtype::VndIntuQbo));
    assert_eq!("vnd.intu.qfx".parse::<Subtype>(), Ok(Subtype::VndIntuQfx));
    assert_eq!("vnd.iNTU.QFx".parse::<Subtype>(), Ok(Subtype::VndIntuQfx));
    assert_eq!("vnd.iptc.g2.catalogitem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Catalogitem));
    assert_eq!("vnd.IPTc.G2.CAtAloGITem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Catalogitem));
    assert_eq!("vnd.iptc.g2.conceptitem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Conceptitem));
    assert_eq!("vND.iPtC.G2.ConceptiTEM".parse::<Subtype>(), Ok(Subtype::VndIptcG2Conceptitem));
    assert_eq!("vnd.iptc.g2.knowledgeitem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Knowledgeitem));
    assert_eq!("vND.iPTC.g2.KnOWlEdgEITEM".parse::<Subtype>(), Ok(Subtype::VndIptcG2Knowledgeitem));
    assert_eq!("vnd.iptc.g2.newsitem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Newsitem));
    assert_eq!("Vnd.iptc.G2.nEWSitEM".parse::<Subtype>(), Ok(Subtype::VndIptcG2Newsitem));
    assert_eq!("vnd.iptc.g2.newsmessage".parse::<Subtype>(), Ok(Subtype::VndIptcG2Newsmessage));
    assert_eq!("Vnd.Iptc.G2.nEwsmessAge".parse::<Subtype>(), Ok(Subtype::VndIptcG2Newsmessage));
    assert_eq!("vnd.iptc.g2.packageitem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Packageitem));
    assert_eq!("VND.iPTc.G2.PackAgEiTEM".parse::<Subtype>(), Ok(Subtype::VndIptcG2Packageitem));
    assert_eq!("vnd.iptc.g2.planningitem".parse::<Subtype>(), Ok(Subtype::VndIptcG2Planningitem));
    assert_eq!("Vnd.ipTC.g2.pLAnniNgiTEM".parse::<Subtype>(), Ok(Subtype::VndIptcG2Planningitem));
    assert_eq!("vnd.IPTC.NewsML".parse::<Subtype>(), Ok(Subtype::VndIptcNewsMl));
    assert_eq!("VND.IPTc.nEwSmL".parse::<Subtype>(), Ok(Subtype::VndIptcNewsMl));
    assert_eq!("vnd.IPTC.NITF".parse::<Subtype>(), Ok(Subtype::VndIptcNitf));
    assert_eq!("vNd.ipTc.nItF".parse::<Subtype>(), Ok(Subtype::VndIptcNitf));
    assert_eq!("vnd.iptvforum.1dparityfec-1010".parse::<Subtype>(), Ok(Subtype::VndIptvforum1dparityfec1010));
    assert_eq!("VnD.IptVforUm.1dPARITYfec-1010".parse::<Subtype>(), Ok(Subtype::VndIptvforum1dparityfec1010));
    assert_eq!("vnd.iptvforum.1dparityfec-2005".parse::<Subtype>(), Ok(Subtype::VndIptvforum1dparityfec2005));
    assert_eq!("VnD.IPtvfORuM.1DParITYfEC-2005".parse::<Subtype>(), Ok(Subtype::VndIptvforum1dparityfec2005));
    assert_eq!("vnd.iptvforum.2dparityfec-1010".parse::<Subtype>(), Ok(Subtype::VndIptvforum2dparityfec1010));
    assert_eq!("VnD.iPTVfoRuM.2dpARITYfec-1010".parse::<Subtype>(), Ok(Subtype::VndIptvforum2dparityfec1010));
    assert_eq!("vnd.iptvforum.2dparityfec-2005".parse::<Subtype>(), Ok(Subtype::VndIptvforum2dparityfec2005));
    assert_eq!("VnD.iPtVfOrUm.2DpArityFec-2005".parse::<Subtype>(), Ok(Subtype::VndIptvforum2dparityfec2005));
    assert_eq!("vnd.iptvforum.ttsavc".parse::<Subtype>(), Ok(Subtype::VndIptvforumTtsavc));
    assert_eq!("VnD.iPTVfORuM.tTsAvC".parse::<Subtype>(), Ok(Subtype::VndIptvforumTtsavc));
    assert_eq!("vnd.iptvforum.ttsmpeg2".parse::<Subtype>(), Ok(Subtype::VndIptvforumTtsmpeg2));
    assert_eq!("vND.iPtvFORuM.TtsMPeG2".parse::<Subtype>(), Ok(Subtype::VndIptvforumTtsmpeg2));
    assert_eq!("vnd.ipunplugged.rcprofile".parse::<Subtype>(), Ok(Subtype::VndIpunpluggedRcprofile));
    assert_eq!("vnd.ipuNPlugGED.rCprofILe".parse::<Subtype>(), Ok(Subtype::VndIpunpluggedRcprofile));
    assert_eq!("vnd.irepository.package".parse::<Subtype>(), Ok(Subtype::VndIrepositoryPackage));
    assert_eq!("vNd.IREPOsiTOrY.PACKagE".parse::<Subtype>(), Ok(Subtype::VndIrepositoryPackage));
    assert_eq!("vnd.is-xpr".parse::<Subtype>(), Ok(Subtype::VndIsXpr));
    assert_eq!("VnD.is-XPr".parse::<Subtype>(), Ok(Subtype::VndIsXpr));
    assert_eq!("vnd.isac.fcs".parse::<Subtype>(), Ok(Subtype::VndIsacFcs));
    assert_eq!("VNd.IsaC.fcs".parse::<Subtype>(), Ok(Subtype::VndIsacFcs));
    assert_eq!("vnd.iso11783-10".parse::<Subtype>(), Ok(Subtype::VndIso1178310));
    assert_eq!("Vnd.IsO11783-10".parse::<Subtype>(), Ok(Subtype::VndIso1178310));
    assert_eq!("vnd.jam".parse::<Subtype>(), Ok(Subtype::VndJam));
    assert_eq!("vND.jam".parse::<Subtype>(), Ok(Subtype::VndJam));
    assert_eq!("vnd.japannet-directory-service".parse::<Subtype>(), Ok(Subtype::VndJapannetDirectoryService));
    assert_eq!("vNd.japANnet-dIreCTOry-seRViCE".parse::<Subtype>(), Ok(Subtype::VndJapannetDirectoryService));
    assert_eq!("vnd.japannet-jpnstore-wakeup".parse::<Subtype>(), Ok(Subtype::VndJapannetJpnstoreWakeup));
    assert_eq!("VNd.JapaNnEt-jPnSToRe-WakEuP".parse::<Subtype>(), Ok(Subtype::VndJapannetJpnstoreWakeup));
    assert_eq!("vnd.japannet-payment-wakeup".parse::<Subtype>(), Ok(Subtype::VndJapannetPaymentWakeup));
    assert_eq!("VnD.jApANneT-PAYmEnt-WaKeup".parse::<Subtype>(), Ok(Subtype::VndJapannetPaymentWakeup));
    assert_eq!("vnd.japannet-registration".parse::<Subtype>(), Ok(Subtype::VndJapannetRegistration));
    assert_eq!("vnD.jApANNeT-REGiStrATIon".parse::<Subtype>(), Ok(Subtype::VndJapannetRegistration));
    assert_eq!("vnd.japannet-registration-wakeup".parse::<Subtype>(), Ok(Subtype::VndJapannetRegistrationWakeup));
    assert_eq!("VNd.jaPAnNET-rEGisTRATIOn-WaKEuP".parse::<Subtype>(), Ok(Subtype::VndJapannetRegistrationWakeup));
    assert_eq!("vnd.japannet-setstore-wakeup".parse::<Subtype>(), Ok(Subtype::VndJapannetSetstoreWakeup));
    assert_eq!("vND.JapaNnET-SeTStOrE-wAkEuP".parse::<Subtype>(), Ok(Subtype::VndJapannetSetstoreWakeup));
    assert_eq!("vnd.japannet-verification".parse::<Subtype>(), Ok(Subtype::VndJapannetVerification));
    assert_eq!("VNd.JaPANNET-verificATiON".parse::<Subtype>(), Ok(Subtype::VndJapannetVerification));
    assert_eq!("vnd.japannet-verification-wakeup".parse::<Subtype>(), Ok(Subtype::VndJapannetVerificationWakeup));
    assert_eq!("VNd.JApANnET-VERifIcaTioN-WaKeup".parse::<Subtype>(), Ok(Subtype::VndJapannetVerificationWakeup));
    assert_eq!("vnd.jcp.javame.midlet-rms".parse::<Subtype>(), Ok(Subtype::VndJcpJavameMidletRms));
    assert_eq!("VNd.Jcp.JAvAMe.miDlEt-RmS".parse::<Subtype>(), Ok(Subtype::VndJcpJavameMidletRms));
    assert_eq!("vnd.jisp".parse::<Subtype>(), Ok(Subtype::VndJisp));
    assert_eq!("Vnd.JISP".parse::<Subtype>(), Ok(Subtype::VndJisp));
    assert_eq!("vnd.joost.joda-archive".parse::<Subtype>(), Ok(Subtype::VndJoostJodaArchive));
    assert_eq!("vNd.jOOsT.jOda-arCHIvE".parse::<Subtype>(), Ok(Subtype::VndJoostJodaArchive));
    assert_eq!("vnd.jsk.isdn-ngn".parse::<Subtype>(), Ok(Subtype::VndJskIsdnNgn));
    assert_eq!("vND.JsK.isDn-NGn".parse::<Subtype>(), Ok(Subtype::VndJskIsdnNgn));
    assert_eq!("vnd.kahootz".parse::<Subtype>(), Ok(Subtype::VndKahootz));
    assert_eq!("VnD.KAHOOtz".parse::<Subtype>(), Ok(Subtype::VndKahootz));
    assert_eq!("vnd.kde.karbon".parse::<Subtype>(), Ok(Subtype::VndKdeKarbon));
    assert_eq!("vND.Kde.KarbOn".parse::<Subtype>(), Ok(Subtype::VndKdeKarbon));
    assert_eq!("vnd.kde.kchart".parse::<Subtype>(), Ok(Subtype::VndKdeKchart));
    assert_eq!("Vnd.kde.kCHARt".parse::<Subtype>(), Ok(Subtype::VndKdeKchart));
    assert_eq!("vnd.kde.kformula".parse::<Subtype>(), Ok(Subtype::VndKdeKformula));
    assert_eq!("VND.Kde.kFoRmuLa".parse::<Subtype>(), Ok(Subtype::VndKdeKformula));
    assert_eq!("vnd.kde.kivio".parse::<Subtype>(), Ok(Subtype::VndKdeKivio));
    assert_eq!("vnD.KDe.KiVio".parse::<Subtype>(), Ok(Subtype::VndKdeKivio));
    assert_eq!("vnd.kde.kontour".parse::<Subtype>(), Ok(Subtype::VndKdeKontour));
    assert_eq!("vND.KdE.KoNTour".parse::<Subtype>(), Ok(Subtype::VndKdeKontour));
    assert_eq!("vnd.kde.kpresenter".parse::<Subtype>(), Ok(Subtype::VndKdeKpresenter));
    assert_eq!("Vnd.kde.kpresENTEr".parse::<Subtype>(), Ok(Subtype::VndKdeKpresenter));
    assert_eq!("vnd.kde.kspread".parse::<Subtype>(), Ok(Subtype::VndKdeKspread));
    assert_eq!("vNd.kdE.KsPreAD".parse::<Subtype>(), Ok(Subtype::VndKdeKspread));
    assert_eq!("vnd.kde.kword".parse::<Subtype>(), Ok(Subtype::VndKdeKword));
    assert_eq!("vnd.kdE.KwoRD".parse::<Subtype>(), Ok(Subtype::VndKdeKword));
    assert_eq!("vnd.kenameaapp".parse::<Subtype>(), Ok(Subtype::VndKenameaapp));
    assert_eq!("VND.KENaMeAAPp".parse::<Subtype>(), Ok(Subtype::VndKenameaapp));
    assert_eq!("vnd.kidspiration".parse::<Subtype>(), Ok(Subtype::VndKidspiration));
    assert_eq!("vND.kidSpiRAtiOn".parse::<Subtype>(), Ok(Subtype::VndKidspiration));
    assert_eq!("vnd.Kinar".parse::<Subtype>(), Ok(Subtype::VndKinar));
    assert_eq!("VNd.KiNAR".parse::<Subtype>(), Ok(Subtype::VndKinar));
    assert_eq!("vnd.koan".parse::<Subtype>(), Ok(Subtype::VndKoan));
    assert_eq!("VND.KOan".parse::<Subtype>(), Ok(Subtype::VndKoan));
    assert_eq!("vnd.kodak-descriptor".parse::<Subtype>(), Ok(Subtype::VndKodakDescriptor));
    assert_eq!("vnd.kOdaK-DeScRiPtOr".parse::<Subtype>(), Ok(Subtype::VndKodakDescriptor));
    assert_eq!("vnd.las".parse::<Subtype>(), Ok(Subtype::VndLas));
    assert_eq!("VNd.Las".parse::<Subtype>(), Ok(Subtype::VndLas));
    assert_eq!("vnd.las.las".parse::<Subtype>(), Ok(Subtype::VndLasLas));
    assert_eq!("VNd.LaS.LAS".parse::<Subtype>(), Ok(Subtype::VndLasLas));
    assert_eq!("vnd.laszip".parse::<Subtype>(), Ok(Subtype::VndLaszip));
    assert_eq!("Vnd.lAszip".parse::<Subtype>(), Ok(Subtype::VndLaszip));
    assert_eq!("vnd.latex-z".parse::<Subtype>(), Ok(Subtype::VndLatexZ));
    assert_eq!("VND.lAtEX-Z".parse::<Subtype>(), Ok(Subtype::VndLatexZ));
    assert_eq!("vnd.leap".parse::<Subtype>(), Ok(Subtype::VndLeap));
    assert_eq!("vnD.LeAp".parse::<Subtype>(), Ok(Subtype::VndLeap));
    assert_eq!("vnd.liberty-request".parse::<Subtype>(), Ok(Subtype::VndLibertyRequest));
    assert_eq!("VNd.LiBErTy-reQUeSt".parse::<Subtype>(), Ok(Subtype::VndLibertyRequest));
    assert_eq!("vnd.llamagraphics.life-balance.desktop".parse::<Subtype>(), Ok(Subtype::VndLlamagraphicsLifeBalanceDesktop));
    assert_eq!("VND.llAMAgrAphiCS.LiFE-BalanCE.DEsktoP".parse::<Subtype>(), Ok(Subtype::VndLlamagraphicsLifeBalanceDesktop));
    assert_eq!("vnd.llamagraphics.life-balance.exchange".parse::<Subtype>(), Ok(Subtype::VndLlamagraphicsLifeBalanceExchange));
    assert_eq!("Vnd.LLAMAgrAphIcs.lIFe-BALANcE.EXChaNge".parse::<Subtype>(), Ok(Subtype::VndLlamagraphicsLifeBalanceExchange));
    assert_eq!("vnd.logipipe.circuit".parse::<Subtype>(), Ok(Subtype::VndLogipipeCircuit));
    assert_eq!("Vnd.lOGIpIPe.CiRcUiT".parse::<Subtype>(), Ok(Subtype::VndLogipipeCircuit));
    assert_eq!("vnd.loom".parse::<Subtype>(), Ok(Subtype::VndLoom));
    assert_eq!("vND.LOOM".parse::<Subtype>(), Ok(Subtype::VndLoom));
    assert_eq!("vnd.lotus-1-2-3".parse::<Subtype>(), Ok(Subtype::VndLotus123));
    assert_eq!("vnd.LOTus-1-2-3".parse::<Subtype>(), Ok(Subtype::VndLotus123));
    assert_eq!("vnd.lotus-approach".parse::<Subtype>(), Ok(Subtype::VndLotusApproach));
    assert_eq!("Vnd.lotuS-ApproaCh".parse::<Subtype>(), Ok(Subtype::VndLotusApproach));
    assert_eq!("vnd.lotus-freelance".parse::<Subtype>(), Ok(Subtype::VndLotusFreelance));
    assert_eq!("VND.lotus-frEeLANCe".parse::<Subtype>(), Ok(Subtype::VndLotusFreelance));
    assert_eq!("vnd.lotus-notes".parse::<Subtype>(), Ok(Subtype::VndLotusNotes));
    assert_eq!("vnd.LOtuS-NOtEs".parse::<Subtype>(), Ok(Subtype::VndLotusNotes));
    assert_eq!("vnd.lotus-organizer".parse::<Subtype>(), Ok(Subtype::VndLotusOrganizer));
    assert_eq!("vND.LoTuS-oRGaNizER".parse::<Subtype>(), Ok(Subtype::VndLotusOrganizer));
    assert_eq!("vnd.lotus-screencam".parse::<Subtype>(), Ok(Subtype::VndLotusScreencam));
    assert_eq!("VND.LOtUs-ScrEeNCAM".parse::<Subtype>(), Ok(Subtype::VndLotusScreencam));
    assert_eq!("vnd.lotus-wordpro".parse::<Subtype>(), Ok(Subtype::VndLotusWordpro));
    assert_eq!("vnd.loTUS-wOrDprO".parse::<Subtype>(), Ok(Subtype::VndLotusWordpro));
    assert_eq!("vnd.lucent.voice".parse::<Subtype>(), Ok(Subtype::VndLucentVoice));
    assert_eq!("vnd.lucENt.VOiCe".parse::<Subtype>(), Ok(Subtype::VndLucentVoice));
    assert_eq!("vnd.macports.portpkg".parse::<Subtype>(), Ok(Subtype::VndMacportsPortpkg));
    assert_eq!("Vnd.maCPORts.pOrtPKg".parse::<Subtype>(), Ok(Subtype::VndMacportsPortpkg));
    assert_eq!("vnd.mapbox-vector-tile".parse::<Subtype>(), Ok(Subtype::VndMapboxVectorTile));
    assert_eq!("VNd.MaPbOx-VeCToR-tIle".parse::<Subtype>(), Ok(Subtype::VndMapboxVectorTile));
    assert_eq!("vnd.marlin.drm.actiontoken".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmActiontoken));
    assert_eq!("vnD.MArliN.DRm.ACTIONTOkeN".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmActiontoken));
    assert_eq!("vnd.marlin.drm.conftoken".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmConftoken));
    assert_eq!("vnd.MArliN.drm.coNFTOkeN".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmConftoken));
    assert_eq!("vnd.marlin.drm.license".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmLicense));
    assert_eq!("VNd.marLiN.dRM.LIcENSE".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmLicense));
    assert_eq!("vnd.marlin.drm.mdcf".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmMdcf));
    assert_eq!("vnD.MArLIN.dRM.mdCf".parse::<Subtype>(), Ok(Subtype::VndMarlinDrmMdcf));
    assert_eq!("vnd.mason".parse::<Subtype>(), Ok(Subtype::VndMason));
    assert_eq!("vND.MasoN".parse::<Subtype>(), Ok(Subtype::VndMason));
    assert_eq!("vnd.maxar.archive.3tz".parse::<Subtype>(), Ok(Subtype::VndMaxarArchive3tz));
    assert_eq!("Vnd.mAXAR.arChIVE.3Tz".parse::<Subtype>(), Ok(Subtype::VndMaxarArchive3tz));
    assert_eq!("vnd.maxmind.maxmind-db".parse::<Subtype>(), Ok(Subtype::VndMaxmindMaxmindDb));
    assert_eq!("VnD.mAXMinD.maxMInD-dB".parse::<Subtype>(), Ok(Subtype::VndMaxmindMaxmindDb));
    assert_eq!("vnd.mcd".parse::<Subtype>(), Ok(Subtype::VndMcd));
    assert_eq!("vnD.Mcd".parse::<Subtype>(), Ok(Subtype::VndMcd));
    assert_eq!("vnd.medcalcdata".parse::<Subtype>(), Ok(Subtype::VndMedcalcdata));
    assert_eq!("vnD.MEdCalcdATa".parse::<Subtype>(), Ok(Subtype::VndMedcalcdata));
    assert_eq!("vnd.mediastation.cdkey".parse::<Subtype>(), Ok(Subtype::VndMediastationCdkey));
    assert_eq!("VND.MEdiAstatIon.CDKey".parse::<Subtype>(), Ok(Subtype::VndMediastationCdkey));
    assert_eq!("vnd.meridian-slingshot".parse::<Subtype>(), Ok(Subtype::VndMeridianSlingshot));
    assert_eq!("VND.MeRiDiAn-SLINGShoT".parse::<Subtype>(), Ok(Subtype::VndMeridianSlingshot));
    assert_eq!("vnd.MFER".parse::<Subtype>(), Ok(Subtype::VndMfer));
    assert_eq!("vND.mfeR".parse::<Subtype>(), Ok(Subtype::VndMfer));
    assert_eq!("vnd.mfmp".parse::<Subtype>(), Ok(Subtype::VndMfmp));
    assert_eq!("Vnd.MFmp".parse::<Subtype>(), Ok(Subtype::VndMfmp));
    assert_eq!("vnd.micro".parse::<Subtype>(), Ok(Subtype::VndMicro));
    assert_eq!("VnD.MiCRO".parse::<Subtype>(), Ok(Subtype::VndMicro));
    assert_eq!("vnd.micrografx.flo".parse::<Subtype>(), Ok(Subtype::VndMicrografxFlo));
    assert_eq!("vnd.mICrOgRafx.fLO".parse::<Subtype>(), Ok(Subtype::VndMicrografxFlo));
    assert_eq!("vnd.micrografx.igx".parse::<Subtype>(), Ok(Subtype::VndMicrografxIgx));
    assert_eq!("Vnd.mIcRoGrAFX.IGx".parse::<Subtype>(), Ok(Subtype::VndMicrografxIgx));
    assert_eq!("vnd.microsoft.icon".parse::<Subtype>(), Ok(Subtype::VndMicrosoftIcon));
    assert_eq!("VnD.MIcROSoft.icON".parse::<Subtype>(), Ok(Subtype::VndMicrosoftIcon));
    assert_eq!("vnd.microsoft.portable-executable".parse::<Subtype>(), Ok(Subtype::VndMicrosoftPortableExecutable));
    assert_eq!("vNd.MIcroSoFt.pORtaBle-exECUTAbLe".parse::<Subtype>(), Ok(Subtype::VndMicrosoftPortableExecutable));
    assert_eq!("vnd.microsoft.windows.thumbnail-cache".parse::<Subtype>(), Ok(Subtype::VndMicrosoftWindowsThumbnailCache));
    assert_eq!("vnd.MicRosOfT.wiNDows.ThumbNAil-cAchE".parse::<Subtype>(), Ok(Subtype::VndMicrosoftWindowsThumbnailCache));
    assert_eq!("vnd.miele".parse::<Subtype>(), Ok(Subtype::VndMiele));
    assert_eq!("VNd.miELe".parse::<Subtype>(), Ok(Subtype::VndMiele));
    assert_eq!("vnd.mif".parse::<Subtype>(), Ok(Subtype::VndMif));
    assert_eq!("vND.mIF".parse::<Subtype>(), Ok(Subtype::VndMif));
    assert_eq!("vnd.minisoft-hp3000-save".parse::<Subtype>(), Ok(Subtype::VndMinisoftHp3000Save));
    assert_eq!("vND.miNisoFT-HP3000-save".parse::<Subtype>(), Ok(Subtype::VndMinisoftHp3000Save));
    assert_eq!("vnd.mitsubishi.misty-guard.trustweb".parse::<Subtype>(), Ok(Subtype::VndMitsubishiMistyGuardTrustweb));
    assert_eq!("vnD.MiTsubISHI.MISTy-GUard.tRUSTwEB".parse::<Subtype>(), Ok(Subtype::VndMitsubishiMistyGuardTrustweb));
    assert_eq!("vnd.mix".parse::<Subtype>(), Ok(Subtype::VndMix));
    assert_eq!("VnD.MIx".parse::<Subtype>(), Ok(Subtype::VndMix));
    assert_eq!("vnd.Mobius.DAF".parse::<Subtype>(), Ok(Subtype::VndMobiusDaf));
    assert_eq!("vnD.MObIuS.DAf".parse::<Subtype>(), Ok(Subtype::VndMobiusDaf));
    assert_eq!("vnd.Mobius.DIS".parse::<Subtype>(), Ok(Subtype::VndMobiusDis));
    assert_eq!("vnD.MoBIUs.dIs".parse::<Subtype>(), Ok(Subtype::VndMobiusDis));
    assert_eq!("vnd.Mobius.MBK".parse::<Subtype>(), Ok(Subtype::VndMobiusMbk));
    assert_eq!("VND.MobiUs.mBK".parse::<Subtype>(), Ok(Subtype::VndMobiusMbk));
    assert_eq!("vnd.Mobius.MQY".parse::<Subtype>(), Ok(Subtype::VndMobiusMqy));
    assert_eq!("vnd.MOBIuS.mQY".parse::<Subtype>(), Ok(Subtype::VndMobiusMqy));
    assert_eq!("vnd.Mobius.MSL".parse::<Subtype>(), Ok(Subtype::VndMobiusMsl));
    assert_eq!("vNd.mobIUS.mSL".parse::<Subtype>(), Ok(Subtype::VndMobiusMsl));
    assert_eq!("vnd.Mobius.PLC".parse::<Subtype>(), Ok(Subtype::VndMobiusPlc));
    assert_eq!("VnD.MObIuS.pLC".parse::<Subtype>(), Ok(Subtype::VndMobiusPlc));
    assert_eq!("vnd.Mobius.TXF".parse::<Subtype>(), Ok(Subtype::VndMobiusTxf));
    assert_eq!("VNd.MobiuS.txF".parse::<Subtype>(), Ok(Subtype::VndMobiusTxf));
    assert_eq!("vnd.moml".parse::<Subtype>(), Ok(Subtype::VndMoml));
    assert_eq!("vNd.mOML".parse::<Subtype>(), Ok(Subtype::VndMoml));
    assert_eq!("vnd.mophun.application".parse::<Subtype>(), Ok(Subtype::VndMophunApplication));
    assert_eq!("VNd.moPHUN.apPlICaTIOn".parse::<Subtype>(), Ok(Subtype::VndMophunApplication));
    assert_eq!("vnd.mophun.certificate".parse::<Subtype>(), Ok(Subtype::VndMophunCertificate));
    assert_eq!("vnD.mOpHuN.CERtifiCAtE".parse::<Subtype>(), Ok(Subtype::VndMophunCertificate));
    assert_eq!("vnd.motorola.flexsuite".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuite));
    assert_eq!("Vnd.mOtOrOLA.FLEXSUiTE".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuite));
    assert_eq!("vnd.motorola.flexsuite.adsi".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteAdsi));
    assert_eq!("vNd.MOTOrola.fleXSUitE.aDSi".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteAdsi));
    assert_eq!("vnd.motorola.flexsuite.fis".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteFis));
    assert_eq!("VNd.MotoroLa.flexSuIte.FIs".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteFis));
    assert_eq!("vnd.motorola.flexsuite.gotap".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteGotap));
    assert_eq!("vnd.mOTORolA.flEXsUItE.GOtap".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteGotap));
    assert_eq!("vnd.motorola.flexsuite.kmr".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteKmr));
    assert_eq!("VNd.mOTOROLA.fLeXsuiTE.kmR".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteKmr));
    assert_eq!("vnd.motorola.flexsuite.ttc".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteTtc));
    assert_eq!("vnd.mOtoRola.flExsUITE.TTc".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteTtc));
    assert_eq!("vnd.motorola.flexsuite.wem".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteWem));
    assert_eq!("VnD.motOroLA.flExSUITe.Wem".parse::<Subtype>(), Ok(Subtype::VndMotorolaFlexsuiteWem));
    assert_eq!("vnd.motorola.iprm".parse::<Subtype>(), Ok(Subtype::VndMotorolaIprm));
    assert_eq!("VND.motorolA.IPrm".parse::<Subtype>(), Ok(Subtype::VndMotorolaIprm));
    assert_eq!("vnd.motorola.reflex".parse::<Subtype>(), Ok(Subtype::VndMotorolaReflex));
    assert_eq!("vnD.MOToROla.rEFLex".parse::<Subtype>(), Ok(Subtype::VndMotorolaReflex));
    assert_eq!("vnd.motorola.video".parse::<Subtype>(), Ok(Subtype::VndMotorolaVideo));
    assert_eq!("VnD.mOTORoLa.VIDeO".parse::<Subtype>(), Ok(Subtype::VndMotorolaVideo));
    assert_eq!("vnd.motorola.videop".parse::<Subtype>(), Ok(Subtype::VndMotorolaVideop));
    assert_eq!("VnD.mOtOrOla.vIdEOp".parse::<Subtype>(), Ok(Subtype::VndMotorolaVideop));
    assert_eq!("vnd.mozilla.apng".parse::<Subtype>(), Ok(Subtype::VndMozillaApng));
    assert_eq!("vND.moZiLla.apng".parse::<Subtype>(), Ok(Subtype::VndMozillaApng));
    assert_eq!("vnd.mozilla.xul".parse::<Subtype>(), Ok(Subtype::VndMozillaXul));
    assert_eq!("vND.MOzIlla.xUL".parse::<Subtype>(), Ok(Subtype::VndMozillaXul));
    assert_eq!("vnd.mpegurl".parse::<Subtype>(), Ok(Subtype::VndMpegurl));
    assert_eq!("vnD.mpeGURL".parse::<Subtype>(), Ok(Subtype::VndMpegurl));
    assert_eq!("vnd.ms-3mfdocument".parse::<Subtype>(), Ok(Subtype::VndMs3mfdocument));
    assert_eq!("Vnd.Ms-3mFdOCUMEnT".parse::<Subtype>(), Ok(Subtype::VndMs3mfdocument));
    assert_eq!("vnd.ms-artgalry".parse::<Subtype>(), Ok(Subtype::VndMsArtgalry));
    assert_eq!("VNd.Ms-aRtgAlRY".parse::<Subtype>(), Ok(Subtype::VndMsArtgalry));
    assert_eq!("vnd.ms-asf".parse::<Subtype>(), Ok(Subtype::VndMsAsf));
    assert_eq!("VNd.MS-aSf".parse::<Subtype>(), Ok(Subtype::VndMsAsf));
    assert_eq!("vnd.ms-cab-compressed".parse::<Subtype>(), Ok(Subtype::VndMsCabCompressed));
    assert_eq!("VNd.Ms-Cab-COMpressEd".parse::<Subtype>(), Ok(Subtype::VndMsCabCompressed));
    assert_eq!("vnd.ms-excel".parse::<Subtype>(), Ok(Subtype::VndMsExcel));
    assert_eq!("vnD.ms-excel".parse::<Subtype>(), Ok(Subtype::VndMsExcel));
    assert_eq!("vnd.ms-excel.addin.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelAddinMacroEnabled12));
    assert_eq!("vnd.mS-eXCEl.aDdIn.mACrOenaBLED.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelAddinMacroEnabled12));
    assert_eq!("vnd.ms-excel.sheet.binary.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelSheetBinaryMacroEnabled12));
    assert_eq!("vNd.ms-exCEL.sHeEt.BinARy.macrOEnaBLed.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelSheetBinaryMacroEnabled12));
    assert_eq!("vnd.ms-excel.sheet.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelSheetMacroEnabled12));
    assert_eq!("vnD.mS-eXcel.SheEt.maCRoENAblEd.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelSheetMacroEnabled12));
    assert_eq!("vnd.ms-excel.template.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelTemplateMacroEnabled12));
    assert_eq!("VnD.mS-EXcel.TemPlaTe.MacroENabLed.12".parse::<Subtype>(), Ok(Subtype::VndMsExcelTemplateMacroEnabled12));
    assert_eq!("vnd.ms-fontobject".parse::<Subtype>(), Ok(Subtype::VndMsFontobject));
    assert_eq!("VND.mS-FOnToBJect".parse::<Subtype>(), Ok(Subtype::VndMsFontobject));
    assert_eq!("vnd.ms-htmlhelp".parse::<Subtype>(), Ok(Subtype::VndMsHtmlhelp));
    assert_eq!("VnD.Ms-HtMLHElP".parse::<Subtype>(), Ok(Subtype::VndMsHtmlhelp));
    assert_eq!("vnd.ms-ims".parse::<Subtype>(), Ok(Subtype::VndMsIms));
    assert_eq!("vND.ms-ims".parse::<Subtype>(), Ok(Subtype::VndMsIms));
    assert_eq!("vnd.ms-lrm".parse::<Subtype>(), Ok(Subtype::VndMsLrm));
    assert_eq!("vND.MS-lRM".parse::<Subtype>(), Ok(Subtype::VndMsLrm));
    assert_eq!("vnd.ms-mediapackage".parse::<Subtype>(), Ok(Subtype::VndMsMediapackage));
    assert_eq!("vND.Ms-MEDIaPAckaGE".parse::<Subtype>(), Ok(Subtype::VndMsMediapackage));
    assert_eq!("vnd.ms-modi".parse::<Subtype>(), Ok(Subtype::VndMsModi));
    assert_eq!("VND.mS-Modi".parse::<Subtype>(), Ok(Subtype::VndMsModi));
    assert_eq!("vnd.ms-office.activeX".parse::<Subtype>(), Ok(Subtype::VndMsOfficeActiveX));
    assert_eq!("VNd.Ms-oFfIcE.aCTIVex".parse::<Subtype>(), Ok(Subtype::VndMsOfficeActiveX));
    assert_eq!("vnd.ms-officetheme".parse::<Subtype>(), Ok(Subtype::VndMsOfficetheme));
    assert_eq!("VnD.mS-ofFicethemE".parse::<Subtype>(), Ok(Subtype::VndMsOfficetheme));
    assert_eq!("vnd.ms-pki.seccat".parse::<Subtype>(), Ok(Subtype::VndMsPkiSeccat));
    assert_eq!("VNd.ms-pkI.secCAt".parse::<Subtype>(), Ok(Subtype::VndMsPkiSeccat));
    assert_eq!("vnd.ms-playready.initiator".parse::<Subtype>(), Ok(Subtype::VndMsPlayreadyInitiator));
    assert_eq!("vnd.MS-plAyREaDy.InITiATor".parse::<Subtype>(), Ok(Subtype::VndMsPlayreadyInitiator));
    assert_eq!("vnd.ms-playready.media.pya".parse::<Subtype>(), Ok(Subtype::VndMsPlayreadyMediaPya));
    assert_eq!("Vnd.mS-plaYREAdY.MEDIa.PYa".parse::<Subtype>(), Ok(Subtype::VndMsPlayreadyMediaPya));
    assert_eq!("vnd.ms-playready.media.pyv".parse::<Subtype>(), Ok(Subtype::VndMsPlayreadyMediaPyv));
    assert_eq!("vnD.MS-playrEadY.MeDiA.PyV".parse::<Subtype>(), Ok(Subtype::VndMsPlayreadyMediaPyv));
    assert_eq!("vnd.ms-powerpoint".parse::<Subtype>(), Ok(Subtype::VndMsPowerpoint));
    assert_eq!("vNd.MS-POwerPOiNt".parse::<Subtype>(), Ok(Subtype::VndMsPowerpoint));
    assert_eq!("vnd.ms-powerpoint.addin.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointAddinMacroEnabled12));
    assert_eq!("Vnd.ms-POwerPOINT.AdDin.macrOEnAbLEd.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointAddinMacroEnabled12));
    assert_eq!("vnd.ms-powerpoint.presentation.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointPresentationMacroEnabled12));
    assert_eq!("VND.mS-pOWerPoiNT.pRESENTaTIOn.mACROEnAblED.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointPresentationMacroEnabled12));
    assert_eq!("vnd.ms-powerpoint.slide.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointSlideMacroEnabled12));
    assert_eq!("vnD.ms-poWErPOiNT.sLIdE.mAcROeNABled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointSlideMacroEnabled12));
    assert_eq!("vnd.ms-powerpoint.slideshow.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointSlideshowMacroEnabled12));
    assert_eq!("vnd.mS-poWerPoiNt.sLiDEshow.mACrOEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointSlideshowMacroEnabled12));
    assert_eq!("vnd.ms-powerpoint.template.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointTemplateMacroEnabled12));
    assert_eq!("vnD.mS-PoWERpoInT.tEmplaTE.mACRoeNaBLED.12".parse::<Subtype>(), Ok(Subtype::VndMsPowerpointTemplateMacroEnabled12));
    assert_eq!("vnd.ms-PrintDeviceCapabilities".parse::<Subtype>(), Ok(Subtype::VndMsPrintDeviceCapabilities));
    assert_eq!("vnD.mS-PrintDevICEcapABIlitiES".parse::<Subtype>(), Ok(Subtype::VndMsPrintDeviceCapabilities));
    assert_eq!("vnd.ms-PrintSchemaTicket".parse::<Subtype>(), Ok(Subtype::VndMsPrintSchemaTicket));
    assert_eq!("Vnd.ms-PriNtsCHEmAtIcket".parse::<Subtype>(), Ok(Subtype::VndMsPrintSchemaTicket));
    assert_eq!("vnd.ms-project".parse::<Subtype>(), Ok(Subtype::VndMsProject));
    assert_eq!("vnd.ms-PROJEcT".parse::<Subtype>(), Ok(Subtype::VndMsProject));
    assert_eq!("vnd.ms-tnef".parse::<Subtype>(), Ok(Subtype::VndMsTnef));
    assert_eq!("VND.mS-TNEf".parse::<Subtype>(), Ok(Subtype::VndMsTnef));
    assert_eq!("vnd.ms-windows.devicepairing".parse::<Subtype>(), Ok(Subtype::VndMsWindowsDevicepairing));
    assert_eq!("vnD.ms-WiNDoWs.DEviCEPAiriNg".parse::<Subtype>(), Ok(Subtype::VndMsWindowsDevicepairing));
    assert_eq!("vnd.ms-windows.nwprinting.oob".parse::<Subtype>(), Ok(Subtype::VndMsWindowsNwprintingOob));
    assert_eq!("Vnd.MS-winDOwS.NWprInTINg.OOB".parse::<Subtype>(), Ok(Subtype::VndMsWindowsNwprintingOob));
    assert_eq!("vnd.ms-windows.printerpairing".parse::<Subtype>(), Ok(Subtype::VndMsWindowsPrinterpairing));
    assert_eq!("Vnd.MS-WindowS.PriNtErPaIriNG".parse::<Subtype>(), Ok(Subtype::VndMsWindowsPrinterpairing));
    assert_eq!("vnd.ms-windows.wsd.oob".parse::<Subtype>(), Ok(Subtype::VndMsWindowsWsdOob));
    assert_eq!("vNd.ms-WInDowS.wSd.oOb".parse::<Subtype>(), Ok(Subtype::VndMsWindowsWsdOob));
    assert_eq!("vnd.ms-wmdrm.lic-chlg-req".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmLicChlgReq));
    assert_eq!("vNd.MS-WMdrm.LiC-CHLG-REQ".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmLicChlgReq));
    assert_eq!("vnd.ms-wmdrm.lic-resp".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmLicResp));
    assert_eq!("VND.ms-wMdRM.LiC-rESP".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmLicResp));
    assert_eq!("vnd.ms-wmdrm.meter-chlg-req".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmMeterChlgReq));
    assert_eq!("VND.ms-WmdrM.mEtER-cHLG-Req".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmMeterChlgReq));
    assert_eq!("vnd.ms-wmdrm.meter-resp".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmMeterResp));
    assert_eq!("vNd.Ms-WMdRm.meteR-REsP".parse::<Subtype>(), Ok(Subtype::VndMsWmdrmMeterResp));
    assert_eq!("vnd.ms-word.document.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsWordDocumentMacroEnabled12));
    assert_eq!("vnd.ms-word.doCuMeNt.macROENABled.12".parse::<Subtype>(), Ok(Subtype::VndMsWordDocumentMacroEnabled12));
    assert_eq!("vnd.ms-word.template.macroEnabled.12".parse::<Subtype>(), Ok(Subtype::VndMsWordTemplateMacroEnabled12));
    assert_eq!("Vnd.Ms-WORd.templatE.MacroENabLED.12".parse::<Subtype>(), Ok(Subtype::VndMsWordTemplateMacroEnabled12));
    assert_eq!("vnd.ms-works".parse::<Subtype>(), Ok(Subtype::VndMsWorks));
    assert_eq!("vnd.MS-WorKs".parse::<Subtype>(), Ok(Subtype::VndMsWorks));
    assert_eq!("vnd.ms-wpl".parse::<Subtype>(), Ok(Subtype::VndMsWpl));
    assert_eq!("vNd.MS-WPL".parse::<Subtype>(), Ok(Subtype::VndMsWpl));
    assert_eq!("vnd.ms-xpsdocument".parse::<Subtype>(), Ok(Subtype::VndMsXpsdocument));
    assert_eq!("VNd.ms-XPSDocumeNt".parse::<Subtype>(), Ok(Subtype::VndMsXpsdocument));
    assert_eq!("vnd.msa-disk-image".parse::<Subtype>(), Ok(Subtype::VndMsaDiskImage));
    assert_eq!("VNd.mSA-dIsk-imagE".parse::<Subtype>(), Ok(Subtype::VndMsaDiskImage));
    assert_eq!("vnd.mseq".parse::<Subtype>(), Ok(Subtype::VndMseq));
    assert_eq!("Vnd.mSEQ".parse::<Subtype>(), Ok(Subtype::VndMseq));
    assert_eq!("vnd.msign".parse::<Subtype>(), Ok(Subtype::VndMsign));
    assert_eq!("VNd.msIgn".parse::<Subtype>(), Ok(Subtype::VndMsign));
    assert_eq!("vnd.mts".parse::<Subtype>(), Ok(Subtype::VndMts));
    assert_eq!("VNd.mTs".parse::<Subtype>(), Ok(Subtype::VndMts));
    assert_eq!("vnd.multiad.creator".parse::<Subtype>(), Ok(Subtype::VndMultiadCreator));
    assert_eq!("vnd.MuLtiad.crEator".parse::<Subtype>(), Ok(Subtype::VndMultiadCreator));
    assert_eq!("vnd.multiad.creator.cif".parse::<Subtype>(), Ok(Subtype::VndMultiadCreatorCif));
    assert_eq!("VNd.MUlTIAd.cREAToR.cIF".parse::<Subtype>(), Ok(Subtype::VndMultiadCreatorCif));
    assert_eq!("vnd.music-niff".parse::<Subtype>(), Ok(Subtype::VndMusicNiff));
    assert_eq!("VnD.muSIc-niFF".parse::<Subtype>(), Ok(Subtype::VndMusicNiff));
    assert_eq!("vnd.musician".parse::<Subtype>(), Ok(Subtype::VndMusician));
    assert_eq!("vnd.MusICIan".parse::<Subtype>(), Ok(Subtype::VndMusician));
    assert_eq!("vnd.muvee.style".parse::<Subtype>(), Ok(Subtype::VndMuveeStyle));
    assert_eq!("VND.mUVee.StYLE".parse::<Subtype>(), Ok(Subtype::VndMuveeStyle));
    assert_eq!("vnd.mynfc".parse::<Subtype>(), Ok(Subtype::VndMynfc));
    assert_eq!("VND.mYNfc".parse::<Subtype>(), Ok(Subtype::VndMynfc));
    assert_eq!("vnd.nacamar.ybrid".parse::<Subtype>(), Ok(Subtype::VndNacamarYbrid));
    assert_eq!("vND.NacAMar.YBriD".parse::<Subtype>(), Ok(Subtype::VndNacamarYbrid));
    assert_eq!("vnd.ncd.control".parse::<Subtype>(), Ok(Subtype::VndNcdControl));
    assert_eq!("vND.ncD.cONTRoL".parse::<Subtype>(), Ok(Subtype::VndNcdControl));
    assert_eq!("vnd.ncd.reference".parse::<Subtype>(), Ok(Subtype::VndNcdReference));
    assert_eq!("vNd.NCD.reFerENCE".parse::<Subtype>(), Ok(Subtype::VndNcdReference));
    assert_eq!("vnd.nearst.inv".parse::<Subtype>(), Ok(Subtype::VndNearstInv));
    assert_eq!("vND.neArSt.inv".parse::<Subtype>(), Ok(Subtype::VndNearstInv));
    assert_eq!("vnd.nebumind.line".parse::<Subtype>(), Ok(Subtype::VndNebumindLine));
    assert_eq!("vNd.nebuMInd.LinE".parse::<Subtype>(), Ok(Subtype::VndNebumindLine));
    assert_eq!("vnd.nervana".parse::<Subtype>(), Ok(Subtype::VndNervana));
    assert_eq!("vnd.nERvaNA".parse::<Subtype>(), Ok(Subtype::VndNervana));
    assert_eq!("vnd.net2phone.commcenter.command".parse::<Subtype>(), Ok(Subtype::VndNet2phoneCommcenterCommand));
    assert_eq!("VND.NeT2phONe.cOmMcenteR.cOmMAnd".parse::<Subtype>(), Ok(Subtype::VndNet2phoneCommcenterCommand));
    assert_eq!("vnd.net-fpx".parse::<Subtype>(), Ok(Subtype::VndNetFpx));
    assert_eq!("VND.nET-FpX".parse::<Subtype>(), Ok(Subtype::VndNetFpx));
    assert_eq!("vnd.netfpx".parse::<Subtype>(), Ok(Subtype::VndNetfpx));
    assert_eq!("VND.netFPx".parse::<Subtype>(), Ok(Subtype::VndNetfpx));
    assert_eq!("vnd.neurolanguage.nlu".parse::<Subtype>(), Ok(Subtype::VndNeurolanguageNlu));
    assert_eq!("VNd.nEuRoLaNGuAGE.NlU".parse::<Subtype>(), Ok(Subtype::VndNeurolanguageNlu));
    assert_eq!("vnd.nimn".parse::<Subtype>(), Ok(Subtype::VndNimn));
    assert_eq!("VND.Nimn".parse::<Subtype>(), Ok(Subtype::VndNimn));
    assert_eq!("vnd.nintendo.nitro.rom".parse::<Subtype>(), Ok(Subtype::VndNintendoNitroRom));
    assert_eq!("VNd.nintEnDO.niTRo.ROM".parse::<Subtype>(), Ok(Subtype::VndNintendoNitroRom));
    assert_eq!("vnd.nintendo.snes.rom".parse::<Subtype>(), Ok(Subtype::VndNintendoSnesRom));
    assert_eq!("VNd.ninTeNdo.sNeS.rom".parse::<Subtype>(), Ok(Subtype::VndNintendoSnesRom));
    assert_eq!("vnd.nitf".parse::<Subtype>(), Ok(Subtype::VndNitf));
    assert_eq!("vNd.niTf".parse::<Subtype>(), Ok(Subtype::VndNitf));
    assert_eq!("vnd.noblenet-directory".parse::<Subtype>(), Ok(Subtype::VndNoblenetDirectory));
    assert_eq!("VND.NoblEnEt-dIreCtORY".parse::<Subtype>(), Ok(Subtype::VndNoblenetDirectory));
    assert_eq!("vnd.noblenet-sealer".parse::<Subtype>(), Ok(Subtype::VndNoblenetSealer));
    assert_eq!("Vnd.noBLEnET-seAlER".parse::<Subtype>(), Ok(Subtype::VndNoblenetSealer));
    assert_eq!("vnd.noblenet-web".parse::<Subtype>(), Ok(Subtype::VndNoblenetWeb));
    assert_eq!("vNd.nobLenET-WEB".parse::<Subtype>(), Ok(Subtype::VndNoblenetWeb));
    assert_eq!("vnd.nokia.catalogs".parse::<Subtype>(), Ok(Subtype::VndNokiaCatalogs));
    assert_eq!("Vnd.nOKia.CAtaLOgS".parse::<Subtype>(), Ok(Subtype::VndNokiaCatalogs));
    assert_eq!("vnd.nokia.conml".parse::<Subtype>(), Ok(Subtype::VndNokiaConml));
    assert_eq!("vnD.noKiA.conmL".parse::<Subtype>(), Ok(Subtype::VndNokiaConml));
    assert_eq!("vnd.nokia.iSDS-radio-presets".parse::<Subtype>(), Ok(Subtype::VndNokiaISdsRadioPresets));
    assert_eq!("vnd.nOkiA.iSDS-radIO-PREsetS".parse::<Subtype>(), Ok(Subtype::VndNokiaISdsRadioPresets));
    assert_eq!("vnd.nokia.interleaved-multimedia".parse::<Subtype>(), Ok(Subtype::VndNokiaInterleavedMultimedia));
    assert_eq!("vnD.nOKIa.iNTERLEAVED-MUlTimEdIa".parse::<Subtype>(), Ok(Subtype::VndNokiaInterleavedMultimedia));
    assert_eq!("vnd.nokia.iptv.config".parse::<Subtype>(), Ok(Subtype::VndNokiaIptvConfig));
    assert_eq!("vNd.nOkIA.IPtv.coNFIG".parse::<Subtype>(), Ok(Subtype::VndNokiaIptvConfig));
    assert_eq!("vnd.nokia.landmark".parse::<Subtype>(), Ok(Subtype::VndNokiaLandmark));
    assert_eq!("VND.NOKiA.landMaRK".parse::<Subtype>(), Ok(Subtype::VndNokiaLandmark));
    assert_eq!("vnd.nokia.landmarkcollection".parse::<Subtype>(), Ok(Subtype::VndNokiaLandmarkcollection));
    assert_eq!("vNd.NOkiA.landMArKcOLlecTION".parse::<Subtype>(), Ok(Subtype::VndNokiaLandmarkcollection));
    assert_eq!("vnd.nokia.mobile-xmf".parse::<Subtype>(), Ok(Subtype::VndNokiaMobileXmf));
    assert_eq!("vnD.Nokia.MOBiLE-xMF".parse::<Subtype>(), Ok(Subtype::VndNokiaMobileXmf));
    assert_eq!("vnd.nokia.mp4vr".parse::<Subtype>(), Ok(Subtype::VndNokiaMp4vr));
    assert_eq!("Vnd.nOKia.MP4vr".parse::<Subtype>(), Ok(Subtype::VndNokiaMp4vr));
    assert_eq!("vnd.nokia.n-gage.ac".parse::<Subtype>(), Ok(Subtype::VndNokiaNGageAc));
    assert_eq!("vnd.noKiA.n-gaGE.Ac".parse::<Subtype>(), Ok(Subtype::VndNokiaNGageAc));
    assert_eq!("vnd.nokia.n-gage.data".parse::<Subtype>(), Ok(Subtype::VndNokiaNGageData));
    assert_eq!("vND.nokIA.N-GAGe.dATa".parse::<Subtype>(), Ok(Subtype::VndNokiaNGageData));
    assert_eq!("vnd.nokia.ncd".parse::<Subtype>(), Ok(Subtype::VndNokiaNcd));
    assert_eq!("vnD.nOKIA.ncd".parse::<Subtype>(), Ok(Subtype::VndNokiaNcd));
    assert_eq!("vnd.nokia.pcd".parse::<Subtype>(), Ok(Subtype::VndNokiaPcd));
    assert_eq!("vNd.noKIa.pcD".parse::<Subtype>(), Ok(Subtype::VndNokiaPcd));
    assert_eq!("vnd.nokia.radio-preset".parse::<Subtype>(), Ok(Subtype::VndNokiaRadioPreset));
    assert_eq!("VND.nokiA.RADio-pReset".parse::<Subtype>(), Ok(Subtype::VndNokiaRadioPreset));
    assert_eq!("vnd.nokia.radio-presets".parse::<Subtype>(), Ok(Subtype::VndNokiaRadioPresets));
    assert_eq!("vND.noKia.radio-prESets".parse::<Subtype>(), Ok(Subtype::VndNokiaRadioPresets));
    assert_eq!("vnd.nokia.videovoip".parse::<Subtype>(), Ok(Subtype::VndNokiaVideovoip));
    assert_eq!("Vnd.noKiA.vIdeOvOiP".parse::<Subtype>(), Ok(Subtype::VndNokiaVideovoip));
    assert_eq!("vnd.nortel.vbk".parse::<Subtype>(), Ok(Subtype::VndNortelVbk));
    assert_eq!("VNd.nOrtel.vbK".parse::<Subtype>(), Ok(Subtype::VndNortelVbk));
    assert_eq!("vnd.novadigm.EDM".parse::<Subtype>(), Ok(Subtype::VndNovadigmEdm));
    assert_eq!("vnD.NovAdIgm.eDm".parse::<Subtype>(), Ok(Subtype::VndNovadigmEdm));
    assert_eq!("vnd.novadigm.EDX".parse::<Subtype>(), Ok(Subtype::VndNovadigmEdx));
    assert_eq!("vNd.NovADiGm.Edx".parse::<Subtype>(), Ok(Subtype::VndNovadigmEdx));
    assert_eq!("vnd.novadigm.EXT".parse::<Subtype>(), Ok(Subtype::VndNovadigmExt));
    assert_eq!("vnD.NovADIgm.EXT".parse::<Subtype>(), Ok(Subtype::VndNovadigmExt));
    assert_eq!("vnd.ntt-local.content-share".parse::<Subtype>(), Ok(Subtype::VndNttLocalContentShare));
    assert_eq!("Vnd.Ntt-Local.COnTENt-shARe".parse::<Subtype>(), Ok(Subtype::VndNttLocalContentShare));
    assert_eq!("vnd.ntt-local.file-transfer".parse::<Subtype>(), Ok(Subtype::VndNttLocalFileTransfer));
    assert_eq!("VND.NtT-lOcAL.File-traNSfEr".parse::<Subtype>(), Ok(Subtype::VndNttLocalFileTransfer));
    assert_eq!("vnd.ntt-local.ogw_remote-access".parse::<Subtype>(), Ok(Subtype::VndNttLocalOgwRemoteAccess));
    assert_eq!("vnD.nTt-LOcAl.OGW_REMoTe-ACCeSS".parse::<Subtype>(), Ok(Subtype::VndNttLocalOgwRemoteAccess));
    assert_eq!("vnd.ntt-local.sip-ta_remote".parse::<Subtype>(), Ok(Subtype::VndNttLocalSipTaRemote));
    assert_eq!("VND.NTT-lOcal.sIp-tA_rEMOte".parse::<Subtype>(), Ok(Subtype::VndNttLocalSipTaRemote));
    assert_eq!("vnd.ntt-local.sip-ta_tcp_stream".parse::<Subtype>(), Ok(Subtype::VndNttLocalSipTaTcpStream));
    assert_eq!("vnd.NtT-LocAl.SiP-tA_tCP_stReaM".parse::<Subtype>(), Ok(Subtype::VndNttLocalSipTaTcpStream));
    assert_eq!("vnd.nuera.ecelp4800".parse::<Subtype>(), Ok(Subtype::VndNueraEcelp4800));
    assert_eq!("vnd.nUerA.ecElp4800".parse::<Subtype>(), Ok(Subtype::VndNueraEcelp4800));
    assert_eq!("vnd.nuera.ecelp7470".parse::<Subtype>(), Ok(Subtype::VndNueraEcelp7470));
    assert_eq!("VnD.NUERa.EcElp7470".parse::<Subtype>(), Ok(Subtype::VndNueraEcelp7470));
    assert_eq!("vnd.nuera.ecelp9600".parse::<Subtype>(), Ok(Subtype::VndNueraEcelp9600));
    assert_eq!("VNd.NUeRa.eceLp9600".parse::<Subtype>(), Ok(Subtype::VndNueraEcelp9600));
    assert_eq!("vnd.oasis.opendocument.chart".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentChart));
    assert_eq!("Vnd.oAsiS.OpENDocUmenT.CHaRt".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentChart));
    assert_eq!("vnd.oasis.opendocument.chart-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentChartTemplate));
    assert_eq!("vND.OASIs.openDOCuMENt.CHARt-tempLatE".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentChartTemplate));
    assert_eq!("vnd.oasis.opendocument.database".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentDatabase));
    assert_eq!("vND.OASIs.oPENdocUMent.DATABAse".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentDatabase));
    assert_eq!("vnd.oasis.opendocument.formula".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentFormula));
    assert_eq!("vnD.OaSiS.OPendoCUMEnT.FOrMuLA".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentFormula));
    assert_eq!("vnd.oasis.opendocument.formula-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentFormulaTemplate));
    assert_eq!("VND.oAsIs.oPENDOCUmenT.FormULa-teMplATe".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentFormulaTemplate));
    assert_eq!("vnd.oasis.opendocument.graphics".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentGraphics));
    assert_eq!("VnD.OASiS.opENDOcuMenT.gRaPhics".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentGraphics));
    assert_eq!("vnd.oasis.opendocument.graphics-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentGraphicsTemplate));
    assert_eq!("vnd.oasis.oPEnDoCUmENT.GRaphIcs-TemPlAtE".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentGraphicsTemplate));
    assert_eq!("vnd.oasis.opendocument.image".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentImage));
    assert_eq!("vNd.oasIs.OPENdocUMEnt.ImAge".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentImage));
    assert_eq!("vnd.oasis.opendocument.image-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentImageTemplate));
    assert_eq!("vnd.oasis.oPENDOCUMEnT.ImAGE-TemPlATe".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentImageTemplate));
    assert_eq!("vnd.oasis.opendocument.presentation".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentPresentation));
    assert_eq!("Vnd.oAsIs.OPeNDOCUMent.PrESenTaTioN".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentPresentation));
    assert_eq!("vnd.oasis.opendocument.presentation-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentPresentationTemplate));
    assert_eq!("vND.OASis.OpENDoCuMENt.prESentATION-tEMPlATe".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentPresentationTemplate));
    assert_eq!("vnd.oasis.opendocument.spreadsheet".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentSpreadsheet));
    assert_eq!("VND.OasiS.opendOCuMEnT.sPREADshEEt".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentSpreadsheet));
    assert_eq!("vnd.oasis.opendocument.spreadsheet-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentSpreadsheetTemplate));
    assert_eq!("VnD.oaSIS.OPenDoCUmENt.SPreADshEet-TEMpLate".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentSpreadsheetTemplate));
    assert_eq!("vnd.oasis.opendocument.text".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentText));
    assert_eq!("vND.oASIs.oPEnDOcUMENt.TEXT".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentText));
    assert_eq!("vnd.oasis.opendocument.text-master".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentTextMaster));
    assert_eq!("VnD.oasiS.opendocuMenT.tExT-MAsTEr".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentTextMaster));
    assert_eq!("vnd.oasis.opendocument.text-template".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentTextTemplate));
    assert_eq!("VNd.OasiS.OpeNdOCUMeNt.texT-TeMPlate".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentTextTemplate));
    assert_eq!("vnd.oasis.opendocument.text-web".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentTextWeb));
    assert_eq!("Vnd.oAsis.opendoCUmENt.TEXT-wEB".parse::<Subtype>(), Ok(Subtype::VndOasisOpendocumentTextWeb));
    assert_eq!("vnd.objectvideo".parse::<Subtype>(), Ok(Subtype::VndObjectvideo));
    assert_eq!("vnd.oBJECTVIDEo".parse::<Subtype>(), Ok(Subtype::VndObjectvideo));
    assert_eq!("vnd.obn".parse::<Subtype>(), Ok(Subtype::VndObn));
    assert_eq!("VNd.obN".parse::<Subtype>(), Ok(Subtype::VndObn));
    assert_eq!("vnd.ocf".parse::<Subtype>(), Ok(Subtype::VndOcf));
    assert_eq!("vnd.oCF".parse::<Subtype>(), Ok(Subtype::VndOcf));
    assert_eq!("vnd.oci.image.manifest.v1".parse::<Subtype>(), Ok(Subtype::VndOciImageManifestV1));
    assert_eq!("Vnd.OcI.IMAGE.mAnifesT.v1".parse::<Subtype>(), Ok(Subtype::VndOciImageManifestV1));
    assert_eq!("vnd.octel.sbc".parse::<Subtype>(), Ok(Subtype::VndOctelSbc));
    assert_eq!("VNd.OcTeL.SBc".parse::<Subtype>(), Ok(Subtype::VndOctelSbc));
    assert_eq!("vnd.oftn.l10n".parse::<Subtype>(), Ok(Subtype::VndOftnL10n));
    assert_eq!("VnD.OFtn.l10n".parse::<Subtype>(), Ok(Subtype::VndOftnL10n));
    assert_eq!("vnd.oipf.contentaccessdownload".parse::<Subtype>(), Ok(Subtype::VndOipfContentaccessdownload));
    assert_eq!("vnD.OiPF.CONteNTacCEssDOWnLoad".parse::<Subtype>(), Ok(Subtype::VndOipfContentaccessdownload));
    assert_eq!("vnd.oipf.contentaccessstreaming".parse::<Subtype>(), Ok(Subtype::VndOipfContentaccessstreaming));
    assert_eq!("vnD.oipF.CONTenTacceSsstrEAMInG".parse::<Subtype>(), Ok(Subtype::VndOipfContentaccessstreaming));
    assert_eq!("vnd.oipf.cspg-hexbinary".parse::<Subtype>(), Ok(Subtype::VndOipfCspgHexbinary));
    assert_eq!("VnD.oIPF.cspG-hExBInarY".parse::<Subtype>(), Ok(Subtype::VndOipfCspgHexbinary));
    assert_eq!("vnd.oipf.dae.svg".parse::<Subtype>(), Ok(Subtype::VndOipfDaeSvg));
    assert_eq!("vnd.OIpF.DAe.SVg".parse::<Subtype>(), Ok(Subtype::VndOipfDaeSvg));
    assert_eq!("vnd.oipf.dae.xhtml".parse::<Subtype>(), Ok(Subtype::VndOipfDaeXhtml));
    assert_eq!("VND.oiPf.DAE.XHTml".parse::<Subtype>(), Ok(Subtype::VndOipfDaeXhtml));
    assert_eq!("vnd.oipf.mippvcontrolmessage".parse::<Subtype>(), Ok(Subtype::VndOipfMippvcontrolmessage));
    assert_eq!("VnD.oIpf.MiPPvCoNTroLmeSSAgE".parse::<Subtype>(), Ok(Subtype::VndOipfMippvcontrolmessage));
    assert_eq!("vnd.oipf.pae.gem".parse::<Subtype>(), Ok(Subtype::VndOipfPaeGem));
    assert_eq!("vnD.OiPF.pAe.GEm".parse::<Subtype>(), Ok(Subtype::VndOipfPaeGem));
    assert_eq!("vnd.oipf.spdiscovery".parse::<Subtype>(), Ok(Subtype::VndOipfSpdiscovery));
    assert_eq!("Vnd.OIPf.SPdISCOVERy".parse::<Subtype>(), Ok(Subtype::VndOipfSpdiscovery));
    assert_eq!("vnd.oipf.spdlist".parse::<Subtype>(), Ok(Subtype::VndOipfSpdlist));
    assert_eq!("VnD.oIpF.spDLISt".parse::<Subtype>(), Ok(Subtype::VndOipfSpdlist));
    assert_eq!("vnd.oipf.ueprofile".parse::<Subtype>(), Ok(Subtype::VndOipfUeprofile));
    assert_eq!("vnD.Oipf.UepROfIle".parse::<Subtype>(), Ok(Subtype::VndOipfUeprofile));
    assert_eq!("vnd.oipf.userprofile".parse::<Subtype>(), Ok(Subtype::VndOipfUserprofile));
    assert_eq!("VNd.OIpF.UsERprofILe".parse::<Subtype>(), Ok(Subtype::VndOipfUserprofile));
    assert_eq!("vnd.olpc-sugar".parse::<Subtype>(), Ok(Subtype::VndOlpcSugar));
    assert_eq!("Vnd.olpc-SUgAR".parse::<Subtype>(), Ok(Subtype::VndOlpcSugar));
    assert_eq!("vnd.oma.bcast.associated-procedure-parameter".parse::<Subtype>(), Ok(Subtype::VndOmaBcastAssociatedProcedureParameter));
    assert_eq!("VND.oma.BCast.assOcIaTed-proCeDuRE-PArAmetEr".parse::<Subtype>(), Ok(Subtype::VndOmaBcastAssociatedProcedureParameter));
    assert_eq!("vnd.oma.bcast.drm-trigger".parse::<Subtype>(), Ok(Subtype::VndOmaBcastDrmTrigger));
    assert_eq!("Vnd.oMA.BCASt.drm-tRigGeR".parse::<Subtype>(), Ok(Subtype::VndOmaBcastDrmTrigger));
    assert_eq!("vnd.oma.bcast.imd".parse::<Subtype>(), Ok(Subtype::VndOmaBcastImd));
    assert_eq!("Vnd.Oma.BcASt.imd".parse::<Subtype>(), Ok(Subtype::VndOmaBcastImd));
    assert_eq!("vnd.oma.bcast.ltkm".parse::<Subtype>(), Ok(Subtype::VndOmaBcastLtkm));
    assert_eq!("VnD.OMA.bCaST.ltKM".parse::<Subtype>(), Ok(Subtype::VndOmaBcastLtkm));
    assert_eq!("vnd.oma.bcast.notification".parse::<Subtype>(), Ok(Subtype::VndOmaBcastNotification));
    assert_eq!("vnD.oMa.bCAst.NOtIFiCAtIOn".parse::<Subtype>(), Ok(Subtype::VndOmaBcastNotification));
    assert_eq!("vnd.oma.bcast.provisioningtrigger".parse::<Subtype>(), Ok(Subtype::VndOmaBcastProvisioningtrigger));
    assert_eq!("VND.Oma.BCasT.PRoVISIONIngTRIgger".parse::<Subtype>(), Ok(Subtype::VndOmaBcastProvisioningtrigger));
    assert_eq!("vnd.oma.bcast.sgboot".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSgboot));
    assert_eq!("VNd.OMA.bCAst.SGBoOT".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSgboot));
    assert_eq!("vnd.oma.bcast.sgdd".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSgdd));
    assert_eq!("vND.Oma.BcASt.SgdD".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSgdd));
    assert_eq!("vnd.oma.bcast.sgdu".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSgdu));
    assert_eq!("VND.oMA.bcAsT.SgDU".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSgdu));
    assert_eq!("vnd.oma.bcast.simple-symbol-container".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSimpleSymbolContainer));
    assert_eq!("vnd.oma.BCAsT.SiMple-syMBoL-CoNtaiNER".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSimpleSymbolContainer));
    assert_eq!("vnd.oma.bcast.smartcard-trigger".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSmartcardTrigger));
    assert_eq!("VNd.oma.bcASt.SMartCARD-trIGgER".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSmartcardTrigger));
    assert_eq!("vnd.oma.bcast.sprov".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSprov));
    assert_eq!("vNd.omA.bCAst.SPrOv".parse::<Subtype>(), Ok(Subtype::VndOmaBcastSprov));
    assert_eq!("vnd.oma.bcast.stkm".parse::<Subtype>(), Ok(Subtype::VndOmaBcastStkm));
    assert_eq!("vnD.OmA.bCAsT.sTKM".parse::<Subtype>(), Ok(Subtype::VndOmaBcastStkm));
    assert_eq!("vnd.oma.cab-address-book".parse::<Subtype>(), Ok(Subtype::VndOmaCabAddressBook));
    assert_eq!("vnd.oMa.CaB-aDdREss-boOK".parse::<Subtype>(), Ok(Subtype::VndOmaCabAddressBook));
    assert_eq!("vnd.oma.cab-feature-handler".parse::<Subtype>(), Ok(Subtype::VndOmaCabFeatureHandler));
    assert_eq!("VNd.oMa.cAb-fEAtUre-HanDLEr".parse::<Subtype>(), Ok(Subtype::VndOmaCabFeatureHandler));
    assert_eq!("vnd.oma.cab-pcc".parse::<Subtype>(), Ok(Subtype::VndOmaCabPcc));
    assert_eq!("VnD.OMa.cAB-pCc".parse::<Subtype>(), Ok(Subtype::VndOmaCabPcc));
    assert_eq!("vnd.oma.cab-subs-invite".parse::<Subtype>(), Ok(Subtype::VndOmaCabSubsInvite));
    assert_eq!("vNd.OMA.CAb-SubS-iNvIte".parse::<Subtype>(), Ok(Subtype::VndOmaCabSubsInvite));
    assert_eq!("vnd.oma.cab-user-prefs".parse::<Subtype>(), Ok(Subtype::VndOmaCabUserPrefs));
    assert_eq!("VND.oMA.cAB-user-prEfS".parse::<Subtype>(), Ok(Subtype::VndOmaCabUserPrefs));
    assert_eq!("vnd.oma.dcd".parse::<Subtype>(), Ok(Subtype::VndOmaDcd));
    assert_eq!("vnD.OMA.dcD".parse::<Subtype>(), Ok(Subtype::VndOmaDcd));
    assert_eq!("vnd.oma.dcdc".parse::<Subtype>(), Ok(Subtype::VndOmaDcdc));
    assert_eq!("VnD.oMA.DCDc".parse::<Subtype>(), Ok(Subtype::VndOmaDcdc));
    assert_eq!("vnd.oma.dd2".parse::<Subtype>(), Ok(Subtype::VndOmaDd2));
    assert_eq!("Vnd.OMA.dD2".parse::<Subtype>(), Ok(Subtype::VndOmaDd2));
    assert_eq!("vnd.oma.drm.risd".parse::<Subtype>(), Ok(Subtype::VndOmaDrmRisd));
    assert_eq!("vnd.OMa.DrM.rIsd".parse::<Subtype>(), Ok(Subtype::VndOmaDrmRisd));
    assert_eq!("vnd.oma.group-usage-list".parse::<Subtype>(), Ok(Subtype::VndOmaGroupUsageList));
    assert_eq!("vnd.Oma.grOUp-uSAge-lisT".parse::<Subtype>(), Ok(Subtype::VndOmaGroupUsageList));
    assert_eq!("vnd.oma.lwm2m".parse::<Subtype>(), Ok(Subtype::VndOmaLwm2m));
    assert_eq!("vND.OMA.lwm2M".parse::<Subtype>(), Ok(Subtype::VndOmaLwm2m));
    assert_eq!("vnd.oma.pal".parse::<Subtype>(), Ok(Subtype::VndOmaPal));
    assert_eq!("VnD.oMa.Pal".parse::<Subtype>(), Ok(Subtype::VndOmaPal));
    assert_eq!("vnd.oma.poc.detailed-progress-report".parse::<Subtype>(), Ok(Subtype::VndOmaPocDetailedProgressReport));
    assert_eq!("vnd.Oma.poC.detAIlEd-pRoGReSs-RePORT".parse::<Subtype>(), Ok(Subtype::VndOmaPocDetailedProgressReport));
    assert_eq!("vnd.oma.poc.final-report".parse::<Subtype>(), Ok(Subtype::VndOmaPocFinalReport));
    assert_eq!("vNd.OMa.poc.FINAL-rePORT".parse::<Subtype>(), Ok(Subtype::VndOmaPocFinalReport));
    assert_eq!("vnd.oma.poc.groups".parse::<Subtype>(), Ok(Subtype::VndOmaPocGroups));
    assert_eq!("vnD.OMa.pOc.groups".parse::<Subtype>(), Ok(Subtype::VndOmaPocGroups));
    assert_eq!("vnd.oma.poc.invocation-descriptor".parse::<Subtype>(), Ok(Subtype::VndOmaPocInvocationDescriptor));
    assert_eq!("vNd.OMA.pOc.inVOCATIOn-DescRIpToR".parse::<Subtype>(), Ok(Subtype::VndOmaPocInvocationDescriptor));
    assert_eq!("vnd.oma.poc.optimized-progress-report".parse::<Subtype>(), Ok(Subtype::VndOmaPocOptimizedProgressReport));
    assert_eq!("vND.oMa.pOc.OpTIMIzEd-prOgRess-RepOrt".parse::<Subtype>(), Ok(Subtype::VndOmaPocOptimizedProgressReport));
    assert_eq!("vnd.oma.push".parse::<Subtype>(), Ok(Subtype::VndOmaPush));
    assert_eq!("vnD.oMA.PUSh".parse::<Subtype>(), Ok(Subtype::VndOmaPush));
    assert_eq!("vnd.oma.scidm.messages".parse::<Subtype>(), Ok(Subtype::VndOmaScidmMessages));
    assert_eq!("vnd.OmA.sciDM.MeSsaGeS".parse::<Subtype>(), Ok(Subtype::VndOmaScidmMessages));
    assert_eq!("vnd.oma-scws-config".parse::<Subtype>(), Ok(Subtype::VndOmaScwsConfig));
    assert_eq!("vND.OmA-scws-CoNFIG".parse::<Subtype>(), Ok(Subtype::VndOmaScwsConfig));
    assert_eq!("vnd.oma-scws-http-request".parse::<Subtype>(), Ok(Subtype::VndOmaScwsHttpRequest));
    assert_eq!("VnD.Oma-scWs-httP-REqueST".parse::<Subtype>(), Ok(Subtype::VndOmaScwsHttpRequest));
    assert_eq!("vnd.oma-scws-http-response".parse::<Subtype>(), Ok(Subtype::VndOmaScwsHttpResponse));
    assert_eq!("vND.oMa-scws-hTTP-rEspOnSe".parse::<Subtype>(), Ok(Subtype::VndOmaScwsHttpResponse));
    assert_eq!("vnd.oma.xcap-directory".parse::<Subtype>(), Ok(Subtype::VndOmaXcapDirectory));
    assert_eq!("vnd.OMa.xcAp-dIrEcTOrY".parse::<Subtype>(), Ok(Subtype::VndOmaXcapDirectory));
    assert_eq!("vnd.omads-email".parse::<Subtype>(), Ok(Subtype::VndOmadsEmail));
    assert_eq!("vnD.oMAdS-EmaIl".parse::<Subtype>(), Ok(Subtype::VndOmadsEmail));
    assert_eq!("vnd.omads-file".parse::<Subtype>(), Ok(Subtype::VndOmadsFile));
    assert_eq!("Vnd.omaDs-FIle".parse::<Subtype>(), Ok(Subtype::VndOmadsFile));
    assert_eq!("vnd.omads-folder".parse::<Subtype>(), Ok(Subtype::VndOmadsFolder));
    assert_eq!("VnD.omAds-FoLder".parse::<Subtype>(), Ok(Subtype::VndOmadsFolder));
    assert_eq!("vnd.omaloc-supl-init".parse::<Subtype>(), Ok(Subtype::VndOmalocSuplInit));
    assert_eq!("Vnd.oMaloC-suPl-iNiT".parse::<Subtype>(), Ok(Subtype::VndOmalocSuplInit));
    assert_eq!("vnd.onepager".parse::<Subtype>(), Ok(Subtype::VndOnepager));
    assert_eq!("vnd.ONepAGER".parse::<Subtype>(), Ok(Subtype::VndOnepager));
    assert_eq!("vnd.onepagertamp".parse::<Subtype>(), Ok(Subtype::VndOnepagertamp));
    assert_eq!("Vnd.ONEPAgERtamP".parse::<Subtype>(), Ok(Subtype::VndOnepagertamp));
    assert_eq!("vnd.onepagertamx".parse::<Subtype>(), Ok(Subtype::VndOnepagertamx));
    assert_eq!("VnD.oNepAgErtaMX".parse::<Subtype>(), Ok(Subtype::VndOnepagertamx));
    assert_eq!("vnd.onepagertat".parse::<Subtype>(), Ok(Subtype::VndOnepagertat));
    assert_eq!("VNd.onepAGertaT".parse::<Subtype>(), Ok(Subtype::VndOnepagertat));
    assert_eq!("vnd.onepagertatp".parse::<Subtype>(), Ok(Subtype::VndOnepagertatp));
    assert_eq!("vNd.ONepaGeRTAtp".parse::<Subtype>(), Ok(Subtype::VndOnepagertatp));
    assert_eq!("vnd.onepagertatx".parse::<Subtype>(), Ok(Subtype::VndOnepagertatx));
    assert_eq!("VNd.OnePAgerTATX".parse::<Subtype>(), Ok(Subtype::VndOnepagertatx));
    assert_eq!("vnd.openblox.game".parse::<Subtype>(), Ok(Subtype::VndOpenbloxGame));
    assert_eq!("vnd.OPENbLOX.game".parse::<Subtype>(), Ok(Subtype::VndOpenbloxGame));
    assert_eq!("vnd.openblox.game-binary".parse::<Subtype>(), Ok(Subtype::VndOpenbloxGameBinary));
    assert_eq!("vND.openblOX.GAME-BiNarY".parse::<Subtype>(), Ok(Subtype::VndOpenbloxGameBinary));
    assert_eq!("vnd.openeye.oeb".parse::<Subtype>(), Ok(Subtype::VndOpeneyeOeb));
    assert_eq!("vND.OpeNeYE.Oeb".parse::<Subtype>(), Ok(Subtype::VndOpeneyeOeb));
    assert_eq!("vnd.opengex".parse::<Subtype>(), Ok(Subtype::VndOpengex));
    assert_eq!("VND.oPenGeX".parse::<Subtype>(), Ok(Subtype::VndOpengex));
    assert_eq!("vnd.openofficeorg.extension".parse::<Subtype>(), Ok(Subtype::VndOpenofficeorgExtension));
    assert_eq!("Vnd.OPenoffiCeORG.eXTensioN".parse::<Subtype>(), Ok(Subtype::VndOpenofficeorgExtension));
    assert_eq!("vnd.openstreetmap.data".parse::<Subtype>(), Ok(Subtype::VndOpenstreetmapData));
    assert_eq!("vnd.OPeNsTREEtmAP.DaTA".parse::<Subtype>(), Ok(Subtype::VndOpenstreetmapData));
    assert_eq!("vnd.opentimestamps.ots".parse::<Subtype>(), Ok(Subtype::VndOpentimestampsOts));
    assert_eq!("vNd.opentiMESTaMPs.otS".parse::<Subtype>(), Ok(Subtype::VndOpentimestampsOts));
    assert_eq!("vnd.openxmlformats-officedocument.custom-properties".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentCustomProperties));
    assert_eq!("VNd.OpENxMlfORMAts-oFfICEDocUmeNt.CUsToM-pROpeRTieS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentCustomProperties));
    assert_eq!("vnd.openxmlformats-officedocument.customXmlProperties".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentCustomXmlProperties));
    assert_eq!("vNd.openxmlforMAtS-oFFiceDOcUmEnT.CusTomXMlProPERTieS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentCustomXmlProperties));
    assert_eq!("vnd.openxmlformats-officedocument.drawing".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawing));
    assert_eq!("VND.OpENXmlforMAtS-OffIcEdOcuMENT.DRAwinG".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawing));
    assert_eq!("vnd.openxmlformats-officedocument.drawingml.chart".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChart));
    assert_eq!("VNd.opENxMLfOrmATs-OFfICEDOCumENT.DRaWInGML.chart".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChart));
    assert_eq!("vnd.openxmlformats-officedocument.drawingml.chartshapes".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChartshapes));
    assert_eq!("Vnd.OPeNXmLfORmaTS-OFficedOCUMENt.DRawInGmL.CharTshAPES".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChartshapes));
    assert_eq!("vnd.openxmlformats-officedocument.drawingml.diagramColors".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramColors));
    assert_eq!("Vnd.OpenXmlFoRMAtS-OFFICEdoCuMenT.dRawIngml.DIagRamCoLorS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramColors));
    assert_eq!("vnd.openxmlformats-officedocument.drawingml.diagramData".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramData));
    assert_eq!("vnd.oPenXmlformATs-offIcedocumEnT.DraWingMl.DiAGrAMDaTA".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramData));
    assert_eq!("vnd.openxmlformats-officedocument.drawingml.diagramLayout".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramLayout));
    assert_eq!("vnd.OpenXmLFOrmAts-OFFiceDoCUMeNt.DrAWiNgml.DIAGrAmlaYouT".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramLayout));
    assert_eq!("vnd.openxmlformats-officedocument.drawingml.diagramStyle".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramStyle));
    assert_eq!("VnD.oPenXMLFoRMaTS-OfficEDocUMeNt.dRawinGml.dIAgramstyLe".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramStyle));
    assert_eq!("vnd.openxmlformats-officedocument.extended-properties".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentExtendedProperties));
    assert_eq!("vnD.oPEnxmLformATs-OfficEDoCuMENT.ExtEndED-prOPerTieS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentExtendedProperties));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.commentAuthors".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlCommentAuthors));
    assert_eq!("vNd.OPEnxMLFormaTs-offIcEDocuMENT.PRESentaTioNmL.CoMMEnTAUthorS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlCommentAuthors));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.comments".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlComments));
    assert_eq!("vND.OPEnXmlforMAts-oFFICEdocUMEnT.pReSENTAtIoNmL.comments".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlComments));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.handoutMaster".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlHandoutMaster));
    assert_eq!("VNd.OpEnXmLfoRmATs-OffIcedocumENt.pREsENtATIOnmL.haNDouTMaSTEr".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlHandoutMaster));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.notesMaster".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesMaster));
    assert_eq!("vnd.OPEnXmlFoRMATS-OFFiCEDoCUMENT.pREseNTationMl.NotesmAster".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesMaster));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.notesSlide".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesSlide));
    assert_eq!("vnd.oPEnXMLfOrmats-oFFICedOcuMeNT.PResENtAtIONML.NoteSslidE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesSlide));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.presProps".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresProps));
    assert_eq!("Vnd.OpenxmLFoRmaTs-oFfICedoCUMenT.PresENTAtioNmL.PrEsprOps".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresProps));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.presentation".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentation));
    assert_eq!("vnD.oPeNXmLFoRmATs-OFFiCEdOcument.PREsEntatIoNML.PrESEntATiOn".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentation));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.presentation.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentationMain));
    assert_eq!("vnd.OpEnxmLfORmAtS-offICEDOCumeNT.pReSENtaTionMl.presENtatION.Main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentationMain));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.slide".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlide));
    assert_eq!("Vnd.oPENxMLFORmats-OfFicEDOcUMENt.PREseNTatIoNmL.sLIDE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlide));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.slideLayout".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideLayout));
    assert_eq!("VND.openXmlForMaTs-oFfiCeDOCUMEnT.pReSENTatIONMl.SLiDeLAyoUt".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideLayout));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.slideMaster".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideMaster));
    assert_eq!("VnD.OPenXmlForMats-OFfICEdOCUmENt.pReSEnTATIoNml.SlidEmasTEr".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideMaster));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideUpdateInfo));
    assert_eq!("Vnd.OpenxMlfOrMAts-officeDocUMenT.prEsentationMl.sLIDEUPDAtEiNfo".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideUpdateInfo));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.slideshow".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshow));
    assert_eq!("VND.OpenxMlFOrMatS-OFfICedOCUmeNt.prESenTATIOnMl.slidEShOw".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshow));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.slideshow.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshowMain));
    assert_eq!("vND.OpeNXMLfoRmAtS-ofFICeDOcuMenT.pReSENTaTiONml.SLIDeSHoW.mAIN".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshowMain));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.tableStyles".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTableStyles));
    assert_eq!("VnD.oPEnxMlForMATS-OfFiceDOcuMENt.preSenTAtIoNml.tAblEStylES".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTableStyles));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.tags".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTags));
    assert_eq!("VnD.OpENxMlformaTs-oFfICeDoCUmEnt.PReSentATiOnmL.TaGS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTags));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.template".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplate));
    assert_eq!("Vnd.OpEnXMlFoRMATS-oFFiCedoCumEnt.pResEntatiONMl.tEMpLAte".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplate));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.template.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplateMain));
    assert_eq!("VNd.oPeNxmLformaTs-OFFICeDocuMENt.prESenTaTIonmL.tEmplATE.MAin".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplateMain));
    assert_eq!("vnd.openxmlformats-officedocument.presentationml.viewProps".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlViewProps));
    assert_eq!("VnD.OPEnxmLfoRMATS-OffICeDocuMEnt.PReSENTaTIonml.vIewPrOPS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentPresentationmlViewProps));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.calcChain".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlCalcChain));
    assert_eq!("vnd.OpeNxmlfoRMats-OfficEDocuMENt.SpREAdSHEETml.CALCCHaIn".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlCalcChain));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.chartsheet".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlChartsheet));
    assert_eq!("VnD.OPEnXMLfORMaTs-ofFicedOcUMeNT.spReaDSheetML.cHartsHEet".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlChartsheet));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.comments".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlComments));
    assert_eq!("Vnd.oPeNxMlfoRmaTs-oFFICedOcUmENT.SPREAdshEETmL.COMmeNts".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlComments));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.connections".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlConnections));
    assert_eq!("VnD.opeNXMlFOrMaTs-oFFicedocuMEnt.sprEaDSHeeTmL.CONNECTIONS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlConnections));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlDialogsheet));
    assert_eq!("VNd.OPEnxMLfORmATS-OFfICeDoCuMENt.sPrEaDshEetmL.DIAlOgSHeEt".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlDialogsheet));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.externalLink".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlExternalLink));
    assert_eq!("VNd.oPENxmLfORMAts-OffiCEdocUmENT.sPrEAdSHEeTml.extERNallInK".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlExternalLink));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheDefinition));
    assert_eq!("VND.oPeNXmlForMATS-OfFIcedocumeNt.SPreAdSheETmL.pIvOTCaCHEDefINItioN".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheDefinition));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheRecords));
    assert_eq!("vND.oPENxmLFORmATs-ofFICedoCUmENT.sPREADshEETmL.piVOTcAChERecoRdS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheRecords));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.pivotTable".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotTable));
    assert_eq!("vnd.OPeNXMLFoRmATS-OFFICEDoCUMENt.SPReADSHeeTML.pivoTTAbLE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotTable));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.queryTable".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlQueryTable));
    assert_eq!("Vnd.OPEnxMLFoRMaTS-OffIcEdOcuMEnt.sPREadsHEETMl.QueRYtAble".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlQueryTable));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionHeaders));
    assert_eq!("vnd.opENXMlformATs-OffiCEdocumENT.SprEadshEEtML.REviSiOnHEaDers".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionHeaders));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.revisionLog".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionLog));
    assert_eq!("vnD.OPeNxmlfOrmatS-oFFIcedOcument.SPrEAdsHeetMl.revisIOnloG".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionLog));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSharedStrings));
    assert_eq!("vNd.OPENXmlFORmatS-oFfICEdOCUMeNT.SPREAdsHEEtml.sHAreDsTRINgs".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSharedStrings));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.sheet".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheet));
    assert_eq!("VnD.OpENxmLfOrMaTS-oFfiCeDoCUMeNT.spreadSheEtml.sHEeT".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheet));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.sheet.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMain));
    assert_eq!("vnD.OpENxMLfoRMAts-OFFICedOcuMent.sPrEaDSHEEtml.shEEt.maIn".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMain));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMetadata));
    assert_eq!("VNd.OPeNXmLfORMatS-OFFiCeDoCUMenT.SPReaDshEeTml.SheetmeTAdATa".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMetadata));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.styles".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlStyles));
    assert_eq!("VnD.opENxmLFoRmaTs-OFficEDOcuMeNT.SPReadSHEeTmL.StYlEs".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlStyles));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.table".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTable));
    assert_eq!("Vnd.oPeNXmlFOrMaTs-ofFiCEDocumenT.SpreAdSheETML.TaBLE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTable));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTableSingleCells));
    assert_eq!("vNd.oPENxMlFormAtS-OFfiCeDocUmEnt.SpreaDshEETmL.tABleSInGLeCelLs".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTableSingleCells));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.template".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate));
    assert_eq!("vNd.OPenXmlformatS-OFFiCEDoCuMEnt.sPrEaDSheeTML.temPlatE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.template.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplateMain));
    assert_eq!("Vnd.opeNxMLformAtS-ofFIcEDoCUMeNt.SPReaDShEETML.tEmPlAtE.maIn".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplateMain));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.userNames".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlUserNames));
    assert_eq!("vNd.OPENxmlfOrmaTs-OffICeDOcuMeNt.sPREaDShEEtML.usernAmes".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlUserNames));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlVolatileDependencies));
    assert_eq!("Vnd.oPEnXMlFOrmATS-oFficeDocUmEnT.sPReADsheETml.VolaTiLEDepeNDEnCies".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlVolatileDependencies));
    assert_eq!("vnd.openxmlformats-officedocument.spreadsheetml.worksheet".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlWorksheet));
    assert_eq!("Vnd.OpENxmLforMAts-OFfICEDoCUmeNT.SPrEAdSheETml.wOrKShEEt".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlWorksheet));
    assert_eq!("vnd.openxmlformats-officedocument.theme".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentTheme));
    assert_eq!("vnd.openXmlfoRmaTs-OfFICedOCuMENt.tHEmE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentTheme));
    assert_eq!("vnd.openxmlformats-officedocument.themeOverride".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentThemeOverride));
    assert_eq!("vnD.opEnXMlFORMATS-OfFIcEdOcUmEnt.THEmeovErRIdE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentThemeOverride));
    assert_eq!("vnd.openxmlformats-officedocument.vmlDrawing".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentVmlDrawing));
    assert_eq!("vnd.OpeNXmLfOrMats-ofFicEdOCuMENt.vMlDrAwIng".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentVmlDrawing));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.comments".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlComments));
    assert_eq!("vnD.OPENxMlfoRmAtS-OffiCeDOcumENT.wORDPROCESsInGml.COMmENTS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlComments));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.document".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocument));
    assert_eq!("VNd.opENxmlFOrMaTs-OFfIcEdoCuMenT.woRdProCeSSINGmL.dOCUMENT".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocument));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.document.glossary".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentGlossary));
    assert_eq!("VND.OPENXMlFORmAtS-oFfICedOCumeNt.woRDproCessINGML.docuMent.gLossaRY".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentGlossary));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.document.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentMain));
    assert_eq!("vND.oPeNxMlfORMaTs-ofFIcedOCUmEnt.wOrdpRoceSsINgMl.DOcUmeNT.MaIn".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentMain));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.endnotes".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlEndnotes));
    assert_eq!("VnD.oPeNxmLforMAtS-oFFicEdOcUMEnt.woRdPRoCesSIngmL.endnotES".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlEndnotes));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.fontTable".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFontTable));
    assert_eq!("vnD.oPenXMlforMatS-oFFiCeDocUMENT.WorDProcEsSINGML.fOnTTABle".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFontTable));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.footer".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFooter));
    assert_eq!("vnd.OPENxmLFORMats-ofFiCEDOCument.WordPROCESsiNgml.foOteR".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFooter));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.footnotes".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFootnotes));
    assert_eq!("VnD.OPenXMlformATS-offICEdOcumEnT.WORDprOCeSsingMl.FooTnOtes".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFootnotes));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.numbering".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlNumbering));
    assert_eq!("Vnd.OpENXmLfOrMAts-OfFICEdOcUMEnT.WordprOCeSSiNGMl.NUMBerinG".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlNumbering));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.settings".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlSettings));
    assert_eq!("Vnd.OpENXmlFoRMats-OFfiCedocUMenT.woRDprOcEssiNGMl.setTINGS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlSettings));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.styles".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlStyles));
    assert_eq!("VNd.OpENxMLFORmats-OFfIcEDoCumENT.wOrdPROCESsIngml.StyLES".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlStyles));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.template".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplate));
    assert_eq!("vnd.OpENxmLformAtS-OffIcedocUMENt.WoRDprOCEssinGml.TeMpLaTE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplate));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.template.main".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplateMain));
    assert_eq!("vnD.oPENxMlForMAts-OffIcedoCumeNt.wORDpRocesSiNgml.TEmPLATE.maIn".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplateMain));
    assert_eq!("vnd.openxmlformats-officedocument.wordprocessingml.webSettings".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlWebSettings));
    assert_eq!("vND.oPeNxMlfOrMaTS-ofFICEdOcuMenT.WORDPRocessINgMl.WebSeTtINgS".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlWebSettings));
    assert_eq!("vnd.openxmlformats-package.core-properties".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsPackageCoreProperties));
    assert_eq!("Vnd.oPENXMLformaTS-packagE.core-prOpErtiEs".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsPackageCoreProperties));
    assert_eq!("vnd.openxmlformats-package.digital-signature-xmlsignature".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsPackageDigitalSignatureXmlsignature));
    assert_eq!("vnD.openxMlFormAtS-PaCkaGE.DIGiTal-sigNAtURe-xMlSiGNATuRE".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsPackageDigitalSignatureXmlsignature));
    assert_eq!("vnd.openxmlformats-package.relationships".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsPackageRelationships));
    assert_eq!("vND.OpenXmLfORmAts-pAcKAge.reLatioNsHips".parse::<Subtype>(), Ok(Subtype::VndOpenxmlformatsPackageRelationships));
    assert_eq!("vnd.oracle.resource".parse::<Subtype>(), Ok(Subtype::VndOracleResource));
    assert_eq!("VnD.orACle.ResoUrCE".parse::<Subtype>(), Ok(Subtype::VndOracleResource));
    assert_eq!("vnd.orange.indata".parse::<Subtype>(), Ok(Subtype::VndOrangeIndata));
    assert_eq!("vnd.Orange.InDAta".parse::<Subtype>(), Ok(Subtype::VndOrangeIndata));
    assert_eq!("vnd.osa.netdeploy".parse::<Subtype>(), Ok(Subtype::VndOsaNetdeploy));
    assert_eq!("VND.Osa.nETdEPlOy".parse::<Subtype>(), Ok(Subtype::VndOsaNetdeploy));
    assert_eq!("vnd.osgeo.mapguide.package".parse::<Subtype>(), Ok(Subtype::VndOsgeoMapguidePackage));
    assert_eq!("vnD.oSGEo.mApGuIdE.PACKAGe".parse::<Subtype>(), Ok(Subtype::VndOsgeoMapguidePackage));
    assert_eq!("vnd.osgi.bundle".parse::<Subtype>(), Ok(Subtype::VndOsgiBundle));
    assert_eq!("VNd.oSgI.bunDlE".parse::<Subtype>(), Ok(Subtype::VndOsgiBundle));
    assert_eq!("vnd.osgi.dp".parse::<Subtype>(), Ok(Subtype::VndOsgiDp));
    assert_eq!("VnD.oSGi.DP".parse::<Subtype>(), Ok(Subtype::VndOsgiDp));
    assert_eq!("vnd.osgi.subsystem".parse::<Subtype>(), Ok(Subtype::VndOsgiSubsystem));
    assert_eq!("vND.oSgi.SuBsySTEM".parse::<Subtype>(), Ok(Subtype::VndOsgiSubsystem));
    assert_eq!("vnd.otps.ct-kip".parse::<Subtype>(), Ok(Subtype::VndOtpsCtKip));
    assert_eq!("VND.OTPS.cT-kIP".parse::<Subtype>(), Ok(Subtype::VndOtpsCtKip));
    assert_eq!("vnd.oxli.countgraph".parse::<Subtype>(), Ok(Subtype::VndOxliCountgraph));
    assert_eq!("VND.OXLI.CounTGRapH".parse::<Subtype>(), Ok(Subtype::VndOxliCountgraph));
    assert_eq!("vnd.pagerduty".parse::<Subtype>(), Ok(Subtype::VndPagerduty));
    assert_eq!("Vnd.paGerDUTy".parse::<Subtype>(), Ok(Subtype::VndPagerduty));
    assert_eq!("vnd.palm".parse::<Subtype>(), Ok(Subtype::VndPalm));
    assert_eq!("VnD.paLM".parse::<Subtype>(), Ok(Subtype::VndPalm));
    assert_eq!("vnd.panoply".parse::<Subtype>(), Ok(Subtype::VndPanoply));
    assert_eq!("VND.panoply".parse::<Subtype>(), Ok(Subtype::VndPanoply));
    assert_eq!("vnd.paos.xml".parse::<Subtype>(), Ok(Subtype::VndPaosXml));
    assert_eq!("VNd.PAOS.xml".parse::<Subtype>(), Ok(Subtype::VndPaosXml));
    assert_eq!("vnd.parasolid.transmit.binary".parse::<Subtype>(), Ok(Subtype::VndParasolidTransmitBinary));
    assert_eq!("vNd.pArasoLid.TRAnSMit.bINARY".parse::<Subtype>(), Ok(Subtype::VndParasolidTransmitBinary));
    assert_eq!("vnd.parasolid.transmit.text".parse::<Subtype>(), Ok(Subtype::VndParasolidTransmitText));
    assert_eq!("VND.paRasolID.TranSmIt.Text".parse::<Subtype>(), Ok(Subtype::VndParasolidTransmitText));
    assert_eq!("vnd.patentdive".parse::<Subtype>(), Ok(Subtype::VndPatentdive));
    assert_eq!("vnD.PateNTDIVe".parse::<Subtype>(), Ok(Subtype::VndPatentdive));
    assert_eq!("vnd.patientecommsdoc".parse::<Subtype>(), Ok(Subtype::VndPatientecommsdoc));
    assert_eq!("vNd.PaTiENTEcOmMSdOc".parse::<Subtype>(), Ok(Subtype::VndPatientecommsdoc));
    assert_eq!("vnd.pawaafile".parse::<Subtype>(), Ok(Subtype::VndPawaafile));
    assert_eq!("vnd.PAwaAfIle".parse::<Subtype>(), Ok(Subtype::VndPawaafile));
    assert_eq!("vnd.pco.b16".parse::<Subtype>(), Ok(Subtype::VndPcoB16));
    assert_eq!("vnd.PCO.b16".parse::<Subtype>(), Ok(Subtype::VndPcoB16));
    assert_eq!("vnd.pcos".parse::<Subtype>(), Ok(Subtype::VndPcos));
    assert_eq!("Vnd.PCoS".parse::<Subtype>(), Ok(Subtype::VndPcos));
    assert_eq!("vnd.pg.format".parse::<Subtype>(), Ok(Subtype::VndPgFormat));
    assert_eq!("Vnd.Pg.foRMAT".parse::<Subtype>(), Ok(Subtype::VndPgFormat));
    assert_eq!("vnd.pg.osasli".parse::<Subtype>(), Ok(Subtype::VndPgOsasli));
    assert_eq!("vnd.Pg.OSaSLI".parse::<Subtype>(), Ok(Subtype::VndPgOsasli));
    assert_eq!("vnd.piaccess.application-licence".parse::<Subtype>(), Ok(Subtype::VndPiaccessApplicationLicence));
    assert_eq!("VnD.pIACCESS.ApplICaTion-LicEnCE".parse::<Subtype>(), Ok(Subtype::VndPiaccessApplicationLicence));
    assert_eq!("vnd.picsel".parse::<Subtype>(), Ok(Subtype::VndPicsel));
    assert_eq!("vnD.piCsEL".parse::<Subtype>(), Ok(Subtype::VndPicsel));
    assert_eq!("vnd.pmi.widget".parse::<Subtype>(), Ok(Subtype::VndPmiWidget));
    assert_eq!("vnD.pMI.WIdGEt".parse::<Subtype>(), Ok(Subtype::VndPmiWidget));
    assert_eq!("vnd.poc.group-advertisement".parse::<Subtype>(), Ok(Subtype::VndPocGroupAdvertisement));
    assert_eq!("VNd.PoC.gROUp-adveRtisemeNt".parse::<Subtype>(), Ok(Subtype::VndPocGroupAdvertisement));
    assert_eq!("vnd.pocketlearn".parse::<Subtype>(), Ok(Subtype::VndPocketlearn));
    assert_eq!("vNd.PoCKetlearN".parse::<Subtype>(), Ok(Subtype::VndPocketlearn));
    assert_eq!("vnd.powerbuilder6".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder6));
    assert_eq!("Vnd.pOweRbuIlDeR6".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder6));
    assert_eq!("vnd.powerbuilder6-s".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder6S));
    assert_eq!("VND.POwERbuIldeR6-S".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder6S));
    assert_eq!("vnd.powerbuilder7".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder7));
    assert_eq!("vND.PowErbuiLDer7".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder7));
    assert_eq!("vnd.powerbuilder75".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder75));
    assert_eq!("VND.poWerbuiLDer75".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder75));
    assert_eq!("vnd.powerbuilder75-s".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder75S));
    assert_eq!("VND.pOwerBuILDeR75-S".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder75S));
    assert_eq!("vnd.powerbuilder7-s".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder7S));
    assert_eq!("VnD.POweRbuIldER7-s".parse::<Subtype>(), Ok(Subtype::VndPowerbuilder7S));
    assert_eq!("vnd.preminet".parse::<Subtype>(), Ok(Subtype::VndPreminet));
    assert_eq!("Vnd.pREMINet".parse::<Subtype>(), Ok(Subtype::VndPreminet));
    assert_eq!("vnd.presonus.multitrack".parse::<Subtype>(), Ok(Subtype::VndPresonusMultitrack));
    assert_eq!("VNd.PreSoNUs.MULtitRACk".parse::<Subtype>(), Ok(Subtype::VndPresonusMultitrack));
    assert_eq!("vnd.previewsystems.box".parse::<Subtype>(), Ok(Subtype::VndPreviewsystemsBox));
    assert_eq!("Vnd.PrEVIEwSySTeMs.BoX".parse::<Subtype>(), Ok(Subtype::VndPreviewsystemsBox));
    assert_eq!("vnd.proteus.magazine".parse::<Subtype>(), Ok(Subtype::VndProteusMagazine));
    assert_eq!("VND.PRoTeUS.mAGAzINe".parse::<Subtype>(), Ok(Subtype::VndProteusMagazine));
    assert_eq!("vnd.psfs".parse::<Subtype>(), Ok(Subtype::VndPsfs));
    assert_eq!("vND.PsfS".parse::<Subtype>(), Ok(Subtype::VndPsfs));
    assert_eq!("vnd.publishare-delta-tree".parse::<Subtype>(), Ok(Subtype::VndPublishareDeltaTree));
    assert_eq!("vnd.PuBlishARE-DeltA-TRee".parse::<Subtype>(), Ok(Subtype::VndPublishareDeltaTree));
    assert_eq!("vnd.pvi.ptid1".parse::<Subtype>(), Ok(Subtype::VndPviPtid1));
    assert_eq!("vNd.pvi.pTiD1".parse::<Subtype>(), Ok(Subtype::VndPviPtid1));
    assert_eq!("vnd.pwg-multiplexed".parse::<Subtype>(), Ok(Subtype::VndPwgMultiplexed));
    assert_eq!("vNd.pwG-mUlTIpLexed".parse::<Subtype>(), Ok(Subtype::VndPwgMultiplexed));
    assert_eq!("vnd.pwg-xhtml-print".parse::<Subtype>(), Ok(Subtype::VndPwgXhtmlPrint));
    assert_eq!("vnD.pWg-XHtmL-PRinT".parse::<Subtype>(), Ok(Subtype::VndPwgXhtmlPrint));
    assert_eq!("vnd.pytha.pyox".parse::<Subtype>(), Ok(Subtype::VndPythaPyox));
    assert_eq!("VnD.PyTha.PYoX".parse::<Subtype>(), Ok(Subtype::VndPythaPyox));
    assert_eq!("vnd.qualcomm.brew-app-res".parse::<Subtype>(), Ok(Subtype::VndQualcommBrewAppRes));
    assert_eq!("vnd.quAlcOMm.brEw-App-RES".parse::<Subtype>(), Ok(Subtype::VndQualcommBrewAppRes));
    assert_eq!("vnd.quarantainenet".parse::<Subtype>(), Ok(Subtype::VndQuarantainenet));
    assert_eq!("vnd.QuARaNtAInEneT".parse::<Subtype>(), Ok(Subtype::VndQuarantainenet));
    assert_eq!("vnd.Quark.QuarkXPress".parse::<Subtype>(), Ok(Subtype::VndQuarkQuarkXPress));
    assert_eq!("vnD.quArK.quARKXPrEsS".parse::<Subtype>(), Ok(Subtype::VndQuarkQuarkXPress));
    assert_eq!("vnd.quobject-quoxdocument".parse::<Subtype>(), Ok(Subtype::VndQuobjectQuoxdocument));
    assert_eq!("vnd.qUobJeCT-quoxdoCUMeNT".parse::<Subtype>(), Ok(Subtype::VndQuobjectQuoxdocument));
    assert_eq!("vnd.radgamettools.bink".parse::<Subtype>(), Ok(Subtype::VndRadgamettoolsBink));
    assert_eq!("VNd.RaDgameTtoOLs.BiNK".parse::<Subtype>(), Ok(Subtype::VndRadgamettoolsBink));
    assert_eq!("vnd.radgamettools.smacker".parse::<Subtype>(), Ok(Subtype::VndRadgamettoolsSmacker));
    assert_eq!("vNd.raDGaMeTtOOlS.SmACKER".parse::<Subtype>(), Ok(Subtype::VndRadgamettoolsSmacker));
    assert_eq!("vnd.radiance".parse::<Subtype>(), Ok(Subtype::VndRadiance));
    assert_eq!("vND.RADiANcE".parse::<Subtype>(), Ok(Subtype::VndRadiance));
    assert_eq!("vnd.radisys.moml".parse::<Subtype>(), Ok(Subtype::VndRadisysMoml));
    assert_eq!("vNd.RaDISYS.MOmL".parse::<Subtype>(), Ok(Subtype::VndRadisysMoml));
    assert_eq!("vnd.radisys.msml".parse::<Subtype>(), Ok(Subtype::VndRadisysMsml));
    assert_eq!("vNd.RadisYs.mSMl".parse::<Subtype>(), Ok(Subtype::VndRadisysMsml));
    assert_eq!("vnd.radisys.msml-audit".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAudit));
    assert_eq!("vNd.RadiSYs.mSml-AuDIt".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAudit));
    assert_eq!("vnd.radisys.msml-audit-conf".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditConf));
    assert_eq!("VNd.RaDISYS.msMl-AudIt-CONF".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditConf));
    assert_eq!("vnd.radisys.msml-audit-conn".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditConn));
    assert_eq!("vND.rADisyS.mSml-AuDit-CoNn".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditConn));
    assert_eq!("vnd.radisys.msml-audit-dialog".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditDialog));
    assert_eq!("vNd.rAdIsyS.MSmL-aUdIt-DIAlOG".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditDialog));
    assert_eq!("vnd.radisys.msml-audit-stream".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditStream));
    assert_eq!("VND.rADISys.mSml-aUDit-stReaM".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlAuditStream));
    assert_eq!("vnd.radisys.msml-basic-layout".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlBasicLayout));
    assert_eq!("vnd.RaDisYS.MSml-BasiC-LayOUt".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlBasicLayout));
    assert_eq!("vnd.radisys.msml-conf".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlConf));
    assert_eq!("VNd.RAdiSyS.MSML-CoNF".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlConf));
    assert_eq!("vnd.radisys.msml-dialog".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialog));
    assert_eq!("VnD.rADiSYS.MSmL-DIaLoG".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialog));
    assert_eq!("vnd.radisys.msml-dialog-base".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogBase));
    assert_eq!("Vnd.raDISYS.mSml-diALoG-BaSe".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogBase));
    assert_eq!("vnd.radisys.msml-dialog-fax-detect".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogFaxDetect));
    assert_eq!("Vnd.rAdISys.MsML-diALOG-FaX-dEtEct".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogFaxDetect));
    assert_eq!("vnd.radisys.msml-dialog-fax-sendrecv".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogFaxSendrecv));
    assert_eq!("vnD.RadiSyS.msmL-DIALOg-Fax-SeNdrecV".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogFaxSendrecv));
    assert_eq!("vnd.radisys.msml-dialog-group".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogGroup));
    assert_eq!("vnd.RaDIsys.MSml-DialoG-gROUP".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogGroup));
    assert_eq!("vnd.radisys.msml-dialog-speech".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogSpeech));
    assert_eq!("VnD.RaDiSys.MSMl-DIAlog-sPeech".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogSpeech));
    assert_eq!("vnd.radisys.msml-dialog-transform".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogTransform));
    assert_eq!("VnD.RaDISYS.Msml-DIalOG-tRAnSform".parse::<Subtype>(), Ok(Subtype::VndRadisysMsmlDialogTransform));
    assert_eq!("vnd.rainstor.data".parse::<Subtype>(), Ok(Subtype::VndRainstorData));
    assert_eq!("vNd.rAINSTor.daTa".parse::<Subtype>(), Ok(Subtype::VndRainstorData));
    assert_eq!("vnd.rapid".parse::<Subtype>(), Ok(Subtype::VndRapid));
    assert_eq!("vND.raPId".parse::<Subtype>(), Ok(Subtype::VndRapid));
    assert_eq!("vnd.rar".parse::<Subtype>(), Ok(Subtype::VndRar));
    assert_eq!("vNd.rAR".parse::<Subtype>(), Ok(Subtype::VndRar));
    assert_eq!("vnd.realvnc.bed".parse::<Subtype>(), Ok(Subtype::VndRealvncBed));
    assert_eq!("VnD.ReALVnc.Bed".parse::<Subtype>(), Ok(Subtype::VndRealvncBed));
    assert_eq!("vnd.recordare.musicxml".parse::<Subtype>(), Ok(Subtype::VndRecordareMusicxml));
    assert_eq!("VND.RecordAre.mUsIcxMl".parse::<Subtype>(), Ok(Subtype::VndRecordareMusicxml));
    assert_eq!("vnd.RenLearn.rlprint".parse::<Subtype>(), Ok(Subtype::VndRenLearnRlprint));
    assert_eq!("VND.renleaRN.rLPrINt".parse::<Subtype>(), Ok(Subtype::VndRenLearnRlprint));
    assert_eq!("vnd.resilient.logic".parse::<Subtype>(), Ok(Subtype::VndResilientLogic));
    assert_eq!("vNd.rESIlieNt.LogiC".parse::<Subtype>(), Ok(Subtype::VndResilientLogic));
    assert_eq!("vnd.restful".parse::<Subtype>(), Ok(Subtype::VndRestful));
    assert_eq!("vnd.rEStFul".parse::<Subtype>(), Ok(Subtype::VndRestful));
    assert_eq!("vnd.rhetorex.32kadpcm".parse::<Subtype>(), Ok(Subtype::VndRhetorex32kadpcm));
    assert_eq!("vND.RHeTOrex.32kadpcM".parse::<Subtype>(), Ok(Subtype::VndRhetorex32kadpcm));
    assert_eq!("vnd.rig.cryptonote".parse::<Subtype>(), Ok(Subtype::VndRigCryptonote));
    assert_eq!("vnd.RIg.cryPTONoTe".parse::<Subtype>(), Ok(Subtype::VndRigCryptonote));
    assert_eq!("vnd.rim.cod".parse::<Subtype>(), Ok(Subtype::VndRimCod));
    assert_eq!("vND.RIm.cOD".parse::<Subtype>(), Ok(Subtype::VndRimCod));
    assert_eq!("vnd.rip".parse::<Subtype>(), Ok(Subtype::VndRip));
    assert_eq!("vnd.RIp".parse::<Subtype>(), Ok(Subtype::VndRip));
    assert_eq!("vnd.rosette.annotated-data-model".parse::<Subtype>(), Ok(Subtype::VndRosetteAnnotatedDataModel));
    assert_eq!("Vnd.roseTtE.aNnOTAted-daTA-mODEL".parse::<Subtype>(), Ok(Subtype::VndRosetteAnnotatedDataModel));
    assert_eq!("vnd.route66.link66".parse::<Subtype>(), Ok(Subtype::VndRoute66Link66));
    assert_eq!("Vnd.rOUTe66.LinK66".parse::<Subtype>(), Ok(Subtype::VndRoute66Link66));
    assert_eq!("vnd.rs-274x".parse::<Subtype>(), Ok(Subtype::VndRs274x));
    assert_eq!("VnD.rs-274x".parse::<Subtype>(), Ok(Subtype::VndRs274x));
    assert_eq!("vnd.ruckus.download".parse::<Subtype>(), Ok(Subtype::VndRuckusDownload));
    assert_eq!("vnd.rUcKUs.DoWnload".parse::<Subtype>(), Ok(Subtype::VndRuckusDownload));
    assert_eq!("vnd.s3sms".parse::<Subtype>(), Ok(Subtype::VndS3sms));
    assert_eq!("VND.S3SMS".parse::<Subtype>(), Ok(Subtype::VndS3sms));
    assert_eq!("vnd.sailingtracker.track".parse::<Subtype>(), Ok(Subtype::VndSailingtrackerTrack));
    assert_eq!("vnd.SailiNgtrACkER.track".parse::<Subtype>(), Ok(Subtype::VndSailingtrackerTrack));
    assert_eq!("vnd.sap.vds".parse::<Subtype>(), Ok(Subtype::VndSapVds));
    assert_eq!("VNd.SAP.vds".parse::<Subtype>(), Ok(Subtype::VndSapVds));
    assert_eq!("vnd.sar".parse::<Subtype>(), Ok(Subtype::VndSar));
    assert_eq!("vNd.Sar".parse::<Subtype>(), Ok(Subtype::VndSar));
    assert_eq!("vnd.sbm.cid".parse::<Subtype>(), Ok(Subtype::VndSbmCid));
    assert_eq!("vNd.SbM.Cid".parse::<Subtype>(), Ok(Subtype::VndSbmCid));
    assert_eq!("vnd.sbm.mid2".parse::<Subtype>(), Ok(Subtype::VndSbmMid2));
    assert_eq!("VnD.SBm.mID2".parse::<Subtype>(), Ok(Subtype::VndSbmMid2));
    assert_eq!("vnd.scribus".parse::<Subtype>(), Ok(Subtype::VndScribus));
    assert_eq!("VnD.sCRiBus".parse::<Subtype>(), Ok(Subtype::VndScribus));
    assert_eq!("vnd.sealed.3df".parse::<Subtype>(), Ok(Subtype::VndSealed3df));
    assert_eq!("vNd.SEAlED.3Df".parse::<Subtype>(), Ok(Subtype::VndSealed3df));
    assert_eq!("vnd.sealed.csf".parse::<Subtype>(), Ok(Subtype::VndSealedCsf));
    assert_eq!("vnD.SeaLED.CSF".parse::<Subtype>(), Ok(Subtype::VndSealedCsf));
    assert_eq!("vnd.sealed.doc".parse::<Subtype>(), Ok(Subtype::VndSealedDoc));
    assert_eq!("VNd.SEALed.DOC".parse::<Subtype>(), Ok(Subtype::VndSealedDoc));
    assert_eq!("vnd.sealed.eml".parse::<Subtype>(), Ok(Subtype::VndSealedEml));
    assert_eq!("Vnd.sEalEd.emL".parse::<Subtype>(), Ok(Subtype::VndSealedEml));
    assert_eq!("vnd.sealed.mht".parse::<Subtype>(), Ok(Subtype::VndSealedMht));
    assert_eq!("Vnd.Sealed.MHt".parse::<Subtype>(), Ok(Subtype::VndSealedMht));
    assert_eq!("vnd.sealed.mpeg1".parse::<Subtype>(), Ok(Subtype::VndSealedMpeg1));
    assert_eq!("vND.Sealed.mpeG1".parse::<Subtype>(), Ok(Subtype::VndSealedMpeg1));
    assert_eq!("vnd.sealed.mpeg4".parse::<Subtype>(), Ok(Subtype::VndSealedMpeg4));
    assert_eq!("VND.SeaLeD.MpEg4".parse::<Subtype>(), Ok(Subtype::VndSealedMpeg4));
    assert_eq!("vnd.sealed.net".parse::<Subtype>(), Ok(Subtype::VndSealedNet));
    assert_eq!("vND.sEalED.NET".parse::<Subtype>(), Ok(Subtype::VndSealedNet));
    assert_eq!("vnd.sealed.png".parse::<Subtype>(), Ok(Subtype::VndSealedPng));
    assert_eq!("VND.SEAled.PNg".parse::<Subtype>(), Ok(Subtype::VndSealedPng));
    assert_eq!("vnd.sealed.ppt".parse::<Subtype>(), Ok(Subtype::VndSealedPpt));
    assert_eq!("vnd.SEAled.PPT".parse::<Subtype>(), Ok(Subtype::VndSealedPpt));
    assert_eq!("vnd.sealed.swf".parse::<Subtype>(), Ok(Subtype::VndSealedSwf));
    assert_eq!("VnD.sEALED.sWF".parse::<Subtype>(), Ok(Subtype::VndSealedSwf));
    assert_eq!("vnd.sealed.tiff".parse::<Subtype>(), Ok(Subtype::VndSealedTiff));
    assert_eq!("VNd.sealED.tIFF".parse::<Subtype>(), Ok(Subtype::VndSealedTiff));
    assert_eq!("vnd.sealed.xls".parse::<Subtype>(), Ok(Subtype::VndSealedXls));
    assert_eq!("VnD.sealeD.XLs".parse::<Subtype>(), Ok(Subtype::VndSealedXls));
    assert_eq!("vnd.sealedmedia.softseal.gif".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealGif));
    assert_eq!("vnD.sealedMeDIA.SOftseal.giF".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealGif));
    assert_eq!("vnd.sealedmedia.softseal.html".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealHtml));
    assert_eq!("vND.SealedMEdia.SoftseAl.Html".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealHtml));
    assert_eq!("vnd.sealedmedia.softseal.jpg".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealJpg));
    assert_eq!("vnD.SeaLedmedIA.SoFtSEal.Jpg".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealJpg));
    assert_eq!("vnd.sealedmedia.softseal.mov".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealMov));
    assert_eq!("VNd.sEalEdMEDIA.sOFTSEaL.mOv".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealMov));
    assert_eq!("vnd.sealedmedia.softseal.mpeg".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealMpeg));
    assert_eq!("Vnd.SeAleDMeDIA.sOFtsEal.mPeg".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealMpeg));
    assert_eq!("vnd.sealedmedia.softseal.pdf".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealPdf));
    assert_eq!("vnD.sEALEDMEDiA.sOfTseAl.Pdf".parse::<Subtype>(), Ok(Subtype::VndSealedmediaSoftsealPdf));
    assert_eq!("vnd.seemail".parse::<Subtype>(), Ok(Subtype::VndSeemail));
    assert_eq!("VnD.SEeMAIl".parse::<Subtype>(), Ok(Subtype::VndSeemail));
    assert_eq!("vnd.seis".parse::<Subtype>(), Ok(Subtype::VndSeis));
    assert_eq!("VNd.sEIs".parse::<Subtype>(), Ok(Subtype::VndSeis));
    assert_eq!("vnd.sema".parse::<Subtype>(), Ok(Subtype::VndSema));
    assert_eq!("vNd.SEma".parse::<Subtype>(), Ok(Subtype::VndSema));
    assert_eq!("vnd.semd".parse::<Subtype>(), Ok(Subtype::VndSemd));
    assert_eq!("VnD.sEMD".parse::<Subtype>(), Ok(Subtype::VndSemd));
    assert_eq!("vnd.semf".parse::<Subtype>(), Ok(Subtype::VndSemf));
    assert_eq!("Vnd.sEMf".parse::<Subtype>(), Ok(Subtype::VndSemf));
    assert_eq!("vnd.senx.warpscript".parse::<Subtype>(), Ok(Subtype::VndSenxWarpscript));
    assert_eq!("VND.sEnX.wARPScrIPt".parse::<Subtype>(), Ok(Subtype::VndSenxWarpscript));
    assert_eq!("vnd.shade-save-file".parse::<Subtype>(), Ok(Subtype::VndShadeSaveFile));
    assert_eq!("vnD.SHADE-sAVE-FiLE".parse::<Subtype>(), Ok(Subtype::VndShadeSaveFile));
    assert_eq!("vnd.shana.informed.formdata".parse::<Subtype>(), Ok(Subtype::VndShanaInformedFormdata));
    assert_eq!("vNd.sHaNA.iNFORMED.fORMdaTa".parse::<Subtype>(), Ok(Subtype::VndShanaInformedFormdata));
    assert_eq!("vnd.shana.informed.formtemplate".parse::<Subtype>(), Ok(Subtype::VndShanaInformedFormtemplate));
    assert_eq!("vnD.ShAna.INFOrmED.fOrmtEmPlAtE".parse::<Subtype>(), Ok(Subtype::VndShanaInformedFormtemplate));
    assert_eq!("vnd.shana.informed.interchange".parse::<Subtype>(), Ok(Subtype::VndShanaInformedInterchange));
    assert_eq!("vND.SHANa.InFoRmed.iNtERChange".parse::<Subtype>(), Ok(Subtype::VndShanaInformedInterchange));
    assert_eq!("vnd.shana.informed.package".parse::<Subtype>(), Ok(Subtype::VndShanaInformedPackage));
    assert_eq!("Vnd.ShAnA.InforMEd.pAcKAgE".parse::<Subtype>(), Ok(Subtype::VndShanaInformedPackage));
    assert_eq!("vnd.shootproof".parse::<Subtype>(), Ok(Subtype::VndShootproof));
    assert_eq!("vND.ShOoTpRoOf".parse::<Subtype>(), Ok(Subtype::VndShootproof));
    assert_eq!("vnd.shopkick".parse::<Subtype>(), Ok(Subtype::VndShopkick));
    assert_eq!("VnD.ShOPKICk".parse::<Subtype>(), Ok(Subtype::VndShopkick));
    assert_eq!("vnd.shp".parse::<Subtype>(), Ok(Subtype::VndShp));
    assert_eq!("VnD.ShP".parse::<Subtype>(), Ok(Subtype::VndShp));
    assert_eq!("vnd.shx".parse::<Subtype>(), Ok(Subtype::VndShx));
    assert_eq!("VNd.SHx".parse::<Subtype>(), Ok(Subtype::VndShx));
    assert_eq!("vnd.sigrok.session".parse::<Subtype>(), Ok(Subtype::VndSigrokSession));
    assert_eq!("vND.SIGroK.SEsSioN".parse::<Subtype>(), Ok(Subtype::VndSigrokSession));
    assert_eq!("vnd.SimTech-MindMapper".parse::<Subtype>(), Ok(Subtype::VndSimTechMindMapper));
    assert_eq!("vnD.sIMtecH-mindMaPpEr".parse::<Subtype>(), Ok(Subtype::VndSimTechMindMapper));
    assert_eq!("vnd.siren".parse::<Subtype>(), Ok(Subtype::VndSiren));
    assert_eq!("VNd.Siren".parse::<Subtype>(), Ok(Subtype::VndSiren));
    assert_eq!("vnd.smaf".parse::<Subtype>(), Ok(Subtype::VndSmaf));
    assert_eq!("VND.SMAF".parse::<Subtype>(), Ok(Subtype::VndSmaf));
    assert_eq!("vnd.smart.notebook".parse::<Subtype>(), Ok(Subtype::VndSmartNotebook));
    assert_eq!("vND.sMArt.NotebOoK".parse::<Subtype>(), Ok(Subtype::VndSmartNotebook));
    assert_eq!("vnd.smart.teacher".parse::<Subtype>(), Ok(Subtype::VndSmartTeacher));
    assert_eq!("vND.SMarT.TeaCher".parse::<Subtype>(), Ok(Subtype::VndSmartTeacher));
    assert_eq!("vnd.snesdev-page-table".parse::<Subtype>(), Ok(Subtype::VndSnesdevPageTable));
    assert_eq!("vNd.SNeSdEv-pAgE-TABLe".parse::<Subtype>(), Ok(Subtype::VndSnesdevPageTable));
    assert_eq!("vnd.software602.filler.form".parse::<Subtype>(), Ok(Subtype::VndSoftware602FillerForm));
    assert_eq!("vND.SoFtwarE602.filler.fORM".parse::<Subtype>(), Ok(Subtype::VndSoftware602FillerForm));
    assert_eq!("vnd.software602.filler.form-xml-zip".parse::<Subtype>(), Ok(Subtype::VndSoftware602FillerFormXmlZip));
    assert_eq!("vNd.sOFtWARe602.fILLer.fOrm-xMl-ziP".parse::<Subtype>(), Ok(Subtype::VndSoftware602FillerFormXmlZip));
    assert_eq!("vnd.solent.sdkm".parse::<Subtype>(), Ok(Subtype::VndSolentSdkm));
    assert_eq!("vnd.sOLEnT.sdkm".parse::<Subtype>(), Ok(Subtype::VndSolentSdkm));
    assert_eq!("vnd.sosi".parse::<Subtype>(), Ok(Subtype::VndSosi));
    assert_eq!("VND.Sosi".parse::<Subtype>(), Ok(Subtype::VndSosi));
    assert_eq!("vnd.spotfire.dxp".parse::<Subtype>(), Ok(Subtype::VndSpotfireDxp));
    assert_eq!("VNd.SPOTfiRe.DXP".parse::<Subtype>(), Ok(Subtype::VndSpotfireDxp));
    assert_eq!("vnd.spotfire.sfs".parse::<Subtype>(), Ok(Subtype::VndSpotfireSfs));
    assert_eq!("vnD.SpoTfIRE.Sfs".parse::<Subtype>(), Ok(Subtype::VndSpotfireSfs));
    assert_eq!("vnd.sqlite3".parse::<Subtype>(), Ok(Subtype::VndSqlite3));
    assert_eq!("Vnd.SQLITE3".parse::<Subtype>(), Ok(Subtype::VndSqlite3));
    assert_eq!("vnd.sss-cod".parse::<Subtype>(), Ok(Subtype::VndSssCod));
    assert_eq!("vND.Sss-CoD".parse::<Subtype>(), Ok(Subtype::VndSssCod));
    assert_eq!("vnd.sss-dtf".parse::<Subtype>(), Ok(Subtype::VndSssDtf));
    assert_eq!("vnd.sSs-dTf".parse::<Subtype>(), Ok(Subtype::VndSssDtf));
    assert_eq!("vnd.sss-ntf".parse::<Subtype>(), Ok(Subtype::VndSssNtf));
    assert_eq!("VND.sSs-Ntf".parse::<Subtype>(), Ok(Subtype::VndSssNtf));
    assert_eq!("vnd.stardivision.calc".parse::<Subtype>(), Ok(Subtype::VndStardivisionCalc));
    assert_eq!("VNd.sTardiVIsION.CAlc".parse::<Subtype>(), Ok(Subtype::VndStardivisionCalc));
    assert_eq!("vnd.stardivision.chart".parse::<Subtype>(), Ok(Subtype::VndStardivisionChart));
    assert_eq!("vNd.sTARDIVision.CHaRt".parse::<Subtype>(), Ok(Subtype::VndStardivisionChart));
    assert_eq!("vnd.stardivision.draw".parse::<Subtype>(), Ok(Subtype::VndStardivisionDraw));
    assert_eq!("vnD.staRDiVISIon.dRAW".parse::<Subtype>(), Ok(Subtype::VndStardivisionDraw));
    assert_eq!("vnd.stardivision.impress".parse::<Subtype>(), Ok(Subtype::VndStardivisionImpress));
    assert_eq!("VnD.STARdiVIsION.iMpRESs".parse::<Subtype>(), Ok(Subtype::VndStardivisionImpress));
    assert_eq!("vnd.stardivision.math".parse::<Subtype>(), Ok(Subtype::VndStardivisionMath));
    assert_eq!("vnD.StARdIVIsiON.MATh".parse::<Subtype>(), Ok(Subtype::VndStardivisionMath));
    assert_eq!("vnd.stardivision.writer".parse::<Subtype>(), Ok(Subtype::VndStardivisionWriter));
    assert_eq!("vnd.STARdIvIsion.wriTER".parse::<Subtype>(), Ok(Subtype::VndStardivisionWriter));
    assert_eq!("vnd.stardivision.writer-global".parse::<Subtype>(), Ok(Subtype::VndStardivisionWriterGlobal));
    assert_eq!("Vnd.sTArDIVISioN.writER-GlobAl".parse::<Subtype>(), Ok(Subtype::VndStardivisionWriterGlobal));
    assert_eq!("vnd.stepmania.package".parse::<Subtype>(), Ok(Subtype::VndStepmaniaPackage));
    assert_eq!("vnd.STEPMAniA.paCKaGe".parse::<Subtype>(), Ok(Subtype::VndStepmaniaPackage));
    assert_eq!("vnd.stepmania.stepchart".parse::<Subtype>(), Ok(Subtype::VndStepmaniaStepchart));
    assert_eq!("VnD.StEpmANia.StePchaRt".parse::<Subtype>(), Ok(Subtype::VndStepmaniaStepchart));
    assert_eq!("vnd.street-stream".parse::<Subtype>(), Ok(Subtype::VndStreetStream));
    assert_eq!("vnd.streEt-STREaM".parse::<Subtype>(), Ok(Subtype::VndStreetStream));
    assert_eq!("vnd.sun.j2me.app-descriptor".parse::<Subtype>(), Ok(Subtype::VndSunJ2meAppDescriptor));
    assert_eq!("vnD.SUn.j2ME.App-DeScRiptOR".parse::<Subtype>(), Ok(Subtype::VndSunJ2meAppDescriptor));
    assert_eq!("vnd.sun.wadl".parse::<Subtype>(), Ok(Subtype::VndSunWadl));
    assert_eq!("vND.SuN.Wadl".parse::<Subtype>(), Ok(Subtype::VndSunWadl));
    assert_eq!("vnd.sun.xml.calc".parse::<Subtype>(), Ok(Subtype::VndSunXmlCalc));
    assert_eq!("vnD.SUn.xMl.calC".parse::<Subtype>(), Ok(Subtype::VndSunXmlCalc));
    assert_eq!("vnd.sun.xml.calc.template".parse::<Subtype>(), Ok(Subtype::VndSunXmlCalcTemplate));
    assert_eq!("VND.sUn.XML.CaLc.tEMplAtE".parse::<Subtype>(), Ok(Subtype::VndSunXmlCalcTemplate));
    assert_eq!("vnd.sun.xml.draw".parse::<Subtype>(), Ok(Subtype::VndSunXmlDraw));
    assert_eq!("vND.sUn.XML.draW".parse::<Subtype>(), Ok(Subtype::VndSunXmlDraw));
    assert_eq!("vnd.sun.xml.draw.template".parse::<Subtype>(), Ok(Subtype::VndSunXmlDrawTemplate));
    assert_eq!("vnd.SUn.xMl.dRaw.teMPLATe".parse::<Subtype>(), Ok(Subtype::VndSunXmlDrawTemplate));
    assert_eq!("vnd.sun.xml.impress".parse::<Subtype>(), Ok(Subtype::VndSunXmlImpress));
    assert_eq!("vnd.Sun.XMl.iMPrESS".parse::<Subtype>(), Ok(Subtype::VndSunXmlImpress));
    assert_eq!("vnd.sun.xml.impress.template".parse::<Subtype>(), Ok(Subtype::VndSunXmlImpressTemplate));
    assert_eq!("VNd.sun.xml.imPrESs.TemPlATe".parse::<Subtype>(), Ok(Subtype::VndSunXmlImpressTemplate));
    assert_eq!("vnd.sun.xml.math".parse::<Subtype>(), Ok(Subtype::VndSunXmlMath));
    assert_eq!("Vnd.SUN.xml.MATH".parse::<Subtype>(), Ok(Subtype::VndSunXmlMath));
    assert_eq!("vnd.sun.xml.writer".parse::<Subtype>(), Ok(Subtype::VndSunXmlWriter));
    assert_eq!("vND.SUn.Xml.WRItEr".parse::<Subtype>(), Ok(Subtype::VndSunXmlWriter));
    assert_eq!("vnd.sun.xml.writer.global".parse::<Subtype>(), Ok(Subtype::VndSunXmlWriterGlobal));
    assert_eq!("vnD.sUN.XMl.wRiTer.GloBal".parse::<Subtype>(), Ok(Subtype::VndSunXmlWriterGlobal));
    assert_eq!("vnd.sun.xml.writer.template".parse::<Subtype>(), Ok(Subtype::VndSunXmlWriterTemplate));
    assert_eq!("vND.SuN.Xml.WrIter.temPlaTE".parse::<Subtype>(), Ok(Subtype::VndSunXmlWriterTemplate));
    assert_eq!("vnd.sus-calendar".parse::<Subtype>(), Ok(Subtype::VndSusCalendar));
    assert_eq!("VnD.sus-CALENdAr".parse::<Subtype>(), Ok(Subtype::VndSusCalendar));
    assert_eq!("vnd.svd".parse::<Subtype>(), Ok(Subtype::VndSvd));
    assert_eq!("Vnd.SVD".parse::<Subtype>(), Ok(Subtype::VndSvd));
    assert_eq!("vnd.svf".parse::<Subtype>(), Ok(Subtype::VndSvf));
    assert_eq!("vNd.svF".parse::<Subtype>(), Ok(Subtype::VndSvf));
    assert_eq!("vnd.swiftview-ics".parse::<Subtype>(), Ok(Subtype::VndSwiftviewIcs));
    assert_eq!("vNd.SWiFTviEw-IcS".parse::<Subtype>(), Ok(Subtype::VndSwiftviewIcs));
    assert_eq!("vnd.sycle".parse::<Subtype>(), Ok(Subtype::VndSycle));
    assert_eq!("vND.SycLE".parse::<Subtype>(), Ok(Subtype::VndSycle));
    assert_eq!("vnd.syft".parse::<Subtype>(), Ok(Subtype::VndSyft));
    assert_eq!("vND.sYFt".parse::<Subtype>(), Ok(Subtype::VndSyft));
    assert_eq!("vnd.symbian.install".parse::<Subtype>(), Ok(Subtype::VndSymbianInstall));
    assert_eq!("VNd.Symbian.INStall".parse::<Subtype>(), Ok(Subtype::VndSymbianInstall));
    assert_eq!("vnd.syncml".parse::<Subtype>(), Ok(Subtype::VndSyncml));
    assert_eq!("VNd.SYNcMl".parse::<Subtype>(), Ok(Subtype::VndSyncml));
    assert_eq!("vnd.syncml.dm".parse::<Subtype>(), Ok(Subtype::VndSyncmlDm));
    assert_eq!("VNd.syNCmL.DM".parse::<Subtype>(), Ok(Subtype::VndSyncmlDm));
    assert_eq!("vnd.syncml.dm.notification".parse::<Subtype>(), Ok(Subtype::VndSyncmlDmNotification));
    assert_eq!("vnD.syNCmL.dm.noTifIcAtiON".parse::<Subtype>(), Ok(Subtype::VndSyncmlDmNotification));
    assert_eq!("vnd.syncml.dmddf".parse::<Subtype>(), Ok(Subtype::VndSyncmlDmddf));
    assert_eq!("VnD.SyncMl.dMddf".parse::<Subtype>(), Ok(Subtype::VndSyncmlDmddf));
    assert_eq!("vnd.syncml.dmtnds".parse::<Subtype>(), Ok(Subtype::VndSyncmlDmtnds));
    assert_eq!("vNd.sYnCML.dMtNdS".parse::<Subtype>(), Ok(Subtype::VndSyncmlDmtnds));
    assert_eq!("vnd.syncml.ds.notification".parse::<Subtype>(), Ok(Subtype::VndSyncmlDsNotification));
    assert_eq!("Vnd.sYNcML.ds.NOTifIcAtIon".parse::<Subtype>(), Ok(Subtype::VndSyncmlDsNotification));
    assert_eq!("vnd.tableschema".parse::<Subtype>(), Ok(Subtype::VndTableschema));
    assert_eq!("vNd.tAblESChEma".parse::<Subtype>(), Ok(Subtype::VndTableschema));
    assert_eq!("vnd.tao.intent-module-archive".parse::<Subtype>(), Ok(Subtype::VndTaoIntentModuleArchive));
    assert_eq!("Vnd.tAO.inTenT-MoDuLE-ARCHiVe".parse::<Subtype>(), Ok(Subtype::VndTaoIntentModuleArchive));
    assert_eq!("vnd.tcpdump.pcap".parse::<Subtype>(), Ok(Subtype::VndTcpdumpPcap));
    assert_eq!("Vnd.TcpDUMp.pCaP".parse::<Subtype>(), Ok(Subtype::VndTcpdumpPcap));
    assert_eq!("vnd.tencent.tap".parse::<Subtype>(), Ok(Subtype::VndTencentTap));
    assert_eq!("Vnd.TEncEnT.taP".parse::<Subtype>(), Ok(Subtype::VndTencentTap));
    assert_eq!("vnd.theqvd".parse::<Subtype>(), Ok(Subtype::VndTheqvd));
    assert_eq!("vnD.tHeqVD".parse::<Subtype>(), Ok(Subtype::VndTheqvd));
    assert_eq!("vnd.think-cell.ppttc".parse::<Subtype>(), Ok(Subtype::VndThinkCellPpttc));
    assert_eq!("VNd.ThinK-Cell.pPtTc".parse::<Subtype>(), Ok(Subtype::VndThinkCellPpttc));
    assert_eq!("vnd.tmd.mediaflex.api".parse::<Subtype>(), Ok(Subtype::VndTmdMediaflexApi));
    assert_eq!("vnD.tMd.MEDIAfleX.api".parse::<Subtype>(), Ok(Subtype::VndTmdMediaflexApi));
    assert_eq!("vnd.tml".parse::<Subtype>(), Ok(Subtype::VndTml));
    assert_eq!("vnd.tMl".parse::<Subtype>(), Ok(Subtype::VndTml));
    assert_eq!("vnd.tmobile-livetv".parse::<Subtype>(), Ok(Subtype::VndTmobileLivetv));
    assert_eq!("vnd.TMOBILE-lIvETv".parse::<Subtype>(), Ok(Subtype::VndTmobileLivetv));
    assert_eq!("vnd.tri.onesource".parse::<Subtype>(), Ok(Subtype::VndTriOnesource));
    assert_eq!("vND.TrI.onesOuRCe".parse::<Subtype>(), Ok(Subtype::VndTriOnesource));
    assert_eq!("vnd.trid.tpt".parse::<Subtype>(), Ok(Subtype::VndTridTpt));
    assert_eq!("vnd.tRID.tpT".parse::<Subtype>(), Ok(Subtype::VndTridTpt));
    assert_eq!("vnd.triscape.mxs".parse::<Subtype>(), Ok(Subtype::VndTriscapeMxs));
    assert_eq!("vnd.trISCAPE.mXS".parse::<Subtype>(), Ok(Subtype::VndTriscapeMxs));
    assert_eq!("vnd.trolltech.linguist".parse::<Subtype>(), Ok(Subtype::VndTrolltechLinguist));
    assert_eq!("vNd.TRoLlTECH.liNGuiST".parse::<Subtype>(), Ok(Subtype::VndTrolltechLinguist));
    assert_eq!("vnd.trueapp".parse::<Subtype>(), Ok(Subtype::VndTrueapp));
    assert_eq!("VND.TrUEaPP".parse::<Subtype>(), Ok(Subtype::VndTrueapp));
    assert_eq!("vnd.truedoc".parse::<Subtype>(), Ok(Subtype::VndTruedoc));
    assert_eq!("vND.TrUEDoc".parse::<Subtype>(), Ok(Subtype::VndTruedoc));
    assert_eq!("vnd.ubisoft.webplayer".parse::<Subtype>(), Ok(Subtype::VndUbisoftWebplayer));
    assert_eq!("vnd.uBisoFT.weBPlAyeR".parse::<Subtype>(), Ok(Subtype::VndUbisoftWebplayer));
    assert_eq!("vnd.ufdl".parse::<Subtype>(), Ok(Subtype::VndUfdl));
    assert_eq!("vnD.uFdl".parse::<Subtype>(), Ok(Subtype::VndUfdl));
    assert_eq!("vnd.uiq.theme".parse::<Subtype>(), Ok(Subtype::VndUiqTheme));
    assert_eq!("VNd.uIQ.THEMe".parse::<Subtype>(), Ok(Subtype::VndUiqTheme));
    assert_eq!("vnd.umajin".parse::<Subtype>(), Ok(Subtype::VndUmajin));
    assert_eq!("Vnd.UMAJIN".parse::<Subtype>(), Ok(Subtype::VndUmajin));
    assert_eq!("vnd.unity".parse::<Subtype>(), Ok(Subtype::VndUnity));
    assert_eq!("vNd.uNitY".parse::<Subtype>(), Ok(Subtype::VndUnity));
    assert_eq!("vnd.uoml".parse::<Subtype>(), Ok(Subtype::VndUoml));
    assert_eq!("VND.uOml".parse::<Subtype>(), Ok(Subtype::VndUoml));
    assert_eq!("vnd.uplanet.alert".parse::<Subtype>(), Ok(Subtype::VndUplanetAlert));
    assert_eq!("vNd.UPLANet.alErT".parse::<Subtype>(), Ok(Subtype::VndUplanetAlert));
    assert_eq!("vnd.uplanet.alert-wbxml".parse::<Subtype>(), Ok(Subtype::VndUplanetAlertWbxml));
    assert_eq!("vNd.UPlAnet.alErt-wbXml".parse::<Subtype>(), Ok(Subtype::VndUplanetAlertWbxml));
    assert_eq!("vnd.uplanet.bearer-choice".parse::<Subtype>(), Ok(Subtype::VndUplanetBearerChoice));
    assert_eq!("VNd.UpLANeT.BeAReR-ChoicE".parse::<Subtype>(), Ok(Subtype::VndUplanetBearerChoice));
    assert_eq!("vnd.uplanet.bearer-choice-wbxml".parse::<Subtype>(), Ok(Subtype::VndUplanetBearerChoiceWbxml));
    assert_eq!("vNd.uPLanEt.bearEr-CHoIce-WbXMl".parse::<Subtype>(), Ok(Subtype::VndUplanetBearerChoiceWbxml));
    assert_eq!("vnd.uplanet.cacheop".parse::<Subtype>(), Ok(Subtype::VndUplanetCacheop));
    assert_eq!("VnD.UplANET.cACheoP".parse::<Subtype>(), Ok(Subtype::VndUplanetCacheop));
    assert_eq!("vnd.uplanet.cacheop-wbxml".parse::<Subtype>(), Ok(Subtype::VndUplanetCacheopWbxml));
    assert_eq!("vnd.uPlaNET.cacHEoP-WbxML".parse::<Subtype>(), Ok(Subtype::VndUplanetCacheopWbxml));
    assert_eq!("vnd.uplanet.channel".parse::<Subtype>(), Ok(Subtype::VndUplanetChannel));
    assert_eq!("vnD.uplanET.chanNEl".parse::<Subtype>(), Ok(Subtype::VndUplanetChannel));
    assert_eq!("vnd.uplanet.channel-wbxml".parse::<Subtype>(), Ok(Subtype::VndUplanetChannelWbxml));
    assert_eq!("vnd.UPlAnEt.CHAnNeL-wBXML".parse::<Subtype>(), Ok(Subtype::VndUplanetChannelWbxml));
    assert_eq!("vnd.uplanet.list".parse::<Subtype>(), Ok(Subtype::VndUplanetList));
    assert_eq!("vNd.UPLANeT.lIST".parse::<Subtype>(), Ok(Subtype::VndUplanetList));
    assert_eq!("vnd.uplanet.list-wbxml".parse::<Subtype>(), Ok(Subtype::VndUplanetListWbxml));
    assert_eq!("VNd.uplAnet.LIST-WBxML".parse::<Subtype>(), Ok(Subtype::VndUplanetListWbxml));
    assert_eq!("vnd.uplanet.listcmd".parse::<Subtype>(), Ok(Subtype::VndUplanetListcmd));
    assert_eq!("vNd.uPlAnet.liSTcMd".parse::<Subtype>(), Ok(Subtype::VndUplanetListcmd));
    assert_eq!("vnd.uplanet.listcmd-wbxml".parse::<Subtype>(), Ok(Subtype::VndUplanetListcmdWbxml));
    assert_eq!("vNd.upLANeT.LISTcMd-wbxML".parse::<Subtype>(), Ok(Subtype::VndUplanetListcmdWbxml));
    assert_eq!("vnd.uplanet.signal".parse::<Subtype>(), Ok(Subtype::VndUplanetSignal));
    assert_eq!("Vnd.UPlAnet.SIgNAL".parse::<Subtype>(), Ok(Subtype::VndUplanetSignal));
    assert_eq!("vnd.uri-map".parse::<Subtype>(), Ok(Subtype::VndUriMap));
    assert_eq!("VND.uri-mAp".parse::<Subtype>(), Ok(Subtype::VndUriMap));
    assert_eq!("vnd.usdz".parse::<Subtype>(), Ok(Subtype::VndUsdz));
    assert_eq!("vnd.usDz".parse::<Subtype>(), Ok(Subtype::VndUsdz));
    assert_eq!("vnd.uvvu.mp4".parse::<Subtype>(), Ok(Subtype::VndUvvuMp4));
    assert_eq!("VnD.UVVU.mP4".parse::<Subtype>(), Ok(Subtype::VndUvvuMp4));
    assert_eq!("vnd.valve.source.compiled-map".parse::<Subtype>(), Ok(Subtype::VndValveSourceCompiledMap));
    assert_eq!("vnD.VaLVe.sOURCe.CoMPilEd-Map".parse::<Subtype>(), Ok(Subtype::VndValveSourceCompiledMap));
    assert_eq!("vnd.valve.source.material".parse::<Subtype>(), Ok(Subtype::VndValveSourceMaterial));
    assert_eq!("VNd.VALVE.SOUrcE.mAtERiAl".parse::<Subtype>(), Ok(Subtype::VndValveSourceMaterial));
    assert_eq!("vnd.valve.source.texture".parse::<Subtype>(), Ok(Subtype::VndValveSourceTexture));
    assert_eq!("vND.valVE.soUrcE.teXtURe".parse::<Subtype>(), Ok(Subtype::VndValveSourceTexture));
    assert_eq!("vnd.vcx".parse::<Subtype>(), Ok(Subtype::VndVcx));
    assert_eq!("vnD.VCx".parse::<Subtype>(), Ok(Subtype::VndVcx));
    assert_eq!("vnd.vd-study".parse::<Subtype>(), Ok(Subtype::VndVdStudy));
    assert_eq!("Vnd.vd-STudy".parse::<Subtype>(), Ok(Subtype::VndVdStudy));
    assert_eq!("vnd.vectorworks".parse::<Subtype>(), Ok(Subtype::VndVectorworks));
    assert_eq!("vnD.vEctoRworKS".parse::<Subtype>(), Ok(Subtype::VndVectorworks));
    assert_eq!("vnd.vel".parse::<Subtype>(), Ok(Subtype::VndVel));
    assert_eq!("Vnd.VeL".parse::<Subtype>(), Ok(Subtype::VndVel));
    assert_eq!("vnd.verimatrix.vcas".parse::<Subtype>(), Ok(Subtype::VndVerimatrixVcas));
    assert_eq!("VND.veriMatRiX.VCas".parse::<Subtype>(), Ok(Subtype::VndVerimatrixVcas));
    assert_eq!("vnd.veritone.aion".parse::<Subtype>(), Ok(Subtype::VndVeritoneAion));
    assert_eq!("VND.vERiTone.AioN".parse::<Subtype>(), Ok(Subtype::VndVeritoneAion));
    assert_eq!("vnd.veryant.thin".parse::<Subtype>(), Ok(Subtype::VndVeryantThin));
    assert_eq!("Vnd.vEryAnT.thin".parse::<Subtype>(), Ok(Subtype::VndVeryantThin));
    assert_eq!("vnd.ves.encrypted".parse::<Subtype>(), Ok(Subtype::VndVesEncrypted));
    assert_eq!("vnd.VES.EnCryPtEd".parse::<Subtype>(), Ok(Subtype::VndVesEncrypted));
    assert_eq!("vnd.vidsoft.vidconference".parse::<Subtype>(), Ok(Subtype::VndVidsoftVidconference));
    assert_eq!("vNd.VIDsOft.vidcOnFEREncE".parse::<Subtype>(), Ok(Subtype::VndVidsoftVidconference));
    assert_eq!("vnd.visio".parse::<Subtype>(), Ok(Subtype::VndVisio));
    assert_eq!("vnD.ViSIo".parse::<Subtype>(), Ok(Subtype::VndVisio));
    assert_eq!("vnd.visionary".parse::<Subtype>(), Ok(Subtype::VndVisionary));
    assert_eq!("vnD.VIsionaRy".parse::<Subtype>(), Ok(Subtype::VndVisionary));
    assert_eq!("vnd.vividence.scriptfile".parse::<Subtype>(), Ok(Subtype::VndVividenceScriptfile));
    assert_eq!("vnd.VIVidENce.sCRIPTFILE".parse::<Subtype>(), Ok(Subtype::VndVividenceScriptfile));
    assert_eq!("vnd.vivo".parse::<Subtype>(), Ok(Subtype::VndVivo));
    assert_eq!("vNd.VIvO".parse::<Subtype>(), Ok(Subtype::VndVivo));
    assert_eq!("vnd.vmx.cvsd".parse::<Subtype>(), Ok(Subtype::VndVmxCvsd));
    assert_eq!("VnD.VMX.cVSd".parse::<Subtype>(), Ok(Subtype::VndVmxCvsd));
    assert_eq!("vnd.vsf".parse::<Subtype>(), Ok(Subtype::VndVsf));
    assert_eq!("vnD.vsF".parse::<Subtype>(), Ok(Subtype::VndVsf));
    assert_eq!("vnd.vtu".parse::<Subtype>(), Ok(Subtype::VndVtu));
    assert_eq!("Vnd.VTu".parse::<Subtype>(), Ok(Subtype::VndVtu));
    assert_eq!("vnd.wap.si".parse::<Subtype>(), Ok(Subtype::VndWapSi));
    assert_eq!("vnd.WAP.sI".parse::<Subtype>(), Ok(Subtype::VndWapSi));
    assert_eq!("vnd.wap.sic".parse::<Subtype>(), Ok(Subtype::VndWapSic));
    assert_eq!("vnD.wap.SiC".parse::<Subtype>(), Ok(Subtype::VndWapSic));
    assert_eq!("vnd.wap.sl".parse::<Subtype>(), Ok(Subtype::VndWapSl));
    assert_eq!("VNd.WaP.Sl".parse::<Subtype>(), Ok(Subtype::VndWapSl));
    assert_eq!("vnd.wap.slc".parse::<Subtype>(), Ok(Subtype::VndWapSlc));
    assert_eq!("vnD.WAP.SlC".parse::<Subtype>(), Ok(Subtype::VndWapSlc));
    assert_eq!("vnd.wap.wbmp".parse::<Subtype>(), Ok(Subtype::VndWapWbmp));
    assert_eq!("vND.wAp.wbmp".parse::<Subtype>(), Ok(Subtype::VndWapWbmp));
    assert_eq!("vnd.wap.wbxml".parse::<Subtype>(), Ok(Subtype::VndWapWbxml));
    assert_eq!("VNd.wAP.wBXML".parse::<Subtype>(), Ok(Subtype::VndWapWbxml));
    assert_eq!("vnd.wap.wml".parse::<Subtype>(), Ok(Subtype::VndWapWml));
    assert_eq!("vnD.wap.wml".parse::<Subtype>(), Ok(Subtype::VndWapWml));
    assert_eq!("vnd.wap.wmlc".parse::<Subtype>(), Ok(Subtype::VndWapWmlc));
    assert_eq!("VND.WaP.WMLC".parse::<Subtype>(), Ok(Subtype::VndWapWmlc));
    assert_eq!("vnd.wap.wmlscript".parse::<Subtype>(), Ok(Subtype::VndWapWmlscript));
    assert_eq!("VnD.wAp.wmLscRIPT".parse::<Subtype>(), Ok(Subtype::VndWapWmlscript));
    assert_eq!("vnd.wap.wmlscriptc".parse::<Subtype>(), Ok(Subtype::VndWapWmlscriptc));
    assert_eq!("vND.WAp.WmlScrIpTC".parse::<Subtype>(), Ok(Subtype::VndWapWmlscriptc));
    assert_eq!("vnd.webturbo".parse::<Subtype>(), Ok(Subtype::VndWebturbo));
    assert_eq!("vNd.WEbTurBo".parse::<Subtype>(), Ok(Subtype::VndWebturbo));
    assert_eq!("vnd.wfa.dpp".parse::<Subtype>(), Ok(Subtype::VndWfaDpp));
    assert_eq!("VND.Wfa.DpP".parse::<Subtype>(), Ok(Subtype::VndWfaDpp));
    assert_eq!("vnd.wfa.p2p".parse::<Subtype>(), Ok(Subtype::VndWfaP2p));
    assert_eq!("VnD.wfa.P2p".parse::<Subtype>(), Ok(Subtype::VndWfaP2p));
    assert_eq!("vnd.wfa.wsc".parse::<Subtype>(), Ok(Subtype::VndWfaWsc));
    assert_eq!("VNd.WFA.Wsc".parse::<Subtype>(), Ok(Subtype::VndWfaWsc));
    assert_eq!("vnd.windows.devicepairing".parse::<Subtype>(), Ok(Subtype::VndWindowsDevicepairing));
    assert_eq!("vnd.wiNDoWS.DevIcEPAiRing".parse::<Subtype>(), Ok(Subtype::VndWindowsDevicepairing));
    assert_eq!("vnd.wmc".parse::<Subtype>(), Ok(Subtype::VndWmc));
    assert_eq!("vNd.WMc".parse::<Subtype>(), Ok(Subtype::VndWmc));
    assert_eq!("vnd.wmf.bootstrap".parse::<Subtype>(), Ok(Subtype::VndWmfBootstrap));
    assert_eq!("VnD.WmF.BOotSTRAP".parse::<Subtype>(), Ok(Subtype::VndWmfBootstrap));
    assert_eq!("vnd.wolfram.mathematica".parse::<Subtype>(), Ok(Subtype::VndWolframMathematica));
    assert_eq!("vnD.WoLfrAm.maTHEmATiCa".parse::<Subtype>(), Ok(Subtype::VndWolframMathematica));
    assert_eq!("vnd.wolfram.mathematica.package".parse::<Subtype>(), Ok(Subtype::VndWolframMathematicaPackage));
    assert_eq!("VND.WOlFRam.MaTHEMaTICA.PackaGe".parse::<Subtype>(), Ok(Subtype::VndWolframMathematicaPackage));
    assert_eq!("vnd.wolfram.player".parse::<Subtype>(), Ok(Subtype::VndWolframPlayer));
    assert_eq!("Vnd.WOLFRAm.plAYer".parse::<Subtype>(), Ok(Subtype::VndWolframPlayer));
    assert_eq!("vnd.wordperfect".parse::<Subtype>(), Ok(Subtype::VndWordperfect));
    assert_eq!("VnD.worDpERfect".parse::<Subtype>(), Ok(Subtype::VndWordperfect));
    assert_eq!("vnd.wordperfect5.1".parse::<Subtype>(), Ok(Subtype::VndWordperfect51));
    assert_eq!("VNd.woRDperfEcT5.1".parse::<Subtype>(), Ok(Subtype::VndWordperfect51));
    assert_eq!("vnd.wqd".parse::<Subtype>(), Ok(Subtype::VndWqd));
    assert_eq!("Vnd.wQd".parse::<Subtype>(), Ok(Subtype::VndWqd));
    assert_eq!("vnd.wrq-hp3000-labelled".parse::<Subtype>(), Ok(Subtype::VndWrqHp3000Labelled));
    assert_eq!("vnd.WRq-HP3000-lAbELlEd".parse::<Subtype>(), Ok(Subtype::VndWrqHp3000Labelled));
    assert_eq!("vnd.wt.stf".parse::<Subtype>(), Ok(Subtype::VndWtStf));
    assert_eq!("Vnd.wt.Stf".parse::<Subtype>(), Ok(Subtype::VndWtStf));
    assert_eq!("vnd.wv.csp".parse::<Subtype>(), Ok(Subtype::VndWvCsp));
    assert_eq!("Vnd.WV.cSP".parse::<Subtype>(), Ok(Subtype::VndWvCsp));
    assert_eq!("vnd.wv.ssp".parse::<Subtype>(), Ok(Subtype::VndWvSsp));
    assert_eq!("VND.wv.sSp".parse::<Subtype>(), Ok(Subtype::VndWvSsp));
    assert_eq!("vnd.xacml".parse::<Subtype>(), Ok(Subtype::VndXacml));
    assert_eq!("VnD.xACML".parse::<Subtype>(), Ok(Subtype::VndXacml));
    assert_eq!("vnd.xara".parse::<Subtype>(), Ok(Subtype::VndXara));
    assert_eq!("vnD.XarA".parse::<Subtype>(), Ok(Subtype::VndXara));
    assert_eq!("vnd.xfdl".parse::<Subtype>(), Ok(Subtype::VndXfdl));
    assert_eq!("Vnd.xfDl".parse::<Subtype>(), Ok(Subtype::VndXfdl));
    assert_eq!("vnd.xfdl.webform".parse::<Subtype>(), Ok(Subtype::VndXfdlWebform));
    assert_eq!("VND.XFDl.WebFOrM".parse::<Subtype>(), Ok(Subtype::VndXfdlWebform));
    assert_eq!("vnd.xiff".parse::<Subtype>(), Ok(Subtype::VndXiff));
    assert_eq!("Vnd.XIFF".parse::<Subtype>(), Ok(Subtype::VndXiff));
    assert_eq!("vnd.xmi".parse::<Subtype>(), Ok(Subtype::VndXmi));
    assert_eq!("VNd.Xmi".parse::<Subtype>(), Ok(Subtype::VndXmi));
    assert_eq!("vnd.xmpie.cpkg".parse::<Subtype>(), Ok(Subtype::VndXmpieCpkg));
    assert_eq!("VND.Xmpie.cpKg".parse::<Subtype>(), Ok(Subtype::VndXmpieCpkg));
    assert_eq!("vnd.xmpie.dpkg".parse::<Subtype>(), Ok(Subtype::VndXmpieDpkg));
    assert_eq!("VND.Xmpie.DPKg".parse::<Subtype>(), Ok(Subtype::VndXmpieDpkg));
    assert_eq!("vnd.xmpie.plan".parse::<Subtype>(), Ok(Subtype::VndXmpiePlan));
    assert_eq!("vnd.XMpie.pLaN".parse::<Subtype>(), Ok(Subtype::VndXmpiePlan));
    assert_eq!("vnd.xmpie.ppkg".parse::<Subtype>(), Ok(Subtype::VndXmpiePpkg));
    assert_eq!("VND.xmPIE.pPkg".parse::<Subtype>(), Ok(Subtype::VndXmpiePpkg));
    assert_eq!("vnd.xmpie.xlim".parse::<Subtype>(), Ok(Subtype::VndXmpieXlim));
    assert_eq!("vND.XMPie.XLIm".parse::<Subtype>(), Ok(Subtype::VndXmpieXlim));
    assert_eq!("vnd.yamaha.hv-dic".parse::<Subtype>(), Ok(Subtype::VndYamahaHvDic));
    assert_eq!("VND.yaMaHa.HV-dIc".parse::<Subtype>(), Ok(Subtype::VndYamahaHvDic));
    assert_eq!("vnd.yamaha.hv-script".parse::<Subtype>(), Ok(Subtype::VndYamahaHvScript));
    assert_eq!("VnD.yAMaha.hv-scRIPT".parse::<Subtype>(), Ok(Subtype::VndYamahaHvScript));
    assert_eq!("vnd.yamaha.hv-voice".parse::<Subtype>(), Ok(Subtype::VndYamahaHvVoice));
    assert_eq!("vnd.YAMAhA.HV-vOiCE".parse::<Subtype>(), Ok(Subtype::VndYamahaHvVoice));
    assert_eq!("vnd.yamaha.openscoreformat".parse::<Subtype>(), Ok(Subtype::VndYamahaOpenscoreformat));
    assert_eq!("vnd.YaMAhA.oPEnSCorEFormaT".parse::<Subtype>(), Ok(Subtype::VndYamahaOpenscoreformat));
    assert_eq!("vnd.yamaha.openscoreformat.osfpvg".parse::<Subtype>(), Ok(Subtype::VndYamahaOpenscoreformatOsfpvg));
    assert_eq!("vnd.yAMAHa.OpeNscoreForMat.osFpvG".parse::<Subtype>(), Ok(Subtype::VndYamahaOpenscoreformatOsfpvg));
    assert_eq!("vnd.yamaha.remote-setup".parse::<Subtype>(), Ok(Subtype::VndYamahaRemoteSetup));
    assert_eq!("vnD.YamahA.rEmOte-sETUp".parse::<Subtype>(), Ok(Subtype::VndYamahaRemoteSetup));
    assert_eq!("vnd.yamaha.smaf-audio".parse::<Subtype>(), Ok(Subtype::VndYamahaSmafAudio));
    assert_eq!("VnD.yaMAHA.SmAF-aUdio".parse::<Subtype>(), Ok(Subtype::VndYamahaSmafAudio));
    assert_eq!("vnd.yamaha.smaf-phrase".parse::<Subtype>(), Ok(Subtype::VndYamahaSmafPhrase));
    assert_eq!("VNd.yamAhA.SMaF-PHRaSe".parse::<Subtype>(), Ok(Subtype::VndYamahaSmafPhrase));
    assert_eq!("vnd.yamaha.through-ngn".parse::<Subtype>(), Ok(Subtype::VndYamahaThroughNgn));
    assert_eq!("VND.YAmaha.thrOuGh-NgN".parse::<Subtype>(), Ok(Subtype::VndYamahaThroughNgn));
    assert_eq!("vnd.yamaha.tunnel-udpencap".parse::<Subtype>(), Ok(Subtype::VndYamahaTunnelUdpencap));
    assert_eq!("Vnd.YAmaHA.tUNneL-UDPEnCap".parse::<Subtype>(), Ok(Subtype::VndYamahaTunnelUdpencap));
    assert_eq!("vnd.yaoweme".parse::<Subtype>(), Ok(Subtype::VndYaoweme));
    assert_eq!("vnd.YAoWEme".parse::<Subtype>(), Ok(Subtype::VndYaoweme));
    assert_eq!("vnd.yellowriver-custom-menu".parse::<Subtype>(), Ok(Subtype::VndYellowriverCustomMenu));
    assert_eq!("vND.YeLLowrIVEr-cUstom-meNu".parse::<Subtype>(), Ok(Subtype::VndYellowriverCustomMenu));
    assert_eq!("vnd.youtube.yt".parse::<Subtype>(), Ok(Subtype::VndYoutubeYt));
    assert_eq!("VNd.YoUtUBE.Yt".parse::<Subtype>(), Ok(Subtype::VndYoutubeYt));
    assert_eq!("vnd.zbrush.pcx".parse::<Subtype>(), Ok(Subtype::VndZbrushPcx));
    assert_eq!("VND.zbrush.pcx".parse::<Subtype>(), Ok(Subtype::VndZbrushPcx));
    assert_eq!("vnd.zul".parse::<Subtype>(), Ok(Subtype::VndZul));
    assert_eq!("VNd.zul".parse::<Subtype>(), Ok(Subtype::VndZul));
    assert_eq!("vnd.zzazz.deck".parse::<Subtype>(), Ok(Subtype::VndZzazzDeck));
    assert_eq!("vnd.ZZAzZ.DEck".parse::<Subtype>(), Ok(Subtype::VndZzazzDeck));
    assert_eq!("voice-message".parse::<Subtype>(), Ok(Subtype::VoiceMessage));
    assert_eq!("VoICE-mesSAgE".parse::<Subtype>(), Ok(Subtype::VoiceMessage));
    assert_eq!("voicexml".parse::<Subtype>(), Ok(Subtype::Voicexml));
    assert_eq!("VoIcExml".parse::<Subtype>(), Ok(Subtype::Voicexml));
    assert_eq!("vorbis".parse::<Subtype>(), Ok(Subtype::Vorbis));
    assert_eq!("vOrbIs".parse::<Subtype>(), Ok(Subtype::Vorbis));
    assert_eq!("vorbis-config".parse::<Subtype>(), Ok(Subtype::VorbisConfig));
    assert_eq!("VoRBiS-CONFig".parse::<Subtype>(), Ok(Subtype::VorbisConfig));
    assert_eq!("voucher-cms".parse::<Subtype>(), Ok(Subtype::VoucherCms));
    assert_eq!("vOUCHEr-cms".parse::<Subtype>(), Ok(Subtype::VoucherCms));
    assert_eq!("VP8".parse::<Subtype>(), Ok(Subtype::Vp8));
    assert_eq!("vp8".parse::<Subtype>(), Ok(Subtype::Vp8));
    assert_eq!("VP9".parse::<Subtype>(), Ok(Subtype::Vp9));
    assert_eq!("vp9".parse::<Subtype>(), Ok(Subtype::Vp9));
    assert_eq!("vq-rtcpxr".parse::<Subtype>(), Ok(Subtype::VqRtcpxr));
    assert_eq!("VQ-rtCpxr".parse::<Subtype>(), Ok(Subtype::VqRtcpxr));
    assert_eq!("vrml".parse::<Subtype>(), Ok(Subtype::Vrml));
    assert_eq!("VRML".parse::<Subtype>(), Ok(Subtype::Vrml));
    assert_eq!("vtt".parse::<Subtype>(), Ok(Subtype::Vtt));
    assert_eq!("vTt".parse::<Subtype>(), Ok(Subtype::Vtt));
    assert_eq!("wasm".parse::<Subtype>(), Ok(Subtype::Wasm));
    assert_eq!("WAsm".parse::<Subtype>(), Ok(Subtype::Wasm));
    assert_eq!("watcherinfo".parse::<Subtype>(), Ok(Subtype::Watcherinfo));
    assert_eq!("WAtChERiNFo".parse::<Subtype>(), Ok(Subtype::Watcherinfo));
    assert_eq!("webm".parse::<Subtype>(), Ok(Subtype::Webm));
    assert_eq!("WEbM".parse::<Subtype>(), Ok(Subtype::Webm));
    assert_eq!("webpush-options".parse::<Subtype>(), Ok(Subtype::WebpushOptions));
    assert_eq!("weBPusH-OPtIOnS".parse::<Subtype>(), Ok(Subtype::WebpushOptions));
    assert_eq!("whoispp-query".parse::<Subtype>(), Ok(Subtype::WhoisppQuery));
    assert_eq!("WHoiSpp-QuERY".parse::<Subtype>(), Ok(Subtype::WhoisppQuery));
    assert_eq!("whoispp-response".parse::<Subtype>(), Ok(Subtype::WhoisppResponse));
    assert_eq!("WHoIsPP-reSPONSE".parse::<Subtype>(), Ok(Subtype::WhoisppResponse));
    assert_eq!("widget".parse::<Subtype>(), Ok(Subtype::Widget));
    assert_eq!("WIDgeT".parse::<Subtype>(), Ok(Subtype::Widget));
    assert_eq!("wita".parse::<Subtype>(), Ok(Subtype::Wita));
    assert_eq!("wIta".parse::<Subtype>(), Ok(Subtype::Wita));
    assert_eq!("wmf".parse::<Subtype>(), Ok(Subtype::Wmf));
    assert_eq!("wmF".parse::<Subtype>(), Ok(Subtype::Wmf));
    assert_eq!("woff".parse::<Subtype>(), Ok(Subtype::Woff));
    assert_eq!("WOFf".parse::<Subtype>(), Ok(Subtype::Woff));
    assert_eq!("woff2".parse::<Subtype>(), Ok(Subtype::Woff2));
    assert_eq!("wOFf2".parse::<Subtype>(), Ok(Subtype::Woff2));
    assert_eq!("wordperfect5.1".parse::<Subtype>(), Ok(Subtype::Wordperfect51));
    assert_eq!("WoRDPeRFEcT5.1".parse::<Subtype>(), Ok(Subtype::Wordperfect51));
    assert_eq!("wsdl".parse::<Subtype>(), Ok(Subtype::Wsdl));
    assert_eq!("WSDl".parse::<Subtype>(), Ok(Subtype::Wsdl));
    assert_eq!("wspolicy".parse::<Subtype>(), Ok(Subtype::Wspolicy));
    assert_eq!("WspOliCY".parse::<Subtype>(), Ok(Subtype::Wspolicy));
    assert_eq!("x-123".parse::<Subtype>(), Ok(Subtype::X123));
    assert_eq!("X-123".parse::<Subtype>(), Ok(Subtype::X123));
    assert_eq!("x3d".parse::<Subtype>(), Ok(Subtype::X3d));
    assert_eq!("x3d".parse::<Subtype>(), Ok(Subtype::X3d));
    assert_eq!("x3d-vrml".parse::<Subtype>(), Ok(Subtype::X3dVrml));
    assert_eq!("X3D-VRmL".parse::<Subtype>(), Ok(Subtype::X3dVrml));
    assert_eq!("x400-bp".parse::<Subtype>(), Ok(Subtype::X400Bp));
    assert_eq!("x400-bP".parse::<Subtype>(), Ok(Subtype::X400Bp));
    assert_eq!("x-7z-compressed".parse::<Subtype>(), Ok(Subtype::X7zCompressed));
    assert_eq!("x-7Z-coMPrEsSED".parse::<Subtype>(), Ok(Subtype::X7zCompressed));
    assert_eq!("x-abiword".parse::<Subtype>(), Ok(Subtype::XAbiword));
    assert_eq!("x-AbiworD".parse::<Subtype>(), Ok(Subtype::XAbiword));
    assert_eq!("x-aiff".parse::<Subtype>(), Ok(Subtype::XAiff));
    assert_eq!("x-aifF".parse::<Subtype>(), Ok(Subtype::XAiff));
    assert_eq!("x-alchemy".parse::<Subtype>(), Ok(Subtype::XAlchemy));
    assert_eq!("x-alchemy".parse::<Subtype>(), Ok(Subtype::XAlchemy));
    assert_eq!("x-apple-diskimage".parse::<Subtype>(), Ok(Subtype::XAppleDiskimage));
    assert_eq!("x-APpLe-dISkImaGe".parse::<Subtype>(), Ok(Subtype::XAppleDiskimage));
    assert_eq!("x-bcpio".parse::<Subtype>(), Ok(Subtype::XBcpio));
    assert_eq!("X-BCpio".parse::<Subtype>(), Ok(Subtype::XBcpio));
    assert_eq!("x-bibtex".parse::<Subtype>(), Ok(Subtype::XBibtex));
    assert_eq!("x-BIbTEx".parse::<Subtype>(), Ok(Subtype::XBibtex));
    assert_eq!("x-bittorrent".parse::<Subtype>(), Ok(Subtype::XBittorrent));
    assert_eq!("x-BitTORrENt".parse::<Subtype>(), Ok(Subtype::XBittorrent));
    assert_eq!("x-boo".parse::<Subtype>(), Ok(Subtype::XBoo));
    assert_eq!("x-bOo".parse::<Subtype>(), Ok(Subtype::XBoo));
    assert_eq!("x-c".parse::<Subtype>(), Ok(Subtype::XC));
    assert_eq!("X-c".parse::<Subtype>(), Ok(Subtype::XC));
    assert_eq!("x-cache".parse::<Subtype>(), Ok(Subtype::XCache));
    assert_eq!("X-CAcHe".parse::<Subtype>(), Ok(Subtype::XCache));
    assert_eq!("x-cache-csf".parse::<Subtype>(), Ok(Subtype::XCacheCsf));
    assert_eq!("x-CAChE-CSF".parse::<Subtype>(), Ok(Subtype::XCacheCsf));
    assert_eq!("x-cactvs-binary".parse::<Subtype>(), Ok(Subtype::XCactvsBinary));
    assert_eq!("X-CactVs-binArY".parse::<Subtype>(), Ok(Subtype::XCactvsBinary));
    assert_eq!("x-canon-cr2".parse::<Subtype>(), Ok(Subtype::XCanonCr2));
    assert_eq!("X-canoN-cr2".parse::<Subtype>(), Ok(Subtype::XCanonCr2));
    assert_eq!("x-canon-crw".parse::<Subtype>(), Ok(Subtype::XCanonCrw));
    assert_eq!("x-cAnOn-cRW".parse::<Subtype>(), Ok(Subtype::XCanonCrw));
    assert_eq!("x-cdf".parse::<Subtype>(), Ok(Subtype::XCdf));
    assert_eq!("X-cDF".parse::<Subtype>(), Ok(Subtype::XCdf));
    assert_eq!("x-cdlink".parse::<Subtype>(), Ok(Subtype::XCdlink));
    assert_eq!("x-cdLInK".parse::<Subtype>(), Ok(Subtype::XCdlink));
    assert_eq!("x-cdx".parse::<Subtype>(), Ok(Subtype::XCdx));
    assert_eq!("x-cDX".parse::<Subtype>(), Ok(Subtype::XCdx));
    assert_eq!("x-cerius".parse::<Subtype>(), Ok(Subtype::XCerius));
    assert_eq!("x-cERiuS".parse::<Subtype>(), Ok(Subtype::XCerius));
    assert_eq!("x-chdr".parse::<Subtype>(), Ok(Subtype::XChdr));
    assert_eq!("x-chDR".parse::<Subtype>(), Ok(Subtype::XChdr));
    assert_eq!("x-chem3d".parse::<Subtype>(), Ok(Subtype::XChem3d));
    assert_eq!("X-CHeM3d".parse::<Subtype>(), Ok(Subtype::XChem3d));
    assert_eq!("x-chemdraw".parse::<Subtype>(), Ok(Subtype::XChemdraw));
    assert_eq!("x-chemDraW".parse::<Subtype>(), Ok(Subtype::XChemdraw));
    assert_eq!("x-cif".parse::<Subtype>(), Ok(Subtype::XCif));
    assert_eq!("X-CIF".parse::<Subtype>(), Ok(Subtype::XCif));
    assert_eq!("x-cmdf".parse::<Subtype>(), Ok(Subtype::XCmdf));
    assert_eq!("x-CMDF".parse::<Subtype>(), Ok(Subtype::XCmdf));
    assert_eq!("x-cml".parse::<Subtype>(), Ok(Subtype::XCml));
    assert_eq!("X-cML".parse::<Subtype>(), Ok(Subtype::XCml));
    assert_eq!("x-cmu-raster".parse::<Subtype>(), Ok(Subtype::XCmuRaster));
    assert_eq!("x-cMu-rAstEr".parse::<Subtype>(), Ok(Subtype::XCmuRaster));
    assert_eq!("x-compass".parse::<Subtype>(), Ok(Subtype::XCompass));
    assert_eq!("x-coMPASs".parse::<Subtype>(), Ok(Subtype::XCompass));
    assert_eq!("x-component".parse::<Subtype>(), Ok(Subtype::XComponent));
    assert_eq!("X-CoMponEnT".parse::<Subtype>(), Ok(Subtype::XComponent));
    assert_eq!("x-comsol".parse::<Subtype>(), Ok(Subtype::XComsol));
    assert_eq!("X-coMsOl".parse::<Subtype>(), Ok(Subtype::XComsol));
    assert_eq!("x-coreldraw".parse::<Subtype>(), Ok(Subtype::XCoreldraw));
    assert_eq!("X-coRElDRAW".parse::<Subtype>(), Ok(Subtype::XCoreldraw));
    assert_eq!("x-coreldrawpattern".parse::<Subtype>(), Ok(Subtype::XCoreldrawpattern));
    assert_eq!("X-CoReLDraWPAtTeRN".parse::<Subtype>(), Ok(Subtype::XCoreldrawpattern));
    assert_eq!("x-coreldrawtemplate".parse::<Subtype>(), Ok(Subtype::XCoreldrawtemplate));
    assert_eq!("x-coRELdRawTEmpLate".parse::<Subtype>(), Ok(Subtype::XCoreldrawtemplate));
    assert_eq!("x-corelphotopaint".parse::<Subtype>(), Ok(Subtype::XCorelphotopaint));
    assert_eq!("X-COrElPHotOpaiNT".parse::<Subtype>(), Ok(Subtype::XCorelphotopaint));
    assert_eq!("x-cpio".parse::<Subtype>(), Ok(Subtype::XCpio));
    assert_eq!("x-cPio".parse::<Subtype>(), Ok(Subtype::XCpio));
    assert_eq!("x-crossfire".parse::<Subtype>(), Ok(Subtype::XCrossfire));
    assert_eq!("x-cRoSSFIrE".parse::<Subtype>(), Ok(Subtype::XCrossfire));
    assert_eq!("x-csh".parse::<Subtype>(), Ok(Subtype::XCsh));
    assert_eq!("X-cSH".parse::<Subtype>(), Ok(Subtype::XCsh));
    assert_eq!("x-csml".parse::<Subtype>(), Ok(Subtype::XCsml));
    assert_eq!("x-CSMl".parse::<Subtype>(), Ok(Subtype::XCsml));
    assert_eq!("x-csrc".parse::<Subtype>(), Ok(Subtype::XCsrc));
    assert_eq!("X-cSRc".parse::<Subtype>(), Ok(Subtype::XCsrc));
    assert_eq!("x-ctx".parse::<Subtype>(), Ok(Subtype::XCtx));
    assert_eq!("x-CTx".parse::<Subtype>(), Ok(Subtype::XCtx));
    assert_eq!("x-cxf".parse::<Subtype>(), Ok(Subtype::XCxf));
    assert_eq!("x-CxF".parse::<Subtype>(), Ok(Subtype::XCxf));
    assert_eq!("x-diff".parse::<Subtype>(), Ok(Subtype::XDiff));
    assert_eq!("x-Diff".parse::<Subtype>(), Ok(Subtype::XDiff));
    assert_eq!("x-director".parse::<Subtype>(), Ok(Subtype::XDirector));
    assert_eq!("X-DireCTOr".parse::<Subtype>(), Ok(Subtype::XDirector));
    assert_eq!("x-doom".parse::<Subtype>(), Ok(Subtype::XDoom));
    assert_eq!("x-dOoM".parse::<Subtype>(), Ok(Subtype::XDoom));
    assert_eq!("x-dsrc".parse::<Subtype>(), Ok(Subtype::XDsrc));
    assert_eq!("x-dSrC".parse::<Subtype>(), Ok(Subtype::XDsrc));
    assert_eq!("x-dvi".parse::<Subtype>(), Ok(Subtype::XDvi));
    assert_eq!("X-dVI".parse::<Subtype>(), Ok(Subtype::XDvi));
    assert_eq!("x-embl-dl-nucleotide".parse::<Subtype>(), Ok(Subtype::XEmblDlNucleotide));
    assert_eq!("X-EmBl-Dl-nucLEOTiDe".parse::<Subtype>(), Ok(Subtype::XEmblDlNucleotide));
    assert_eq!("x-epson-erf".parse::<Subtype>(), Ok(Subtype::XEpsonErf));
    assert_eq!("x-epSoN-ERF".parse::<Subtype>(), Ok(Subtype::XEpsonErf));
    assert_eq!("x-flv".parse::<Subtype>(), Ok(Subtype::XFlv));
    assert_eq!("x-FLV".parse::<Subtype>(), Ok(Subtype::XFlv));
    assert_eq!("x-font".parse::<Subtype>(), Ok(Subtype::XFont));
    assert_eq!("X-FOnt".parse::<Subtype>(), Ok(Subtype::XFont));
    assert_eq!("x-font-pcf".parse::<Subtype>(), Ok(Subtype::XFontPcf));
    assert_eq!("x-fONt-pcf".parse::<Subtype>(), Ok(Subtype::XFontPcf));
    assert_eq!("x-freemind".parse::<Subtype>(), Ok(Subtype::XFreemind));
    assert_eq!("x-FrEeMINd".parse::<Subtype>(), Ok(Subtype::XFreemind));
    assert_eq!("x-galactic-spc".parse::<Subtype>(), Ok(Subtype::XGalacticSpc));
    assert_eq!("X-galaCTiC-Spc".parse::<Subtype>(), Ok(Subtype::XGalacticSpc));
    assert_eq!("x-gamess-input".parse::<Subtype>(), Ok(Subtype::XGamessInput));
    assert_eq!("x-GaMess-INput".parse::<Subtype>(), Ok(Subtype::XGamessInput));
    assert_eq!("x-ganttproject".parse::<Subtype>(), Ok(Subtype::XGanttproject));
    assert_eq!("x-gAnTTPROJECT".parse::<Subtype>(), Ok(Subtype::XGanttproject));
    assert_eq!("x-gaussian-checkpoint".parse::<Subtype>(), Ok(Subtype::XGaussianCheckpoint));
    assert_eq!("x-gaussiAn-CHecKpOinT".parse::<Subtype>(), Ok(Subtype::XGaussianCheckpoint));
    assert_eq!("x-gaussian-cube".parse::<Subtype>(), Ok(Subtype::XGaussianCube));
    assert_eq!("x-gAusSiAN-CUbe".parse::<Subtype>(), Ok(Subtype::XGaussianCube));
    assert_eq!("x-gaussian-input".parse::<Subtype>(), Ok(Subtype::XGaussianInput));
    assert_eq!("x-gaUSSian-inPUt".parse::<Subtype>(), Ok(Subtype::XGaussianInput));
    assert_eq!("x-gaussian-log".parse::<Subtype>(), Ok(Subtype::XGaussianLog));
    assert_eq!("X-gaussIan-LoG".parse::<Subtype>(), Ok(Subtype::XGaussianLog));
    assert_eq!("x-gcg8-sequence".parse::<Subtype>(), Ok(Subtype::XGcg8Sequence));
    assert_eq!("x-GCG8-sEqUeNce".parse::<Subtype>(), Ok(Subtype::XGcg8Sequence));
    assert_eq!("x-genbank".parse::<Subtype>(), Ok(Subtype::XGenbank));
    assert_eq!("X-gENBaNK".parse::<Subtype>(), Ok(Subtype::XGenbank));
    assert_eq!("x-gnumeric".parse::<Subtype>(), Ok(Subtype::XGnumeric));
    assert_eq!("X-gNUMERic".parse::<Subtype>(), Ok(Subtype::XGnumeric));
    assert_eq!("x-go-sgf".parse::<Subtype>(), Ok(Subtype::XGoSgf));
    assert_eq!("x-Go-SgF".parse::<Subtype>(), Ok(Subtype::XGoSgf));
    assert_eq!("x-graphing-calculator".parse::<Subtype>(), Ok(Subtype::XGraphingCalculator));
    assert_eq!("X-GrapHInG-cAlculaTOR".parse::<Subtype>(), Ok(Subtype::XGraphingCalculator));
    assert_eq!("x-gsm".parse::<Subtype>(), Ok(Subtype::XGsm));
    assert_eq!("X-gsM".parse::<Subtype>(), Ok(Subtype::XGsm));
    assert_eq!("x-gtar".parse::<Subtype>(), Ok(Subtype::XGtar));
    assert_eq!("x-Gtar".parse::<Subtype>(), Ok(Subtype::XGtar));
    assert_eq!("x-gtar-compressed".parse::<Subtype>(), Ok(Subtype::XGtarCompressed));
    assert_eq!("X-GtAR-coMPresseD".parse::<Subtype>(), Ok(Subtype::XGtarCompressed));
    assert_eq!("x-haskell".parse::<Subtype>(), Ok(Subtype::XHaskell));
    assert_eq!("X-hASKeLl".parse::<Subtype>(), Ok(Subtype::XHaskell));
    assert_eq!("x-hdf".parse::<Subtype>(), Ok(Subtype::XHdf));
    assert_eq!("X-HDf".parse::<Subtype>(), Ok(Subtype::XHdf));
    assert_eq!("x-hin".parse::<Subtype>(), Ok(Subtype::XHin));
    assert_eq!("x-HIN".parse::<Subtype>(), Ok(Subtype::XHin));
    assert_eq!("x-hwp".parse::<Subtype>(), Ok(Subtype::XHwp));
    assert_eq!("x-HWp".parse::<Subtype>(), Ok(Subtype::XHwp));
    assert_eq!("x-ica".parse::<Subtype>(), Ok(Subtype::XIca));
    assert_eq!("x-iCa".parse::<Subtype>(), Ok(Subtype::XIca));
    assert_eq!("x-info".parse::<Subtype>(), Ok(Subtype::XInfo));
    assert_eq!("X-InFo".parse::<Subtype>(), Ok(Subtype::XInfo));
    assert_eq!("x-internet-signup".parse::<Subtype>(), Ok(Subtype::XInternetSignup));
    assert_eq!("X-inTeRnET-sIGNUp".parse::<Subtype>(), Ok(Subtype::XInternetSignup));
    assert_eq!("x-iphone".parse::<Subtype>(), Ok(Subtype::XIphone));
    assert_eq!("x-IPHonE".parse::<Subtype>(), Ok(Subtype::XIphone));
    assert_eq!("x-iso9660-image".parse::<Subtype>(), Ok(Subtype::XIso9660Image));
    assert_eq!("x-iso9660-IMaGe".parse::<Subtype>(), Ok(Subtype::XIso9660Image));
    assert_eq!("x-isostar".parse::<Subtype>(), Ok(Subtype::XIsostar));
    assert_eq!("X-iSoStaR".parse::<Subtype>(), Ok(Subtype::XIsostar));
    assert_eq!("x-java".parse::<Subtype>(), Ok(Subtype::XJava));
    assert_eq!("X-javA".parse::<Subtype>(), Ok(Subtype::XJava));
    assert_eq!("x-java-jnlp-file".parse::<Subtype>(), Ok(Subtype::XJavaJnlpFile));
    assert_eq!("X-JavA-JNLP-fiLe".parse::<Subtype>(), Ok(Subtype::XJavaJnlpFile));
    assert_eq!("x-jcamp-dx".parse::<Subtype>(), Ok(Subtype::XJcampDx));
    assert_eq!("x-JcaMP-Dx".parse::<Subtype>(), Ok(Subtype::XJcampDx));
    assert_eq!("x-jg".parse::<Subtype>(), Ok(Subtype::XJg));
    assert_eq!("X-jG".parse::<Subtype>(), Ok(Subtype::XJg));
    assert_eq!("x-jmol".parse::<Subtype>(), Ok(Subtype::XJmol));
    assert_eq!("x-Jmol".parse::<Subtype>(), Ok(Subtype::XJmol));
    assert_eq!("x-jng".parse::<Subtype>(), Ok(Subtype::XJng));
    assert_eq!("x-jNG".parse::<Subtype>(), Ok(Subtype::XJng));
    assert_eq!("x-killustrator".parse::<Subtype>(), Ok(Subtype::XKillustrator));
    assert_eq!("x-kIlLUsTraTOR".parse::<Subtype>(), Ok(Subtype::XKillustrator));
    assert_eq!("x-kinemage".parse::<Subtype>(), Ok(Subtype::XKinemage));
    assert_eq!("x-kiNEmaGe".parse::<Subtype>(), Ok(Subtype::XKinemage));
    assert_eq!("x-la-asf".parse::<Subtype>(), Ok(Subtype::XLaAsf));
    assert_eq!("X-LA-Asf".parse::<Subtype>(), Ok(Subtype::XLaAsf));
    assert_eq!("x-latex".parse::<Subtype>(), Ok(Subtype::XLatex));
    assert_eq!("X-LateX".parse::<Subtype>(), Ok(Subtype::XLatex));
    assert_eq!("x-lha".parse::<Subtype>(), Ok(Subtype::XLha));
    assert_eq!("X-lha".parse::<Subtype>(), Ok(Subtype::XLha));
    assert_eq!("x-lilypond".parse::<Subtype>(), Ok(Subtype::XLilypond));
    assert_eq!("x-LiLYpOND".parse::<Subtype>(), Ok(Subtype::XLilypond));
    assert_eq!("x-literate-haskell".parse::<Subtype>(), Ok(Subtype::XLiterateHaskell));
    assert_eq!("X-lITERate-HAsKElL".parse::<Subtype>(), Ok(Subtype::XLiterateHaskell));
    assert_eq!("x-lyx".parse::<Subtype>(), Ok(Subtype::XLyx));
    assert_eq!("X-Lyx".parse::<Subtype>(), Ok(Subtype::XLyx));
    assert_eq!("x-lzh".parse::<Subtype>(), Ok(Subtype::XLzh));
    assert_eq!("X-LZh".parse::<Subtype>(), Ok(Subtype::XLzh));
    assert_eq!("x-lzx".parse::<Subtype>(), Ok(Subtype::XLzx));
    assert_eq!("x-lzX".parse::<Subtype>(), Ok(Subtype::XLzx));
    assert_eq!("x-macmolecule".parse::<Subtype>(), Ok(Subtype::XMacmolecule));
    assert_eq!("x-MAcMOLeculE".parse::<Subtype>(), Ok(Subtype::XMacmolecule));
    assert_eq!("x-macromodel-input".parse::<Subtype>(), Ok(Subtype::XMacromodelInput));
    assert_eq!("X-mAcrOmoDel-INPuT".parse::<Subtype>(), Ok(Subtype::XMacromodelInput));
    assert_eq!("x-maker".parse::<Subtype>(), Ok(Subtype::XMaker));
    assert_eq!("x-mAKEr".parse::<Subtype>(), Ok(Subtype::XMaker));
    assert_eq!("x-matroska".parse::<Subtype>(), Ok(Subtype::XMatroska));
    assert_eq!("X-matRosKA".parse::<Subtype>(), Ok(Subtype::XMatroska));
    assert_eq!("x-mdl-molfile".parse::<Subtype>(), Ok(Subtype::XMdlMolfile));
    assert_eq!("X-MDL-molFiLe".parse::<Subtype>(), Ok(Subtype::XMdlMolfile));
    assert_eq!("x-mdl-rdfile".parse::<Subtype>(), Ok(Subtype::XMdlRdfile));
    assert_eq!("X-mDL-rDFILE".parse::<Subtype>(), Ok(Subtype::XMdlRdfile));
    assert_eq!("x-mdl-rxnfile".parse::<Subtype>(), Ok(Subtype::XMdlRxnfile));
    assert_eq!("X-Mdl-RXNFIlE".parse::<Subtype>(), Ok(Subtype::XMdlRxnfile));
    assert_eq!("x-mdl-sdfile".parse::<Subtype>(), Ok(Subtype::XMdlSdfile));
    assert_eq!("X-mdL-sdfile".parse::<Subtype>(), Ok(Subtype::XMdlSdfile));
    assert_eq!("x-mdl-tgf".parse::<Subtype>(), Ok(Subtype::XMdlTgf));
    assert_eq!("X-MdL-Tgf".parse::<Subtype>(), Ok(Subtype::XMdlTgf));
    assert_eq!("x-mixed-replace".parse::<Subtype>(), Ok(Subtype::XMixedReplace));
    assert_eq!("x-miXEd-RepLAce".parse::<Subtype>(), Ok(Subtype::XMixedReplace));
    assert_eq!("x-mmcif".parse::<Subtype>(), Ok(Subtype::XMmcif));
    assert_eq!("x-mMCIf".parse::<Subtype>(), Ok(Subtype::XMmcif));
    assert_eq!("x-mng".parse::<Subtype>(), Ok(Subtype::XMng));
    assert_eq!("X-mng".parse::<Subtype>(), Ok(Subtype::XMng));
    assert_eq!("x-moc".parse::<Subtype>(), Ok(Subtype::XMoc));
    assert_eq!("x-mOc".parse::<Subtype>(), Ok(Subtype::XMoc));
    assert_eq!("x-mol2".parse::<Subtype>(), Ok(Subtype::XMol2));
    assert_eq!("x-MOl2".parse::<Subtype>(), Ok(Subtype::XMol2));
    assert_eq!("x-molconn-Z".parse::<Subtype>(), Ok(Subtype::XMolconnZ));
    assert_eq!("X-mOlcOnn-z".parse::<Subtype>(), Ok(Subtype::XMolconnZ));
    assert_eq!("x-mopac-graph".parse::<Subtype>(), Ok(Subtype::XMopacGraph));
    assert_eq!("X-mOpAC-GrAPh".parse::<Subtype>(), Ok(Subtype::XMopacGraph));
    assert_eq!("x-mopac-input".parse::<Subtype>(), Ok(Subtype::XMopacInput));
    assert_eq!("x-MOpAC-InpUt".parse::<Subtype>(), Ok(Subtype::XMopacInput));
    assert_eq!("x-mopac-out".parse::<Subtype>(), Ok(Subtype::XMopacOut));
    assert_eq!("X-Mopac-ouT".parse::<Subtype>(), Ok(Subtype::XMopacOut));
    assert_eq!("x-mopac-vib".parse::<Subtype>(), Ok(Subtype::XMopacVib));
    assert_eq!("X-MoPaC-vIB".parse::<Subtype>(), Ok(Subtype::XMopacVib));
    assert_eq!("x-ms-wax".parse::<Subtype>(), Ok(Subtype::XMsWax));
    assert_eq!("x-Ms-WAx".parse::<Subtype>(), Ok(Subtype::XMsWax));
    assert_eq!("x-ms-wm".parse::<Subtype>(), Ok(Subtype::XMsWm));
    assert_eq!("x-mS-wM".parse::<Subtype>(), Ok(Subtype::XMsWm));
    assert_eq!("x-ms-wma".parse::<Subtype>(), Ok(Subtype::XMsWma));
    assert_eq!("X-ms-wma".parse::<Subtype>(), Ok(Subtype::XMsWma));
    assert_eq!("x-ms-wmd".parse::<Subtype>(), Ok(Subtype::XMsWmd));
    assert_eq!("X-MS-WMD".parse::<Subtype>(), Ok(Subtype::XMsWmd));
    assert_eq!("x-ms-wmv".parse::<Subtype>(), Ok(Subtype::XMsWmv));
    assert_eq!("X-mS-wMV".parse::<Subtype>(), Ok(Subtype::XMsWmv));
    assert_eq!("x-ms-wmx".parse::<Subtype>(), Ok(Subtype::XMsWmx));
    assert_eq!("x-ms-wMx".parse::<Subtype>(), Ok(Subtype::XMsWmx));
    assert_eq!("x-ms-wmz".parse::<Subtype>(), Ok(Subtype::XMsWmz));
    assert_eq!("X-ms-wmz".parse::<Subtype>(), Ok(Subtype::XMsWmz));
    assert_eq!("x-ms-wvx".parse::<Subtype>(), Ok(Subtype::XMsWvx));
    assert_eq!("x-mS-WVX".parse::<Subtype>(), Ok(Subtype::XMsWvx));
    assert_eq!("x-msdos-program".parse::<Subtype>(), Ok(Subtype::XMsdosProgram));
    assert_eq!("x-msDOS-PROGRAM".parse::<Subtype>(), Ok(Subtype::XMsdosProgram));
    assert_eq!("x-msi".parse::<Subtype>(), Ok(Subtype::XMsi));
    assert_eq!("X-Msi".parse::<Subtype>(), Ok(Subtype::XMsi));
    assert_eq!("x-msvideo".parse::<Subtype>(), Ok(Subtype::XMsvideo));
    assert_eq!("X-msvideo".parse::<Subtype>(), Ok(Subtype::XMsvideo));
    assert_eq!("x-ncbi-asn1".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1));
    assert_eq!("x-nCbI-asN1".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1));
    assert_eq!("x-ncbi-asn1-ascii".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1Ascii));
    assert_eq!("x-nCbI-ASn1-AsCiI".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1Ascii));
    assert_eq!("x-ncbi-asn1-binary".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1Binary));
    assert_eq!("x-nCBi-Asn1-bInArY".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1Binary));
    assert_eq!("x-ncbi-asn1-spec".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1Spec));
    assert_eq!("X-nCbI-aSn1-SpeC".parse::<Subtype>(), Ok(Subtype::XNcbiAsn1Spec));
    assert_eq!("x-netcdf".parse::<Subtype>(), Ok(Subtype::XNetcdf));
    assert_eq!("X-NetcDf".parse::<Subtype>(), Ok(Subtype::XNetcdf));
    assert_eq!("x-nikon-nef".parse::<Subtype>(), Ok(Subtype::XNikonNef));
    assert_eq!("X-nIkon-nef".parse::<Subtype>(), Ok(Subtype::XNikonNef));
    assert_eq!("x-ns-proxy-autoconfig".parse::<Subtype>(), Ok(Subtype::XNsProxyAutoconfig));
    assert_eq!("X-NS-PRoxy-autoCoNFiG".parse::<Subtype>(), Ok(Subtype::XNsProxyAutoconfig));
    assert_eq!("x-nwc".parse::<Subtype>(), Ok(Subtype::XNwc));
    assert_eq!("x-nWC".parse::<Subtype>(), Ok(Subtype::XNwc));
    assert_eq!("x-object".parse::<Subtype>(), Ok(Subtype::XObject));
    assert_eq!("X-ObJect".parse::<Subtype>(), Ok(Subtype::XObject));
    assert_eq!("x-olympus-orf".parse::<Subtype>(), Ok(Subtype::XOlympusOrf));
    assert_eq!("x-oLymPUs-orF".parse::<Subtype>(), Ok(Subtype::XOlympusOrf));
    assert_eq!("x-oz-application".parse::<Subtype>(), Ok(Subtype::XOzApplication));
    assert_eq!("X-Oz-aPPLICatioN".parse::<Subtype>(), Ok(Subtype::XOzApplication));
    assert_eq!("x-pascal".parse::<Subtype>(), Ok(Subtype::XPascal));
    assert_eq!("x-paScal".parse::<Subtype>(), Ok(Subtype::XPascal));
    assert_eq!("x-pcs-gcd".parse::<Subtype>(), Ok(Subtype::XPcsGcd));
    assert_eq!("x-pCS-GcD".parse::<Subtype>(), Ok(Subtype::XPcsGcd));
    assert_eq!("x-pdb".parse::<Subtype>(), Ok(Subtype::XPdb));
    assert_eq!("x-pDB".parse::<Subtype>(), Ok(Subtype::XPdb));
    assert_eq!("x-perl".parse::<Subtype>(), Ok(Subtype::XPerl));
    assert_eq!("X-pErL".parse::<Subtype>(), Ok(Subtype::XPerl));
    assert_eq!("x-pkcs7-certreqresp".parse::<Subtype>(), Ok(Subtype::XPkcs7Certreqresp));
    assert_eq!("X-PkCs7-CeRTreqreSP".parse::<Subtype>(), Ok(Subtype::XPkcs7Certreqresp));
    assert_eq!("x-pn-realaudio".parse::<Subtype>(), Ok(Subtype::XPnRealaudio));
    assert_eq!("X-pN-reaLaudio".parse::<Subtype>(), Ok(Subtype::XPnRealaudio));
    assert_eq!("x-portable-anymap".parse::<Subtype>(), Ok(Subtype::XPortableAnymap));
    assert_eq!("x-PORtAblE-AnymaP".parse::<Subtype>(), Ok(Subtype::XPortableAnymap));
    assert_eq!("x-portable-bitmap".parse::<Subtype>(), Ok(Subtype::XPortableBitmap));
    assert_eq!("X-poRTaBLe-bitMap".parse::<Subtype>(), Ok(Subtype::XPortableBitmap));
    assert_eq!("x-portable-graymap".parse::<Subtype>(), Ok(Subtype::XPortableGraymap));
    assert_eq!("X-porTAble-GRaymaP".parse::<Subtype>(), Ok(Subtype::XPortableGraymap));
    assert_eq!("x-portable-pixmap".parse::<Subtype>(), Ok(Subtype::XPortablePixmap));
    assert_eq!("X-PoRTAble-Pixmap".parse::<Subtype>(), Ok(Subtype::XPortablePixmap));
    assert_eq!("x-python".parse::<Subtype>(), Ok(Subtype::XPython));
    assert_eq!("X-PYthon".parse::<Subtype>(), Ok(Subtype::XPython));
    assert_eq!("x-python-code".parse::<Subtype>(), Ok(Subtype::XPythonCode));
    assert_eq!("x-pYtHon-coDE".parse::<Subtype>(), Ok(Subtype::XPythonCode));
    assert_eq!("x-qgis".parse::<Subtype>(), Ok(Subtype::XQgis));
    assert_eq!("x-qGis".parse::<Subtype>(), Ok(Subtype::XQgis));
    assert_eq!("x-quicktimeplayer".parse::<Subtype>(), Ok(Subtype::XQuicktimeplayer));
    assert_eq!("x-QUicktIMEpLayer".parse::<Subtype>(), Ok(Subtype::XQuicktimeplayer));
    assert_eq!("x-rdp".parse::<Subtype>(), Ok(Subtype::XRdp));
    assert_eq!("X-RDp".parse::<Subtype>(), Ok(Subtype::XRdp));
    assert_eq!("x-redhat-package-manager".parse::<Subtype>(), Ok(Subtype::XRedhatPackageManager));
    assert_eq!("X-rEDHAt-PACkAGE-maNAGeR".parse::<Subtype>(), Ok(Subtype::XRedhatPackageManager));
    assert_eq!("x-rgb".parse::<Subtype>(), Ok(Subtype::XRgb));
    assert_eq!("x-rGB".parse::<Subtype>(), Ok(Subtype::XRgb));
    assert_eq!("x-rosdal".parse::<Subtype>(), Ok(Subtype::XRosdal));
    assert_eq!("X-RoSDAl".parse::<Subtype>(), Ok(Subtype::XRosdal));
    assert_eq!("x-rss".parse::<Subtype>(), Ok(Subtype::XRss));
    assert_eq!("x-rss".parse::<Subtype>(), Ok(Subtype::XRss));
    assert_eq!("x-ruby".parse::<Subtype>(), Ok(Subtype::XRuby));
    assert_eq!("x-ruBY".parse::<Subtype>(), Ok(Subtype::XRuby));
    assert_eq!("x-scala".parse::<Subtype>(), Ok(Subtype::XScala));
    assert_eq!("X-scalA".parse::<Subtype>(), Ok(Subtype::XScala));
    assert_eq!("x-scilab".parse::<Subtype>(), Ok(Subtype::XScilab));
    assert_eq!("x-SCIlab".parse::<Subtype>(), Ok(Subtype::XScilab));
    assert_eq!("x-scilab-xcos".parse::<Subtype>(), Ok(Subtype::XScilabXcos));
    assert_eq!("x-sCiLaB-XCOS".parse::<Subtype>(), Ok(Subtype::XScilabXcos));
    assert_eq!("x-scpls".parse::<Subtype>(), Ok(Subtype::XScpls));
    assert_eq!("X-scplS".parse::<Subtype>(), Ok(Subtype::XScpls));
    assert_eq!("x-sd2".parse::<Subtype>(), Ok(Subtype::XSd2));
    assert_eq!("x-SD2".parse::<Subtype>(), Ok(Subtype::XSd2));
    assert_eq!("x-setext".parse::<Subtype>(), Ok(Subtype::XSetext));
    assert_eq!("x-SeTeXT".parse::<Subtype>(), Ok(Subtype::XSetext));
    assert_eq!("x-sfv".parse::<Subtype>(), Ok(Subtype::XSfv));
    assert_eq!("x-sFv".parse::<Subtype>(), Ok(Subtype::XSfv));
    assert_eq!("x-sgi-movie".parse::<Subtype>(), Ok(Subtype::XSgiMovie));
    assert_eq!("x-sGi-mOviE".parse::<Subtype>(), Ok(Subtype::XSgiMovie));
    assert_eq!("x-sh".parse::<Subtype>(), Ok(Subtype::XSh));
    assert_eq!("x-SH".parse::<Subtype>(), Ok(Subtype::XSh));
    assert_eq!("x-shar".parse::<Subtype>(), Ok(Subtype::XShar));
    assert_eq!("X-SHaR".parse::<Subtype>(), Ok(Subtype::XShar));
    assert_eq!("x-silverlight".parse::<Subtype>(), Ok(Subtype::XSilverlight));
    assert_eq!("x-sILVERliGhT".parse::<Subtype>(), Ok(Subtype::XSilverlight));
    assert_eq!("x-stuffit".parse::<Subtype>(), Ok(Subtype::XStuffit));
    assert_eq!("x-sTuFfIT".parse::<Subtype>(), Ok(Subtype::XStuffit));
    assert_eq!("x-sv4cpio".parse::<Subtype>(), Ok(Subtype::XSv4cpio));
    assert_eq!("x-SV4cpIo".parse::<Subtype>(), Ok(Subtype::XSv4cpio));
    assert_eq!("x-sv4crc".parse::<Subtype>(), Ok(Subtype::XSv4crc));
    assert_eq!("x-sV4CRc".parse::<Subtype>(), Ok(Subtype::XSv4crc));
    assert_eq!("x-swissprot".parse::<Subtype>(), Ok(Subtype::XSwissprot));
    assert_eq!("X-SWIsSPROt".parse::<Subtype>(), Ok(Subtype::XSwissprot));
    assert_eq!("x-tar".parse::<Subtype>(), Ok(Subtype::XTar));
    assert_eq!("x-TAr".parse::<Subtype>(), Ok(Subtype::XTar));
    assert_eq!("x-tcl".parse::<Subtype>(), Ok(Subtype::XTcl));
    assert_eq!("X-TCl".parse::<Subtype>(), Ok(Subtype::XTcl));
    assert_eq!("x-tex".parse::<Subtype>(), Ok(Subtype::XTex));
    assert_eq!("x-Tex".parse::<Subtype>(), Ok(Subtype::XTex));
    assert_eq!("x-tex-gf".parse::<Subtype>(), Ok(Subtype::XTexGf));
    assert_eq!("X-TeX-Gf".parse::<Subtype>(), Ok(Subtype::XTexGf));
    assert_eq!("x-tex-pk".parse::<Subtype>(), Ok(Subtype::XTexPk));
    assert_eq!("X-teX-Pk".parse::<Subtype>(), Ok(Subtype::XTexPk));
    assert_eq!("x-texinfo".parse::<Subtype>(), Ok(Subtype::XTexinfo));
    assert_eq!("x-TexINFO".parse::<Subtype>(), Ok(Subtype::XTexinfo));
    assert_eq!("x-trash".parse::<Subtype>(), Ok(Subtype::XTrash));
    assert_eq!("X-TRASH".parse::<Subtype>(), Ok(Subtype::XTrash));
    assert_eq!("x-troff-man".parse::<Subtype>(), Ok(Subtype::XTroffMan));
    assert_eq!("x-troFF-man".parse::<Subtype>(), Ok(Subtype::XTroffMan));
    assert_eq!("x-troff-me".parse::<Subtype>(), Ok(Subtype::XTroffMe));
    assert_eq!("x-trOFf-Me".parse::<Subtype>(), Ok(Subtype::XTroffMe));
    assert_eq!("x-troff-ms".parse::<Subtype>(), Ok(Subtype::XTroffMs));
    assert_eq!("X-TroFF-Ms".parse::<Subtype>(), Ok(Subtype::XTroffMs));
    assert_eq!("x-ustar".parse::<Subtype>(), Ok(Subtype::XUstar));
    assert_eq!("x-USTaR".parse::<Subtype>(), Ok(Subtype::XUstar));
    assert_eq!("x-vamas-iso14976".parse::<Subtype>(), Ok(Subtype::XVamasIso14976));
    assert_eq!("x-VAmAs-isO14976".parse::<Subtype>(), Ok(Subtype::XVamasIso14976));
    assert_eq!("x-vcalendar".parse::<Subtype>(), Ok(Subtype::XVcalendar));
    assert_eq!("x-vcALenDar".parse::<Subtype>(), Ok(Subtype::XVcalendar));
    assert_eq!("x-vmd".parse::<Subtype>(), Ok(Subtype::XVmd));
    assert_eq!("x-Vmd".parse::<Subtype>(), Ok(Subtype::XVmd));
    assert_eq!("x-wais-source".parse::<Subtype>(), Ok(Subtype::XWaisSource));
    assert_eq!("X-wAIS-SourCe".parse::<Subtype>(), Ok(Subtype::XWaisSource));
    assert_eq!("x-wav".parse::<Subtype>(), Ok(Subtype::XWav));
    assert_eq!("X-wav".parse::<Subtype>(), Ok(Subtype::XWav));
    assert_eq!("x-wingz".parse::<Subtype>(), Ok(Subtype::XWingz));
    assert_eq!("x-WINGz".parse::<Subtype>(), Ok(Subtype::XWingz));
    assert_eq!("x-x509-ca-cert".parse::<Subtype>(), Ok(Subtype::XX509CaCert));
    assert_eq!("x-x509-cA-cErt".parse::<Subtype>(), Ok(Subtype::XX509CaCert));
    assert_eq!("x-xbitmap".parse::<Subtype>(), Ok(Subtype::XXbitmap));
    assert_eq!("x-xbiTMAP".parse::<Subtype>(), Ok(Subtype::XXbitmap));
    assert_eq!("x-xcf".parse::<Subtype>(), Ok(Subtype::XXcf));
    assert_eq!("X-xcf".parse::<Subtype>(), Ok(Subtype::XXcf));
    assert_eq!("x-xfig".parse::<Subtype>(), Ok(Subtype::XXfig));
    assert_eq!("x-XFig".parse::<Subtype>(), Ok(Subtype::XXfig));
    assert_eq!("x-xpinstall".parse::<Subtype>(), Ok(Subtype::XXpinstall));
    assert_eq!("x-xPinSTaLl".parse::<Subtype>(), Ok(Subtype::XXpinstall));
    assert_eq!("x-xpixmap".parse::<Subtype>(), Ok(Subtype::XXpixmap));
    assert_eq!("X-xPIxmAP".parse::<Subtype>(), Ok(Subtype::XXpixmap));
    assert_eq!("x-xtel".parse::<Subtype>(), Ok(Subtype::XXtel));
    assert_eq!("x-xteL".parse::<Subtype>(), Ok(Subtype::XXtel));
    assert_eq!("x-xwindowdump".parse::<Subtype>(), Ok(Subtype::XXwindowdump));
    assert_eq!("x-xWINdoWdumP".parse::<Subtype>(), Ok(Subtype::XXwindowdump));
    assert_eq!("x-xyz".parse::<Subtype>(), Ok(Subtype::XXyz));
    assert_eq!("X-Xyz".parse::<Subtype>(), Ok(Subtype::XXyz));
    assert_eq!("x-xz".parse::<Subtype>(), Ok(Subtype::XXz));
    assert_eq!("x-XZ".parse::<Subtype>(), Ok(Subtype::XXz));
    assert_eq!("xacml".parse::<Subtype>(), Ok(Subtype::Xacml));
    assert_eq!("xacML".parse::<Subtype>(), Ok(Subtype::Xacml));
    assert_eq!("xcap-att".parse::<Subtype>(), Ok(Subtype::XcapAtt));
    assert_eq!("Xcap-Att".parse::<Subtype>(), Ok(Subtype::XcapAtt));
    assert_eq!("xcap-caps".parse::<Subtype>(), Ok(Subtype::XcapCaps));
    assert_eq!("XCAP-CaPs".parse::<Subtype>(), Ok(Subtype::XcapCaps));
    assert_eq!("xcap-diff".parse::<Subtype>(), Ok(Subtype::XcapDiff));
    assert_eq!("xCAP-dIff".parse::<Subtype>(), Ok(Subtype::XcapDiff));
    assert_eq!("xcap-el".parse::<Subtype>(), Ok(Subtype::XcapEl));
    assert_eq!("xCAP-eL".parse::<Subtype>(), Ok(Subtype::XcapEl));
    assert_eq!("xcap-error".parse::<Subtype>(), Ok(Subtype::XcapError));
    assert_eq!("XcAp-ErROr".parse::<Subtype>(), Ok(Subtype::XcapError));
    assert_eq!("xcap-ns".parse::<Subtype>(), Ok(Subtype::XcapNs));
    assert_eq!("XCaP-ns".parse::<Subtype>(), Ok(Subtype::XcapNs));
    assert_eq!("xcon-conference-info".parse::<Subtype>(), Ok(Subtype::XconConferenceInfo));
    assert_eq!("XcoN-COnFeRENCe-info".parse::<Subtype>(), Ok(Subtype::XconConferenceInfo));
    assert_eq!("xcon-conference-info-diff".parse::<Subtype>(), Ok(Subtype::XconConferenceInfoDiff));
    assert_eq!("xcoN-conferencE-InFO-DIFF".parse::<Subtype>(), Ok(Subtype::XconConferenceInfoDiff));
    assert_eq!("xenc".parse::<Subtype>(), Ok(Subtype::Xenc));
    assert_eq!("xEnC".parse::<Subtype>(), Ok(Subtype::Xenc));
    assert_eq!("xhtml".parse::<Subtype>(), Ok(Subtype::Xhtml));
    assert_eq!("XhtML".parse::<Subtype>(), Ok(Subtype::Xhtml));
    assert_eq!("xliff".parse::<Subtype>(), Ok(Subtype::Xliff));
    assert_eq!("xliFf".parse::<Subtype>(), Ok(Subtype::Xliff));
    assert_eq!("xml".parse::<Subtype>(), Ok(Subtype::Xml));
    assert_eq!("xML".parse::<Subtype>(), Ok(Subtype::Xml));
    assert_eq!("xml-dtd".parse::<Subtype>(), Ok(Subtype::XmlDtd));
    assert_eq!("XML-dTd".parse::<Subtype>(), Ok(Subtype::XmlDtd));
    assert_eq!("xml-external-parsed-entity".parse::<Subtype>(), Ok(Subtype::XmlExternalParsedEntity));
    assert_eq!("Xml-ExtERNAl-parsEd-eNtiTy".parse::<Subtype>(), Ok(Subtype::XmlExternalParsedEntity));
    assert_eq!("xml-patch".parse::<Subtype>(), Ok(Subtype::XmlPatch));
    assert_eq!("XmL-pATCH".parse::<Subtype>(), Ok(Subtype::XmlPatch));
    assert_eq!("xmpp".parse::<Subtype>(), Ok(Subtype::Xmpp));
    assert_eq!("XMpP".parse::<Subtype>(), Ok(Subtype::Xmpp));
    assert_eq!("xop".parse::<Subtype>(), Ok(Subtype::Xop));
    assert_eq!("XOP".parse::<Subtype>(), Ok(Subtype::Xop));
    assert_eq!("xslt".parse::<Subtype>(), Ok(Subtype::Xslt));
    assert_eq!("Xslt".parse::<Subtype>(), Ok(Subtype::Xslt));
    assert_eq!("xspf".parse::<Subtype>(), Ok(Subtype::Xspf));
    assert_eq!("XSPF".parse::<Subtype>(), Ok(Subtype::Xspf));
    assert_eq!("xv".parse::<Subtype>(), Ok(Subtype::Xv));
    assert_eq!("XV".parse::<Subtype>(), Ok(Subtype::Xv));
    assert_eq!("yang".parse::<Subtype>(), Ok(Subtype::Yang));
    assert_eq!("YaNg".parse::<Subtype>(), Ok(Subtype::Yang));
    assert_eq!("yang-data".parse::<Subtype>(), Ok(Subtype::YangData));
    assert_eq!("YaNG-DATA".parse::<Subtype>(), Ok(Subtype::YangData));
    assert_eq!("yang-patch".parse::<Subtype>(), Ok(Subtype::YangPatch));
    assert_eq!("yANg-pAtCH".parse::<Subtype>(), Ok(Subtype::YangPatch));
    assert_eq!("yin".parse::<Subtype>(), Ok(Subtype::Yin));
    assert_eq!("yIN".parse::<Subtype>(), Ok(Subtype::Yin));
    assert_eq!("zip".parse::<Subtype>(), Ok(Subtype::Zip));
    assert_eq!("ZiP".parse::<Subtype>(), Ok(Subtype::Zip));
    assert_eq!("zlib".parse::<Subtype>(), Ok(Subtype::Zlib));
    assert_eq!("ZLIB".parse::<Subtype>(), Ok(Subtype::Zlib));
    assert_eq!("zstd".parse::<Subtype>(), Ok(Subtype::Zstd));
    assert_eq!("zsTD".parse::<Subtype>(), Ok(Subtype::Zstd));
}

impl AsRef<str> for Subtype {
    fn as_ref(&self) -> &str { self.as_str() }
}

impl From<Subtype> for &'static str {
    fn from(name: Subtype) -> Self { name.as_str() }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub(crate) enum Suffix {
    Cbor,
    CborSeq,
    Der,
    Fastinfoset,
    Gzip,
    Json,
    JsonSeq,
    Jwt,
    Sqlite3,
    Tlv,
    Wbxml,
    Xml,
    Zip,
}

impl Suffix {
    pub(crate) fn as_str(self) -> &'static str {
        match self {
            Suffix::Cbor => "cbor",
            Suffix::CborSeq => "cbor-seq",
            Suffix::Der => "der",
            Suffix::Fastinfoset => "fastinfoset",
            Suffix::Gzip => "gzip",
            Suffix::Json => "json",
            Suffix::JsonSeq => "json-seq",
            Suffix::Jwt => "jwt",
            Suffix::Sqlite3 => "sqlite3",
            Suffix::Tlv => "tlv",
            Suffix::Wbxml => "wbxml",
            Suffix::Xml => "xml",
            Suffix::Zip => "zip",
        }
    }
}
impl core::str::FromStr for Suffix {
    type Err = crate::InvalidName;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        const GRAPH: intern_str::Graph<'static, 'static, intern_str::CaseInsensitive<&'static str>, Option<Suffix>> = {
    const NODES: &[intern_str::Node<'static, intern_str::CaseInsensitive<&'static str>, Option<Suffix>>] = &[
        intern_str::Node::new(
            &[
            ],
            None,
            0,
            18446744073709551615,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::CborSeq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-seq"), 1),
            ],
            Some(Suffix::Cbor),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bor"), 2),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Der),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("er"), 4),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Fastinfoset),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("astinfoset"), 6),
            ],
            None,
            0,
            10,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Gzip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("zip"), 8),
            ],
            None,
            0,
            3,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::JsonSeq),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("-seq"), 10),
            ],
            Some(Suffix::Json),
            0,
            4,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("n"), 11),
            ],
            None,
            0,
            1,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Jwt),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("so"), 12),
                (intern_str::CaseInsensitive("wt"), 13),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Sqlite3),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("qlite3"), 15),
            ],
            None,
            0,
            6,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Tlv),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("lv"), 17),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Wbxml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("bxml"), 19),
            ],
            None,
            0,
            4,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Xml),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ml"), 21),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
            ],
            Some(Suffix::Zip),
            0,
            1,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("ip"), 23),
            ],
            None,
            0,
            2,
        ),
        intern_str::Node::new(
            &[
                (intern_str::CaseInsensitive("c"), 3),
                (intern_str::CaseInsensitive("d"), 5),
                (intern_str::CaseInsensitive("f"), 7),
                (intern_str::CaseInsensitive("g"), 9),
                (intern_str::CaseInsensitive("j"), 14),
                (intern_str::CaseInsensitive("s"), 16),
                (intern_str::CaseInsensitive("t"), 18),
                (intern_str::CaseInsensitive("w"), 20),
                (intern_str::CaseInsensitive("x"), 22),
                (intern_str::CaseInsensitive("z"), 24),
            ],
            None,
            0,
            1,
        ),
    ];
    const GRAPH: intern_str::Graph<'static, 'static, intern_str::CaseInsensitive<&'static str>, Option<Suffix>> = intern_str::Graph::new(NODES, 25);
    GRAPH
}
;
        GRAPH.process(intern_str::CaseInsensitive(s)).as_ref().copied().ok_or(crate::InvalidName)
    }
}

#[test]
fn suffix_from_str() {
    assert_eq!("cbor".parse::<Suffix>(), Ok(Suffix::Cbor));
    assert_eq!("CBOr".parse::<Suffix>(), Ok(Suffix::Cbor));
    assert_eq!("cbor-seq".parse::<Suffix>(), Ok(Suffix::CborSeq));
    assert_eq!("cbor-seq".parse::<Suffix>(), Ok(Suffix::CborSeq));
    assert_eq!("der".parse::<Suffix>(), Ok(Suffix::Der));
    assert_eq!("Der".parse::<Suffix>(), Ok(Suffix::Der));
    assert_eq!("fastinfoset".parse::<Suffix>(), Ok(Suffix::Fastinfoset));
    assert_eq!("fAStINfOsET".parse::<Suffix>(), Ok(Suffix::Fastinfoset));
    assert_eq!("gzip".parse::<Suffix>(), Ok(Suffix::Gzip));
    assert_eq!("GZiP".parse::<Suffix>(), Ok(Suffix::Gzip));
    assert_eq!("json".parse::<Suffix>(), Ok(Suffix::Json));
    assert_eq!("jSON".parse::<Suffix>(), Ok(Suffix::Json));
    assert_eq!("json-seq".parse::<Suffix>(), Ok(Suffix::JsonSeq));
    assert_eq!("jsOn-SEQ".parse::<Suffix>(), Ok(Suffix::JsonSeq));
    assert_eq!("jwt".parse::<Suffix>(), Ok(Suffix::Jwt));
    assert_eq!("jwT".parse::<Suffix>(), Ok(Suffix::Jwt));
    assert_eq!("sqlite3".parse::<Suffix>(), Ok(Suffix::Sqlite3));
    assert_eq!("sQlIte3".parse::<Suffix>(), Ok(Suffix::Sqlite3));
    assert_eq!("tlv".parse::<Suffix>(), Ok(Suffix::Tlv));
    assert_eq!("tlv".parse::<Suffix>(), Ok(Suffix::Tlv));
    assert_eq!("wbxml".parse::<Suffix>(), Ok(Suffix::Wbxml));
    assert_eq!("WbxMl".parse::<Suffix>(), Ok(Suffix::Wbxml));
    assert_eq!("xml".parse::<Suffix>(), Ok(Suffix::Xml));
    assert_eq!("xMl".parse::<Suffix>(), Ok(Suffix::Xml));
    assert_eq!("zip".parse::<Suffix>(), Ok(Suffix::Zip));
    assert_eq!("ziP".parse::<Suffix>(), Ok(Suffix::Zip));
}

impl AsRef<str> for Suffix {
    fn as_ref(&self) -> &str { self.as_str() }
}

impl From<Suffix> for &'static str {
    fn from(name: Suffix) -> Self { name.as_str() }
}


/// Constants for common MIME types and subtypes.
pub mod constants {
    /// `application/A2L`
    pub const APPLICATION_A2L: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::A2l),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_a2l_parse() {
        assert_eq!(crate::Mime::parse("application/A2L"), Ok(APPLICATION_A2L));
        assert_eq!(crate::Mime::parse("aPPliCatiON/a2L"), Ok(APPLICATION_A2L));
    }

    /// `application/ace+cbor`
    pub const APPLICATION_ACE_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ace),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_ace_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/ace+cbor"), Ok(APPLICATION_ACE_CBOR));
        assert_eq!(crate::Mime::parse("ApPlICATion/ACE+cBOr"), Ok(APPLICATION_ACE_CBOR));
    }

    /// `application/activemessage`
    pub const APPLICATION_ACTIVEMESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Activemessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_activemessage_parse() {
        assert_eq!(crate::Mime::parse("application/activemessage"), Ok(APPLICATION_ACTIVEMESSAGE));
        assert_eq!(crate::Mime::parse("apPlICatiOn/ACTIVEMESsAGe"), Ok(APPLICATION_ACTIVEMESSAGE));
    }

    /// `application/activity+json`
    pub const APPLICATION_ACTIVITY_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Activity),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_activity_json_parse() {
        assert_eq!(crate::Mime::parse("application/activity+json"), Ok(APPLICATION_ACTIVITY_JSON));
        assert_eq!(crate::Mime::parse("aPPlIcATion/aCTivItY+JsOn"), Ok(APPLICATION_ACTIVITY_JSON));
    }

    /// `application/alto-cdni+json`
    pub const APPLICATION_ALTO_CDNI_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoCdni),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_cdni_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-cdni+json"), Ok(APPLICATION_ALTO_CDNI_JSON));
        assert_eq!(crate::Mime::parse("APpLicaTIOn/ALTO-CdNI+JsOn"), Ok(APPLICATION_ALTO_CDNI_JSON));
    }

    /// `application/alto-cdnifilter+json`
    pub const APPLICATION_ALTO_CDNIFILTER_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoCdnifilter),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_cdnifilter_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-cdnifilter+json"), Ok(APPLICATION_ALTO_CDNIFILTER_JSON));
        assert_eq!(crate::Mime::parse("applICatIon/alTo-cdniFiltEr+JSOn"), Ok(APPLICATION_ALTO_CDNIFILTER_JSON));
    }

    /// `application/alto-costmap+json`
    pub const APPLICATION_ALTO_COSTMAP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoCostmap),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_costmap_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-costmap+json"), Ok(APPLICATION_ALTO_COSTMAP_JSON));
        assert_eq!(crate::Mime::parse("appLicATioN/aLTO-CoStmap+JsON"), Ok(APPLICATION_ALTO_COSTMAP_JSON));
    }

    /// `application/alto-costmapfilter+json`
    pub const APPLICATION_ALTO_COSTMAPFILTER_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoCostmapfilter),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_costmapfilter_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-costmapfilter+json"), Ok(APPLICATION_ALTO_COSTMAPFILTER_JSON));
        assert_eq!(crate::Mime::parse("AppLICATIon/ALTo-COSTMaPFILTer+jSoN"), Ok(APPLICATION_ALTO_COSTMAPFILTER_JSON));
    }

    /// `application/alto-directory+json`
    pub const APPLICATION_ALTO_DIRECTORY_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoDirectory),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_directory_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-directory+json"), Ok(APPLICATION_ALTO_DIRECTORY_JSON));
        assert_eq!(crate::Mime::parse("APpLicAtion/ALTO-dIReCtOry+json"), Ok(APPLICATION_ALTO_DIRECTORY_JSON));
    }

    /// `application/alto-endpointcost+json`
    pub const APPLICATION_ALTO_ENDPOINTCOST_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoEndpointcost),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_endpointcost_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-endpointcost+json"), Ok(APPLICATION_ALTO_ENDPOINTCOST_JSON));
        assert_eq!(crate::Mime::parse("ApPLicaTion/ALto-EndPoiNtcOST+JSoN"), Ok(APPLICATION_ALTO_ENDPOINTCOST_JSON));
    }

    /// `application/alto-endpointcostparams+json`
    pub const APPLICATION_ALTO_ENDPOINTCOSTPARAMS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoEndpointcostparams),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_endpointcostparams_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-endpointcostparams+json"), Ok(APPLICATION_ALTO_ENDPOINTCOSTPARAMS_JSON));
        assert_eq!(crate::Mime::parse("ApPLICatIoN/aLto-eNDPOIntcostPaRAMs+JSon"), Ok(APPLICATION_ALTO_ENDPOINTCOSTPARAMS_JSON));
    }

    /// `application/alto-endpointprop+json`
    pub const APPLICATION_ALTO_ENDPOINTPROP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoEndpointprop),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_endpointprop_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-endpointprop+json"), Ok(APPLICATION_ALTO_ENDPOINTPROP_JSON));
        assert_eq!(crate::Mime::parse("AppLiCaTiOn/AltO-ENDPOINTPROp+JSON"), Ok(APPLICATION_ALTO_ENDPOINTPROP_JSON));
    }

    /// `application/alto-endpointpropparams+json`
    pub const APPLICATION_ALTO_ENDPOINTPROPPARAMS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoEndpointpropparams),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_endpointpropparams_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-endpointpropparams+json"), Ok(APPLICATION_ALTO_ENDPOINTPROPPARAMS_JSON));
        assert_eq!(crate::Mime::parse("aPPLiCAtION/AlTO-ENDpointPropPArAMs+jSon"), Ok(APPLICATION_ALTO_ENDPOINTPROPPARAMS_JSON));
    }

    /// `application/alto-error+json`
    pub const APPLICATION_ALTO_ERROR_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoError),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_error_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-error+json"), Ok(APPLICATION_ALTO_ERROR_JSON));
        assert_eq!(crate::Mime::parse("aPPLICATiON/ALTO-error+jSON"), Ok(APPLICATION_ALTO_ERROR_JSON));
    }

    /// `application/alto-networkmap+json`
    pub const APPLICATION_ALTO_NETWORKMAP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoNetworkmap),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_networkmap_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-networkmap+json"), Ok(APPLICATION_ALTO_NETWORKMAP_JSON));
        assert_eq!(crate::Mime::parse("aPpliCaTION/ALTO-neTwORKmap+jsON"), Ok(APPLICATION_ALTO_NETWORKMAP_JSON));
    }

    /// `application/alto-networkmapfilter+json`
    pub const APPLICATION_ALTO_NETWORKMAPFILTER_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoNetworkmapfilter),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_networkmapfilter_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-networkmapfilter+json"), Ok(APPLICATION_ALTO_NETWORKMAPFILTER_JSON));
        assert_eq!(crate::Mime::parse("ApplIcaTiON/ALto-netWORKmapfilTEr+jSon"), Ok(APPLICATION_ALTO_NETWORKMAPFILTER_JSON));
    }

    /// `application/alto-propmap+json`
    pub const APPLICATION_ALTO_PROPMAP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoPropmap),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_propmap_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-propmap+json"), Ok(APPLICATION_ALTO_PROPMAP_JSON));
        assert_eq!(crate::Mime::parse("AppLICAtIoN/altO-proPmap+json"), Ok(APPLICATION_ALTO_PROPMAP_JSON));
    }

    /// `application/alto-propmapparams+json`
    pub const APPLICATION_ALTO_PROPMAPPARAMS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoPropmapparams),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_propmapparams_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-propmapparams+json"), Ok(APPLICATION_ALTO_PROPMAPPARAMS_JSON));
        assert_eq!(crate::Mime::parse("AppLiCaTion/AltO-prOpmApparaMs+Json"), Ok(APPLICATION_ALTO_PROPMAPPARAMS_JSON));
    }

    /// `application/alto-updatestreamcontrol+json`
    pub const APPLICATION_ALTO_UPDATESTREAMCONTROL_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoUpdatestreamcontrol),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_updatestreamcontrol_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-updatestreamcontrol+json"), Ok(APPLICATION_ALTO_UPDATESTREAMCONTROL_JSON));
        assert_eq!(crate::Mime::parse("AppLICATioN/AlTO-updatEsTREAmCONtrol+JSON"), Ok(APPLICATION_ALTO_UPDATESTREAMCONTROL_JSON));
    }

    /// `application/alto-updatestreamparams+json`
    pub const APPLICATION_ALTO_UPDATESTREAMPARAMS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AltoUpdatestreamparams),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_alto_updatestreamparams_json_parse() {
        assert_eq!(crate::Mime::parse("application/alto-updatestreamparams+json"), Ok(APPLICATION_ALTO_UPDATESTREAMPARAMS_JSON));
        assert_eq!(crate::Mime::parse("APpLiCaTIOn/AlTO-UpdaTeSTReaMPaRAMs+JsON"), Ok(APPLICATION_ALTO_UPDATESTREAMPARAMS_JSON));
    }

    /// `application/AML`
    pub const APPLICATION_AML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Aml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_aml_parse() {
        assert_eq!(crate::Mime::parse("application/AML"), Ok(APPLICATION_AML));
        assert_eq!(crate::Mime::parse("aPPliCatiON/AMl"), Ok(APPLICATION_AML));
    }

    /// `application/andrew-inset`
    pub const APPLICATION_ANDREW_INSET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AndrewInset),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_andrew_inset_parse() {
        assert_eq!(crate::Mime::parse("application/andrew-inset"), Ok(APPLICATION_ANDREW_INSET));
        assert_eq!(crate::Mime::parse("aPPlICatiON/ANdreW-InSeT"), Ok(APPLICATION_ANDREW_INSET));
    }

    /// `application/annodex`
    pub const APPLICATION_ANNODEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Annodex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_annodex_parse() {
        assert_eq!(crate::Mime::parse("application/annodex"), Ok(APPLICATION_ANNODEX));
        assert_eq!(crate::Mime::parse("APPlicAtiON/ANnOdEX"), Ok(APPLICATION_ANNODEX));
    }

    /// `application/applefile`
    pub const APPLICATION_APPLEFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Applefile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_applefile_parse() {
        assert_eq!(crate::Mime::parse("application/applefile"), Ok(APPLICATION_APPLEFILE));
        assert_eq!(crate::Mime::parse("aPPLicAtIoN/aPPlefilE"), Ok(APPLICATION_APPLEFILE));
    }

    /// `application/at+jwt`
    pub const APPLICATION_AT_JWT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::At),
        suffix: Some(crate::Name::Interned(super::Suffix::Jwt)),
        parameters: &[]
    });

    #[test]
    fn application_at_jwt_parse() {
        assert_eq!(crate::Mime::parse("application/at+jwt"), Ok(APPLICATION_AT_JWT));
        assert_eq!(crate::Mime::parse("applicaTioN/AT+JWt"), Ok(APPLICATION_AT_JWT));
    }

    /// `application/ATF`
    pub const APPLICATION_ATF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_atf_parse() {
        assert_eq!(crate::Mime::parse("application/ATF"), Ok(APPLICATION_ATF));
        assert_eq!(crate::Mime::parse("aPplIcATiON/AtF"), Ok(APPLICATION_ATF));
    }

    /// `application/ATFX`
    pub const APPLICATION_ATFX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atfx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_atfx_parse() {
        assert_eq!(crate::Mime::parse("application/ATFX"), Ok(APPLICATION_ATFX));
        assert_eq!(crate::Mime::parse("APpLICation/ATFX"), Ok(APPLICATION_ATFX));
    }

    /// `application/atom+xml`
    pub const APPLICATION_ATOM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atom),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atom_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atom+xml"), Ok(APPLICATION_ATOM_XML));
        assert_eq!(crate::Mime::parse("APPLICatIon/atoM+Xml"), Ok(APPLICATION_ATOM_XML));
    }

    /// `application/atomcat+xml`
    pub const APPLICATION_ATOMCAT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atomcat),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atomcat_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atomcat+xml"), Ok(APPLICATION_ATOMCAT_XML));
        assert_eq!(crate::Mime::parse("ApPlicaTION/atoMCaT+Xml"), Ok(APPLICATION_ATOMCAT_XML));
    }

    /// `application/atomdeleted+xml`
    pub const APPLICATION_ATOMDELETED_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atomdeleted),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atomdeleted_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atomdeleted+xml"), Ok(APPLICATION_ATOMDELETED_XML));
        assert_eq!(crate::Mime::parse("apPLicaTION/atomdelEtED+xMl"), Ok(APPLICATION_ATOMDELETED_XML));
    }

    /// `application/atomicmail`
    pub const APPLICATION_ATOMICMAIL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atomicmail),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_atomicmail_parse() {
        assert_eq!(crate::Mime::parse("application/atomicmail"), Ok(APPLICATION_ATOMICMAIL));
        assert_eq!(crate::Mime::parse("AppLiCATioN/ATOmicmAIl"), Ok(APPLICATION_ATOMICMAIL));
    }

    /// `application/atomserv+xml`
    pub const APPLICATION_ATOMSERV_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atomserv),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atomserv_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atomserv+xml"), Ok(APPLICATION_ATOMSERV_XML));
        assert_eq!(crate::Mime::parse("ApplIcAtIOn/ATOmSErv+Xml"), Ok(APPLICATION_ATOMSERV_XML));
    }

    /// `application/atomsvc+xml`
    pub const APPLICATION_ATOMSVC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atomsvc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atomsvc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atomsvc+xml"), Ok(APPLICATION_ATOMSVC_XML));
        assert_eq!(crate::Mime::parse("applicatioN/AtoMsvc+xML"), Ok(APPLICATION_ATOMSVC_XML));
    }

    /// `application/atsc-dwd+xml`
    pub const APPLICATION_ATSC_DWD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AtscDwd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atsc_dwd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atsc-dwd+xml"), Ok(APPLICATION_ATSC_DWD_XML));
        assert_eq!(crate::Mime::parse("aPpLIcaTIOn/aTsC-DWd+xMl"), Ok(APPLICATION_ATSC_DWD_XML));
    }

    /// `application/atsc-dynamic-event-message`
    pub const APPLICATION_ATSC_DYNAMIC_EVENT_MESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AtscDynamicEventMessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_atsc_dynamic_event_message_parse() {
        assert_eq!(crate::Mime::parse("application/atsc-dynamic-event-message"), Ok(APPLICATION_ATSC_DYNAMIC_EVENT_MESSAGE));
        assert_eq!(crate::Mime::parse("appliCATioN/AtSC-dynaMIC-EVENt-mesSAgE"), Ok(APPLICATION_ATSC_DYNAMIC_EVENT_MESSAGE));
    }

    /// `application/atsc-held+xml`
    pub const APPLICATION_ATSC_HELD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AtscHeld),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atsc_held_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atsc-held+xml"), Ok(APPLICATION_ATSC_HELD_XML));
        assert_eq!(crate::Mime::parse("ApPlIcatION/AtSC-HeLD+xml"), Ok(APPLICATION_ATSC_HELD_XML));
    }

    /// `application/atsc-rdt+json`
    pub const APPLICATION_ATSC_RDT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AtscRdt),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_atsc_rdt_json_parse() {
        assert_eq!(crate::Mime::parse("application/atsc-rdt+json"), Ok(APPLICATION_ATSC_RDT_JSON));
        assert_eq!(crate::Mime::parse("APPLiCAtION/aTsC-Rdt+json"), Ok(APPLICATION_ATSC_RDT_JSON));
    }

    /// `application/atsc-rsat+xml`
    pub const APPLICATION_ATSC_RSAT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AtscRsat),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_atsc_rsat_xml_parse() {
        assert_eq!(crate::Mime::parse("application/atsc-rsat+xml"), Ok(APPLICATION_ATSC_RSAT_XML));
        assert_eq!(crate::Mime::parse("aPplIcatiOn/atSC-rSaT+XML"), Ok(APPLICATION_ATSC_RSAT_XML));
    }

    /// `application/ATXML`
    pub const APPLICATION_ATXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Atxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_atxml_parse() {
        assert_eq!(crate::Mime::parse("application/ATXML"), Ok(APPLICATION_ATXML));
        assert_eq!(crate::Mime::parse("APPlICATion/AtXmL"), Ok(APPLICATION_ATXML));
    }

    /// `application/auth-policy+xml`
    pub const APPLICATION_AUTH_POLICY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::AuthPolicy),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_auth_policy_xml_parse() {
        assert_eq!(crate::Mime::parse("application/auth-policy+xml"), Ok(APPLICATION_AUTH_POLICY_XML));
        assert_eq!(crate::Mime::parse("apPLICaTiON/AuTH-PoLICY+xML"), Ok(APPLICATION_AUTH_POLICY_XML));
    }

    /// `application/bacnet-xdd+zip`
    pub const APPLICATION_BACNET_XDD_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::BacnetXdd),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_bacnet_xdd_zip_parse() {
        assert_eq!(crate::Mime::parse("application/bacnet-xdd+zip"), Ok(APPLICATION_BACNET_XDD_ZIP));
        assert_eq!(crate::Mime::parse("appLIcATioN/BACnET-XDd+zIp"), Ok(APPLICATION_BACNET_XDD_ZIP));
    }

    /// `application/batch-SMTP`
    pub const APPLICATION_BATCH_SMTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::BatchSmtp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_batch_smtp_parse() {
        assert_eq!(crate::Mime::parse("application/batch-SMTP"), Ok(APPLICATION_BATCH_SMTP));
        assert_eq!(crate::Mime::parse("apPLIcATion/BatcH-SmTP"), Ok(APPLICATION_BATCH_SMTP));
    }

    /// `application/bbolin`
    pub const APPLICATION_BBOLIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Bbolin),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_bbolin_parse() {
        assert_eq!(crate::Mime::parse("application/bbolin"), Ok(APPLICATION_BBOLIN));
        assert_eq!(crate::Mime::parse("aPpLicaTIon/bbolin"), Ok(APPLICATION_BBOLIN));
    }

    /// `application/beep+xml`
    pub const APPLICATION_BEEP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Beep),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_beep_xml_parse() {
        assert_eq!(crate::Mime::parse("application/beep+xml"), Ok(APPLICATION_BEEP_XML));
        assert_eq!(crate::Mime::parse("APPLiCAtion/bEEp+XML"), Ok(APPLICATION_BEEP_XML));
    }

    /// `application/calendar+json`
    pub const APPLICATION_CALENDAR_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Calendar),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_calendar_json_parse() {
        assert_eq!(crate::Mime::parse("application/calendar+json"), Ok(APPLICATION_CALENDAR_JSON));
        assert_eq!(crate::Mime::parse("aPPLICaTiOn/CaLeNDar+JSon"), Ok(APPLICATION_CALENDAR_JSON));
    }

    /// `application/calendar+xml`
    pub const APPLICATION_CALENDAR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Calendar),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_calendar_xml_parse() {
        assert_eq!(crate::Mime::parse("application/calendar+xml"), Ok(APPLICATION_CALENDAR_XML));
        assert_eq!(crate::Mime::parse("apPlicATIOn/cALENdAR+xmL"), Ok(APPLICATION_CALENDAR_XML));
    }

    /// `application/call-completion`
    pub const APPLICATION_CALL_COMPLETION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CallCompletion),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_call_completion_parse() {
        assert_eq!(crate::Mime::parse("application/call-completion"), Ok(APPLICATION_CALL_COMPLETION));
        assert_eq!(crate::Mime::parse("appLicaTION/CalL-coMPlEtiON"), Ok(APPLICATION_CALL_COMPLETION));
    }

    /// `application/CALS-1840`
    pub const APPLICATION_CALS_1840: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cals1840),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cals_1840_parse() {
        assert_eq!(crate::Mime::parse("application/CALS-1840"), Ok(APPLICATION_CALS_1840));
        assert_eq!(crate::Mime::parse("ApPlIcaTIoN/CALs-1840"), Ok(APPLICATION_CALS_1840));
    }

    /// `application/captive+json`
    pub const APPLICATION_CAPTIVE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Captive),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_captive_json_parse() {
        assert_eq!(crate::Mime::parse("application/captive+json"), Ok(APPLICATION_CAPTIVE_JSON));
        assert_eq!(crate::Mime::parse("APPLIcAtiON/cApTivE+jSon"), Ok(APPLICATION_CAPTIVE_JSON));
    }

    /// `application/cbor`
    pub const APPLICATION_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cbor),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/cbor"), Ok(APPLICATION_CBOR));
        assert_eq!(crate::Mime::parse("ApPLIcaTioN/cbOR"), Ok(APPLICATION_CBOR));
    }

    /// `application/cbor-seq`
    pub const APPLICATION_CBOR_SEQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CborSeq),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cbor_seq_parse() {
        assert_eq!(crate::Mime::parse("application/cbor-seq"), Ok(APPLICATION_CBOR_SEQ));
        assert_eq!(crate::Mime::parse("APPlICatION/cBoR-Seq"), Ok(APPLICATION_CBOR_SEQ));
    }

    /// `application/cccex`
    pub const APPLICATION_CCCEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cccex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cccex_parse() {
        assert_eq!(crate::Mime::parse("application/cccex"), Ok(APPLICATION_CCCEX));
        assert_eq!(crate::Mime::parse("APplicatiOn/CcCeX"), Ok(APPLICATION_CCCEX));
    }

    /// `application/ccmp+xml`
    pub const APPLICATION_CCMP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ccmp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_ccmp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/ccmp+xml"), Ok(APPLICATION_CCMP_XML));
        assert_eq!(crate::Mime::parse("aPPLIcaTiON/Ccmp+XML"), Ok(APPLICATION_CCMP_XML));
    }

    /// `application/ccxml+xml`
    pub const APPLICATION_CCXML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ccxml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_ccxml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/ccxml+xml"), Ok(APPLICATION_CCXML_XML));
        assert_eq!(crate::Mime::parse("aPpLICaTIoN/cCxmL+xml"), Ok(APPLICATION_CCXML_XML));
    }

    /// `application/CDFX+XML`
    pub const APPLICATION_CDFX_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cdfx),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_cdfx_xml_parse() {
        assert_eq!(crate::Mime::parse("application/CDFX+XML"), Ok(APPLICATION_CDFX_XML));
        assert_eq!(crate::Mime::parse("aPPLicatION/CDFx+xml"), Ok(APPLICATION_CDFX_XML));
    }

    /// `application/cdmi-capability`
    pub const APPLICATION_CDMI_CAPABILITY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CdmiCapability),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cdmi_capability_parse() {
        assert_eq!(crate::Mime::parse("application/cdmi-capability"), Ok(APPLICATION_CDMI_CAPABILITY));
        assert_eq!(crate::Mime::parse("appLIcATIon/CDmI-capaBILITY"), Ok(APPLICATION_CDMI_CAPABILITY));
    }

    /// `application/cdmi-container`
    pub const APPLICATION_CDMI_CONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CdmiContainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cdmi_container_parse() {
        assert_eq!(crate::Mime::parse("application/cdmi-container"), Ok(APPLICATION_CDMI_CONTAINER));
        assert_eq!(crate::Mime::parse("APPlicaTiOn/cdMi-contAinER"), Ok(APPLICATION_CDMI_CONTAINER));
    }

    /// `application/cdmi-domain`
    pub const APPLICATION_CDMI_DOMAIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CdmiDomain),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cdmi_domain_parse() {
        assert_eq!(crate::Mime::parse("application/cdmi-domain"), Ok(APPLICATION_CDMI_DOMAIN));
        assert_eq!(crate::Mime::parse("aPPLIcation/Cdmi-doMaiN"), Ok(APPLICATION_CDMI_DOMAIN));
    }

    /// `application/cdmi-object`
    pub const APPLICATION_CDMI_OBJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CdmiObject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cdmi_object_parse() {
        assert_eq!(crate::Mime::parse("application/cdmi-object"), Ok(APPLICATION_CDMI_OBJECT));
        assert_eq!(crate::Mime::parse("aPplICatIOn/cdMi-obJect"), Ok(APPLICATION_CDMI_OBJECT));
    }

    /// `application/cdmi-queue`
    pub const APPLICATION_CDMI_QUEUE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CdmiQueue),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cdmi_queue_parse() {
        assert_eq!(crate::Mime::parse("application/cdmi-queue"), Ok(APPLICATION_CDMI_QUEUE));
        assert_eq!(crate::Mime::parse("ApplICATion/CDmI-qUeue"), Ok(APPLICATION_CDMI_QUEUE));
    }

    /// `application/cdni`
    pub const APPLICATION_CDNI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cdni),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cdni_parse() {
        assert_eq!(crate::Mime::parse("application/cdni"), Ok(APPLICATION_CDNI));
        assert_eq!(crate::Mime::parse("ApPLiCaTiOn/cdNi"), Ok(APPLICATION_CDNI));
    }

    /// `application/CEA`
    pub const APPLICATION_CEA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cea),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cea_parse() {
        assert_eq!(crate::Mime::parse("application/CEA"), Ok(APPLICATION_CEA));
        assert_eq!(crate::Mime::parse("aPPLICatiOn/cEA"), Ok(APPLICATION_CEA));
    }

    /// `application/cea-2018+xml`
    pub const APPLICATION_CEA_2018_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cea2018),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_cea_2018_xml_parse() {
        assert_eq!(crate::Mime::parse("application/cea-2018+xml"), Ok(APPLICATION_CEA_2018_XML));
        assert_eq!(crate::Mime::parse("AppLicAtiOn/CEa-2018+xmL"), Ok(APPLICATION_CEA_2018_XML));
    }

    /// `application/cellml+xml`
    pub const APPLICATION_CELLML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cellml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_cellml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/cellml+xml"), Ok(APPLICATION_CELLML_XML));
        assert_eq!(crate::Mime::parse("APPlIcatIOn/cELlML+xml"), Ok(APPLICATION_CELLML_XML));
    }

    /// `application/cfw`
    pub const APPLICATION_CFW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cfw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cfw_parse() {
        assert_eq!(crate::Mime::parse("application/cfw"), Ok(APPLICATION_CFW));
        assert_eq!(crate::Mime::parse("ApPLICatioN/CFW"), Ok(APPLICATION_CFW));
    }

    /// `application/city+json`
    pub const APPLICATION_CITY_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::City),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_city_json_parse() {
        assert_eq!(crate::Mime::parse("application/city+json"), Ok(APPLICATION_CITY_JSON));
        assert_eq!(crate::Mime::parse("aPPlicATION/CIty+jSoN"), Ok(APPLICATION_CITY_JSON));
    }

    /// `application/clr`
    pub const APPLICATION_CLR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Clr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_clr_parse() {
        assert_eq!(crate::Mime::parse("application/clr"), Ok(APPLICATION_CLR));
        assert_eq!(crate::Mime::parse("apPliCAtiOn/cLr"), Ok(APPLICATION_CLR));
    }

    /// `application/clue+xml`
    pub const APPLICATION_CLUE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Clue),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_clue_xml_parse() {
        assert_eq!(crate::Mime::parse("application/clue+xml"), Ok(APPLICATION_CLUE_XML));
        assert_eq!(crate::Mime::parse("AppliCatioN/CluE+XmL"), Ok(APPLICATION_CLUE_XML));
    }

    /// `application/clue_info+xml`
    pub const APPLICATION_CLUE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ClueInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_clue_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/clue_info+xml"), Ok(APPLICATION_CLUE_INFO_XML));
        assert_eq!(crate::Mime::parse("APPLIcAtIOn/CLUE_INFO+XMl"), Ok(APPLICATION_CLUE_INFO_XML));
    }

    /// `application/cms`
    pub const APPLICATION_CMS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cms),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cms_parse() {
        assert_eq!(crate::Mime::parse("application/cms"), Ok(APPLICATION_CMS));
        assert_eq!(crate::Mime::parse("aPPlIcaTIon/CmS"), Ok(APPLICATION_CMS));
    }

    /// `application/cnrp+xml`
    pub const APPLICATION_CNRP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cnrp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_cnrp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/cnrp+xml"), Ok(APPLICATION_CNRP_XML));
        assert_eq!(crate::Mime::parse("ApPLiCaTION/CnRP+xmL"), Ok(APPLICATION_CNRP_XML));
    }

    /// `application/coap-group+json`
    pub const APPLICATION_COAP_GROUP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CoapGroup),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_coap_group_json_parse() {
        assert_eq!(crate::Mime::parse("application/coap-group+json"), Ok(APPLICATION_COAP_GROUP_JSON));
        assert_eq!(crate::Mime::parse("apPlICAtiOn/cOAp-grouP+Json"), Ok(APPLICATION_COAP_GROUP_JSON));
    }

    /// `application/coap-payload`
    pub const APPLICATION_COAP_PAYLOAD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CoapPayload),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_coap_payload_parse() {
        assert_eq!(crate::Mime::parse("application/coap-payload"), Ok(APPLICATION_COAP_PAYLOAD));
        assert_eq!(crate::Mime::parse("aPPlicaTIon/cOap-pAYloaD"), Ok(APPLICATION_COAP_PAYLOAD));
    }

    /// `application/commonground`
    pub const APPLICATION_COMMONGROUND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Commonground),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_commonground_parse() {
        assert_eq!(crate::Mime::parse("application/commonground"), Ok(APPLICATION_COMMONGROUND));
        assert_eq!(crate::Mime::parse("ApPLIcAtiOn/coMmoNGrouND"), Ok(APPLICATION_COMMONGROUND));
    }

    /// `application/conference-info+xml`
    pub const APPLICATION_CONFERENCE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ConferenceInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_conference_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/conference-info+xml"), Ok(APPLICATION_CONFERENCE_INFO_XML));
        assert_eq!(crate::Mime::parse("APPlIcAtION/CoNfeReNcE-INfo+xML"), Ok(APPLICATION_CONFERENCE_INFO_XML));
    }

    /// `application/cose`
    pub const APPLICATION_COSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cose),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cose_parse() {
        assert_eq!(crate::Mime::parse("application/cose"), Ok(APPLICATION_COSE));
        assert_eq!(crate::Mime::parse("AppLICATiOn/COSe"), Ok(APPLICATION_COSE));
    }

    /// `application/cose-key`
    pub const APPLICATION_COSE_KEY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CoseKey),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cose_key_parse() {
        assert_eq!(crate::Mime::parse("application/cose-key"), Ok(APPLICATION_COSE_KEY));
        assert_eq!(crate::Mime::parse("appliCatIon/COSe-KEY"), Ok(APPLICATION_COSE_KEY));
    }

    /// `application/cose-key-set`
    pub const APPLICATION_COSE_KEY_SET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CoseKeySet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cose_key_set_parse() {
        assert_eq!(crate::Mime::parse("application/cose-key-set"), Ok(APPLICATION_COSE_KEY_SET));
        assert_eq!(crate::Mime::parse("APplIcATION/cOSe-Key-set"), Ok(APPLICATION_COSE_KEY_SET));
    }

    /// `application/cpl+xml`
    pub const APPLICATION_CPL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cpl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_cpl_xml_parse() {
        assert_eq!(crate::Mime::parse("application/cpl+xml"), Ok(APPLICATION_CPL_XML));
        assert_eq!(crate::Mime::parse("APPlIcatIon/CpL+xML"), Ok(APPLICATION_CPL_XML));
    }

    /// `application/csrattrs`
    pub const APPLICATION_CSRATTRS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Csrattrs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_csrattrs_parse() {
        assert_eq!(crate::Mime::parse("application/csrattrs"), Ok(APPLICATION_CSRATTRS));
        assert_eq!(crate::Mime::parse("APpliCaTIoN/CSRAtTrS"), Ok(APPLICATION_CSRATTRS));
    }

    /// `application/csta+xml`
    pub const APPLICATION_CSTA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Csta),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_csta_xml_parse() {
        assert_eq!(crate::Mime::parse("application/csta+xml"), Ok(APPLICATION_CSTA_XML));
        assert_eq!(crate::Mime::parse("appLicatIon/cSTa+Xml"), Ok(APPLICATION_CSTA_XML));
    }

    /// `application/CSTAdata+xml`
    pub const APPLICATION_CST_ADATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CstAdata),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_cst_adata_xml_parse() {
        assert_eq!(crate::Mime::parse("application/CSTAdata+xml"), Ok(APPLICATION_CST_ADATA_XML));
        assert_eq!(crate::Mime::parse("appLICatIon/cStaDATA+Xml"), Ok(APPLICATION_CST_ADATA_XML));
    }

    /// `application/csvm+json`
    pub const APPLICATION_CSVM_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Csvm),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_csvm_json_parse() {
        assert_eq!(crate::Mime::parse("application/csvm+json"), Ok(APPLICATION_CSVM_JSON));
        assert_eq!(crate::Mime::parse("aPPLicATiOn/CsvM+jsOn"), Ok(APPLICATION_CSVM_JSON));
    }

    /// `application/cu-seeme`
    pub const APPLICATION_CU_SEEME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::CuSeeme),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cu_seeme_parse() {
        assert_eq!(crate::Mime::parse("application/cu-seeme"), Ok(APPLICATION_CU_SEEME));
        assert_eq!(crate::Mime::parse("ApPlICAtiON/Cu-SEeME"), Ok(APPLICATION_CU_SEEME));
    }

    /// `application/cwt`
    pub const APPLICATION_CWT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cwt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cwt_parse() {
        assert_eq!(crate::Mime::parse("application/cwt"), Ok(APPLICATION_CWT));
        assert_eq!(crate::Mime::parse("aPpLication/cwt"), Ok(APPLICATION_CWT));
    }

    /// `application/cybercash`
    pub const APPLICATION_CYBERCASH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Cybercash),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_cybercash_parse() {
        assert_eq!(crate::Mime::parse("application/cybercash"), Ok(APPLICATION_CYBERCASH));
        assert_eq!(crate::Mime::parse("aPPliCatIon/CyberCash"), Ok(APPLICATION_CYBERCASH));
    }

    /// `application/dash+xml`
    pub const APPLICATION_DASH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dash),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_dash_xml_parse() {
        assert_eq!(crate::Mime::parse("application/dash+xml"), Ok(APPLICATION_DASH_XML));
        assert_eq!(crate::Mime::parse("APPliCaTIOn/dash+xMl"), Ok(APPLICATION_DASH_XML));
    }

    /// `application/dash-patch+xml`
    pub const APPLICATION_DASH_PATCH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::DashPatch),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_dash_patch_xml_parse() {
        assert_eq!(crate::Mime::parse("application/dash-patch+xml"), Ok(APPLICATION_DASH_PATCH_XML));
        assert_eq!(crate::Mime::parse("ApplIcatION/dasH-PaTcH+XmL"), Ok(APPLICATION_DASH_PATCH_XML));
    }

    /// `application/dashdelta`
    pub const APPLICATION_DASHDELTA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dashdelta),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dashdelta_parse() {
        assert_eq!(crate::Mime::parse("application/dashdelta"), Ok(APPLICATION_DASHDELTA));
        assert_eq!(crate::Mime::parse("aPpLICAtIOn/DAshDeLTA"), Ok(APPLICATION_DASHDELTA));
    }

    /// `application/davmount+xml`
    pub const APPLICATION_DAVMOUNT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Davmount),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_davmount_xml_parse() {
        assert_eq!(crate::Mime::parse("application/davmount+xml"), Ok(APPLICATION_DAVMOUNT_XML));
        assert_eq!(crate::Mime::parse("ApplICAtIOn/davMoUnt+XMl"), Ok(APPLICATION_DAVMOUNT_XML));
    }

    /// `application/dca-rft`
    pub const APPLICATION_DCA_RFT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::DcaRft),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dca_rft_parse() {
        assert_eq!(crate::Mime::parse("application/dca-rft"), Ok(APPLICATION_DCA_RFT));
        assert_eq!(crate::Mime::parse("aPplIcATIon/Dca-rfT"), Ok(APPLICATION_DCA_RFT));
    }

    /// `application/DCD`
    pub const APPLICATION_DCD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dcd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dcd_parse() {
        assert_eq!(crate::Mime::parse("application/DCD"), Ok(APPLICATION_DCD));
        assert_eq!(crate::Mime::parse("apPlIcatiON/DCd"), Ok(APPLICATION_DCD));
    }

    /// `application/dec-dx`
    pub const APPLICATION_DEC_DX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::DecDx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dec_dx_parse() {
        assert_eq!(crate::Mime::parse("application/dec-dx"), Ok(APPLICATION_DEC_DX));
        assert_eq!(crate::Mime::parse("ApplICatIoN/DeC-Dx"), Ok(APPLICATION_DEC_DX));
    }

    /// `application/dialog-info+xml`
    pub const APPLICATION_DIALOG_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::DialogInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_dialog_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/dialog-info+xml"), Ok(APPLICATION_DIALOG_INFO_XML));
        assert_eq!(crate::Mime::parse("APpLicatIon/dialOg-INFO+xMl"), Ok(APPLICATION_DIALOG_INFO_XML));
    }

    /// `application/dicom`
    pub const APPLICATION_DICOM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dicom),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dicom_parse() {
        assert_eq!(crate::Mime::parse("application/dicom"), Ok(APPLICATION_DICOM));
        assert_eq!(crate::Mime::parse("AppLicaTIOn/DiCom"), Ok(APPLICATION_DICOM));
    }

    /// `application/dicom+json`
    pub const APPLICATION_DICOM_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dicom),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_dicom_json_parse() {
        assert_eq!(crate::Mime::parse("application/dicom+json"), Ok(APPLICATION_DICOM_JSON));
        assert_eq!(crate::Mime::parse("ApPLIcatIon/DicOM+JSOn"), Ok(APPLICATION_DICOM_JSON));
    }

    /// `application/dicom+xml`
    pub const APPLICATION_DICOM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dicom),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_dicom_xml_parse() {
        assert_eq!(crate::Mime::parse("application/dicom+xml"), Ok(APPLICATION_DICOM_XML));
        assert_eq!(crate::Mime::parse("APpLIcAtIoN/DICOM+xMl"), Ok(APPLICATION_DICOM_XML));
    }

    /// `application/DII`
    pub const APPLICATION_DII: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dii),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dii_parse() {
        assert_eq!(crate::Mime::parse("application/DII"), Ok(APPLICATION_DII));
        assert_eq!(crate::Mime::parse("apPLICAtIoN/DiI"), Ok(APPLICATION_DII));
    }

    /// `application/DIT`
    pub const APPLICATION_DIT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dit),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dit_parse() {
        assert_eq!(crate::Mime::parse("application/DIT"), Ok(APPLICATION_DIT));
        assert_eq!(crate::Mime::parse("aPPliCATiON/Dit"), Ok(APPLICATION_DIT));
    }

    /// `application/dns`
    pub const APPLICATION_DNS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dns),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dns_parse() {
        assert_eq!(crate::Mime::parse("application/dns"), Ok(APPLICATION_DNS));
        assert_eq!(crate::Mime::parse("apPLIcatIon/Dns"), Ok(APPLICATION_DNS));
    }

    /// `application/dns+json`
    pub const APPLICATION_DNS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dns),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_dns_json_parse() {
        assert_eq!(crate::Mime::parse("application/dns+json"), Ok(APPLICATION_DNS_JSON));
        assert_eq!(crate::Mime::parse("APpLIcATiON/DNs+jSON"), Ok(APPLICATION_DNS_JSON));
    }

    /// `application/dns-message`
    pub const APPLICATION_DNS_MESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::DnsMessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dns_message_parse() {
        assert_eq!(crate::Mime::parse("application/dns-message"), Ok(APPLICATION_DNS_MESSAGE));
        assert_eq!(crate::Mime::parse("apPLIcatIOn/dNs-mEsSagE"), Ok(APPLICATION_DNS_MESSAGE));
    }

    /// `application/dots+cbor`
    pub const APPLICATION_DOTS_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dots),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_dots_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/dots+cbor"), Ok(APPLICATION_DOTS_CBOR));
        assert_eq!(crate::Mime::parse("ApPLicAtiOn/DotS+CBoR"), Ok(APPLICATION_DOTS_CBOR));
    }

    /// `application/dskpp+xml`
    pub const APPLICATION_DSKPP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dskpp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_dskpp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/dskpp+xml"), Ok(APPLICATION_DSKPP_XML));
        assert_eq!(crate::Mime::parse("AppLICatIon/dSKpP+XML"), Ok(APPLICATION_DSKPP_XML));
    }

    /// `application/dsptype`
    pub const APPLICATION_DSPTYPE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dsptype),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dsptype_parse() {
        assert_eq!(crate::Mime::parse("application/dsptype"), Ok(APPLICATION_DSPTYPE));
        assert_eq!(crate::Mime::parse("appLICatioN/dSptyPE"), Ok(APPLICATION_DSPTYPE));
    }

    /// `application/dssc+der`
    pub const APPLICATION_DSSC_DER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dssc),
        suffix: Some(crate::Name::Interned(super::Suffix::Der)),
        parameters: &[]
    });

    #[test]
    fn application_dssc_der_parse() {
        assert_eq!(crate::Mime::parse("application/dssc+der"), Ok(APPLICATION_DSSC_DER));
        assert_eq!(crate::Mime::parse("aPplIcATIon/dSsC+der"), Ok(APPLICATION_DSSC_DER));
    }

    /// `application/dssc+xml`
    pub const APPLICATION_DSSC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dssc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_dssc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/dssc+xml"), Ok(APPLICATION_DSSC_XML));
        assert_eq!(crate::Mime::parse("AppLiCATION/dssc+xmL"), Ok(APPLICATION_DSSC_XML));
    }

    /// `application/dvcs`
    pub const APPLICATION_DVCS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Dvcs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_dvcs_parse() {
        assert_eq!(crate::Mime::parse("application/dvcs"), Ok(APPLICATION_DVCS));
        assert_eq!(crate::Mime::parse("aPplIcAtiOn/DvCs"), Ok(APPLICATION_DVCS));
    }

    /// `application/EDI-consent`
    pub const APPLICATION_EDI_CONSENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EdiConsent),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_edi_consent_parse() {
        assert_eq!(crate::Mime::parse("application/EDI-consent"), Ok(APPLICATION_EDI_CONSENT));
        assert_eq!(crate::Mime::parse("APPLIcATION/Edi-CONsEnT"), Ok(APPLICATION_EDI_CONSENT));
    }

    /// `application/EDI-X12`
    pub const APPLICATION_EDI_X12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EdiX12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_edi_x12_parse() {
        assert_eq!(crate::Mime::parse("application/EDI-X12"), Ok(APPLICATION_EDI_X12));
        assert_eq!(crate::Mime::parse("appLIcatiOn/eDi-x12"), Ok(APPLICATION_EDI_X12));
    }

    /// `application/EDIFACT`
    pub const APPLICATION_EDIFACT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Edifact),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_edifact_parse() {
        assert_eq!(crate::Mime::parse("application/EDIFACT"), Ok(APPLICATION_EDIFACT));
        assert_eq!(crate::Mime::parse("APpLICaTioN/edIfAcT"), Ok(APPLICATION_EDIFACT));
    }

    /// `application/efi`
    pub const APPLICATION_EFI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Efi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_efi_parse() {
        assert_eq!(crate::Mime::parse("application/efi"), Ok(APPLICATION_EFI));
        assert_eq!(crate::Mime::parse("APpliCATion/efi"), Ok(APPLICATION_EFI));
    }

    /// `application/elm+json`
    pub const APPLICATION_ELM_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Elm),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_elm_json_parse() {
        assert_eq!(crate::Mime::parse("application/elm+json"), Ok(APPLICATION_ELM_JSON));
        assert_eq!(crate::Mime::parse("apPLiCATiOn/ELM+jSON"), Ok(APPLICATION_ELM_JSON));
    }

    /// `application/elm+xml`
    pub const APPLICATION_ELM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Elm),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_elm_xml_parse() {
        assert_eq!(crate::Mime::parse("application/elm+xml"), Ok(APPLICATION_ELM_XML));
        assert_eq!(crate::Mime::parse("applicaTION/Elm+XML"), Ok(APPLICATION_ELM_XML));
    }

    /// `application/EmergencyCallData.cap+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_CAP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataCap),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_cap_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.cap+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_CAP_XML));
        assert_eq!(crate::Mime::parse("applicatION/EMeRgEncycALlDATa.caP+XmL"), Ok(APPLICATION_EMERGENCY_CALL_DATA_CAP_XML));
    }

    /// `application/EmergencyCallData.Comment+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_COMMENT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataComment),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_comment_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.Comment+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_COMMENT_XML));
        assert_eq!(crate::Mime::parse("apPlICatIon/EMerGENcyCaLldAtA.cOmmENt+Xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_COMMENT_XML));
    }

    /// `application/EmergencyCallData.Control+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_CONTROL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataControl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_control_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.Control+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_CONTROL_XML));
        assert_eq!(crate::Mime::parse("ApplicatiOn/EMeRGeNCycalLdAta.coNTROL+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_CONTROL_XML));
    }

    /// `application/EmergencyCallData.DeviceInfo+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_DEVICE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataDeviceInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_device_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.DeviceInfo+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_DEVICE_INFO_XML));
        assert_eq!(crate::Mime::parse("ApPLiCation/eMerGencYCAllDAtA.DEviceiNFo+xmL"), Ok(APPLICATION_EMERGENCY_CALL_DATA_DEVICE_INFO_XML));
    }

    /// `application/EmergencyCallData.eCall.MSD`
    pub const APPLICATION_EMERGENCY_CALL_DATA_E_CALL_MSD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataECallMsd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_e_call_msd_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.eCall.MSD"), Ok(APPLICATION_EMERGENCY_CALL_DATA_E_CALL_MSD));
        assert_eq!(crate::Mime::parse("ApPlicATIOn/eMergENcyCalLdaTa.EcaLL.MSD"), Ok(APPLICATION_EMERGENCY_CALL_DATA_E_CALL_MSD));
    }

    /// `application/EmergencyCallData.ProviderInfo+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_PROVIDER_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataProviderInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_provider_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.ProviderInfo+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_PROVIDER_INFO_XML));
        assert_eq!(crate::Mime::parse("applICATIOn/eMErGEncYcaLlDATA.PROvIdErinfO+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_PROVIDER_INFO_XML));
    }

    /// `application/EmergencyCallData.ServiceInfo+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_SERVICE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataServiceInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_service_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.ServiceInfo+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_SERVICE_INFO_XML));
        assert_eq!(crate::Mime::parse("AppLICaTiON/EmeRgEncycALLdAtA.SERVIceInfo+XmL"), Ok(APPLICATION_EMERGENCY_CALL_DATA_SERVICE_INFO_XML));
    }

    /// `application/EmergencyCallData.SubscriberInfo+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_SUBSCRIBER_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataSubscriberInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_subscriber_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.SubscriberInfo+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_SUBSCRIBER_INFO_XML));
        assert_eq!(crate::Mime::parse("apPliCation/emerGeNcYCAlldAtA.SUBscrIbeRinFo+Xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_SUBSCRIBER_INFO_XML));
    }

    /// `application/EmergencyCallData.VEDS+xml`
    pub const APPLICATION_EMERGENCY_CALL_DATA_VEDS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::EmergencyCallDataVeds),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emergency_call_data_veds_xml_parse() {
        assert_eq!(crate::Mime::parse("application/EmergencyCallData.VEDS+xml"), Ok(APPLICATION_EMERGENCY_CALL_DATA_VEDS_XML));
        assert_eq!(crate::Mime::parse("APPlICation/EMERGEnCYCaLLData.veds+xmL"), Ok(APPLICATION_EMERGENCY_CALL_DATA_VEDS_XML));
    }

    /// `application/emma+xml`
    pub const APPLICATION_EMMA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Emma),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emma_xml_parse() {
        assert_eq!(crate::Mime::parse("application/emma+xml"), Ok(APPLICATION_EMMA_XML));
        assert_eq!(crate::Mime::parse("apPLICatIon/EMMa+xmL"), Ok(APPLICATION_EMMA_XML));
    }

    /// `application/emotionml+xml`
    pub const APPLICATION_EMOTIONML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Emotionml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_emotionml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/emotionml+xml"), Ok(APPLICATION_EMOTIONML_XML));
        assert_eq!(crate::Mime::parse("apPLicAtIon/EMOTionML+XmL"), Ok(APPLICATION_EMOTIONML_XML));
    }

    /// `application/encaprtp`
    pub const APPLICATION_ENCAPRTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Encaprtp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_encaprtp_parse() {
        assert_eq!(crate::Mime::parse("application/encaprtp"), Ok(APPLICATION_ENCAPRTP));
        assert_eq!(crate::Mime::parse("ApPlIcaTIoN/EncAprtP"), Ok(APPLICATION_ENCAPRTP));
    }

    /// `application/epp+xml`
    pub const APPLICATION_EPP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Epp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_epp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/epp+xml"), Ok(APPLICATION_EPP_XML));
        assert_eq!(crate::Mime::parse("apPLICATIOn/Epp+XML"), Ok(APPLICATION_EPP_XML));
    }

    /// `application/epub+zip`
    pub const APPLICATION_EPUB_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Epub),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_epub_zip_parse() {
        assert_eq!(crate::Mime::parse("application/epub+zip"), Ok(APPLICATION_EPUB_ZIP));
        assert_eq!(crate::Mime::parse("ApPlICaTION/epuB+ZiP"), Ok(APPLICATION_EPUB_ZIP));
    }

    /// `application/eshop`
    pub const APPLICATION_ESHOP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Eshop),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_eshop_parse() {
        assert_eq!(crate::Mime::parse("application/eshop"), Ok(APPLICATION_ESHOP));
        assert_eq!(crate::Mime::parse("APPlIcAtion/eSHOP"), Ok(APPLICATION_ESHOP));
    }

    /// `application/example`
    pub const APPLICATION_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_example_parse() {
        assert_eq!(crate::Mime::parse("application/example"), Ok(APPLICATION_EXAMPLE));
        assert_eq!(crate::Mime::parse("APpLication/exaMplE"), Ok(APPLICATION_EXAMPLE));
    }

    /// `application/exi`
    pub const APPLICATION_EXI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Exi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_exi_parse() {
        assert_eq!(crate::Mime::parse("application/exi"), Ok(APPLICATION_EXI));
        assert_eq!(crate::Mime::parse("aPplICATioN/Exi"), Ok(APPLICATION_EXI));
    }

    /// `application/expect-ct-report+json`
    pub const APPLICATION_EXPECT_CT_REPORT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ExpectCtReport),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_expect_ct_report_json_parse() {
        assert_eq!(crate::Mime::parse("application/expect-ct-report+json"), Ok(APPLICATION_EXPECT_CT_REPORT_JSON));
        assert_eq!(crate::Mime::parse("APpLicatION/eXpEct-ct-reporT+Json"), Ok(APPLICATION_EXPECT_CT_REPORT_JSON));
    }

    /// `application/express`
    pub const APPLICATION_EXPRESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Express),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_express_parse() {
        assert_eq!(crate::Mime::parse("application/express"), Ok(APPLICATION_EXPRESS));
        assert_eq!(crate::Mime::parse("ApPLicaTiON/expResS"), Ok(APPLICATION_EXPRESS));
    }

    /// `application/fastinfoset`
    pub const APPLICATION_FASTINFOSET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Fastinfoset),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_fastinfoset_parse() {
        assert_eq!(crate::Mime::parse("application/fastinfoset"), Ok(APPLICATION_FASTINFOSET));
        assert_eq!(crate::Mime::parse("aPPlIcATION/fAsTiNFOseT"), Ok(APPLICATION_FASTINFOSET));
    }

    /// `application/fastsoap`
    pub const APPLICATION_FASTSOAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Fastsoap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_fastsoap_parse() {
        assert_eq!(crate::Mime::parse("application/fastsoap"), Ok(APPLICATION_FASTSOAP));
        assert_eq!(crate::Mime::parse("ApPlIcaTIon/FAstSoap"), Ok(APPLICATION_FASTSOAP));
    }

    /// `application/fdt+xml`
    pub const APPLICATION_FDT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Fdt),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_fdt_xml_parse() {
        assert_eq!(crate::Mime::parse("application/fdt+xml"), Ok(APPLICATION_FDT_XML));
        assert_eq!(crate::Mime::parse("APPlIcAtIoN/fdt+xMl"), Ok(APPLICATION_FDT_XML));
    }

    /// `application/fhir+json`
    pub const APPLICATION_FHIR_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Fhir),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_fhir_json_parse() {
        assert_eq!(crate::Mime::parse("application/fhir+json"), Ok(APPLICATION_FHIR_JSON));
        assert_eq!(crate::Mime::parse("ApPLiCaTiOn/Fhir+jSoN"), Ok(APPLICATION_FHIR_JSON));
    }

    /// `application/fhir+xml`
    pub const APPLICATION_FHIR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Fhir),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_fhir_xml_parse() {
        assert_eq!(crate::Mime::parse("application/fhir+xml"), Ok(APPLICATION_FHIR_XML));
        assert_eq!(crate::Mime::parse("apPlIcatIon/FHIr+XML"), Ok(APPLICATION_FHIR_XML));
    }

    /// `application/fits`
    pub const APPLICATION_FITS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Fits),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_fits_parse() {
        assert_eq!(crate::Mime::parse("application/fits"), Ok(APPLICATION_FITS));
        assert_eq!(crate::Mime::parse("apPlIcaTion/fItS"), Ok(APPLICATION_FITS));
    }

    /// `application/flexfec`
    pub const APPLICATION_FLEXFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Flexfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_flexfec_parse() {
        assert_eq!(crate::Mime::parse("application/flexfec"), Ok(APPLICATION_FLEXFEC));
        assert_eq!(crate::Mime::parse("APPLICAtiOn/flExFeC"), Ok(APPLICATION_FLEXFEC));
    }

    /// `application/font-tdpfr`
    pub const APPLICATION_FONT_TDPFR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::FontTdpfr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_font_tdpfr_parse() {
        assert_eq!(crate::Mime::parse("application/font-tdpfr"), Ok(APPLICATION_FONT_TDPFR));
        assert_eq!(crate::Mime::parse("ApPliCAtIOn/Font-TdPfR"), Ok(APPLICATION_FONT_TDPFR));
    }

    /// `application/framework-attributes+xml`
    pub const APPLICATION_FRAMEWORK_ATTRIBUTES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::FrameworkAttributes),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_framework_attributes_xml_parse() {
        assert_eq!(crate::Mime::parse("application/framework-attributes+xml"), Ok(APPLICATION_FRAMEWORK_ATTRIBUTES_XML));
        assert_eq!(crate::Mime::parse("apPlICaTiOn/fRAMEWORK-aTTriBUtes+XMl"), Ok(APPLICATION_FRAMEWORK_ATTRIBUTES_XML));
    }

    /// `application/futuresplash`
    pub const APPLICATION_FUTURESPLASH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Futuresplash),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_futuresplash_parse() {
        assert_eq!(crate::Mime::parse("application/futuresplash"), Ok(APPLICATION_FUTURESPLASH));
        assert_eq!(crate::Mime::parse("appLICATIOn/FUTuReSplASh"), Ok(APPLICATION_FUTURESPLASH));
    }

    /// `application/geo+json`
    pub const APPLICATION_GEO_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Geo),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_geo_json_parse() {
        assert_eq!(crate::Mime::parse("application/geo+json"), Ok(APPLICATION_GEO_JSON));
        assert_eq!(crate::Mime::parse("aPPLicATION/GEo+JSon"), Ok(APPLICATION_GEO_JSON));
    }

    /// `application/geo+json-seq`
    pub const APPLICATION_GEO_JSON_SEQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Geo),
        suffix: Some(crate::Name::Interned(super::Suffix::JsonSeq)),
        parameters: &[]
    });

    #[test]
    fn application_geo_json_seq_parse() {
        assert_eq!(crate::Mime::parse("application/geo+json-seq"), Ok(APPLICATION_GEO_JSON_SEQ));
        assert_eq!(crate::Mime::parse("applIcAtiOn/GeO+json-SEQ"), Ok(APPLICATION_GEO_JSON_SEQ));
    }

    /// `application/geopackage+sqlite3`
    pub const APPLICATION_GEOPACKAGE_SQLITE3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Geopackage),
        suffix: Some(crate::Name::Interned(super::Suffix::Sqlite3)),
        parameters: &[]
    });

    #[test]
    fn application_geopackage_sqlite3_parse() {
        assert_eq!(crate::Mime::parse("application/geopackage+sqlite3"), Ok(APPLICATION_GEOPACKAGE_SQLITE3));
        assert_eq!(crate::Mime::parse("apPlICaTION/GEOPackAge+SQLITE3"), Ok(APPLICATION_GEOPACKAGE_SQLITE3));
    }

    /// `application/geoxacml+xml`
    pub const APPLICATION_GEOXACML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Geoxacml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_geoxacml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/geoxacml+xml"), Ok(APPLICATION_GEOXACML_XML));
        assert_eq!(crate::Mime::parse("APPlIcAtiON/geOxAcML+xml"), Ok(APPLICATION_GEOXACML_XML));
    }

    /// `application/gltf-buffer`
    pub const APPLICATION_GLTF_BUFFER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::GltfBuffer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_gltf_buffer_parse() {
        assert_eq!(crate::Mime::parse("application/gltf-buffer"), Ok(APPLICATION_GLTF_BUFFER));
        assert_eq!(crate::Mime::parse("ApplIcATioN/glTf-bUffEr"), Ok(APPLICATION_GLTF_BUFFER));
    }

    /// `application/gml+xml`
    pub const APPLICATION_GML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Gml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_gml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/gml+xml"), Ok(APPLICATION_GML_XML));
        assert_eq!(crate::Mime::parse("aPplIcAtion/gmL+XML"), Ok(APPLICATION_GML_XML));
    }

    /// `application/gzip`
    pub const APPLICATION_GZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Gzip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_gzip_parse() {
        assert_eq!(crate::Mime::parse("application/gzip"), Ok(APPLICATION_GZIP));
        assert_eq!(crate::Mime::parse("AppLicaTIoN/GzIP"), Ok(APPLICATION_GZIP));
    }

    /// `application/H224`
    pub const APPLICATION_H224: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::H224),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_h224_parse() {
        assert_eq!(crate::Mime::parse("application/H224"), Ok(APPLICATION_H224));
        assert_eq!(crate::Mime::parse("APpLiCaTION/H224"), Ok(APPLICATION_H224));
    }

    /// `application/held+xml`
    pub const APPLICATION_HELD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Held),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_held_xml_parse() {
        assert_eq!(crate::Mime::parse("application/held+xml"), Ok(APPLICATION_HELD_XML));
        assert_eq!(crate::Mime::parse("apPlICaTiON/HeLD+XMl"), Ok(APPLICATION_HELD_XML));
    }

    /// `application/hta`
    pub const APPLICATION_HTA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Hta),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_hta_parse() {
        assert_eq!(crate::Mime::parse("application/hta"), Ok(APPLICATION_HTA));
        assert_eq!(crate::Mime::parse("aPPLicATiON/htA"), Ok(APPLICATION_HTA));
    }

    /// `application/http`
    pub const APPLICATION_HTTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Http),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_http_parse() {
        assert_eq!(crate::Mime::parse("application/http"), Ok(APPLICATION_HTTP));
        assert_eq!(crate::Mime::parse("ApPLiCatION/Http"), Ok(APPLICATION_HTTP));
    }

    /// `application/hyperstudio`
    pub const APPLICATION_HYPERSTUDIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Hyperstudio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_hyperstudio_parse() {
        assert_eq!(crate::Mime::parse("application/hyperstudio"), Ok(APPLICATION_HYPERSTUDIO));
        assert_eq!(crate::Mime::parse("aPPLiCaTION/hYpERSTudio"), Ok(APPLICATION_HYPERSTUDIO));
    }

    /// `application/ibe-key-request+xml`
    pub const APPLICATION_IBE_KEY_REQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IbeKeyRequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_ibe_key_request_xml_parse() {
        assert_eq!(crate::Mime::parse("application/ibe-key-request+xml"), Ok(APPLICATION_IBE_KEY_REQUEST_XML));
        assert_eq!(crate::Mime::parse("aPpLIcation/Ibe-KEY-REQueSt+XML"), Ok(APPLICATION_IBE_KEY_REQUEST_XML));
    }

    /// `application/ibe-pkg-reply+xml`
    pub const APPLICATION_IBE_PKG_REPLY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IbePkgReply),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_ibe_pkg_reply_xml_parse() {
        assert_eq!(crate::Mime::parse("application/ibe-pkg-reply+xml"), Ok(APPLICATION_IBE_PKG_REPLY_XML));
        assert_eq!(crate::Mime::parse("aPpLICatiOn/IBE-pkg-RePLY+xMl"), Ok(APPLICATION_IBE_PKG_REPLY_XML));
    }

    /// `application/ibe-pp-data`
    pub const APPLICATION_IBE_PP_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IbePpData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ibe_pp_data_parse() {
        assert_eq!(crate::Mime::parse("application/ibe-pp-data"), Ok(APPLICATION_IBE_PP_DATA));
        assert_eq!(crate::Mime::parse("apPLICAtIoN/IBe-pP-DAtA"), Ok(APPLICATION_IBE_PP_DATA));
    }

    /// `application/iges`
    pub const APPLICATION_IGES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Iges),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_iges_parse() {
        assert_eq!(crate::Mime::parse("application/iges"), Ok(APPLICATION_IGES));
        assert_eq!(crate::Mime::parse("appLIcAtioN/IgES"), Ok(APPLICATION_IGES));
    }

    /// `application/im-iscomposing+xml`
    pub const APPLICATION_IM_ISCOMPOSING_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ImIscomposing),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_im_iscomposing_xml_parse() {
        assert_eq!(crate::Mime::parse("application/im-iscomposing+xml"), Ok(APPLICATION_IM_ISCOMPOSING_XML));
        assert_eq!(crate::Mime::parse("applIcatiON/Im-IScOmpOSinG+xmL"), Ok(APPLICATION_IM_ISCOMPOSING_XML));
    }

    /// `application/index`
    pub const APPLICATION_INDEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Index),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_index_parse() {
        assert_eq!(crate::Mime::parse("application/index"), Ok(APPLICATION_INDEX));
        assert_eq!(crate::Mime::parse("applicaTion/inDex"), Ok(APPLICATION_INDEX));
    }

    /// `application/index.cmd`
    pub const APPLICATION_INDEX_CMD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IndexCmd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_index_cmd_parse() {
        assert_eq!(crate::Mime::parse("application/index.cmd"), Ok(APPLICATION_INDEX_CMD));
        assert_eq!(crate::Mime::parse("aPplicaTion/inDex.cMD"), Ok(APPLICATION_INDEX_CMD));
    }

    /// `application/index.obj`
    pub const APPLICATION_INDEX_OBJ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IndexObj),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_index_obj_parse() {
        assert_eq!(crate::Mime::parse("application/index.obj"), Ok(APPLICATION_INDEX_OBJ));
        assert_eq!(crate::Mime::parse("aPplIcAtIoN/InDex.obj"), Ok(APPLICATION_INDEX_OBJ));
    }

    /// `application/index.response`
    pub const APPLICATION_INDEX_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IndexResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_index_response_parse() {
        assert_eq!(crate::Mime::parse("application/index.response"), Ok(APPLICATION_INDEX_RESPONSE));
        assert_eq!(crate::Mime::parse("applIcAtIoN/inDeX.ResPoNSe"), Ok(APPLICATION_INDEX_RESPONSE));
    }

    /// `application/index.vnd`
    pub const APPLICATION_INDEX_VND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::IndexVnd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_index_vnd_parse() {
        assert_eq!(crate::Mime::parse("application/index.vnd"), Ok(APPLICATION_INDEX_VND));
        assert_eq!(crate::Mime::parse("aPpLiCation/InDeX.vnd"), Ok(APPLICATION_INDEX_VND));
    }

    /// `application/inkml+xml`
    pub const APPLICATION_INKML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Inkml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_inkml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/inkml+xml"), Ok(APPLICATION_INKML_XML));
        assert_eq!(crate::Mime::parse("APPlICATion/iNKmL+xML"), Ok(APPLICATION_INKML_XML));
    }

    /// `application/IOTP`
    pub const APPLICATION_IOTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Iotp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_iotp_parse() {
        assert_eq!(crate::Mime::parse("application/IOTP"), Ok(APPLICATION_IOTP));
        assert_eq!(crate::Mime::parse("APPliCAtIoN/iOtp"), Ok(APPLICATION_IOTP));
    }

    /// `application/ipfix`
    pub const APPLICATION_IPFIX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ipfix),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ipfix_parse() {
        assert_eq!(crate::Mime::parse("application/ipfix"), Ok(APPLICATION_IPFIX));
        assert_eq!(crate::Mime::parse("apPlIcAtIon/iPFIX"), Ok(APPLICATION_IPFIX));
    }

    /// `application/ipp`
    pub const APPLICATION_IPP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ipp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ipp_parse() {
        assert_eq!(crate::Mime::parse("application/ipp"), Ok(APPLICATION_IPP));
        assert_eq!(crate::Mime::parse("aPpliCATion/ipp"), Ok(APPLICATION_IPP));
    }

    /// `application/ISUP`
    pub const APPLICATION_ISUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Isup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_isup_parse() {
        assert_eq!(crate::Mime::parse("application/ISUP"), Ok(APPLICATION_ISUP));
        assert_eq!(crate::Mime::parse("APPLIcAtion/ISUP"), Ok(APPLICATION_ISUP));
    }

    /// `application/its+xml`
    pub const APPLICATION_ITS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Its),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_its_xml_parse() {
        assert_eq!(crate::Mime::parse("application/its+xml"), Ok(APPLICATION_ITS_XML));
        assert_eq!(crate::Mime::parse("ApPliCaTIOn/iTs+xMl"), Ok(APPLICATION_ITS_XML));
    }

    /// `application/java-archive`
    pub const APPLICATION_JAVA_ARCHIVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::JavaArchive),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_java_archive_parse() {
        assert_eq!(crate::Mime::parse("application/java-archive"), Ok(APPLICATION_JAVA_ARCHIVE));
        assert_eq!(crate::Mime::parse("ApPlIcaTiON/jaVa-arcHIVE"), Ok(APPLICATION_JAVA_ARCHIVE));
    }

    /// `application/java-serialized-object`
    pub const APPLICATION_JAVA_SERIALIZED_OBJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::JavaSerializedObject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_java_serialized_object_parse() {
        assert_eq!(crate::Mime::parse("application/java-serialized-object"), Ok(APPLICATION_JAVA_SERIALIZED_OBJECT));
        assert_eq!(crate::Mime::parse("APpLICaTioN/JaVa-SeriALIzeD-OBjECt"), Ok(APPLICATION_JAVA_SERIALIZED_OBJECT));
    }

    /// `application/java-vm`
    pub const APPLICATION_JAVA_VM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::JavaVm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_java_vm_parse() {
        assert_eq!(crate::Mime::parse("application/java-vm"), Ok(APPLICATION_JAVA_VM));
        assert_eq!(crate::Mime::parse("aPPLICATIOn/JaVa-vM"), Ok(APPLICATION_JAVA_VM));
    }

    /// `application/jf2feed+json`
    pub const APPLICATION_JF2FEED_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jf2feed),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_jf2feed_json_parse() {
        assert_eq!(crate::Mime::parse("application/jf2feed+json"), Ok(APPLICATION_JF2FEED_JSON));
        assert_eq!(crate::Mime::parse("apPlICAtIon/Jf2FeeD+JSon"), Ok(APPLICATION_JF2FEED_JSON));
    }

    /// `application/jose`
    pub const APPLICATION_JOSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jose),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_jose_parse() {
        assert_eq!(crate::Mime::parse("application/jose"), Ok(APPLICATION_JOSE));
        assert_eq!(crate::Mime::parse("APPLICATioN/jOsE"), Ok(APPLICATION_JOSE));
    }

    /// `application/jose+json`
    pub const APPLICATION_JOSE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jose),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_jose_json_parse() {
        assert_eq!(crate::Mime::parse("application/jose+json"), Ok(APPLICATION_JOSE_JSON));
        assert_eq!(crate::Mime::parse("APpLIcaTION/joSe+JsOn"), Ok(APPLICATION_JOSE_JSON));
    }

    /// `application/jrd+json`
    pub const APPLICATION_JRD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jrd),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_jrd_json_parse() {
        assert_eq!(crate::Mime::parse("application/jrd+json"), Ok(APPLICATION_JRD_JSON));
        assert_eq!(crate::Mime::parse("apPlICaTion/jrd+JSon"), Ok(APPLICATION_JRD_JSON));
    }

    /// `application/jscalendar+json`
    pub const APPLICATION_JSCALENDAR_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jscalendar),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_jscalendar_json_parse() {
        assert_eq!(crate::Mime::parse("application/jscalendar+json"), Ok(APPLICATION_JSCALENDAR_JSON));
        assert_eq!(crate::Mime::parse("APPLicaTIoN/JsCALEnDAR+Json"), Ok(APPLICATION_JSCALENDAR_JSON));
    }

    /// `application/json`
    pub const APPLICATION_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Json),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_json_parse() {
        assert_eq!(crate::Mime::parse("application/json"), Ok(APPLICATION_JSON));
        assert_eq!(crate::Mime::parse("applICaTiOn/JSON"), Ok(APPLICATION_JSON));
    }

    /// `application/json-patch+json`
    pub const APPLICATION_JSON_PATCH_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::JsonPatch),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_json_patch_json_parse() {
        assert_eq!(crate::Mime::parse("application/json-patch+json"), Ok(APPLICATION_JSON_PATCH_JSON));
        assert_eq!(crate::Mime::parse("ApPLicaTioN/jSOn-pATCh+jsON"), Ok(APPLICATION_JSON_PATCH_JSON));
    }

    /// `application/json-seq`
    pub const APPLICATION_JSON_SEQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::JsonSeq),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_json_seq_parse() {
        assert_eq!(crate::Mime::parse("application/json-seq"), Ok(APPLICATION_JSON_SEQ));
        assert_eq!(crate::Mime::parse("aPplIcAtiOn/jsoN-sEq"), Ok(APPLICATION_JSON_SEQ));
    }

    /// `application/jwk+json`
    pub const APPLICATION_JWK_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jwk),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_jwk_json_parse() {
        assert_eq!(crate::Mime::parse("application/jwk+json"), Ok(APPLICATION_JWK_JSON));
        assert_eq!(crate::Mime::parse("appLIcatION/jwk+jSon"), Ok(APPLICATION_JWK_JSON));
    }

    /// `application/jwk-set+json`
    pub const APPLICATION_JWK_SET_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::JwkSet),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_jwk_set_json_parse() {
        assert_eq!(crate::Mime::parse("application/jwk-set+json"), Ok(APPLICATION_JWK_SET_JSON));
        assert_eq!(crate::Mime::parse("apPliCatIoN/jWk-set+jSon"), Ok(APPLICATION_JWK_SET_JSON));
    }

    /// `application/jwt`
    pub const APPLICATION_JWT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Jwt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_jwt_parse() {
        assert_eq!(crate::Mime::parse("application/jwt"), Ok(APPLICATION_JWT));
        assert_eq!(crate::Mime::parse("aPPlicatiOn/JwT"), Ok(APPLICATION_JWT));
    }

    /// `application/kpml-request+xml`
    pub const APPLICATION_KPML_REQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::KpmlRequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_kpml_request_xml_parse() {
        assert_eq!(crate::Mime::parse("application/kpml-request+xml"), Ok(APPLICATION_KPML_REQUEST_XML));
        assert_eq!(crate::Mime::parse("AppLiCAtion/KPmL-rEQUEst+XMl"), Ok(APPLICATION_KPML_REQUEST_XML));
    }

    /// `application/kpml-response+xml`
    pub const APPLICATION_KPML_RESPONSE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::KpmlResponse),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_kpml_response_xml_parse() {
        assert_eq!(crate::Mime::parse("application/kpml-response+xml"), Ok(APPLICATION_KPML_RESPONSE_XML));
        assert_eq!(crate::Mime::parse("aPPLicAtIon/KPmL-rESpONsE+xml"), Ok(APPLICATION_KPML_RESPONSE_XML));
    }

    /// `application/ld+json`
    pub const APPLICATION_LD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ld),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_ld_json_parse() {
        assert_eq!(crate::Mime::parse("application/ld+json"), Ok(APPLICATION_LD_JSON));
        assert_eq!(crate::Mime::parse("ApplICaTIOn/Ld+JsOn"), Ok(APPLICATION_LD_JSON));
    }

    /// `application/lgr+xml`
    pub const APPLICATION_LGR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Lgr),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_lgr_xml_parse() {
        assert_eq!(crate::Mime::parse("application/lgr+xml"), Ok(APPLICATION_LGR_XML));
        assert_eq!(crate::Mime::parse("aPPLiCATiON/Lgr+XML"), Ok(APPLICATION_LGR_XML));
    }

    /// `application/link-format`
    pub const APPLICATION_LINK_FORMAT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::LinkFormat),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_link_format_parse() {
        assert_eq!(crate::Mime::parse("application/link-format"), Ok(APPLICATION_LINK_FORMAT));
        assert_eq!(crate::Mime::parse("aPpLICatIOn/Link-formAT"), Ok(APPLICATION_LINK_FORMAT));
    }

    /// `application/load-control+xml`
    pub const APPLICATION_LOAD_CONTROL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::LoadControl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_load_control_xml_parse() {
        assert_eq!(crate::Mime::parse("application/load-control+xml"), Ok(APPLICATION_LOAD_CONTROL_XML));
        assert_eq!(crate::Mime::parse("ApPlicAtion/lOaD-coNTroL+XMl"), Ok(APPLICATION_LOAD_CONTROL_XML));
    }

    /// `application/lost+xml`
    pub const APPLICATION_LOST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Lost),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_lost_xml_parse() {
        assert_eq!(crate::Mime::parse("application/lost+xml"), Ok(APPLICATION_LOST_XML));
        assert_eq!(crate::Mime::parse("applICATiOn/lOST+xmL"), Ok(APPLICATION_LOST_XML));
    }

    /// `application/lostsync+xml`
    pub const APPLICATION_LOSTSYNC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Lostsync),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_lostsync_xml_parse() {
        assert_eq!(crate::Mime::parse("application/lostsync+xml"), Ok(APPLICATION_LOSTSYNC_XML));
        assert_eq!(crate::Mime::parse("appliCatIOn/lostSYnc+xml"), Ok(APPLICATION_LOSTSYNC_XML));
    }

    /// `application/lpf+zip`
    pub const APPLICATION_LPF_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Lpf),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_lpf_zip_parse() {
        assert_eq!(crate::Mime::parse("application/lpf+zip"), Ok(APPLICATION_LPF_ZIP));
        assert_eq!(crate::Mime::parse("aPPLIcATIoN/lPF+zIp"), Ok(APPLICATION_LPF_ZIP));
    }

    /// `application/LXF`
    pub const APPLICATION_LXF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Lxf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_lxf_parse() {
        assert_eq!(crate::Mime::parse("application/LXF"), Ok(APPLICATION_LXF));
        assert_eq!(crate::Mime::parse("appLICatIOn/LxF"), Ok(APPLICATION_LXF));
    }

    /// `application/m3g`
    pub const APPLICATION_M3G: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::M3g),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_m3g_parse() {
        assert_eq!(crate::Mime::parse("application/m3g"), Ok(APPLICATION_M3G));
        assert_eq!(crate::Mime::parse("APplication/m3g"), Ok(APPLICATION_M3G));
    }

    /// `application/mac-binhex40`
    pub const APPLICATION_MAC_BINHEX40: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MacBinhex40),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mac_binhex40_parse() {
        assert_eq!(crate::Mime::parse("application/mac-binhex40"), Ok(APPLICATION_MAC_BINHEX40));
        assert_eq!(crate::Mime::parse("AppLICaTION/MAc-binhEx40"), Ok(APPLICATION_MAC_BINHEX40));
    }

    /// `application/mac-compactpro`
    pub const APPLICATION_MAC_COMPACTPRO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MacCompactpro),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mac_compactpro_parse() {
        assert_eq!(crate::Mime::parse("application/mac-compactpro"), Ok(APPLICATION_MAC_COMPACTPRO));
        assert_eq!(crate::Mime::parse("APplIcaTION/MAC-compacTPRo"), Ok(APPLICATION_MAC_COMPACTPRO));
    }

    /// `application/macwriteii`
    pub const APPLICATION_MACWRITEII: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Macwriteii),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_macwriteii_parse() {
        assert_eq!(crate::Mime::parse("application/macwriteii"), Ok(APPLICATION_MACWRITEII));
        assert_eq!(crate::Mime::parse("aPpLicatIon/mACWRiTeIi"), Ok(APPLICATION_MACWRITEII));
    }

    /// `application/mads+xml`
    pub const APPLICATION_MADS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mads),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mads_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mads+xml"), Ok(APPLICATION_MADS_XML));
        assert_eq!(crate::Mime::parse("applicAtioN/madS+XMl"), Ok(APPLICATION_MADS_XML));
    }

    /// `application/manifest+json`
    pub const APPLICATION_MANIFEST_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Manifest),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_manifest_json_parse() {
        assert_eq!(crate::Mime::parse("application/manifest+json"), Ok(APPLICATION_MANIFEST_JSON));
        assert_eq!(crate::Mime::parse("aPPLiCaTion/MANifest+jSOn"), Ok(APPLICATION_MANIFEST_JSON));
    }

    /// `application/marc`
    pub const APPLICATION_MARC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Marc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_marc_parse() {
        assert_eq!(crate::Mime::parse("application/marc"), Ok(APPLICATION_MARC));
        assert_eq!(crate::Mime::parse("APPlICATioN/maRc"), Ok(APPLICATION_MARC));
    }

    /// `application/marcxml+xml`
    pub const APPLICATION_MARCXML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Marcxml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_marcxml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/marcxml+xml"), Ok(APPLICATION_MARCXML_XML));
        assert_eq!(crate::Mime::parse("applIcaTIOn/mARCXmL+xML"), Ok(APPLICATION_MARCXML_XML));
    }

    /// `application/mathematica`
    pub const APPLICATION_MATHEMATICA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mathematica),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mathematica_parse() {
        assert_eq!(crate::Mime::parse("application/mathematica"), Ok(APPLICATION_MATHEMATICA));
        assert_eq!(crate::Mime::parse("aPpLICaTIoN/mATHEmatiCA"), Ok(APPLICATION_MATHEMATICA));
    }

    /// `application/mathml+xml`
    pub const APPLICATION_MATHML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mathml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mathml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mathml+xml"), Ok(APPLICATION_MATHML_XML));
        assert_eq!(crate::Mime::parse("aPPLicatiOn/MathML+xML"), Ok(APPLICATION_MATHML_XML));
    }

    /// `application/mathml-content+xml`
    pub const APPLICATION_MATHML_CONTENT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MathmlContent),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mathml_content_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mathml-content+xml"), Ok(APPLICATION_MATHML_CONTENT_XML));
        assert_eq!(crate::Mime::parse("aPpLIcaTIoN/MATHmL-ConTent+xml"), Ok(APPLICATION_MATHML_CONTENT_XML));
    }

    /// `application/mathml-presentation+xml`
    pub const APPLICATION_MATHML_PRESENTATION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MathmlPresentation),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mathml_presentation_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mathml-presentation+xml"), Ok(APPLICATION_MATHML_PRESENTATION_XML));
        assert_eq!(crate::Mime::parse("aPplICAtiON/matHML-PrEsenTatioN+XMl"), Ok(APPLICATION_MATHML_PRESENTATION_XML));
    }

    /// `application/mbms-associated-procedure-description+xml`
    pub const APPLICATION_MBMS_ASSOCIATED_PROCEDURE_DESCRIPTION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsAssociatedProcedureDescription),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_associated_procedure_description_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-associated-procedure-description+xml"), Ok(APPLICATION_MBMS_ASSOCIATED_PROCEDURE_DESCRIPTION_XML));
        assert_eq!(crate::Mime::parse("aPplIcation/MBmS-aSsociateD-PROCeDuRE-desCripTION+XMl"), Ok(APPLICATION_MBMS_ASSOCIATED_PROCEDURE_DESCRIPTION_XML));
    }

    /// `application/mbms-deregister+xml`
    pub const APPLICATION_MBMS_DEREGISTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsDeregister),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_deregister_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-deregister+xml"), Ok(APPLICATION_MBMS_DEREGISTER_XML));
        assert_eq!(crate::Mime::parse("APpliCaTiOn/MbMS-DERegistER+Xml"), Ok(APPLICATION_MBMS_DEREGISTER_XML));
    }

    /// `application/mbms-envelope+xml`
    pub const APPLICATION_MBMS_ENVELOPE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsEnvelope),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_envelope_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-envelope+xml"), Ok(APPLICATION_MBMS_ENVELOPE_XML));
        assert_eq!(crate::Mime::parse("apPLiCatioN/MBMS-envELOpE+xmL"), Ok(APPLICATION_MBMS_ENVELOPE_XML));
    }

    /// `application/mbms-msk+xml`
    pub const APPLICATION_MBMS_MSK_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsMsk),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_msk_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-msk+xml"), Ok(APPLICATION_MBMS_MSK_XML));
        assert_eq!(crate::Mime::parse("APpLIcatIOn/mBmS-mSK+XmL"), Ok(APPLICATION_MBMS_MSK_XML));
    }

    /// `application/mbms-msk-response+xml`
    pub const APPLICATION_MBMS_MSK_RESPONSE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsMskResponse),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_msk_response_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-msk-response+xml"), Ok(APPLICATION_MBMS_MSK_RESPONSE_XML));
        assert_eq!(crate::Mime::parse("APpLicaTIoN/mbMS-msk-resPoNse+xMl"), Ok(APPLICATION_MBMS_MSK_RESPONSE_XML));
    }

    /// `application/mbms-protection-description+xml`
    pub const APPLICATION_MBMS_PROTECTION_DESCRIPTION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsProtectionDescription),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_protection_description_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-protection-description+xml"), Ok(APPLICATION_MBMS_PROTECTION_DESCRIPTION_XML));
        assert_eq!(crate::Mime::parse("aPpLiCation/mbmS-protecTIOn-descrIPTION+xML"), Ok(APPLICATION_MBMS_PROTECTION_DESCRIPTION_XML));
    }

    /// `application/mbms-reception-report+xml`
    pub const APPLICATION_MBMS_RECEPTION_REPORT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsReceptionReport),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_reception_report_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-reception-report+xml"), Ok(APPLICATION_MBMS_RECEPTION_REPORT_XML));
        assert_eq!(crate::Mime::parse("apPLicAtION/Mbms-rECEpTion-repoRt+xMl"), Ok(APPLICATION_MBMS_RECEPTION_REPORT_XML));
    }

    /// `application/mbms-register+xml`
    pub const APPLICATION_MBMS_REGISTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsRegister),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_register_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-register+xml"), Ok(APPLICATION_MBMS_REGISTER_XML));
        assert_eq!(crate::Mime::parse("ApPLiCAtiON/Mbms-RegIsTER+xml"), Ok(APPLICATION_MBMS_REGISTER_XML));
    }

    /// `application/mbms-register-response+xml`
    pub const APPLICATION_MBMS_REGISTER_RESPONSE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsRegisterResponse),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_register_response_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-register-response+xml"), Ok(APPLICATION_MBMS_REGISTER_RESPONSE_XML));
        assert_eq!(crate::Mime::parse("ApPLicAtIon/mbmS-REGiSTer-ReSponSe+XMl"), Ok(APPLICATION_MBMS_REGISTER_RESPONSE_XML));
    }

    /// `application/mbms-schedule+xml`
    pub const APPLICATION_MBMS_SCHEDULE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsSchedule),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_schedule_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-schedule+xml"), Ok(APPLICATION_MBMS_SCHEDULE_XML));
        assert_eq!(crate::Mime::parse("ApPliCATIOn/mBMs-ScHEDUle+xmL"), Ok(APPLICATION_MBMS_SCHEDULE_XML));
    }

    /// `application/mbms-user-service-description+xml`
    pub const APPLICATION_MBMS_USER_SERVICE_DESCRIPTION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MbmsUserServiceDescription),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mbms_user_service_description_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mbms-user-service-description+xml"), Ok(APPLICATION_MBMS_USER_SERVICE_DESCRIPTION_XML));
        assert_eq!(crate::Mime::parse("ApPlIcaTION/MBMs-uSeR-sERvIcE-DescRipTIon+xmL"), Ok(APPLICATION_MBMS_USER_SERVICE_DESCRIPTION_XML));
    }

    /// `application/mbox`
    pub const APPLICATION_MBOX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mbox),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mbox_parse() {
        assert_eq!(crate::Mime::parse("application/mbox"), Ok(APPLICATION_MBOX));
        assert_eq!(crate::Mime::parse("apPlicatIon/mboX"), Ok(APPLICATION_MBOX));
    }

    /// `application/media-policy-dataset+xml`
    pub const APPLICATION_MEDIA_POLICY_DATASET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MediaPolicyDataset),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_media_policy_dataset_xml_parse() {
        assert_eq!(crate::Mime::parse("application/media-policy-dataset+xml"), Ok(APPLICATION_MEDIA_POLICY_DATASET_XML));
        assert_eq!(crate::Mime::parse("APpLIcATIOn/MEdIA-PoLicy-dATAsET+XML"), Ok(APPLICATION_MEDIA_POLICY_DATASET_XML));
    }

    /// `application/mediaservercontrol+xml`
    pub const APPLICATION_MEDIASERVERCONTROL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mediaservercontrol),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mediaservercontrol_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mediaservercontrol+xml"), Ok(APPLICATION_MEDIASERVERCONTROL_XML));
        assert_eq!(crate::Mime::parse("APpLicatiON/MEDiaSErvErCoNTRol+XmL"), Ok(APPLICATION_MEDIASERVERCONTROL_XML));
    }

    /// `application/media_control+xml`
    pub const APPLICATION_MEDIA_CONTROL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MediaControl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_media_control_xml_parse() {
        assert_eq!(crate::Mime::parse("application/media_control+xml"), Ok(APPLICATION_MEDIA_CONTROL_XML));
        assert_eq!(crate::Mime::parse("ApPLicATION/medIA_CONTrol+xMl"), Ok(APPLICATION_MEDIA_CONTROL_XML));
    }

    /// `application/merge-patch+json`
    pub const APPLICATION_MERGE_PATCH_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MergePatch),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_merge_patch_json_parse() {
        assert_eq!(crate::Mime::parse("application/merge-patch+json"), Ok(APPLICATION_MERGE_PATCH_JSON));
        assert_eq!(crate::Mime::parse("aPPLICaTiOn/Merge-pAtch+JsoN"), Ok(APPLICATION_MERGE_PATCH_JSON));
    }

    /// `application/metalink4+xml`
    pub const APPLICATION_METALINK4_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Metalink4),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_metalink4_xml_parse() {
        assert_eq!(crate::Mime::parse("application/metalink4+xml"), Ok(APPLICATION_METALINK4_XML));
        assert_eq!(crate::Mime::parse("ApPliCATiOn/METAlInk4+Xml"), Ok(APPLICATION_METALINK4_XML));
    }

    /// `application/mets+xml`
    pub const APPLICATION_METS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mets),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mets_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mets+xml"), Ok(APPLICATION_METS_XML));
        assert_eq!(crate::Mime::parse("ApPliCatioN/MetS+xml"), Ok(APPLICATION_METS_XML));
    }

    /// `application/MF4`
    pub const APPLICATION_MF4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mf4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mf4_parse() {
        assert_eq!(crate::Mime::parse("application/MF4"), Ok(APPLICATION_MF4));
        assert_eq!(crate::Mime::parse("aPPlIcAtiON/mF4"), Ok(APPLICATION_MF4));
    }

    /// `application/mikey`
    pub const APPLICATION_MIKEY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mikey),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mikey_parse() {
        assert_eq!(crate::Mime::parse("application/mikey"), Ok(APPLICATION_MIKEY));
        assert_eq!(crate::Mime::parse("APPlIcaTioN/miKeY"), Ok(APPLICATION_MIKEY));
    }

    /// `application/mipc`
    pub const APPLICATION_MIPC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mipc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mipc_parse() {
        assert_eq!(crate::Mime::parse("application/mipc"), Ok(APPLICATION_MIPC));
        assert_eq!(crate::Mime::parse("apPlicatiON/MipC"), Ok(APPLICATION_MIPC));
    }

    /// `application/missing-blocks+cbor-seq`
    pub const APPLICATION_MISSING_BLOCKS_CBOR_SEQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MissingBlocks),
        suffix: Some(crate::Name::Interned(super::Suffix::CborSeq)),
        parameters: &[]
    });

    #[test]
    fn application_missing_blocks_cbor_seq_parse() {
        assert_eq!(crate::Mime::parse("application/missing-blocks+cbor-seq"), Ok(APPLICATION_MISSING_BLOCKS_CBOR_SEQ));
        assert_eq!(crate::Mime::parse("APPLIcATIoN/MISsIng-BlOckS+cBOr-sEQ"), Ok(APPLICATION_MISSING_BLOCKS_CBOR_SEQ));
    }

    /// `application/mmt-aei+xml`
    pub const APPLICATION_MMT_AEI_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MmtAei),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mmt_aei_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mmt-aei+xml"), Ok(APPLICATION_MMT_AEI_XML));
        assert_eq!(crate::Mime::parse("aPPLIcaTIon/mMt-AeI+xml"), Ok(APPLICATION_MMT_AEI_XML));
    }

    /// `application/mmt-usd+xml`
    pub const APPLICATION_MMT_USD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MmtUsd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mmt_usd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mmt-usd+xml"), Ok(APPLICATION_MMT_USD_XML));
        assert_eq!(crate::Mime::parse("APpLicaTion/MMT-usd+xMl"), Ok(APPLICATION_MMT_USD_XML));
    }

    /// `application/mods+xml`
    pub const APPLICATION_MODS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mods),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mods_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mods+xml"), Ok(APPLICATION_MODS_XML));
        assert_eq!(crate::Mime::parse("aPplICaTiOn/ModS+xML"), Ok(APPLICATION_MODS_XML));
    }

    /// `application/moss-keys`
    pub const APPLICATION_MOSS_KEYS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MossKeys),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_moss_keys_parse() {
        assert_eq!(crate::Mime::parse("application/moss-keys"), Ok(APPLICATION_MOSS_KEYS));
        assert_eq!(crate::Mime::parse("APPlICatIoN/moss-KEYS"), Ok(APPLICATION_MOSS_KEYS));
    }

    /// `application/moss-signature`
    pub const APPLICATION_MOSS_SIGNATURE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MossSignature),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_moss_signature_parse() {
        assert_eq!(crate::Mime::parse("application/moss-signature"), Ok(APPLICATION_MOSS_SIGNATURE));
        assert_eq!(crate::Mime::parse("applICATIon/mOss-sIgnATurE"), Ok(APPLICATION_MOSS_SIGNATURE));
    }

    /// `application/mosskey-data`
    pub const APPLICATION_MOSSKEY_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MosskeyData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mosskey_data_parse() {
        assert_eq!(crate::Mime::parse("application/mosskey-data"), Ok(APPLICATION_MOSSKEY_DATA));
        assert_eq!(crate::Mime::parse("appLIcaTioN/MOSSKEY-DAta"), Ok(APPLICATION_MOSSKEY_DATA));
    }

    /// `application/mosskey-request`
    pub const APPLICATION_MOSSKEY_REQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MosskeyRequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mosskey_request_parse() {
        assert_eq!(crate::Mime::parse("application/mosskey-request"), Ok(APPLICATION_MOSSKEY_REQUEST));
        assert_eq!(crate::Mime::parse("APPLicaTioN/MOSskEY-REQUesT"), Ok(APPLICATION_MOSSKEY_REQUEST));
    }

    /// `application/mp21`
    pub const APPLICATION_MP21: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mp21),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mp21_parse() {
        assert_eq!(crate::Mime::parse("application/mp21"), Ok(APPLICATION_MP21));
        assert_eq!(crate::Mime::parse("aPPlIcAtioN/Mp21"), Ok(APPLICATION_MP21));
    }

    /// `application/mp4`
    pub const APPLICATION_MP4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mp4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mp4_parse() {
        assert_eq!(crate::Mime::parse("application/mp4"), Ok(APPLICATION_MP4));
        assert_eq!(crate::Mime::parse("aPpliCaTiOn/Mp4"), Ok(APPLICATION_MP4));
    }

    /// `application/mpeg4-generic`
    pub const APPLICATION_MPEG4_GENERIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mpeg4Generic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mpeg4_generic_parse() {
        assert_eq!(crate::Mime::parse("application/mpeg4-generic"), Ok(APPLICATION_MPEG4_GENERIC));
        assert_eq!(crate::Mime::parse("APpLICATIOn/mPeG4-GENERic"), Ok(APPLICATION_MPEG4_GENERIC));
    }

    /// `application/mpeg4-iod`
    pub const APPLICATION_MPEG4_IOD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mpeg4Iod),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mpeg4_iod_parse() {
        assert_eq!(crate::Mime::parse("application/mpeg4-iod"), Ok(APPLICATION_MPEG4_IOD));
        assert_eq!(crate::Mime::parse("applICatIon/MpEG4-iOD"), Ok(APPLICATION_MPEG4_IOD));
    }

    /// `application/mpeg4-iod-xmt`
    pub const APPLICATION_MPEG4_IOD_XMT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mpeg4IodXmt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mpeg4_iod_xmt_parse() {
        assert_eq!(crate::Mime::parse("application/mpeg4-iod-xmt"), Ok(APPLICATION_MPEG4_IOD_XMT));
        assert_eq!(crate::Mime::parse("AppLiCatioN/mPEg4-IOd-xmT"), Ok(APPLICATION_MPEG4_IOD_XMT));
    }

    /// `application/mrb-consumer+xml`
    pub const APPLICATION_MRB_CONSUMER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MrbConsumer),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mrb_consumer_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mrb-consumer+xml"), Ok(APPLICATION_MRB_CONSUMER_XML));
        assert_eq!(crate::Mime::parse("APPlicAtion/mrb-cONsUmer+XMl"), Ok(APPLICATION_MRB_CONSUMER_XML));
    }

    /// `application/mrb-publish+xml`
    pub const APPLICATION_MRB_PUBLISH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MrbPublish),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_mrb_publish_xml_parse() {
        assert_eq!(crate::Mime::parse("application/mrb-publish+xml"), Ok(APPLICATION_MRB_PUBLISH_XML));
        assert_eq!(crate::Mime::parse("appLiCatiON/mrB-PubLIsH+xmL"), Ok(APPLICATION_MRB_PUBLISH_XML));
    }

    /// `application/msaccess`
    pub const APPLICATION_MSACCESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Msaccess),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_msaccess_parse() {
        assert_eq!(crate::Mime::parse("application/msaccess"), Ok(APPLICATION_MSACCESS));
        assert_eq!(crate::Mime::parse("aPPLICATIOn/MsACcesS"), Ok(APPLICATION_MSACCESS));
    }

    /// `application/msc-ivr+xml`
    pub const APPLICATION_MSC_IVR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MscIvr),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_msc_ivr_xml_parse() {
        assert_eq!(crate::Mime::parse("application/msc-ivr+xml"), Ok(APPLICATION_MSC_IVR_XML));
        assert_eq!(crate::Mime::parse("aPpLIcAtioN/msC-IVr+XmL"), Ok(APPLICATION_MSC_IVR_XML));
    }

    /// `application/msc-mixer+xml`
    pub const APPLICATION_MSC_MIXER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MscMixer),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_msc_mixer_xml_parse() {
        assert_eq!(crate::Mime::parse("application/msc-mixer+xml"), Ok(APPLICATION_MSC_MIXER_XML));
        assert_eq!(crate::Mime::parse("aPPliCatiOn/Msc-miXER+XmL"), Ok(APPLICATION_MSC_MIXER_XML));
    }

    /// `application/msword`
    pub const APPLICATION_MSWORD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Msword),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_msword_parse() {
        assert_eq!(crate::Mime::parse("application/msword"), Ok(APPLICATION_MSWORD));
        assert_eq!(crate::Mime::parse("APpLICatiOn/MSwORd"), Ok(APPLICATION_MSWORD));
    }

    /// `application/mud+json`
    pub const APPLICATION_MUD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mud),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_mud_json_parse() {
        assert_eq!(crate::Mime::parse("application/mud+json"), Ok(APPLICATION_MUD_JSON));
        assert_eq!(crate::Mime::parse("AppLICation/mud+json"), Ok(APPLICATION_MUD_JSON));
    }

    /// `application/multipart-core`
    pub const APPLICATION_MULTIPART_CORE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::MultipartCore),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_multipart_core_parse() {
        assert_eq!(crate::Mime::parse("application/multipart-core"), Ok(APPLICATION_MULTIPART_CORE));
        assert_eq!(crate::Mime::parse("AppLICATIoN/mulTipaRt-coRe"), Ok(APPLICATION_MULTIPART_CORE));
    }

    /// `application/mxf`
    pub const APPLICATION_MXF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Mxf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_mxf_parse() {
        assert_eq!(crate::Mime::parse("application/mxf"), Ok(APPLICATION_MXF));
        assert_eq!(crate::Mime::parse("ApPLICAtIoN/MxF"), Ok(APPLICATION_MXF));
    }

    /// `application/n-quads`
    pub const APPLICATION_N_QUADS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::NQuads),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_n_quads_parse() {
        assert_eq!(crate::Mime::parse("application/n-quads"), Ok(APPLICATION_N_QUADS));
        assert_eq!(crate::Mime::parse("appLicaTioN/n-QUaDS"), Ok(APPLICATION_N_QUADS));
    }

    /// `application/n-triples`
    pub const APPLICATION_N_TRIPLES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::NTriples),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_n_triples_parse() {
        assert_eq!(crate::Mime::parse("application/n-triples"), Ok(APPLICATION_N_TRIPLES));
        assert_eq!(crate::Mime::parse("ApplICATIon/n-TrIPLeS"), Ok(APPLICATION_N_TRIPLES));
    }

    /// `application/nasdata`
    pub const APPLICATION_NASDATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Nasdata),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_nasdata_parse() {
        assert_eq!(crate::Mime::parse("application/nasdata"), Ok(APPLICATION_NASDATA));
        assert_eq!(crate::Mime::parse("appLICaTiON/nAsDATA"), Ok(APPLICATION_NASDATA));
    }

    /// `application/news-checkgroups`
    pub const APPLICATION_NEWS_CHECKGROUPS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::NewsCheckgroups),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_news_checkgroups_parse() {
        assert_eq!(crate::Mime::parse("application/news-checkgroups"), Ok(APPLICATION_NEWS_CHECKGROUPS));
        assert_eq!(crate::Mime::parse("aPPlicAtIoN/neWs-CHEckgRouPs"), Ok(APPLICATION_NEWS_CHECKGROUPS));
    }

    /// `application/news-groupinfo`
    pub const APPLICATION_NEWS_GROUPINFO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::NewsGroupinfo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_news_groupinfo_parse() {
        assert_eq!(crate::Mime::parse("application/news-groupinfo"), Ok(APPLICATION_NEWS_GROUPINFO));
        assert_eq!(crate::Mime::parse("AppLICATIOn/nEws-gRoUPinfO"), Ok(APPLICATION_NEWS_GROUPINFO));
    }

    /// `application/news-transmission`
    pub const APPLICATION_NEWS_TRANSMISSION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::NewsTransmission),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_news_transmission_parse() {
        assert_eq!(crate::Mime::parse("application/news-transmission"), Ok(APPLICATION_NEWS_TRANSMISSION));
        assert_eq!(crate::Mime::parse("APPlicAtiON/NeWs-traNsMIsSiOn"), Ok(APPLICATION_NEWS_TRANSMISSION));
    }

    /// `application/nlsml+xml`
    pub const APPLICATION_NLSML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Nlsml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_nlsml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/nlsml+xml"), Ok(APPLICATION_NLSML_XML));
        assert_eq!(crate::Mime::parse("aPplicATioN/nLsml+XML"), Ok(APPLICATION_NLSML_XML));
    }

    /// `application/node`
    pub const APPLICATION_NODE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Node),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_node_parse() {
        assert_eq!(crate::Mime::parse("application/node"), Ok(APPLICATION_NODE));
        assert_eq!(crate::Mime::parse("APplIcation/node"), Ok(APPLICATION_NODE));
    }

    /// `application/nss`
    pub const APPLICATION_NSS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Nss),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_nss_parse() {
        assert_eq!(crate::Mime::parse("application/nss"), Ok(APPLICATION_NSS));
        assert_eq!(crate::Mime::parse("ApPliCaTION/NSs"), Ok(APPLICATION_NSS));
    }

    /// `application/oauth-authz-req+jwt`
    pub const APPLICATION_OAUTH_AUTHZ_REQ_JWT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::OauthAuthzReq),
        suffix: Some(crate::Name::Interned(super::Suffix::Jwt)),
        parameters: &[]
    });

    #[test]
    fn application_oauth_authz_req_jwt_parse() {
        assert_eq!(crate::Mime::parse("application/oauth-authz-req+jwt"), Ok(APPLICATION_OAUTH_AUTHZ_REQ_JWT));
        assert_eq!(crate::Mime::parse("aPPLiCatiON/oauth-AuTHZ-reQ+JWt"), Ok(APPLICATION_OAUTH_AUTHZ_REQ_JWT));
    }

    /// `application/oblivious-dns-message`
    pub const APPLICATION_OBLIVIOUS_DNS_MESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ObliviousDnsMessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_oblivious_dns_message_parse() {
        assert_eq!(crate::Mime::parse("application/oblivious-dns-message"), Ok(APPLICATION_OBLIVIOUS_DNS_MESSAGE));
        assert_eq!(crate::Mime::parse("ApPLICatiON/ObLiViOUs-DnS-MESsAGe"), Ok(APPLICATION_OBLIVIOUS_DNS_MESSAGE));
    }

    /// `application/ocsp-request`
    pub const APPLICATION_OCSP_REQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::OcspRequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ocsp_request_parse() {
        assert_eq!(crate::Mime::parse("application/ocsp-request"), Ok(APPLICATION_OCSP_REQUEST));
        assert_eq!(crate::Mime::parse("aPPLICAtiOn/OcsP-ReQueST"), Ok(APPLICATION_OCSP_REQUEST));
    }

    /// `application/ocsp-response`
    pub const APPLICATION_OCSP_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::OcspResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ocsp_response_parse() {
        assert_eq!(crate::Mime::parse("application/ocsp-response"), Ok(APPLICATION_OCSP_RESPONSE));
        assert_eq!(crate::Mime::parse("APpLiCAtioN/OCsp-rEspONSe"), Ok(APPLICATION_OCSP_RESPONSE));
    }

    /// `application/octet-stream`
    pub const APPLICATION_OCTET_STREAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::OctetStream),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_octet_stream_parse() {
        assert_eq!(crate::Mime::parse("application/octet-stream"), Ok(APPLICATION_OCTET_STREAM));
        assert_eq!(crate::Mime::parse("ApPlicAtIOn/octet-stREaM"), Ok(APPLICATION_OCTET_STREAM));
    }

    /// `application/ODA`
    pub const APPLICATION_ODA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Oda),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_oda_parse() {
        assert_eq!(crate::Mime::parse("application/ODA"), Ok(APPLICATION_ODA));
        assert_eq!(crate::Mime::parse("aPplicAtIon/oda"), Ok(APPLICATION_ODA));
    }

    /// `application/odm+xml`
    pub const APPLICATION_ODM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Odm),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_odm_xml_parse() {
        assert_eq!(crate::Mime::parse("application/odm+xml"), Ok(APPLICATION_ODM_XML));
        assert_eq!(crate::Mime::parse("ApPLiCatioN/ODM+xML"), Ok(APPLICATION_ODM_XML));
    }

    /// `application/ODX`
    pub const APPLICATION_ODX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Odx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_odx_parse() {
        assert_eq!(crate::Mime::parse("application/ODX"), Ok(APPLICATION_ODX));
        assert_eq!(crate::Mime::parse("APPLiCation/odX"), Ok(APPLICATION_ODX));
    }

    /// `application/oebps-package+xml`
    pub const APPLICATION_OEBPS_PACKAGE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::OebpsPackage),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_oebps_package_xml_parse() {
        assert_eq!(crate::Mime::parse("application/oebps-package+xml"), Ok(APPLICATION_OEBPS_PACKAGE_XML));
        assert_eq!(crate::Mime::parse("APplIcation/OEbps-PACKAgE+XML"), Ok(APPLICATION_OEBPS_PACKAGE_XML));
    }

    /// `application/ogg`
    pub const APPLICATION_OGG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ogg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ogg_parse() {
        assert_eq!(crate::Mime::parse("application/ogg"), Ok(APPLICATION_OGG));
        assert_eq!(crate::Mime::parse("APpLicAtioN/oGg"), Ok(APPLICATION_OGG));
    }

    /// `application/onenote`
    pub const APPLICATION_ONENOTE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Onenote),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_onenote_parse() {
        assert_eq!(crate::Mime::parse("application/onenote"), Ok(APPLICATION_ONENOTE));
        assert_eq!(crate::Mime::parse("ApplIcaTiON/OnenoTE"), Ok(APPLICATION_ONENOTE));
    }

    /// `application/opc-nodeset+xml`
    pub const APPLICATION_OPC_NODESET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::OpcNodeset),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_opc_nodeset_xml_parse() {
        assert_eq!(crate::Mime::parse("application/opc-nodeset+xml"), Ok(APPLICATION_OPC_NODESET_XML));
        assert_eq!(crate::Mime::parse("APplIcatION/opC-noDESet+xML"), Ok(APPLICATION_OPC_NODESET_XML));
    }

    /// `application/oscore`
    pub const APPLICATION_OSCORE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Oscore),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_oscore_parse() {
        assert_eq!(crate::Mime::parse("application/oscore"), Ok(APPLICATION_OSCORE));
        assert_eq!(crate::Mime::parse("apPLIcaTIon/oScorE"), Ok(APPLICATION_OSCORE));
    }

    /// `application/oxps`
    pub const APPLICATION_OXPS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Oxps),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_oxps_parse() {
        assert_eq!(crate::Mime::parse("application/oxps"), Ok(APPLICATION_OXPS));
        assert_eq!(crate::Mime::parse("APpLIcATion/oXpS"), Ok(APPLICATION_OXPS));
    }

    /// `application/p21`
    pub const APPLICATION_P21: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::P21),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_p21_parse() {
        assert_eq!(crate::Mime::parse("application/p21"), Ok(APPLICATION_P21));
        assert_eq!(crate::Mime::parse("appLIcatIOn/P21"), Ok(APPLICATION_P21));
    }

    /// `application/p21+zip`
    pub const APPLICATION_P21_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::P21),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_p21_zip_parse() {
        assert_eq!(crate::Mime::parse("application/p21+zip"), Ok(APPLICATION_P21_ZIP));
        assert_eq!(crate::Mime::parse("aPPLICatIOn/p21+Zip"), Ok(APPLICATION_P21_ZIP));
    }

    /// `application/p2p-overlay+xml`
    pub const APPLICATION_P2P_OVERLAY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::P2pOverlay),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_p2p_overlay_xml_parse() {
        assert_eq!(crate::Mime::parse("application/p2p-overlay+xml"), Ok(APPLICATION_P2P_OVERLAY_XML));
        assert_eq!(crate::Mime::parse("APpliCATIOn/p2P-OVerlay+XmL"), Ok(APPLICATION_P2P_OVERLAY_XML));
    }

    /// `application/parityfec`
    pub const APPLICATION_PARITYFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Parityfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_parityfec_parse() {
        assert_eq!(crate::Mime::parse("application/parityfec"), Ok(APPLICATION_PARITYFEC));
        assert_eq!(crate::Mime::parse("applicATioN/PARItYfec"), Ok(APPLICATION_PARITYFEC));
    }

    /// `application/passport`
    pub const APPLICATION_PASSPORT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Passport),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_passport_parse() {
        assert_eq!(crate::Mime::parse("application/passport"), Ok(APPLICATION_PASSPORT));
        assert_eq!(crate::Mime::parse("APPliCATIon/paSsPOrt"), Ok(APPLICATION_PASSPORT));
    }

    /// `application/patch-ops-error+xml`
    pub const APPLICATION_PATCH_OPS_ERROR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PatchOpsError),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_patch_ops_error_xml_parse() {
        assert_eq!(crate::Mime::parse("application/patch-ops-error+xml"), Ok(APPLICATION_PATCH_OPS_ERROR_XML));
        assert_eq!(crate::Mime::parse("APpLICAtIoN/PatCh-OpS-ErROR+xml"), Ok(APPLICATION_PATCH_OPS_ERROR_XML));
    }

    /// `application/pdf`
    pub const APPLICATION_PDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pdf_parse() {
        assert_eq!(crate::Mime::parse("application/pdf"), Ok(APPLICATION_PDF));
        assert_eq!(crate::Mime::parse("aPPLIcatioN/pDF"), Ok(APPLICATION_PDF));
    }

    /// `application/PDX`
    pub const APPLICATION_PDX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pdx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pdx_parse() {
        assert_eq!(crate::Mime::parse("application/PDX"), Ok(APPLICATION_PDX));
        assert_eq!(crate::Mime::parse("ApPLIcATIoN/pdX"), Ok(APPLICATION_PDX));
    }

    /// `application/pem-certificate-chain`
    pub const APPLICATION_PEM_CERTIFICATE_CHAIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PemCertificateChain),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pem_certificate_chain_parse() {
        assert_eq!(crate::Mime::parse("application/pem-certificate-chain"), Ok(APPLICATION_PEM_CERTIFICATE_CHAIN));
        assert_eq!(crate::Mime::parse("AppLIcAtIoN/PEM-cERtIfiCAtE-ChAIn"), Ok(APPLICATION_PEM_CERTIFICATE_CHAIN));
    }

    /// `application/pgp-encrypted`
    pub const APPLICATION_PGP_ENCRYPTED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PgpEncrypted),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pgp_encrypted_parse() {
        assert_eq!(crate::Mime::parse("application/pgp-encrypted"), Ok(APPLICATION_PGP_ENCRYPTED));
        assert_eq!(crate::Mime::parse("APplicaTiON/pGp-encryptEd"), Ok(APPLICATION_PGP_ENCRYPTED));
    }

    /// `application/pgp-keys`
    pub const APPLICATION_PGP_KEYS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PgpKeys),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pgp_keys_parse() {
        assert_eq!(crate::Mime::parse("application/pgp-keys"), Ok(APPLICATION_PGP_KEYS));
        assert_eq!(crate::Mime::parse("APPLIcaTiON/PGp-keYS"), Ok(APPLICATION_PGP_KEYS));
    }

    /// `application/pgp-signature`
    pub const APPLICATION_PGP_SIGNATURE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PgpSignature),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pgp_signature_parse() {
        assert_eq!(crate::Mime::parse("application/pgp-signature"), Ok(APPLICATION_PGP_SIGNATURE));
        assert_eq!(crate::Mime::parse("applIcATiOn/Pgp-SigNature"), Ok(APPLICATION_PGP_SIGNATURE));
    }

    /// `application/pics-rules`
    pub const APPLICATION_PICS_RULES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PicsRules),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pics_rules_parse() {
        assert_eq!(crate::Mime::parse("application/pics-rules"), Ok(APPLICATION_PICS_RULES));
        assert_eq!(crate::Mime::parse("aPPlIcAtIoN/PIcs-rulEs"), Ok(APPLICATION_PICS_RULES));
    }

    /// `application/pidf+xml`
    pub const APPLICATION_PIDF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pidf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_pidf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/pidf+xml"), Ok(APPLICATION_PIDF_XML));
        assert_eq!(crate::Mime::parse("APPlICatION/PIdf+xML"), Ok(APPLICATION_PIDF_XML));
    }

    /// `application/pidf-diff+xml`
    pub const APPLICATION_PIDF_DIFF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PidfDiff),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_pidf_diff_xml_parse() {
        assert_eq!(crate::Mime::parse("application/pidf-diff+xml"), Ok(APPLICATION_PIDF_DIFF_XML));
        assert_eq!(crate::Mime::parse("AppLiCAtION/pidF-dIff+xml"), Ok(APPLICATION_PIDF_DIFF_XML));
    }

    /// `application/pkcs10`
    pub const APPLICATION_PKCS10: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkcs10),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkcs10_parse() {
        assert_eq!(crate::Mime::parse("application/pkcs10"), Ok(APPLICATION_PKCS10));
        assert_eq!(crate::Mime::parse("APplICAtIon/pkcs10"), Ok(APPLICATION_PKCS10));
    }

    /// `application/pkcs12`
    pub const APPLICATION_PKCS12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkcs12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkcs12_parse() {
        assert_eq!(crate::Mime::parse("application/pkcs12"), Ok(APPLICATION_PKCS12));
        assert_eq!(crate::Mime::parse("APplicAtIOn/Pkcs12"), Ok(APPLICATION_PKCS12));
    }

    /// `application/pkcs7-mime`
    pub const APPLICATION_PKCS7_MIME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkcs7Mime),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkcs7_mime_parse() {
        assert_eq!(crate::Mime::parse("application/pkcs7-mime"), Ok(APPLICATION_PKCS7_MIME));
        assert_eq!(crate::Mime::parse("APplicaTiON/pKcS7-mImE"), Ok(APPLICATION_PKCS7_MIME));
    }

    /// `application/pkcs7-signature`
    pub const APPLICATION_PKCS7_SIGNATURE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkcs7Signature),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkcs7_signature_parse() {
        assert_eq!(crate::Mime::parse("application/pkcs7-signature"), Ok(APPLICATION_PKCS7_SIGNATURE));
        assert_eq!(crate::Mime::parse("ApPliCAtIoN/PKcS7-SIGnatUrE"), Ok(APPLICATION_PKCS7_SIGNATURE));
    }

    /// `application/pkcs8`
    pub const APPLICATION_PKCS8: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkcs8),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkcs8_parse() {
        assert_eq!(crate::Mime::parse("application/pkcs8"), Ok(APPLICATION_PKCS8));
        assert_eq!(crate::Mime::parse("appLICAtioN/PKcs8"), Ok(APPLICATION_PKCS8));
    }

    /// `application/pkcs8-encrypted`
    pub const APPLICATION_PKCS8_ENCRYPTED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkcs8Encrypted),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkcs8_encrypted_parse() {
        assert_eq!(crate::Mime::parse("application/pkcs8-encrypted"), Ok(APPLICATION_PKCS8_ENCRYPTED));
        assert_eq!(crate::Mime::parse("aPplicaTIoN/PkcS8-eNcRypted"), Ok(APPLICATION_PKCS8_ENCRYPTED));
    }

    /// `application/pkix-attr-cert`
    pub const APPLICATION_PKIX_ATTR_CERT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PkixAttrCert),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkix_attr_cert_parse() {
        assert_eq!(crate::Mime::parse("application/pkix-attr-cert"), Ok(APPLICATION_PKIX_ATTR_CERT));
        assert_eq!(crate::Mime::parse("appLicatIoN/Pkix-AttR-CErt"), Ok(APPLICATION_PKIX_ATTR_CERT));
    }

    /// `application/pkix-cert`
    pub const APPLICATION_PKIX_CERT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PkixCert),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkix_cert_parse() {
        assert_eq!(crate::Mime::parse("application/pkix-cert"), Ok(APPLICATION_PKIX_CERT));
        assert_eq!(crate::Mime::parse("aPpLicAtioN/PkiX-cErT"), Ok(APPLICATION_PKIX_CERT));
    }

    /// `application/pkix-crl`
    pub const APPLICATION_PKIX_CRL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PkixCrl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkix_crl_parse() {
        assert_eq!(crate::Mime::parse("application/pkix-crl"), Ok(APPLICATION_PKIX_CRL));
        assert_eq!(crate::Mime::parse("aPPLIcaTIon/pkiX-CRL"), Ok(APPLICATION_PKIX_CRL));
    }

    /// `application/pkix-pkipath`
    pub const APPLICATION_PKIX_PKIPATH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PkixPkipath),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkix_pkipath_parse() {
        assert_eq!(crate::Mime::parse("application/pkix-pkipath"), Ok(APPLICATION_PKIX_PKIPATH));
        assert_eq!(crate::Mime::parse("APplicaTION/pkIX-PKiPath"), Ok(APPLICATION_PKIX_PKIPATH));
    }

    /// `application/pkixcmp`
    pub const APPLICATION_PKIXCMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pkixcmp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_pkixcmp_parse() {
        assert_eq!(crate::Mime::parse("application/pkixcmp"), Ok(APPLICATION_PKIXCMP));
        assert_eq!(crate::Mime::parse("aPpliCaTION/PKiXCmp"), Ok(APPLICATION_PKIXCMP));
    }

    /// `application/pls+xml`
    pub const APPLICATION_PLS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pls),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_pls_xml_parse() {
        assert_eq!(crate::Mime::parse("application/pls+xml"), Ok(APPLICATION_PLS_XML));
        assert_eq!(crate::Mime::parse("appLIcaTioN/PLs+XmL"), Ok(APPLICATION_PLS_XML));
    }

    /// `application/poc-settings+xml`
    pub const APPLICATION_POC_SETTINGS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PocSettings),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_poc_settings_xml_parse() {
        assert_eq!(crate::Mime::parse("application/poc-settings+xml"), Ok(APPLICATION_POC_SETTINGS_XML));
        assert_eq!(crate::Mime::parse("aPPLIcATION/Poc-sETTInGs+xmL"), Ok(APPLICATION_POC_SETTINGS_XML));
    }

    /// `application/postscript`
    pub const APPLICATION_POSTSCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Postscript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_postscript_parse() {
        assert_eq!(crate::Mime::parse("application/postscript"), Ok(APPLICATION_POSTSCRIPT));
        assert_eq!(crate::Mime::parse("appliCatIOn/poSTScripT"), Ok(APPLICATION_POSTSCRIPT));
    }

    /// `application/ppsp-tracker+json`
    pub const APPLICATION_PPSP_TRACKER_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PpspTracker),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_ppsp_tracker_json_parse() {
        assert_eq!(crate::Mime::parse("application/ppsp-tracker+json"), Ok(APPLICATION_PPSP_TRACKER_JSON));
        assert_eq!(crate::Mime::parse("APPLiCaTioN/pPsp-traCker+JSon"), Ok(APPLICATION_PPSP_TRACKER_JSON));
    }

    /// `application/problem+json`
    pub const APPLICATION_PROBLEM_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Problem),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_problem_json_parse() {
        assert_eq!(crate::Mime::parse("application/problem+json"), Ok(APPLICATION_PROBLEM_JSON));
        assert_eq!(crate::Mime::parse("APPLIcatIon/prOblem+JsoN"), Ok(APPLICATION_PROBLEM_JSON));
    }

    /// `application/problem+xml`
    pub const APPLICATION_PROBLEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Problem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_problem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/problem+xml"), Ok(APPLICATION_PROBLEM_XML));
        assert_eq!(crate::Mime::parse("APpliCAtIOn/PRoBLEM+xml"), Ok(APPLICATION_PROBLEM_XML));
    }

    /// `application/provenance+xml`
    pub const APPLICATION_PROVENANCE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Provenance),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_provenance_xml_parse() {
        assert_eq!(crate::Mime::parse("application/provenance+xml"), Ok(APPLICATION_PROVENANCE_XML));
        assert_eq!(crate::Mime::parse("apPLIcAtION/PrOvENaNCE+XmL"), Ok(APPLICATION_PROVENANCE_XML));
    }

    /// `application/prs.alvestrand.titrax-sheet`
    pub const APPLICATION_PRS_ALVESTRAND_TITRAX_SHEET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsAlvestrandTitraxSheet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_prs_alvestrand_titrax_sheet_parse() {
        assert_eq!(crate::Mime::parse("application/prs.alvestrand.titrax-sheet"), Ok(APPLICATION_PRS_ALVESTRAND_TITRAX_SHEET));
        assert_eq!(crate::Mime::parse("APPlICatIon/prs.ALVEstRANd.TItRAx-shEEt"), Ok(APPLICATION_PRS_ALVESTRAND_TITRAX_SHEET));
    }

    /// `application/prs.cww`
    pub const APPLICATION_PRS_CWW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsCww),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_prs_cww_parse() {
        assert_eq!(crate::Mime::parse("application/prs.cww"), Ok(APPLICATION_PRS_CWW));
        assert_eq!(crate::Mime::parse("ApPlIcAtIon/PRS.CwW"), Ok(APPLICATION_PRS_CWW));
    }

    /// `application/prs.cyn`
    pub const APPLICATION_PRS_CYN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsCyn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_prs_cyn_parse() {
        assert_eq!(crate::Mime::parse("application/prs.cyn"), Ok(APPLICATION_PRS_CYN));
        assert_eq!(crate::Mime::parse("APplicatIOn/pRS.cyn"), Ok(APPLICATION_PRS_CYN));
    }

    /// `application/prs.hpub+zip`
    pub const APPLICATION_PRS_HPUB_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsHpub),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_prs_hpub_zip_parse() {
        assert_eq!(crate::Mime::parse("application/prs.hpub+zip"), Ok(APPLICATION_PRS_HPUB_ZIP));
        assert_eq!(crate::Mime::parse("apPlicatioN/Prs.hpUB+Zip"), Ok(APPLICATION_PRS_HPUB_ZIP));
    }

    /// `application/prs.nprend`
    pub const APPLICATION_PRS_NPREND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsNprend),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_prs_nprend_parse() {
        assert_eq!(crate::Mime::parse("application/prs.nprend"), Ok(APPLICATION_PRS_NPREND));
        assert_eq!(crate::Mime::parse("appLICAtION/prS.NpreNd"), Ok(APPLICATION_PRS_NPREND));
    }

    /// `application/prs.plucker`
    pub const APPLICATION_PRS_PLUCKER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsPlucker),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_prs_plucker_parse() {
        assert_eq!(crate::Mime::parse("application/prs.plucker"), Ok(APPLICATION_PRS_PLUCKER));
        assert_eq!(crate::Mime::parse("apPLIcAtioN/Prs.PLucker"), Ok(APPLICATION_PRS_PLUCKER));
    }

    /// `application/prs.rdf-xml-crypt`
    pub const APPLICATION_PRS_RDF_XML_CRYPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsRdfXmlCrypt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_prs_rdf_xml_crypt_parse() {
        assert_eq!(crate::Mime::parse("application/prs.rdf-xml-crypt"), Ok(APPLICATION_PRS_RDF_XML_CRYPT));
        assert_eq!(crate::Mime::parse("aPpLicaTiON/PRS.rdF-xMl-cRYPt"), Ok(APPLICATION_PRS_RDF_XML_CRYPT));
    }

    /// `application/prs.xsf+xml`
    pub const APPLICATION_PRS_XSF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::PrsXsf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_prs_xsf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/prs.xsf+xml"), Ok(APPLICATION_PRS_XSF_XML));
        assert_eq!(crate::Mime::parse("ApPLICAtIoN/PRs.xSF+XML"), Ok(APPLICATION_PRS_XSF_XML));
    }

    /// `application/pskc+xml`
    pub const APPLICATION_PSKC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pskc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_pskc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/pskc+xml"), Ok(APPLICATION_PSKC_XML));
        assert_eq!(crate::Mime::parse("appLICaTIon/pSKC+XmL"), Ok(APPLICATION_PSKC_XML));
    }

    /// `application/pvd+json`
    pub const APPLICATION_PVD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Pvd),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_pvd_json_parse() {
        assert_eq!(crate::Mime::parse("application/pvd+json"), Ok(APPLICATION_PVD_JSON));
        assert_eq!(crate::Mime::parse("aPpliCATIon/pvD+JSON"), Ok(APPLICATION_PVD_JSON));
    }

    /// `application/QSIG`
    pub const APPLICATION_QSIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Qsig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_qsig_parse() {
        assert_eq!(crate::Mime::parse("application/QSIG"), Ok(APPLICATION_QSIG));
        assert_eq!(crate::Mime::parse("ApplIcATioN/QsIG"), Ok(APPLICATION_QSIG));
    }

    /// `application/raptorfec`
    pub const APPLICATION_RAPTORFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Raptorfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_raptorfec_parse() {
        assert_eq!(crate::Mime::parse("application/raptorfec"), Ok(APPLICATION_RAPTORFEC));
        assert_eq!(crate::Mime::parse("apPLicaTION/RAPtOrFec"), Ok(APPLICATION_RAPTORFEC));
    }

    /// `application/rdap+json`
    pub const APPLICATION_RDAP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rdap),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_rdap_json_parse() {
        assert_eq!(crate::Mime::parse("application/rdap+json"), Ok(APPLICATION_RDAP_JSON));
        assert_eq!(crate::Mime::parse("APPlIcAtion/rDAp+JSon"), Ok(APPLICATION_RDAP_JSON));
    }

    /// `application/rdf+xml`
    pub const APPLICATION_RDF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rdf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_rdf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/rdf+xml"), Ok(APPLICATION_RDF_XML));
        assert_eq!(crate::Mime::parse("applicAtiON/RDf+xMl"), Ok(APPLICATION_RDF_XML));
    }

    /// `application/reginfo+xml`
    pub const APPLICATION_REGINFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Reginfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_reginfo_xml_parse() {
        assert_eq!(crate::Mime::parse("application/reginfo+xml"), Ok(APPLICATION_REGINFO_XML));
        assert_eq!(crate::Mime::parse("ApPLIcaTIOn/REgiNFO+XMl"), Ok(APPLICATION_REGINFO_XML));
    }

    /// `application/relax-ng-compact-syntax`
    pub const APPLICATION_RELAX_NG_COMPACT_SYNTAX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RelaxNgCompactSyntax),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_relax_ng_compact_syntax_parse() {
        assert_eq!(crate::Mime::parse("application/relax-ng-compact-syntax"), Ok(APPLICATION_RELAX_NG_COMPACT_SYNTAX));
        assert_eq!(crate::Mime::parse("aPpLICATioN/RELAX-ng-cOmPaCt-SYntAX"), Ok(APPLICATION_RELAX_NG_COMPACT_SYNTAX));
    }

    /// `application/remote-printing`
    pub const APPLICATION_REMOTE_PRINTING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RemotePrinting),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_remote_printing_parse() {
        assert_eq!(crate::Mime::parse("application/remote-printing"), Ok(APPLICATION_REMOTE_PRINTING));
        assert_eq!(crate::Mime::parse("AppLiCAtION/REmOte-PrinTinG"), Ok(APPLICATION_REMOTE_PRINTING));
    }

    /// `application/reputon+json`
    pub const APPLICATION_REPUTON_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Reputon),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_reputon_json_parse() {
        assert_eq!(crate::Mime::parse("application/reputon+json"), Ok(APPLICATION_REPUTON_JSON));
        assert_eq!(crate::Mime::parse("apPLIcaTIOn/rEputOn+JSoN"), Ok(APPLICATION_REPUTON_JSON));
    }

    /// `application/resource-lists+xml`
    pub const APPLICATION_RESOURCE_LISTS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ResourceLists),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_resource_lists_xml_parse() {
        assert_eq!(crate::Mime::parse("application/resource-lists+xml"), Ok(APPLICATION_RESOURCE_LISTS_XML));
        assert_eq!(crate::Mime::parse("APPLICaTIoN/resoURce-liSts+xMl"), Ok(APPLICATION_RESOURCE_LISTS_XML));
    }

    /// `application/resource-lists-diff+xml`
    pub const APPLICATION_RESOURCE_LISTS_DIFF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ResourceListsDiff),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_resource_lists_diff_xml_parse() {
        assert_eq!(crate::Mime::parse("application/resource-lists-diff+xml"), Ok(APPLICATION_RESOURCE_LISTS_DIFF_XML));
        assert_eq!(crate::Mime::parse("applIcatION/REsOurCe-LISts-Diff+XML"), Ok(APPLICATION_RESOURCE_LISTS_DIFF_XML));
    }

    /// `application/rfc+xml`
    pub const APPLICATION_RFC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rfc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_rfc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/rfc+xml"), Ok(APPLICATION_RFC_XML));
        assert_eq!(crate::Mime::parse("ApPLIcAtIoN/RFC+XMl"), Ok(APPLICATION_RFC_XML));
    }

    /// `application/riscos`
    pub const APPLICATION_RISCOS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Riscos),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_riscos_parse() {
        assert_eq!(crate::Mime::parse("application/riscos"), Ok(APPLICATION_RISCOS));
        assert_eq!(crate::Mime::parse("APPLicATIOn/rIsCOs"), Ok(APPLICATION_RISCOS));
    }

    /// `application/rlmi+xml`
    pub const APPLICATION_RLMI_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rlmi),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_rlmi_xml_parse() {
        assert_eq!(crate::Mime::parse("application/rlmi+xml"), Ok(APPLICATION_RLMI_XML));
        assert_eq!(crate::Mime::parse("appliCATiOn/rlMi+xml"), Ok(APPLICATION_RLMI_XML));
    }

    /// `application/rls-services+xml`
    pub const APPLICATION_RLS_SERVICES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RlsServices),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_rls_services_xml_parse() {
        assert_eq!(crate::Mime::parse("application/rls-services+xml"), Ok(APPLICATION_RLS_SERVICES_XML));
        assert_eq!(crate::Mime::parse("applicATION/RLs-SErViCes+XML"), Ok(APPLICATION_RLS_SERVICES_XML));
    }

    /// `application/route-apd+xml`
    pub const APPLICATION_ROUTE_APD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RouteApd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_route_apd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/route-apd+xml"), Ok(APPLICATION_ROUTE_APD_XML));
        assert_eq!(crate::Mime::parse("AppLIcatioN/roUtE-apD+XMl"), Ok(APPLICATION_ROUTE_APD_XML));
    }

    /// `application/route-s-tsid+xml`
    pub const APPLICATION_ROUTE_S_TSID_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RouteSTsid),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_route_s_tsid_xml_parse() {
        assert_eq!(crate::Mime::parse("application/route-s-tsid+xml"), Ok(APPLICATION_ROUTE_S_TSID_XML));
        assert_eq!(crate::Mime::parse("APPLICATion/rOutE-s-tsId+xml"), Ok(APPLICATION_ROUTE_S_TSID_XML));
    }

    /// `application/route-usd+xml`
    pub const APPLICATION_ROUTE_USD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RouteUsd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_route_usd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/route-usd+xml"), Ok(APPLICATION_ROUTE_USD_XML));
        assert_eq!(crate::Mime::parse("appLicATIOn/rOuTE-USD+XMl"), Ok(APPLICATION_ROUTE_USD_XML));
    }

    /// `application/rpki-ghostbusters`
    pub const APPLICATION_RPKI_GHOSTBUSTERS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RpkiGhostbusters),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rpki_ghostbusters_parse() {
        assert_eq!(crate::Mime::parse("application/rpki-ghostbusters"), Ok(APPLICATION_RPKI_GHOSTBUSTERS));
        assert_eq!(crate::Mime::parse("aPpLicatioN/RpkI-ghOSTBuSTErs"), Ok(APPLICATION_RPKI_GHOSTBUSTERS));
    }

    /// `application/rpki-manifest`
    pub const APPLICATION_RPKI_MANIFEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RpkiManifest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rpki_manifest_parse() {
        assert_eq!(crate::Mime::parse("application/rpki-manifest"), Ok(APPLICATION_RPKI_MANIFEST));
        assert_eq!(crate::Mime::parse("AppLIcaTION/RpKI-Manifest"), Ok(APPLICATION_RPKI_MANIFEST));
    }

    /// `application/rpki-publication`
    pub const APPLICATION_RPKI_PUBLICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RpkiPublication),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rpki_publication_parse() {
        assert_eq!(crate::Mime::parse("application/rpki-publication"), Ok(APPLICATION_RPKI_PUBLICATION));
        assert_eq!(crate::Mime::parse("ApPlIcatIon/rpki-puBlicaTIOn"), Ok(APPLICATION_RPKI_PUBLICATION));
    }

    /// `application/rpki-roa`
    pub const APPLICATION_RPKI_ROA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RpkiRoa),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rpki_roa_parse() {
        assert_eq!(crate::Mime::parse("application/rpki-roa"), Ok(APPLICATION_RPKI_ROA));
        assert_eq!(crate::Mime::parse("aPPlicAtIoN/Rpki-rOa"), Ok(APPLICATION_RPKI_ROA));
    }

    /// `application/rpki-updown`
    pub const APPLICATION_RPKI_UPDOWN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::RpkiUpdown),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rpki_updown_parse() {
        assert_eq!(crate::Mime::parse("application/rpki-updown"), Ok(APPLICATION_RPKI_UPDOWN));
        assert_eq!(crate::Mime::parse("ApplicAtioN/rPkI-upDOwN"), Ok(APPLICATION_RPKI_UPDOWN));
    }

    /// `application/rtf`
    pub const APPLICATION_RTF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rtf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rtf_parse() {
        assert_eq!(crate::Mime::parse("application/rtf"), Ok(APPLICATION_RTF));
        assert_eq!(crate::Mime::parse("appLiCAtiOn/RTf"), Ok(APPLICATION_RTF));
    }

    /// `application/rtploopback`
    pub const APPLICATION_RTPLOOPBACK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rtploopback),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rtploopback_parse() {
        assert_eq!(crate::Mime::parse("application/rtploopback"), Ok(APPLICATION_RTPLOOPBACK));
        assert_eq!(crate::Mime::parse("aPPLicATION/RTpLOopbACk"), Ok(APPLICATION_RTPLOOPBACK));
    }

    /// `application/rtx`
    pub const APPLICATION_RTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Rtx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_rtx_parse() {
        assert_eq!(crate::Mime::parse("application/rtx"), Ok(APPLICATION_RTX));
        assert_eq!(crate::Mime::parse("apPlICAtiON/rtx"), Ok(APPLICATION_RTX));
    }

    /// `application/samlassertion+xml`
    pub const APPLICATION_SAMLASSERTION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Samlassertion),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_samlassertion_xml_parse() {
        assert_eq!(crate::Mime::parse("application/samlassertion+xml"), Ok(APPLICATION_SAMLASSERTION_XML));
        assert_eq!(crate::Mime::parse("appliCatION/sAMLaSseRtIoN+xml"), Ok(APPLICATION_SAMLASSERTION_XML));
    }

    /// `application/samlmetadata+xml`
    pub const APPLICATION_SAMLMETADATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Samlmetadata),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_samlmetadata_xml_parse() {
        assert_eq!(crate::Mime::parse("application/samlmetadata+xml"), Ok(APPLICATION_SAMLMETADATA_XML));
        assert_eq!(crate::Mime::parse("ApPLicaTION/SaMlmETaDaTA+XMl"), Ok(APPLICATION_SAMLMETADATA_XML));
    }

    /// `application/sarif+json`
    pub const APPLICATION_SARIF_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sarif),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_sarif_json_parse() {
        assert_eq!(crate::Mime::parse("application/sarif+json"), Ok(APPLICATION_SARIF_JSON));
        assert_eq!(crate::Mime::parse("ApPliCAtION/saRIf+JsoN"), Ok(APPLICATION_SARIF_JSON));
    }

    /// `application/sarif-external-properties+json`
    pub const APPLICATION_SARIF_EXTERNAL_PROPERTIES_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SarifExternalProperties),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_sarif_external_properties_json_parse() {
        assert_eq!(crate::Mime::parse("application/sarif-external-properties+json"), Ok(APPLICATION_SARIF_EXTERNAL_PROPERTIES_JSON));
        assert_eq!(crate::Mime::parse("aPPliCaTIOn/SaRiF-EXteRnal-prOpERTies+jsON"), Ok(APPLICATION_SARIF_EXTERNAL_PROPERTIES_JSON));
    }

    /// `application/sbe`
    pub const APPLICATION_SBE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sbe),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sbe_parse() {
        assert_eq!(crate::Mime::parse("application/sbe"), Ok(APPLICATION_SBE));
        assert_eq!(crate::Mime::parse("ApPlicaTioN/Sbe"), Ok(APPLICATION_SBE));
    }

    /// `application/sbml+xml`
    pub const APPLICATION_SBML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sbml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_sbml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/sbml+xml"), Ok(APPLICATION_SBML_XML));
        assert_eq!(crate::Mime::parse("ApPlicAtION/sbmL+xmL"), Ok(APPLICATION_SBML_XML));
    }

    /// `application/scaip+xml`
    pub const APPLICATION_SCAIP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Scaip),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_scaip_xml_parse() {
        assert_eq!(crate::Mime::parse("application/scaip+xml"), Ok(APPLICATION_SCAIP_XML));
        assert_eq!(crate::Mime::parse("APPlICaTiON/SCaip+xmL"), Ok(APPLICATION_SCAIP_XML));
    }

    /// `application/scim+json`
    pub const APPLICATION_SCIM_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Scim),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_scim_json_parse() {
        assert_eq!(crate::Mime::parse("application/scim+json"), Ok(APPLICATION_SCIM_JSON));
        assert_eq!(crate::Mime::parse("APpliCAtIoN/sCiM+jsOn"), Ok(APPLICATION_SCIM_JSON));
    }

    /// `application/scvp-cv-request`
    pub const APPLICATION_SCVP_CV_REQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ScvpCvRequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_scvp_cv_request_parse() {
        assert_eq!(crate::Mime::parse("application/scvp-cv-request"), Ok(APPLICATION_SCVP_CV_REQUEST));
        assert_eq!(crate::Mime::parse("AppliCaTIon/SCvP-cV-rEQuEst"), Ok(APPLICATION_SCVP_CV_REQUEST));
    }

    /// `application/scvp-cv-response`
    pub const APPLICATION_SCVP_CV_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ScvpCvResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_scvp_cv_response_parse() {
        assert_eq!(crate::Mime::parse("application/scvp-cv-response"), Ok(APPLICATION_SCVP_CV_RESPONSE));
        assert_eq!(crate::Mime::parse("ApplICation/Scvp-cV-ReSpoNsE"), Ok(APPLICATION_SCVP_CV_RESPONSE));
    }

    /// `application/scvp-vp-request`
    pub const APPLICATION_SCVP_VP_REQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ScvpVpRequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_scvp_vp_request_parse() {
        assert_eq!(crate::Mime::parse("application/scvp-vp-request"), Ok(APPLICATION_SCVP_VP_REQUEST));
        assert_eq!(crate::Mime::parse("APPlICAtiON/SCVP-vp-ReqUest"), Ok(APPLICATION_SCVP_VP_REQUEST));
    }

    /// `application/scvp-vp-response`
    pub const APPLICATION_SCVP_VP_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::ScvpVpResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_scvp_vp_response_parse() {
        assert_eq!(crate::Mime::parse("application/scvp-vp-response"), Ok(APPLICATION_SCVP_VP_RESPONSE));
        assert_eq!(crate::Mime::parse("aPpLicAtIon/scvp-vP-resPONSe"), Ok(APPLICATION_SCVP_VP_RESPONSE));
    }

    /// `application/sdp`
    pub const APPLICATION_SDP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sdp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sdp_parse() {
        assert_eq!(crate::Mime::parse("application/sdp"), Ok(APPLICATION_SDP));
        assert_eq!(crate::Mime::parse("APPLicATIoN/SDp"), Ok(APPLICATION_SDP));
    }

    /// `application/secevent+jwt`
    pub const APPLICATION_SECEVENT_JWT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Secevent),
        suffix: Some(crate::Name::Interned(super::Suffix::Jwt)),
        parameters: &[]
    });

    #[test]
    fn application_secevent_jwt_parse() {
        assert_eq!(crate::Mime::parse("application/secevent+jwt"), Ok(APPLICATION_SECEVENT_JWT));
        assert_eq!(crate::Mime::parse("ApplicaTioN/SECEVENT+JWT"), Ok(APPLICATION_SECEVENT_JWT));
    }

    /// `application/senml+cbor`
    pub const APPLICATION_SENML_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Senml),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_senml_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/senml+cbor"), Ok(APPLICATION_SENML_CBOR));
        assert_eq!(crate::Mime::parse("apPliCATion/SENml+CboR"), Ok(APPLICATION_SENML_CBOR));
    }

    /// `application/senml+json`
    pub const APPLICATION_SENML_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Senml),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_senml_json_parse() {
        assert_eq!(crate::Mime::parse("application/senml+json"), Ok(APPLICATION_SENML_JSON));
        assert_eq!(crate::Mime::parse("applICATION/SEnML+jsoN"), Ok(APPLICATION_SENML_JSON));
    }

    /// `application/senml+xml`
    pub const APPLICATION_SENML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Senml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_senml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/senml+xml"), Ok(APPLICATION_SENML_XML));
        assert_eq!(crate::Mime::parse("APplICaTion/SENMl+xMl"), Ok(APPLICATION_SENML_XML));
    }

    /// `application/senml-etch+cbor`
    pub const APPLICATION_SENML_ETCH_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SenmlEtch),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_senml_etch_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/senml-etch+cbor"), Ok(APPLICATION_SENML_ETCH_CBOR));
        assert_eq!(crate::Mime::parse("ApPliCatIoN/SenML-etch+CboR"), Ok(APPLICATION_SENML_ETCH_CBOR));
    }

    /// `application/senml-etch+json`
    pub const APPLICATION_SENML_ETCH_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SenmlEtch),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_senml_etch_json_parse() {
        assert_eq!(crate::Mime::parse("application/senml-etch+json"), Ok(APPLICATION_SENML_ETCH_JSON));
        assert_eq!(crate::Mime::parse("apPLICAtIoN/sENmL-etch+JSoN"), Ok(APPLICATION_SENML_ETCH_JSON));
    }

    /// `application/senml-exi`
    pub const APPLICATION_SENML_EXI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SenmlExi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_senml_exi_parse() {
        assert_eq!(crate::Mime::parse("application/senml-exi"), Ok(APPLICATION_SENML_EXI));
        assert_eq!(crate::Mime::parse("apPLication/seNMl-EXi"), Ok(APPLICATION_SENML_EXI));
    }

    /// `application/sensml+cbor`
    pub const APPLICATION_SENSML_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sensml),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_sensml_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/sensml+cbor"), Ok(APPLICATION_SENSML_CBOR));
        assert_eq!(crate::Mime::parse("ApPlicATiON/SeNSmL+CBor"), Ok(APPLICATION_SENSML_CBOR));
    }

    /// `application/sensml+json`
    pub const APPLICATION_SENSML_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sensml),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_sensml_json_parse() {
        assert_eq!(crate::Mime::parse("application/sensml+json"), Ok(APPLICATION_SENSML_JSON));
        assert_eq!(crate::Mime::parse("ApPLICATIoN/SENSml+jSoN"), Ok(APPLICATION_SENSML_JSON));
    }

    /// `application/sensml+xml`
    pub const APPLICATION_SENSML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sensml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_sensml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/sensml+xml"), Ok(APPLICATION_SENSML_XML));
        assert_eq!(crate::Mime::parse("appLIcATIOn/senSml+xmL"), Ok(APPLICATION_SENSML_XML));
    }

    /// `application/sensml-exi`
    pub const APPLICATION_SENSML_EXI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SensmlExi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sensml_exi_parse() {
        assert_eq!(crate::Mime::parse("application/sensml-exi"), Ok(APPLICATION_SENSML_EXI));
        assert_eq!(crate::Mime::parse("appLIcATiOn/seNsMl-eXi"), Ok(APPLICATION_SENSML_EXI));
    }

    /// `application/sep+xml`
    pub const APPLICATION_SEP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sep),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_sep_xml_parse() {
        assert_eq!(crate::Mime::parse("application/sep+xml"), Ok(APPLICATION_SEP_XML));
        assert_eq!(crate::Mime::parse("ApPlicaTiON/SEP+XML"), Ok(APPLICATION_SEP_XML));
    }

    /// `application/sep-exi`
    pub const APPLICATION_SEP_EXI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SepExi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sep_exi_parse() {
        assert_eq!(crate::Mime::parse("application/sep-exi"), Ok(APPLICATION_SEP_EXI));
        assert_eq!(crate::Mime::parse("appLiCAtIOn/seP-EXi"), Ok(APPLICATION_SEP_EXI));
    }

    /// `application/session-info`
    pub const APPLICATION_SESSION_INFO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SessionInfo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_session_info_parse() {
        assert_eq!(crate::Mime::parse("application/session-info"), Ok(APPLICATION_SESSION_INFO));
        assert_eq!(crate::Mime::parse("aPPLicaTion/SEssIOn-INFO"), Ok(APPLICATION_SESSION_INFO));
    }

    /// `application/set-payment`
    pub const APPLICATION_SET_PAYMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SetPayment),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_set_payment_parse() {
        assert_eq!(crate::Mime::parse("application/set-payment"), Ok(APPLICATION_SET_PAYMENT));
        assert_eq!(crate::Mime::parse("appLICatION/set-pAYMeNT"), Ok(APPLICATION_SET_PAYMENT));
    }

    /// `application/set-payment-initiation`
    pub const APPLICATION_SET_PAYMENT_INITIATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SetPaymentInitiation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_set_payment_initiation_parse() {
        assert_eq!(crate::Mime::parse("application/set-payment-initiation"), Ok(APPLICATION_SET_PAYMENT_INITIATION));
        assert_eq!(crate::Mime::parse("ApPliCAtion/Set-paYmEnt-IniTIaTiOn"), Ok(APPLICATION_SET_PAYMENT_INITIATION));
    }

    /// `application/set-registration`
    pub const APPLICATION_SET_REGISTRATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SetRegistration),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_set_registration_parse() {
        assert_eq!(crate::Mime::parse("application/set-registration"), Ok(APPLICATION_SET_REGISTRATION));
        assert_eq!(crate::Mime::parse("ApplicatION/sET-regIStrATioN"), Ok(APPLICATION_SET_REGISTRATION));
    }

    /// `application/set-registration-initiation`
    pub const APPLICATION_SET_REGISTRATION_INITIATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SetRegistrationInitiation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_set_registration_initiation_parse() {
        assert_eq!(crate::Mime::parse("application/set-registration-initiation"), Ok(APPLICATION_SET_REGISTRATION_INITIATION));
        assert_eq!(crate::Mime::parse("aPPlICatION/SeT-regIStrATioN-INiTiaTIoN"), Ok(APPLICATION_SET_REGISTRATION_INITIATION));
    }

    /// `application/SGML`
    pub const APPLICATION_SGML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sgml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sgml_parse() {
        assert_eq!(crate::Mime::parse("application/SGML"), Ok(APPLICATION_SGML));
        assert_eq!(crate::Mime::parse("aPpLicAtIon/SGML"), Ok(APPLICATION_SGML));
    }

    /// `application/sgml-open-catalog`
    pub const APPLICATION_SGML_OPEN_CATALOG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SgmlOpenCatalog),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sgml_open_catalog_parse() {
        assert_eq!(crate::Mime::parse("application/sgml-open-catalog"), Ok(APPLICATION_SGML_OPEN_CATALOG));
        assert_eq!(crate::Mime::parse("ApPliCAtIOn/SGML-opEN-caTaLOg"), Ok(APPLICATION_SGML_OPEN_CATALOG));
    }

    /// `application/shf+xml`
    pub const APPLICATION_SHF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Shf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_shf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/shf+xml"), Ok(APPLICATION_SHF_XML));
        assert_eq!(crate::Mime::parse("APPlicaTioN/ShF+xml"), Ok(APPLICATION_SHF_XML));
    }

    /// `application/sieve`
    pub const APPLICATION_SIEVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sieve),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sieve_parse() {
        assert_eq!(crate::Mime::parse("application/sieve"), Ok(APPLICATION_SIEVE));
        assert_eq!(crate::Mime::parse("aPPlICAtIon/SiEve"), Ok(APPLICATION_SIEVE));
    }

    /// `application/simple-filter+xml`
    pub const APPLICATION_SIMPLE_FILTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SimpleFilter),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_simple_filter_xml_parse() {
        assert_eq!(crate::Mime::parse("application/simple-filter+xml"), Ok(APPLICATION_SIMPLE_FILTER_XML));
        assert_eq!(crate::Mime::parse("appLIcaTiON/sImpLE-FIlTER+xml"), Ok(APPLICATION_SIMPLE_FILTER_XML));
    }

    /// `application/simple-message-summary`
    pub const APPLICATION_SIMPLE_MESSAGE_SUMMARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SimpleMessageSummary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_simple_message_summary_parse() {
        assert_eq!(crate::Mime::parse("application/simple-message-summary"), Ok(APPLICATION_SIMPLE_MESSAGE_SUMMARY));
        assert_eq!(crate::Mime::parse("APPliCAtIon/SImPlE-mESSAgE-SuMMaRY"), Ok(APPLICATION_SIMPLE_MESSAGE_SUMMARY));
    }

    /// `application/simpleSymbolContainer`
    pub const APPLICATION_SIMPLE_SYMBOL_CONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SimpleSymbolContainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_simple_symbol_container_parse() {
        assert_eq!(crate::Mime::parse("application/simpleSymbolContainer"), Ok(APPLICATION_SIMPLE_SYMBOL_CONTAINER));
        assert_eq!(crate::Mime::parse("aPplIcaTIOn/SiMplesyMbolcOntaiNER"), Ok(APPLICATION_SIMPLE_SYMBOL_CONTAINER));
    }

    /// `application/sipc`
    pub const APPLICATION_SIPC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sipc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sipc_parse() {
        assert_eq!(crate::Mime::parse("application/sipc"), Ok(APPLICATION_SIPC));
        assert_eq!(crate::Mime::parse("appLicATion/sIpc"), Ok(APPLICATION_SIPC));
    }

    /// `application/slate`
    pub const APPLICATION_SLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Slate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_slate_parse() {
        assert_eq!(crate::Mime::parse("application/slate"), Ok(APPLICATION_SLATE));
        assert_eq!(crate::Mime::parse("applIcAtioN/sLATE"), Ok(APPLICATION_SLATE));
    }

    /// `application/smil+xml`
    pub const APPLICATION_SMIL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Smil),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_smil_xml_parse() {
        assert_eq!(crate::Mime::parse("application/smil+xml"), Ok(APPLICATION_SMIL_XML));
        assert_eq!(crate::Mime::parse("APPlICAtIon/sMil+xmL"), Ok(APPLICATION_SMIL_XML));
    }

    /// `application/smpte336m`
    pub const APPLICATION_SMPTE336M: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Smpte336m),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_smpte336m_parse() {
        assert_eq!(crate::Mime::parse("application/smpte336m"), Ok(APPLICATION_SMPTE336M));
        assert_eq!(crate::Mime::parse("APPliCATIoN/SMpTE336M"), Ok(APPLICATION_SMPTE336M));
    }

    /// `application/soap+fastinfoset`
    pub const APPLICATION_SOAP_FASTINFOSET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Soap),
        suffix: Some(crate::Name::Interned(super::Suffix::Fastinfoset)),
        parameters: &[]
    });

    #[test]
    fn application_soap_fastinfoset_parse() {
        assert_eq!(crate::Mime::parse("application/soap+fastinfoset"), Ok(APPLICATION_SOAP_FASTINFOSET));
        assert_eq!(crate::Mime::parse("aPPLICAtIOn/SOaP+FaSTInfosEt"), Ok(APPLICATION_SOAP_FASTINFOSET));
    }

    /// `application/soap+xml`
    pub const APPLICATION_SOAP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Soap),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_soap_xml_parse() {
        assert_eq!(crate::Mime::parse("application/soap+xml"), Ok(APPLICATION_SOAP_XML));
        assert_eq!(crate::Mime::parse("ApPLiCATiOn/SoaP+xml"), Ok(APPLICATION_SOAP_XML));
    }

    /// `application/sparql-query`
    pub const APPLICATION_SPARQL_QUERY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SparqlQuery),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sparql_query_parse() {
        assert_eq!(crate::Mime::parse("application/sparql-query"), Ok(APPLICATION_SPARQL_QUERY));
        assert_eq!(crate::Mime::parse("apPLiCATioN/SpArQL-QuerY"), Ok(APPLICATION_SPARQL_QUERY));
    }

    /// `application/sparql-results+xml`
    pub const APPLICATION_SPARQL_RESULTS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SparqlResults),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_sparql_results_xml_parse() {
        assert_eq!(crate::Mime::parse("application/sparql-results+xml"), Ok(APPLICATION_SPARQL_RESULTS_XML));
        assert_eq!(crate::Mime::parse("applICAtIOn/sPArQl-RESUlTS+XMl"), Ok(APPLICATION_SPARQL_RESULTS_XML));
    }

    /// `application/spdx+json`
    pub const APPLICATION_SPDX_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Spdx),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_spdx_json_parse() {
        assert_eq!(crate::Mime::parse("application/spdx+json"), Ok(APPLICATION_SPDX_JSON));
        assert_eq!(crate::Mime::parse("APpLiCAtIoN/SpDx+JSOn"), Ok(APPLICATION_SPDX_JSON));
    }

    /// `application/spirits-event+xml`
    pub const APPLICATION_SPIRITS_EVENT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::SpiritsEvent),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_spirits_event_xml_parse() {
        assert_eq!(crate::Mime::parse("application/spirits-event+xml"), Ok(APPLICATION_SPIRITS_EVENT_XML));
        assert_eq!(crate::Mime::parse("APpLIcaTion/spiRits-EvEnT+XmL"), Ok(APPLICATION_SPIRITS_EVENT_XML));
    }

    /// `application/sql`
    pub const APPLICATION_SQL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sql),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_sql_parse() {
        assert_eq!(crate::Mime::parse("application/sql"), Ok(APPLICATION_SQL));
        assert_eq!(crate::Mime::parse("ApPliCATION/sqL"), Ok(APPLICATION_SQL));
    }

    /// `application/srgs`
    pub const APPLICATION_SRGS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Srgs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_srgs_parse() {
        assert_eq!(crate::Mime::parse("application/srgs"), Ok(APPLICATION_SRGS));
        assert_eq!(crate::Mime::parse("appLIcAtiOn/srGS"), Ok(APPLICATION_SRGS));
    }

    /// `application/srgs+xml`
    pub const APPLICATION_SRGS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Srgs),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_srgs_xml_parse() {
        assert_eq!(crate::Mime::parse("application/srgs+xml"), Ok(APPLICATION_SRGS_XML));
        assert_eq!(crate::Mime::parse("aPPliCATIon/sRGs+XMl"), Ok(APPLICATION_SRGS_XML));
    }

    /// `application/sru+xml`
    pub const APPLICATION_SRU_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Sru),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_sru_xml_parse() {
        assert_eq!(crate::Mime::parse("application/sru+xml"), Ok(APPLICATION_SRU_XML));
        assert_eq!(crate::Mime::parse("APPliCatiOn/sRU+XMl"), Ok(APPLICATION_SRU_XML));
    }

    /// `application/ssml+xml`
    pub const APPLICATION_SSML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ssml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_ssml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/ssml+xml"), Ok(APPLICATION_SSML_XML));
        assert_eq!(crate::Mime::parse("AppLICAtIon/SsMl+XML"), Ok(APPLICATION_SSML_XML));
    }

    /// `application/stix+json`
    pub const APPLICATION_STIX_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Stix),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_stix_json_parse() {
        assert_eq!(crate::Mime::parse("application/stix+json"), Ok(APPLICATION_STIX_JSON));
        assert_eq!(crate::Mime::parse("APPlIcATion/STix+JSOn"), Ok(APPLICATION_STIX_JSON));
    }

    /// `application/swid+xml`
    pub const APPLICATION_SWID_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Swid),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_swid_xml_parse() {
        assert_eq!(crate::Mime::parse("application/swid+xml"), Ok(APPLICATION_SWID_XML));
        assert_eq!(crate::Mime::parse("APPlIcAtion/SWid+XML"), Ok(APPLICATION_SWID_XML));
    }

    /// `application/tamp-apex-update`
    pub const APPLICATION_TAMP_APEX_UPDATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampApexUpdate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_apex_update_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-apex-update"), Ok(APPLICATION_TAMP_APEX_UPDATE));
        assert_eq!(crate::Mime::parse("aPplicAtioN/tAMP-apex-UpDatE"), Ok(APPLICATION_TAMP_APEX_UPDATE));
    }

    /// `application/tamp-apex-update-confirm`
    pub const APPLICATION_TAMP_APEX_UPDATE_CONFIRM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampApexUpdateConfirm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_apex_update_confirm_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-apex-update-confirm"), Ok(APPLICATION_TAMP_APEX_UPDATE_CONFIRM));
        assert_eq!(crate::Mime::parse("applIcATION/TAmp-aPEX-UPdATE-CONFirM"), Ok(APPLICATION_TAMP_APEX_UPDATE_CONFIRM));
    }

    /// `application/tamp-community-update`
    pub const APPLICATION_TAMP_COMMUNITY_UPDATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampCommunityUpdate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_community_update_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-community-update"), Ok(APPLICATION_TAMP_COMMUNITY_UPDATE));
        assert_eq!(crate::Mime::parse("aPPLICAtIoN/taMp-coMMUnity-UPDaTE"), Ok(APPLICATION_TAMP_COMMUNITY_UPDATE));
    }

    /// `application/tamp-community-update-confirm`
    pub const APPLICATION_TAMP_COMMUNITY_UPDATE_CONFIRM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampCommunityUpdateConfirm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_community_update_confirm_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-community-update-confirm"), Ok(APPLICATION_TAMP_COMMUNITY_UPDATE_CONFIRM));
        assert_eq!(crate::Mime::parse("APpLicATion/TAmP-comMUNIty-uPDaTE-CoNfiRM"), Ok(APPLICATION_TAMP_COMMUNITY_UPDATE_CONFIRM));
    }

    /// `application/tamp-error`
    pub const APPLICATION_TAMP_ERROR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampError),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_error_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-error"), Ok(APPLICATION_TAMP_ERROR));
        assert_eq!(crate::Mime::parse("apPLiCATioN/Tamp-ERroR"), Ok(APPLICATION_TAMP_ERROR));
    }

    /// `application/tamp-sequence-adjust`
    pub const APPLICATION_TAMP_SEQUENCE_ADJUST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampSequenceAdjust),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_sequence_adjust_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-sequence-adjust"), Ok(APPLICATION_TAMP_SEQUENCE_ADJUST));
        assert_eq!(crate::Mime::parse("appLIcatIOn/TAMP-seqUENCe-adJuST"), Ok(APPLICATION_TAMP_SEQUENCE_ADJUST));
    }

    /// `application/tamp-sequence-adjust-confirm`
    pub const APPLICATION_TAMP_SEQUENCE_ADJUST_CONFIRM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampSequenceAdjustConfirm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_sequence_adjust_confirm_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-sequence-adjust-confirm"), Ok(APPLICATION_TAMP_SEQUENCE_ADJUST_CONFIRM));
        assert_eq!(crate::Mime::parse("aPpLIcaTIon/TamP-sEqUence-ADjUSt-COnFIRm"), Ok(APPLICATION_TAMP_SEQUENCE_ADJUST_CONFIRM));
    }

    /// `application/tamp-status-query`
    pub const APPLICATION_TAMP_STATUS_QUERY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampStatusQuery),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_status_query_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-status-query"), Ok(APPLICATION_TAMP_STATUS_QUERY));
        assert_eq!(crate::Mime::parse("aPplIcATIOn/Tamp-STaTUs-qUERY"), Ok(APPLICATION_TAMP_STATUS_QUERY));
    }

    /// `application/tamp-status-response`
    pub const APPLICATION_TAMP_STATUS_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampStatusResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_status_response_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-status-response"), Ok(APPLICATION_TAMP_STATUS_RESPONSE));
        assert_eq!(crate::Mime::parse("aPPliCaTion/TAMp-STATuS-reSpoNse"), Ok(APPLICATION_TAMP_STATUS_RESPONSE));
    }

    /// `application/tamp-update`
    pub const APPLICATION_TAMP_UPDATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampUpdate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_update_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-update"), Ok(APPLICATION_TAMP_UPDATE));
        assert_eq!(crate::Mime::parse("appLicATIoN/TamP-UpdAte"), Ok(APPLICATION_TAMP_UPDATE));
    }

    /// `application/tamp-update-confirm`
    pub const APPLICATION_TAMP_UPDATE_CONFIRM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TampUpdateConfirm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tamp_update_confirm_parse() {
        assert_eq!(crate::Mime::parse("application/tamp-update-confirm"), Ok(APPLICATION_TAMP_UPDATE_CONFIRM));
        assert_eq!(crate::Mime::parse("appLIcaTION/TaMp-uPdate-ConfiRM"), Ok(APPLICATION_TAMP_UPDATE_CONFIRM));
    }

    /// `application/taxii+json`
    pub const APPLICATION_TAXII_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Taxii),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_taxii_json_parse() {
        assert_eq!(crate::Mime::parse("application/taxii+json"), Ok(APPLICATION_TAXII_JSON));
        assert_eq!(crate::Mime::parse("aPpLIcATiON/taXiI+jSon"), Ok(APPLICATION_TAXII_JSON));
    }

    /// `application/td+json`
    pub const APPLICATION_TD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Td),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_td_json_parse() {
        assert_eq!(crate::Mime::parse("application/td+json"), Ok(APPLICATION_TD_JSON));
        assert_eq!(crate::Mime::parse("apPLIcatiOn/Td+jSOn"), Ok(APPLICATION_TD_JSON));
    }

    /// `application/tei+xml`
    pub const APPLICATION_TEI_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Tei),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_tei_xml_parse() {
        assert_eq!(crate::Mime::parse("application/tei+xml"), Ok(APPLICATION_TEI_XML));
        assert_eq!(crate::Mime::parse("APplicatIOn/Tei+xML"), Ok(APPLICATION_TEI_XML));
    }

    /// `application/TETRA_ISI`
    pub const APPLICATION_TETRA_ISI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TetraIsi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tetra_isi_parse() {
        assert_eq!(crate::Mime::parse("application/TETRA_ISI"), Ok(APPLICATION_TETRA_ISI));
        assert_eq!(crate::Mime::parse("aPPLIcatION/TEtRA_iSI"), Ok(APPLICATION_TETRA_ISI));
    }

    /// `application/thraud+xml`
    pub const APPLICATION_THRAUD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Thraud),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_thraud_xml_parse() {
        assert_eq!(crate::Mime::parse("application/thraud+xml"), Ok(APPLICATION_THRAUD_XML));
        assert_eq!(crate::Mime::parse("aPpLIcaTIOn/tHraud+XMl"), Ok(APPLICATION_THRAUD_XML));
    }

    /// `application/timestamp-query`
    pub const APPLICATION_TIMESTAMP_QUERY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TimestampQuery),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_timestamp_query_parse() {
        assert_eq!(crate::Mime::parse("application/timestamp-query"), Ok(APPLICATION_TIMESTAMP_QUERY));
        assert_eq!(crate::Mime::parse("apPlIcAtIOn/TImesTamP-quERY"), Ok(APPLICATION_TIMESTAMP_QUERY));
    }

    /// `application/timestamp-reply`
    pub const APPLICATION_TIMESTAMP_REPLY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TimestampReply),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_timestamp_reply_parse() {
        assert_eq!(crate::Mime::parse("application/timestamp-reply"), Ok(APPLICATION_TIMESTAMP_REPLY));
        assert_eq!(crate::Mime::parse("aPpLIcATioN/tImEStAMP-REpLy"), Ok(APPLICATION_TIMESTAMP_REPLY));
    }

    /// `application/timestamped-data`
    pub const APPLICATION_TIMESTAMPED_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TimestampedData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_timestamped_data_parse() {
        assert_eq!(crate::Mime::parse("application/timestamped-data"), Ok(APPLICATION_TIMESTAMPED_DATA));
        assert_eq!(crate::Mime::parse("APplIcAtIoN/TImeStamPed-dAta"), Ok(APPLICATION_TIMESTAMPED_DATA));
    }

    /// `application/tlsrpt+gzip`
    pub const APPLICATION_TLSRPT_GZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Tlsrpt),
        suffix: Some(crate::Name::Interned(super::Suffix::Gzip)),
        parameters: &[]
    });

    #[test]
    fn application_tlsrpt_gzip_parse() {
        assert_eq!(crate::Mime::parse("application/tlsrpt+gzip"), Ok(APPLICATION_TLSRPT_GZIP));
        assert_eq!(crate::Mime::parse("APplIcAtION/tlsRPt+gZip"), Ok(APPLICATION_TLSRPT_GZIP));
    }

    /// `application/tlsrpt+json`
    pub const APPLICATION_TLSRPT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Tlsrpt),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_tlsrpt_json_parse() {
        assert_eq!(crate::Mime::parse("application/tlsrpt+json"), Ok(APPLICATION_TLSRPT_JSON));
        assert_eq!(crate::Mime::parse("AppLiCATIon/tLsrpT+JSON"), Ok(APPLICATION_TLSRPT_JSON));
    }

    /// `application/tnauthlist`
    pub const APPLICATION_TNAUTHLIST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Tnauthlist),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tnauthlist_parse() {
        assert_eq!(crate::Mime::parse("application/tnauthlist"), Ok(APPLICATION_TNAUTHLIST));
        assert_eq!(crate::Mime::parse("applICatION/tNaUthLiST"), Ok(APPLICATION_TNAUTHLIST));
    }

    /// `application/token-introspection+jwt`
    pub const APPLICATION_TOKEN_INTROSPECTION_JWT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TokenIntrospection),
        suffix: Some(crate::Name::Interned(super::Suffix::Jwt)),
        parameters: &[]
    });

    #[test]
    fn application_token_introspection_jwt_parse() {
        assert_eq!(crate::Mime::parse("application/token-introspection+jwt"), Ok(APPLICATION_TOKEN_INTROSPECTION_JWT));
        assert_eq!(crate::Mime::parse("appliCATION/TOkeN-INtRospeCTIOn+jwt"), Ok(APPLICATION_TOKEN_INTROSPECTION_JWT));
    }

    /// `application/trickle-ice-sdpfrag`
    pub const APPLICATION_TRICKLE_ICE_SDPFRAG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TrickleIceSdpfrag),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_trickle_ice_sdpfrag_parse() {
        assert_eq!(crate::Mime::parse("application/trickle-ice-sdpfrag"), Ok(APPLICATION_TRICKLE_ICE_SDPFRAG));
        assert_eq!(crate::Mime::parse("applIcatIoN/TrICkLe-Ice-sdPfrAG"), Ok(APPLICATION_TRICKLE_ICE_SDPFRAG));
    }

    /// `application/trig`
    pub const APPLICATION_TRIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Trig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_trig_parse() {
        assert_eq!(crate::Mime::parse("application/trig"), Ok(APPLICATION_TRIG));
        assert_eq!(crate::Mime::parse("applicaTIOn/TrIg"), Ok(APPLICATION_TRIG));
    }

    /// `application/ttml+xml`
    pub const APPLICATION_TTML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ttml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_ttml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/ttml+xml"), Ok(APPLICATION_TTML_XML));
        assert_eq!(crate::Mime::parse("appLiCatIoN/tTmL+XML"), Ok(APPLICATION_TTML_XML));
    }

    /// `application/tve-trigger`
    pub const APPLICATION_TVE_TRIGGER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TveTrigger),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tve_trigger_parse() {
        assert_eq!(crate::Mime::parse("application/tve-trigger"), Ok(APPLICATION_TVE_TRIGGER));
        assert_eq!(crate::Mime::parse("aPPlicAtioN/Tve-trigGEr"), Ok(APPLICATION_TVE_TRIGGER));
    }

    /// `application/tzif`
    pub const APPLICATION_TZIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Tzif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tzif_parse() {
        assert_eq!(crate::Mime::parse("application/tzif"), Ok(APPLICATION_TZIF));
        assert_eq!(crate::Mime::parse("aPPlICatioN/tZIF"), Ok(APPLICATION_TZIF));
    }

    /// `application/tzif-leap`
    pub const APPLICATION_TZIF_LEAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::TzifLeap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_tzif_leap_parse() {
        assert_eq!(crate::Mime::parse("application/tzif-leap"), Ok(APPLICATION_TZIF_LEAP));
        assert_eq!(crate::Mime::parse("aPPLiCAtion/tZiF-LeaP"), Ok(APPLICATION_TZIF_LEAP));
    }

    /// `application/ulpfec`
    pub const APPLICATION_ULPFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Ulpfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_ulpfec_parse() {
        assert_eq!(crate::Mime::parse("application/ulpfec"), Ok(APPLICATION_ULPFEC));
        assert_eq!(crate::Mime::parse("aPplIcAtIon/uLpfec"), Ok(APPLICATION_ULPFEC));
    }

    /// `application/urc-grpsheet+xml`
    pub const APPLICATION_URC_GRPSHEET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::UrcGrpsheet),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_urc_grpsheet_xml_parse() {
        assert_eq!(crate::Mime::parse("application/urc-grpsheet+xml"), Ok(APPLICATION_URC_GRPSHEET_XML));
        assert_eq!(crate::Mime::parse("APplICAtIOn/uRC-grPSHeeT+xmL"), Ok(APPLICATION_URC_GRPSHEET_XML));
    }

    /// `application/urc-ressheet+xml`
    pub const APPLICATION_URC_RESSHEET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::UrcRessheet),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_urc_ressheet_xml_parse() {
        assert_eq!(crate::Mime::parse("application/urc-ressheet+xml"), Ok(APPLICATION_URC_RESSHEET_XML));
        assert_eq!(crate::Mime::parse("ApPlICatiON/uRC-REsSHeeT+Xml"), Ok(APPLICATION_URC_RESSHEET_XML));
    }

    /// `application/urc-targetdesc+xml`
    pub const APPLICATION_URC_TARGETDESC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::UrcTargetdesc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_urc_targetdesc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/urc-targetdesc+xml"), Ok(APPLICATION_URC_TARGETDESC_XML));
        assert_eq!(crate::Mime::parse("ApPlICatIOn/UrC-targeTdEsc+Xml"), Ok(APPLICATION_URC_TARGETDESC_XML));
    }

    /// `application/urc-uisocketdesc+xml`
    pub const APPLICATION_URC_UISOCKETDESC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::UrcUisocketdesc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_urc_uisocketdesc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/urc-uisocketdesc+xml"), Ok(APPLICATION_URC_UISOCKETDESC_XML));
        assert_eq!(crate::Mime::parse("aPpLIcATIoN/URC-uisocKeTdEsC+xmL"), Ok(APPLICATION_URC_UISOCKETDESC_XML));
    }

    /// `application/vcard+json`
    pub const APPLICATION_VCARD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vcard),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vcard_json_parse() {
        assert_eq!(crate::Mime::parse("application/vcard+json"), Ok(APPLICATION_VCARD_JSON));
        assert_eq!(crate::Mime::parse("APPlICaTioN/VcaRd+jsoN"), Ok(APPLICATION_VCARD_JSON));
    }

    /// `application/vcard+xml`
    pub const APPLICATION_VCARD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vcard),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vcard_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vcard+xml"), Ok(APPLICATION_VCARD_XML));
        assert_eq!(crate::Mime::parse("aPpliCATIOn/VCARd+Xml"), Ok(APPLICATION_VCARD_XML));
    }

    /// `application/vemmi`
    pub const APPLICATION_VEMMI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vemmi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vemmi_parse() {
        assert_eq!(crate::Mime::parse("application/vemmi"), Ok(APPLICATION_VEMMI));
        assert_eq!(crate::Mime::parse("apPLiCAtIon/VEMmI"), Ok(APPLICATION_VEMMI));
    }

    /// `application/vnd.1000minds.decision-model+xml`
    pub const APPLICATION_VND_1000MINDS_DECISION_MODEL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd1000mindsDecisionModel),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_1000minds_decision_model_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.1000minds.decision-model+xml"), Ok(APPLICATION_VND_1000MINDS_DECISION_MODEL_XML));
        assert_eq!(crate::Mime::parse("apPlICatION/vnD.1000mINds.DECiSIon-MODEl+XMl"), Ok(APPLICATION_VND_1000MINDS_DECISION_MODEL_XML));
    }

    /// `application/vnd.3gpp-prose+xml`
    pub const APPLICATION_VND_3GPP_PROSE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppProse),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_prose_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp-prose+xml"), Ok(APPLICATION_VND_3GPP_PROSE_XML));
        assert_eq!(crate::Mime::parse("AppLicaTioN/VND.3GPp-PrOse+XML"), Ok(APPLICATION_VND_3GPP_PROSE_XML));
    }

    /// `application/vnd.3gpp-prose-pc3ch+xml`
    pub const APPLICATION_VND_3GPP_PROSE_PC3CH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppProsePc3ch),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_prose_pc3ch_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp-prose-pc3ch+xml"), Ok(APPLICATION_VND_3GPP_PROSE_PC3CH_XML));
        assert_eq!(crate::Mime::parse("ApPlICATION/vNd.3GPP-PRoSE-pC3CH+xmL"), Ok(APPLICATION_VND_3GPP_PROSE_PC3CH_XML));
    }

    /// `application/vnd.3gpp-v2x-local-service-information`
    pub const APPLICATION_VND_3GPP_V2X_LOCAL_SERVICE_INFORMATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppV2xLocalServiceInformation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_v2x_local_service_information_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp-v2x-local-service-information"), Ok(APPLICATION_VND_3GPP_V2X_LOCAL_SERVICE_INFORMATION));
        assert_eq!(crate::Mime::parse("APpLiCaTIOn/vnd.3gpP-v2x-LoCaL-serVicE-INFORMATion"), Ok(APPLICATION_VND_3GPP_V2X_LOCAL_SERVICE_INFORMATION));
    }

    /// `application/vnd.3gpp.5gnas`
    pub const APPLICATION_VND_3GPP_5GNAS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gpp5gnas),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_5gnas_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.5gnas"), Ok(APPLICATION_VND_3GPP_5GNAS));
        assert_eq!(crate::Mime::parse("ApplICatIOn/vnD.3gPp.5gnAS"), Ok(APPLICATION_VND_3GPP_5GNAS));
    }

    /// `application/vnd.3gpp.access-transfer-events+xml`
    pub const APPLICATION_VND_3GPP_ACCESS_TRANSFER_EVENTS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppAccessTransferEvents),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_access_transfer_events_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.access-transfer-events+xml"), Ok(APPLICATION_VND_3GPP_ACCESS_TRANSFER_EVENTS_XML));
        assert_eq!(crate::Mime::parse("appliCaTION/Vnd.3Gpp.aCCeSs-trAnsFer-evENtS+xML"), Ok(APPLICATION_VND_3GPP_ACCESS_TRANSFER_EVENTS_XML));
    }

    /// `application/vnd.3gpp.bsf+xml`
    pub const APPLICATION_VND_3GPP_BSF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppBsf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_bsf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.bsf+xml"), Ok(APPLICATION_VND_3GPP_BSF_XML));
        assert_eq!(crate::Mime::parse("APPLIcATION/VnD.3gPp.BSF+xML"), Ok(APPLICATION_VND_3GPP_BSF_XML));
    }

    /// `application/vnd.3gpp.GMOP+xml`
    pub const APPLICATION_VND_3GPP_GMOP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppGmop),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_gmop_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.GMOP+xml"), Ok(APPLICATION_VND_3GPP_GMOP_XML));
        assert_eq!(crate::Mime::parse("APpliCatiOn/VND.3GPP.gMoP+XMl"), Ok(APPLICATION_VND_3GPP_GMOP_XML));
    }

    /// `application/vnd.3gpp.gtpc`
    pub const APPLICATION_VND_3GPP_GTPC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppGtpc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_gtpc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.gtpc"), Ok(APPLICATION_VND_3GPP_GTPC));
        assert_eq!(crate::Mime::parse("aPplIcatION/VND.3gPp.gTpc"), Ok(APPLICATION_VND_3GPP_GTPC));
    }

    /// `application/vnd.3gpp.interworking-data`
    pub const APPLICATION_VND_3GPP_INTERWORKING_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppInterworkingData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_interworking_data_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.interworking-data"), Ok(APPLICATION_VND_3GPP_INTERWORKING_DATA));
        assert_eq!(crate::Mime::parse("APplIcaTiOn/vnd.3GpP.IntErWoRkINg-DATA"), Ok(APPLICATION_VND_3GPP_INTERWORKING_DATA));
    }

    /// `application/vnd.3gpp.lpp`
    pub const APPLICATION_VND_3GPP_LPP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppLpp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_lpp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.lpp"), Ok(APPLICATION_VND_3GPP_LPP));
        assert_eq!(crate::Mime::parse("ApPLICATion/vnD.3gpP.LpP"), Ok(APPLICATION_VND_3GPP_LPP));
    }

    /// `application/vnd.3gpp.mc-signalling-ear`
    pub const APPLICATION_VND_3GPP_MC_SIGNALLING_EAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcSignallingEar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mc_signalling_ear_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mc-signalling-ear"), Ok(APPLICATION_VND_3GPP_MC_SIGNALLING_EAR));
        assert_eq!(crate::Mime::parse("ApPLiCATION/VnD.3GpP.MC-SIGnaLLING-eAR"), Ok(APPLICATION_VND_3GPP_MC_SIGNALLING_EAR));
    }

    /// `application/vnd.3gpp.mcdata-affiliation-command+xml`
    pub const APPLICATION_VND_3GPP_MCDATA_AFFILIATION_COMMAND_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataAffiliationCommand),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_affiliation_command_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-affiliation-command+xml"), Ok(APPLICATION_VND_3GPP_MCDATA_AFFILIATION_COMMAND_XML));
        assert_eq!(crate::Mime::parse("APplIcAtIoN/vnD.3GPP.mcDaTA-afFIliaTIoN-COMmaND+XML"), Ok(APPLICATION_VND_3GPP_MCDATA_AFFILIATION_COMMAND_XML));
    }

    /// `application/vnd.3gpp.mcdata-info+xml`
    pub const APPLICATION_VND_3GPP_MCDATA_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-info+xml"), Ok(APPLICATION_VND_3GPP_MCDATA_INFO_XML));
        assert_eq!(crate::Mime::parse("appLiCAtion/vnD.3gpP.MCdata-iNfo+XMl"), Ok(APPLICATION_VND_3GPP_MCDATA_INFO_XML));
    }

    /// `application/vnd.3gpp.mcdata-payload`
    pub const APPLICATION_VND_3GPP_MCDATA_PAYLOAD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataPayload),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_payload_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-payload"), Ok(APPLICATION_VND_3GPP_MCDATA_PAYLOAD));
        assert_eq!(crate::Mime::parse("APpLicaTIon/vNd.3gPP.MCDatA-pAylOaD"), Ok(APPLICATION_VND_3GPP_MCDATA_PAYLOAD));
    }

    /// `application/vnd.3gpp.mcdata-service-config+xml`
    pub const APPLICATION_VND_3GPP_MCDATA_SERVICE_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataServiceConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_service_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-service-config+xml"), Ok(APPLICATION_VND_3GPP_MCDATA_SERVICE_CONFIG_XML));
        assert_eq!(crate::Mime::parse("ApPLiCATiON/VnD.3gpp.McDATa-servIce-coNFig+XMl"), Ok(APPLICATION_VND_3GPP_MCDATA_SERVICE_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcdata-signalling`
    pub const APPLICATION_VND_3GPP_MCDATA_SIGNALLING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataSignalling),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_signalling_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-signalling"), Ok(APPLICATION_VND_3GPP_MCDATA_SIGNALLING));
        assert_eq!(crate::Mime::parse("AppLicAtioN/Vnd.3gpp.MCdaTa-sIgnalLing"), Ok(APPLICATION_VND_3GPP_MCDATA_SIGNALLING));
    }

    /// `application/vnd.3gpp.mcdata-ue-config+xml`
    pub const APPLICATION_VND_3GPP_MCDATA_UE_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataUeConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_ue_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-ue-config+xml"), Ok(APPLICATION_VND_3GPP_MCDATA_UE_CONFIG_XML));
        assert_eq!(crate::Mime::parse("aPPlICATiON/Vnd.3gpp.MCdAtA-ue-ConFIG+xMl"), Ok(APPLICATION_VND_3GPP_MCDATA_UE_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcdata-user-profile+xml`
    pub const APPLICATION_VND_3GPP_MCDATA_USER_PROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcdataUserProfile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcdata_user_profile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcdata-user-profile+xml"), Ok(APPLICATION_VND_3GPP_MCDATA_USER_PROFILE_XML));
        assert_eq!(crate::Mime::parse("aPpLiCaTIOn/VND.3gPp.McdatA-uSeR-ProfiLE+XML"), Ok(APPLICATION_VND_3GPP_MCDATA_USER_PROFILE_XML));
    }

    /// `application/vnd.3gpp.mcptt-affiliation-command+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_AFFILIATION_COMMAND_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttAffiliationCommand),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_affiliation_command_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-affiliation-command+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_AFFILIATION_COMMAND_XML));
        assert_eq!(crate::Mime::parse("appLicAtIoN/vnD.3GPp.MCPtT-aFfilIATIon-COmMand+xmL"), Ok(APPLICATION_VND_3GPP_MCPTT_AFFILIATION_COMMAND_XML));
    }

    /// `application/vnd.3gpp.mcptt-floor-request+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_FLOOR_REQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttFloorRequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_floor_request_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-floor-request+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_FLOOR_REQUEST_XML));
        assert_eq!(crate::Mime::parse("ApPlIcatiOn/VnD.3gPp.mCPtt-Floor-ReQuest+Xml"), Ok(APPLICATION_VND_3GPP_MCPTT_FLOOR_REQUEST_XML));
    }

    /// `application/vnd.3gpp.mcptt-info+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-info+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_INFO_XML));
        assert_eq!(crate::Mime::parse("ApPlICATiOn/vnD.3Gpp.mCPTt-inFO+xmL"), Ok(APPLICATION_VND_3GPP_MCPTT_INFO_XML));
    }

    /// `application/vnd.3gpp.mcptt-location-info+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_LOCATION_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttLocationInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_location_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-location-info+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_LOCATION_INFO_XML));
        assert_eq!(crate::Mime::parse("ApPlicATIon/VnD.3GPP.mcpTt-lOCation-iNFo+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_LOCATION_INFO_XML));
    }

    /// `application/vnd.3gpp.mcptt-mbms-usage-info+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_MBMS_USAGE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttMbmsUsageInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_mbms_usage_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-mbms-usage-info+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_MBMS_USAGE_INFO_XML));
        assert_eq!(crate::Mime::parse("APplIcATIoN/vnD.3GpP.McPtt-mbMs-usaGE-info+XMl"), Ok(APPLICATION_VND_3GPP_MCPTT_MBMS_USAGE_INFO_XML));
    }

    /// `application/vnd.3gpp.mcptt-service-config+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_SERVICE_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttServiceConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_service_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-service-config+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_SERVICE_CONFIG_XML));
        assert_eq!(crate::Mime::parse("APplICatIOn/vNd.3gpP.MCPtT-SeRVIce-cONFIG+xMl"), Ok(APPLICATION_VND_3GPP_MCPTT_SERVICE_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcptt-signed+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_SIGNED_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttSigned),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_signed_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-signed+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_SIGNED_XML));
        assert_eq!(crate::Mime::parse("apPLiCAtIOn/vNd.3GPp.mcPtT-sIGnED+xMl"), Ok(APPLICATION_VND_3GPP_MCPTT_SIGNED_XML));
    }

    /// `application/vnd.3gpp.mcptt-ue-config+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_UE_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttUeConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_ue_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-ue-config+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_UE_CONFIG_XML));
        assert_eq!(crate::Mime::parse("APpLIcATiOn/VnD.3GPP.mcpTt-ue-confIG+xmL"), Ok(APPLICATION_VND_3GPP_MCPTT_UE_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcptt-ue-init-config+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_UE_INIT_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttUeInitConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_ue_init_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-ue-init-config+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_UE_INIT_CONFIG_XML));
        assert_eq!(crate::Mime::parse("ApPLICatIOn/vnD.3GPP.mcPTt-uE-INit-ConFIG+xML"), Ok(APPLICATION_VND_3GPP_MCPTT_UE_INIT_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcptt-user-profile+xml`
    pub const APPLICATION_VND_3GPP_MCPTT_USER_PROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcpttUserProfile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcptt_user_profile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcptt-user-profile+xml"), Ok(APPLICATION_VND_3GPP_MCPTT_USER_PROFILE_XML));
        assert_eq!(crate::Mime::parse("apPlicaTioN/vnd.3gpp.mCPtT-UsER-PRofILe+Xml"), Ok(APPLICATION_VND_3GPP_MCPTT_USER_PROFILE_XML));
    }

    /// `application/vnd.3gpp.mcvideo-affiliation-command+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_AFFILIATION_COMMAND_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoAffiliationCommand),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_affiliation_command_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-affiliation-command+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_AFFILIATION_COMMAND_XML));
        assert_eq!(crate::Mime::parse("APpliCaTiOn/VnD.3gpp.MCvIDeo-AfFiLIATioN-cOmmAND+Xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_AFFILIATION_COMMAND_XML));
    }

    /// `application/vnd.3gpp.mcvideo-info+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-info+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_INFO_XML));
        assert_eq!(crate::Mime::parse("applIcatIoN/vnd.3GpP.MCVIdeO-InFO+XmL"), Ok(APPLICATION_VND_3GPP_MCVIDEO_INFO_XML));
    }

    /// `application/vnd.3gpp.mcvideo-location-info+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_LOCATION_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoLocationInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_location_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-location-info+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_LOCATION_INFO_XML));
        assert_eq!(crate::Mime::parse("aPPLiCAtioN/VNd.3gPP.McvideO-lOCatION-InFo+XMl"), Ok(APPLICATION_VND_3GPP_MCVIDEO_LOCATION_INFO_XML));
    }

    /// `application/vnd.3gpp.mcvideo-mbms-usage-info+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_MBMS_USAGE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoMbmsUsageInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_mbms_usage_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-mbms-usage-info+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_MBMS_USAGE_INFO_XML));
        assert_eq!(crate::Mime::parse("APpLiCATiOn/vnD.3Gpp.mCvIdEo-mBms-usaGE-infO+XMl"), Ok(APPLICATION_VND_3GPP_MCVIDEO_MBMS_USAGE_INFO_XML));
    }

    /// `application/vnd.3gpp.mcvideo-service-config+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_SERVICE_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoServiceConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_service_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-service-config+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_SERVICE_CONFIG_XML));
        assert_eq!(crate::Mime::parse("apPLicatIon/Vnd.3Gpp.mcVIDEO-seRVICe-ConfIg+XMl"), Ok(APPLICATION_VND_3GPP_MCVIDEO_SERVICE_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcvideo-transmission-request+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_TRANSMISSION_REQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoTransmissionRequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_transmission_request_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-transmission-request+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_TRANSMISSION_REQUEST_XML));
        assert_eq!(crate::Mime::parse("AppliCaTion/VNd.3GPP.mcvideO-tRAnSmIssIOn-REqueST+xMl"), Ok(APPLICATION_VND_3GPP_MCVIDEO_TRANSMISSION_REQUEST_XML));
    }

    /// `application/vnd.3gpp.mcvideo-ue-config+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_UE_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoUeConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_ue_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-ue-config+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_UE_CONFIG_XML));
        assert_eq!(crate::Mime::parse("aPPLIcAtiON/vND.3Gpp.McVIdeo-Ue-cONfig+xmL"), Ok(APPLICATION_VND_3GPP_MCVIDEO_UE_CONFIG_XML));
    }

    /// `application/vnd.3gpp.mcvideo-user-profile+xml`
    pub const APPLICATION_VND_3GPP_MCVIDEO_USER_PROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMcvideoUserProfile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mcvideo_user_profile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mcvideo-user-profile+xml"), Ok(APPLICATION_VND_3GPP_MCVIDEO_USER_PROFILE_XML));
        assert_eq!(crate::Mime::parse("ApPLICatIon/Vnd.3gpp.mCvideO-USeR-prOfILE+xMl"), Ok(APPLICATION_VND_3GPP_MCVIDEO_USER_PROFILE_XML));
    }

    /// `application/vnd.3gpp.mid-call+xml`
    pub const APPLICATION_VND_3GPP_MID_CALL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppMidCall),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_mid_call_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.mid-call+xml"), Ok(APPLICATION_VND_3GPP_MID_CALL_XML));
        assert_eq!(crate::Mime::parse("aPPlIcAtiOn/vND.3GPp.Mid-CalL+xML"), Ok(APPLICATION_VND_3GPP_MID_CALL_XML));
    }

    /// `application/vnd.3gpp.ngap`
    pub const APPLICATION_VND_3GPP_NGAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppNgap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_ngap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.ngap"), Ok(APPLICATION_VND_3GPP_NGAP));
        assert_eq!(crate::Mime::parse("AppliCAtioN/vnd.3gpP.NGAP"), Ok(APPLICATION_VND_3GPP_NGAP));
    }

    /// `application/vnd.3gpp.pfcp`
    pub const APPLICATION_VND_3GPP_PFCP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppPfcp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_pfcp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.pfcp"), Ok(APPLICATION_VND_3GPP_PFCP));
        assert_eq!(crate::Mime::parse("apPLICaTIOn/VnD.3GPP.PFcP"), Ok(APPLICATION_VND_3GPP_PFCP));
    }

    /// `application/vnd.3gpp.pic-bw-large`
    pub const APPLICATION_VND_3GPP_PIC_BW_LARGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppPicBwLarge),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_pic_bw_large_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.pic-bw-large"), Ok(APPLICATION_VND_3GPP_PIC_BW_LARGE));
        assert_eq!(crate::Mime::parse("aPplICatiON/vNd.3GpP.pic-bw-LARGE"), Ok(APPLICATION_VND_3GPP_PIC_BW_LARGE));
    }

    /// `application/vnd.3gpp.pic-bw-small`
    pub const APPLICATION_VND_3GPP_PIC_BW_SMALL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppPicBwSmall),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_pic_bw_small_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.pic-bw-small"), Ok(APPLICATION_VND_3GPP_PIC_BW_SMALL));
        assert_eq!(crate::Mime::parse("APpLiCAtIoN/vnd.3gPP.pIC-BW-smaLL"), Ok(APPLICATION_VND_3GPP_PIC_BW_SMALL));
    }

    /// `application/vnd.3gpp.pic-bw-var`
    pub const APPLICATION_VND_3GPP_PIC_BW_VAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppPicBwVar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_pic_bw_var_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.pic-bw-var"), Ok(APPLICATION_VND_3GPP_PIC_BW_VAR));
        assert_eq!(crate::Mime::parse("aPPliCaTIon/vND.3GPP.piC-BW-vAR"), Ok(APPLICATION_VND_3GPP_PIC_BW_VAR));
    }

    /// `application/vnd.3gpp.s1ap`
    pub const APPLICATION_VND_3GPP_S1AP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppS1ap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_s1ap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.s1ap"), Ok(APPLICATION_VND_3GPP_S1AP));
        assert_eq!(crate::Mime::parse("APPlICAtIOn/vnD.3gpp.S1aP"), Ok(APPLICATION_VND_3GPP_S1AP));
    }

    /// `application/vnd.3gpp.sms`
    pub const APPLICATION_VND_3GPP_SMS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppSms),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_sms_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.sms"), Ok(APPLICATION_VND_3GPP_SMS));
        assert_eq!(crate::Mime::parse("applICAtioN/vND.3gPP.sMS"), Ok(APPLICATION_VND_3GPP_SMS));
    }

    /// `application/vnd.3gpp.sms+xml`
    pub const APPLICATION_VND_3GPP_SMS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppSms),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_sms_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.sms+xml"), Ok(APPLICATION_VND_3GPP_SMS_XML));
        assert_eq!(crate::Mime::parse("aPpliCAtION/vnD.3Gpp.smS+XmL"), Ok(APPLICATION_VND_3GPP_SMS_XML));
    }

    /// `application/vnd.3gpp.srvcc-ext+xml`
    pub const APPLICATION_VND_3GPP_SRVCC_EXT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppSrvccExt),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_srvcc_ext_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.srvcc-ext+xml"), Ok(APPLICATION_VND_3GPP_SRVCC_EXT_XML));
        assert_eq!(crate::Mime::parse("aPpLicaTIOn/VNd.3GPP.SRVCC-ExT+xML"), Ok(APPLICATION_VND_3GPP_SRVCC_EXT_XML));
    }

    /// `application/vnd.3gpp.SRVCC-info+xml`
    pub const APPLICATION_VND_3GPP_SRVCC_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppSrvccInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_srvcc_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.SRVCC-info+xml"), Ok(APPLICATION_VND_3GPP_SRVCC_INFO_XML));
        assert_eq!(crate::Mime::parse("appLICatiON/vnd.3GPp.sRVCC-Info+xml"), Ok(APPLICATION_VND_3GPP_SRVCC_INFO_XML));
    }

    /// `application/vnd.3gpp.state-and-event-info+xml`
    pub const APPLICATION_VND_3GPP_STATE_AND_EVENT_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppStateAndEventInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_state_and_event_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.state-and-event-info+xml"), Ok(APPLICATION_VND_3GPP_STATE_AND_EVENT_INFO_XML));
        assert_eq!(crate::Mime::parse("apPlicATiOn/vnd.3GPP.sTate-anD-EVEnt-infO+XMl"), Ok(APPLICATION_VND_3GPP_STATE_AND_EVENT_INFO_XML));
    }

    /// `application/vnd.3gpp.ussd+xml`
    pub const APPLICATION_VND_3GPP_USSD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppUssd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp_ussd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp.ussd+xml"), Ok(APPLICATION_VND_3GPP_USSD_XML));
        assert_eq!(crate::Mime::parse("aPpliCaTiON/VND.3GpP.uSsd+xmL"), Ok(APPLICATION_VND_3GPP_USSD_XML));
    }

    /// `application/vnd.3gpp2.bcmcsinfo+xml`
    pub const APPLICATION_VND_3GPP2_BCMCSINFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gpp2Bcmcsinfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp2_bcmcsinfo_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp2.bcmcsinfo+xml"), Ok(APPLICATION_VND_3GPP2_BCMCSINFO_XML));
        assert_eq!(crate::Mime::parse("aPplICATion/vNd.3GPP2.BCMcsINfO+xmL"), Ok(APPLICATION_VND_3GPP2_BCMCSINFO_XML));
    }

    /// `application/vnd.3gpp2.sms`
    pub const APPLICATION_VND_3GPP2_SMS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gpp2Sms),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp2_sms_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp2.sms"), Ok(APPLICATION_VND_3GPP2_SMS));
        assert_eq!(crate::Mime::parse("apPLIcaTiON/vNd.3Gpp2.Sms"), Ok(APPLICATION_VND_3GPP2_SMS));
    }

    /// `application/vnd.3gpp2.tcap`
    pub const APPLICATION_VND_3GPP2_TCAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gpp2Tcap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3gpp2_tcap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3gpp2.tcap"), Ok(APPLICATION_VND_3GPP2_TCAP));
        assert_eq!(crate::Mime::parse("appLicaTION/vnd.3gPP2.TcaP"), Ok(APPLICATION_VND_3GPP2_TCAP));
    }

    /// `application/vnd.3lightssoftware.imagescal`
    pub const APPLICATION_VND_3LIGHTSSOFTWARE_IMAGESCAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3lightssoftwareImagescal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3lightssoftware_imagescal_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3lightssoftware.imagescal"), Ok(APPLICATION_VND_3LIGHTSSOFTWARE_IMAGESCAL));
        assert_eq!(crate::Mime::parse("APPlIcatiON/vNd.3LighTsSofTWaRe.imaGESCal"), Ok(APPLICATION_VND_3LIGHTSSOFTWARE_IMAGESCAL));
    }

    /// `application/vnd.3M.Post-it-Notes`
    pub const APPLICATION_VND_3M_POST_IT_NOTES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Vnd3mPostItNotes),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_3m_post_it_notes_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.3M.Post-it-Notes"), Ok(APPLICATION_VND_3M_POST_IT_NOTES));
        assert_eq!(crate::Mime::parse("ApPLIcAtioN/VNd.3m.posT-iT-NOtES"), Ok(APPLICATION_VND_3M_POST_IT_NOTES));
    }

    /// `application/vnd.accpac.simply.aso`
    pub const APPLICATION_VND_ACCPAC_SIMPLY_ASO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAccpacSimplyAso),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_accpac_simply_aso_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.accpac.simply.aso"), Ok(APPLICATION_VND_ACCPAC_SIMPLY_ASO));
        assert_eq!(crate::Mime::parse("aPplIcAtiOn/vNd.acCpac.sIMPLY.aSo"), Ok(APPLICATION_VND_ACCPAC_SIMPLY_ASO));
    }

    /// `application/vnd.accpac.simply.imp`
    pub const APPLICATION_VND_ACCPAC_SIMPLY_IMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAccpacSimplyImp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_accpac_simply_imp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.accpac.simply.imp"), Ok(APPLICATION_VND_ACCPAC_SIMPLY_IMP));
        assert_eq!(crate::Mime::parse("aPpLIcaTiOn/Vnd.AccpAC.simPlY.imp"), Ok(APPLICATION_VND_ACCPAC_SIMPLY_IMP));
    }

    /// `application/vnd.acucobol`
    pub const APPLICATION_VND_ACUCOBOL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAcucobol),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_acucobol_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.acucobol"), Ok(APPLICATION_VND_ACUCOBOL));
        assert_eq!(crate::Mime::parse("appLicaTIOn/vnD.AcUCOBoL"), Ok(APPLICATION_VND_ACUCOBOL));
    }

    /// `application/vnd.acucorp`
    pub const APPLICATION_VND_ACUCORP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAcucorp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_acucorp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.acucorp"), Ok(APPLICATION_VND_ACUCORP));
        assert_eq!(crate::Mime::parse("AppLicATIOn/VnD.aCucOrP"), Ok(APPLICATION_VND_ACUCORP));
    }

    /// `application/vnd.adobe.flash.movie`
    pub const APPLICATION_VND_ADOBE_FLASH_MOVIE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAdobeFlashMovie),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_adobe_flash_movie_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.adobe.flash.movie"), Ok(APPLICATION_VND_ADOBE_FLASH_MOVIE));
        assert_eq!(crate::Mime::parse("ApPLIcaTioN/vNd.adobe.flasH.mOVIE"), Ok(APPLICATION_VND_ADOBE_FLASH_MOVIE));
    }

    /// `application/vnd.adobe.formscentral.fcdt`
    pub const APPLICATION_VND_ADOBE_FORMSCENTRAL_FCDT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAdobeFormscentralFcdt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_adobe_formscentral_fcdt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.adobe.formscentral.fcdt"), Ok(APPLICATION_VND_ADOBE_FORMSCENTRAL_FCDT));
        assert_eq!(crate::Mime::parse("APPliCAtIOn/Vnd.aDobE.ForMSCEnTrAL.FCdT"), Ok(APPLICATION_VND_ADOBE_FORMSCENTRAL_FCDT));
    }

    /// `application/vnd.adobe.fxp`
    pub const APPLICATION_VND_ADOBE_FXP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAdobeFxp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_adobe_fxp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.adobe.fxp"), Ok(APPLICATION_VND_ADOBE_FXP));
        assert_eq!(crate::Mime::parse("aPpLIcATIon/vNd.adObe.fxP"), Ok(APPLICATION_VND_ADOBE_FXP));
    }

    /// `application/vnd.adobe.partial-upload`
    pub const APPLICATION_VND_ADOBE_PARTIAL_UPLOAD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAdobePartialUpload),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_adobe_partial_upload_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.adobe.partial-upload"), Ok(APPLICATION_VND_ADOBE_PARTIAL_UPLOAD));
        assert_eq!(crate::Mime::parse("AppLIcatIOn/vNd.adOBE.pARtIaL-UpLoad"), Ok(APPLICATION_VND_ADOBE_PARTIAL_UPLOAD));
    }

    /// `application/vnd.adobe.xdp+xml`
    pub const APPLICATION_VND_ADOBE_XDP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAdobeXdp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_adobe_xdp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.adobe.xdp+xml"), Ok(APPLICATION_VND_ADOBE_XDP_XML));
        assert_eq!(crate::Mime::parse("ApplIcaTIon/vnd.adOBe.xDp+xML"), Ok(APPLICATION_VND_ADOBE_XDP_XML));
    }

    /// `application/vnd.adobe.xfdf`
    pub const APPLICATION_VND_ADOBE_XFDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAdobeXfdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_adobe_xfdf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.adobe.xfdf"), Ok(APPLICATION_VND_ADOBE_XFDF));
        assert_eq!(crate::Mime::parse("ApplicATIOn/vnD.aDoBE.XFdF"), Ok(APPLICATION_VND_ADOBE_XFDF));
    }

    /// `application/vnd.aether.imp`
    pub const APPLICATION_VND_AETHER_IMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAetherImp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_aether_imp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.aether.imp"), Ok(APPLICATION_VND_AETHER_IMP));
        assert_eq!(crate::Mime::parse("aPplicAtION/vnd.AetHeR.Imp"), Ok(APPLICATION_VND_AETHER_IMP));
    }

    /// `application/vnd.afpc.afplinedata`
    pub const APPLICATION_VND_AFPC_AFPLINEDATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcAfplinedata),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_afplinedata_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.afplinedata"), Ok(APPLICATION_VND_AFPC_AFPLINEDATA));
        assert_eq!(crate::Mime::parse("aPPLIcATiOn/vnd.AFPC.afPliNEDATA"), Ok(APPLICATION_VND_AFPC_AFPLINEDATA));
    }

    /// `application/vnd.afpc.afplinedata-pagedef`
    pub const APPLICATION_VND_AFPC_AFPLINEDATA_PAGEDEF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcAfplinedataPagedef),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_afplinedata_pagedef_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.afplinedata-pagedef"), Ok(APPLICATION_VND_AFPC_AFPLINEDATA_PAGEDEF));
        assert_eq!(crate::Mime::parse("ApplicATIon/vNd.afpc.AFpLiNEdaTa-pagEDeF"), Ok(APPLICATION_VND_AFPC_AFPLINEDATA_PAGEDEF));
    }

    /// `application/vnd.afpc.cmoca-cmresource`
    pub const APPLICATION_VND_AFPC_CMOCA_CMRESOURCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcCmocaCmresource),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_cmoca_cmresource_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.cmoca-cmresource"), Ok(APPLICATION_VND_AFPC_CMOCA_CMRESOURCE));
        assert_eq!(crate::Mime::parse("APPLiCaTIoN/VnD.AFPC.CmOCA-CMRESOUrCe"), Ok(APPLICATION_VND_AFPC_CMOCA_CMRESOURCE));
    }

    /// `application/vnd.afpc.foca-charset`
    pub const APPLICATION_VND_AFPC_FOCA_CHARSET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcFocaCharset),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_foca_charset_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.foca-charset"), Ok(APPLICATION_VND_AFPC_FOCA_CHARSET));
        assert_eq!(crate::Mime::parse("ApplIcaTIoN/VnD.aFpc.focA-cHArsEt"), Ok(APPLICATION_VND_AFPC_FOCA_CHARSET));
    }

    /// `application/vnd.afpc.foca-codedfont`
    pub const APPLICATION_VND_AFPC_FOCA_CODEDFONT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcFocaCodedfont),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_foca_codedfont_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.foca-codedfont"), Ok(APPLICATION_VND_AFPC_FOCA_CODEDFONT));
        assert_eq!(crate::Mime::parse("APPlICAtIoN/vnd.AfpC.FOCa-CODeDfONt"), Ok(APPLICATION_VND_AFPC_FOCA_CODEDFONT));
    }

    /// `application/vnd.afpc.foca-codepage`
    pub const APPLICATION_VND_AFPC_FOCA_CODEPAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcFocaCodepage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_foca_codepage_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.foca-codepage"), Ok(APPLICATION_VND_AFPC_FOCA_CODEPAGE));
        assert_eq!(crate::Mime::parse("appLIcATIoN/VNd.afpc.FOca-codepAgE"), Ok(APPLICATION_VND_AFPC_FOCA_CODEPAGE));
    }

    /// `application/vnd.afpc.modca`
    pub const APPLICATION_VND_AFPC_MODCA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcModca),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_modca_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.modca"), Ok(APPLICATION_VND_AFPC_MODCA));
        assert_eq!(crate::Mime::parse("APpLiCATiOn/vND.afPc.mOdCA"), Ok(APPLICATION_VND_AFPC_MODCA));
    }

    /// `application/vnd.afpc.modca-formdef`
    pub const APPLICATION_VND_AFPC_MODCA_FORMDEF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcModcaFormdef),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_modca_formdef_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.modca-formdef"), Ok(APPLICATION_VND_AFPC_MODCA_FORMDEF));
        assert_eq!(crate::Mime::parse("ApPlICaTIOn/VNd.AFpC.modca-FoRMdef"), Ok(APPLICATION_VND_AFPC_MODCA_FORMDEF));
    }

    /// `application/vnd.afpc.modca-mediummap`
    pub const APPLICATION_VND_AFPC_MODCA_MEDIUMMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcModcaMediummap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_modca_mediummap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.modca-mediummap"), Ok(APPLICATION_VND_AFPC_MODCA_MEDIUMMAP));
        assert_eq!(crate::Mime::parse("applIcaTIOn/VNd.afpC.moDca-mEdIuMMAP"), Ok(APPLICATION_VND_AFPC_MODCA_MEDIUMMAP));
    }

    /// `application/vnd.afpc.modca-objectcontainer`
    pub const APPLICATION_VND_AFPC_MODCA_OBJECTCONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcModcaObjectcontainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_modca_objectcontainer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.modca-objectcontainer"), Ok(APPLICATION_VND_AFPC_MODCA_OBJECTCONTAINER));
        assert_eq!(crate::Mime::parse("ApPliCAtIOn/vNd.afPc.moDCA-obJectconTaiNeR"), Ok(APPLICATION_VND_AFPC_MODCA_OBJECTCONTAINER));
    }

    /// `application/vnd.afpc.modca-overlay`
    pub const APPLICATION_VND_AFPC_MODCA_OVERLAY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcModcaOverlay),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_modca_overlay_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.modca-overlay"), Ok(APPLICATION_VND_AFPC_MODCA_OVERLAY));
        assert_eq!(crate::Mime::parse("appLICATiON/vND.AFPC.modCA-oVERLay"), Ok(APPLICATION_VND_AFPC_MODCA_OVERLAY));
    }

    /// `application/vnd.afpc.modca-pagesegment`
    pub const APPLICATION_VND_AFPC_MODCA_PAGESEGMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAfpcModcaPagesegment),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_afpc_modca_pagesegment_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.afpc.modca-pagesegment"), Ok(APPLICATION_VND_AFPC_MODCA_PAGESEGMENT));
        assert_eq!(crate::Mime::parse("APpLICAtioN/VnD.AFpc.mODCa-pAGeSEGmENt"), Ok(APPLICATION_VND_AFPC_MODCA_PAGESEGMENT));
    }

    /// `application/vnd.age`
    pub const APPLICATION_VND_AGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAge),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_age_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.age"), Ok(APPLICATION_VND_AGE));
        assert_eq!(crate::Mime::parse("APPliCatION/VnD.AGE"), Ok(APPLICATION_VND_AGE));
    }

    /// `application/vnd.ah-barcode`
    pub const APPLICATION_VND_AH_BARCODE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAhBarcode),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ah_barcode_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ah-barcode"), Ok(APPLICATION_VND_AH_BARCODE));
        assert_eq!(crate::Mime::parse("APpliCATIOn/vnd.Ah-barcode"), Ok(APPLICATION_VND_AH_BARCODE));
    }

    /// `application/vnd.ahead.space`
    pub const APPLICATION_VND_AHEAD_SPACE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAheadSpace),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ahead_space_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ahead.space"), Ok(APPLICATION_VND_AHEAD_SPACE));
        assert_eq!(crate::Mime::parse("APPLicATIoN/vnD.AHeAd.SpaCE"), Ok(APPLICATION_VND_AHEAD_SPACE));
    }

    /// `application/vnd.airzip.filesecure.azf`
    pub const APPLICATION_VND_AIRZIP_FILESECURE_AZF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAirzipFilesecureAzf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_airzip_filesecure_azf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.airzip.filesecure.azf"), Ok(APPLICATION_VND_AIRZIP_FILESECURE_AZF));
        assert_eq!(crate::Mime::parse("aPPlicatIOn/VNd.AIrzip.fIlEsEcUrE.AZF"), Ok(APPLICATION_VND_AIRZIP_FILESECURE_AZF));
    }

    /// `application/vnd.airzip.filesecure.azs`
    pub const APPLICATION_VND_AIRZIP_FILESECURE_AZS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAirzipFilesecureAzs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_airzip_filesecure_azs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.airzip.filesecure.azs"), Ok(APPLICATION_VND_AIRZIP_FILESECURE_AZS));
        assert_eq!(crate::Mime::parse("apPLICATIon/VND.aIrzIP.FIlEseCURe.azs"), Ok(APPLICATION_VND_AIRZIP_FILESECURE_AZS));
    }

    /// `application/vnd.amadeus+json`
    pub const APPLICATION_VND_AMADEUS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAmadeus),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_amadeus_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.amadeus+json"), Ok(APPLICATION_VND_AMADEUS_JSON));
        assert_eq!(crate::Mime::parse("appLiCatION/vNd.AmADeUs+jsOn"), Ok(APPLICATION_VND_AMADEUS_JSON));
    }

    /// `application/vnd.amazon.mobi8-ebook`
    pub const APPLICATION_VND_AMAZON_MOBI8_EBOOK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAmazonMobi8Ebook),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_amazon_mobi8_ebook_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.amazon.mobi8-ebook"), Ok(APPLICATION_VND_AMAZON_MOBI8_EBOOK));
        assert_eq!(crate::Mime::parse("APPliCaTION/VNd.amAZOn.moBI8-eBOoK"), Ok(APPLICATION_VND_AMAZON_MOBI8_EBOOK));
    }

    /// `application/vnd.americandynamics.acc`
    pub const APPLICATION_VND_AMERICANDYNAMICS_ACC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAmericandynamicsAcc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_americandynamics_acc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.americandynamics.acc"), Ok(APPLICATION_VND_AMERICANDYNAMICS_ACC));
        assert_eq!(crate::Mime::parse("apPliCAtIon/VNd.AMErICaNDYNAMiCS.aCc"), Ok(APPLICATION_VND_AMERICANDYNAMICS_ACC));
    }

    /// `application/vnd.amiga.ami`
    pub const APPLICATION_VND_AMIGA_AMI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAmigaAmi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_amiga_ami_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.amiga.ami"), Ok(APPLICATION_VND_AMIGA_AMI));
        assert_eq!(crate::Mime::parse("AppLICAtioN/vnD.Amiga.ami"), Ok(APPLICATION_VND_AMIGA_AMI));
    }

    /// `application/vnd.amundsen.maze+xml`
    pub const APPLICATION_VND_AMUNDSEN_MAZE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAmundsenMaze),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_amundsen_maze_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.amundsen.maze+xml"), Ok(APPLICATION_VND_AMUNDSEN_MAZE_XML));
        assert_eq!(crate::Mime::parse("AppLIcatION/VNd.AmUNDSen.MazE+XML"), Ok(APPLICATION_VND_AMUNDSEN_MAZE_XML));
    }

    /// `application/vnd.android.ota`
    pub const APPLICATION_VND_ANDROID_OTA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAndroidOta),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_android_ota_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.android.ota"), Ok(APPLICATION_VND_ANDROID_OTA));
        assert_eq!(crate::Mime::parse("APpLIcatiOn/VNd.ANdroid.oTa"), Ok(APPLICATION_VND_ANDROID_OTA));
    }

    /// `application/vnd.android.package-archive`
    pub const APPLICATION_VND_ANDROID_PACKAGE_ARCHIVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAndroidPackageArchive),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_android_package_archive_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.android.package-archive"), Ok(APPLICATION_VND_ANDROID_PACKAGE_ARCHIVE));
        assert_eq!(crate::Mime::parse("APPLicATioN/VNd.aNdrOid.PaCKaGE-ArChivE"), Ok(APPLICATION_VND_ANDROID_PACKAGE_ARCHIVE));
    }

    /// `application/vnd.anki`
    pub const APPLICATION_VND_ANKI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAnki),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_anki_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.anki"), Ok(APPLICATION_VND_ANKI));
        assert_eq!(crate::Mime::parse("APpLiCatIOn/VNd.ankI"), Ok(APPLICATION_VND_ANKI));
    }

    /// `application/vnd.anser-web-certificate-issue-initiation`
    pub const APPLICATION_VND_ANSER_WEB_CERTIFICATE_ISSUE_INITIATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAnserWebCertificateIssueInitiation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_anser_web_certificate_issue_initiation_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.anser-web-certificate-issue-initiation"), Ok(APPLICATION_VND_ANSER_WEB_CERTIFICATE_ISSUE_INITIATION));
        assert_eq!(crate::Mime::parse("aPPlICAtiON/VnD.AnseR-wEB-CertiFiCATE-ISsue-iNITIatIOn"), Ok(APPLICATION_VND_ANSER_WEB_CERTIFICATE_ISSUE_INITIATION));
    }

    /// `application/vnd.anser-web-funds-transfer-initiation`
    pub const APPLICATION_VND_ANSER_WEB_FUNDS_TRANSFER_INITIATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAnserWebFundsTransferInitiation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_anser_web_funds_transfer_initiation_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.anser-web-funds-transfer-initiation"), Ok(APPLICATION_VND_ANSER_WEB_FUNDS_TRANSFER_INITIATION));
        assert_eq!(crate::Mime::parse("APPliCaTion/VND.AnsER-weB-fUNDS-tRANsFEr-initIaTIOn"), Ok(APPLICATION_VND_ANSER_WEB_FUNDS_TRANSFER_INITIATION));
    }

    /// `application/vnd.antix.game-component`
    pub const APPLICATION_VND_ANTIX_GAME_COMPONENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAntixGameComponent),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_antix_game_component_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.antix.game-component"), Ok(APPLICATION_VND_ANTIX_GAME_COMPONENT));
        assert_eq!(crate::Mime::parse("appLIcATIoN/vnd.antIX.gAme-CompOnENT"), Ok(APPLICATION_VND_ANTIX_GAME_COMPONENT));
    }

    /// `application/vnd.apache.arrow.file`
    pub const APPLICATION_VND_APACHE_ARROW_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApacheArrowFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apache_arrow_file_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apache.arrow.file"), Ok(APPLICATION_VND_APACHE_ARROW_FILE));
        assert_eq!(crate::Mime::parse("ApplIcAtIOn/vnD.ApAcHe.arRoW.File"), Ok(APPLICATION_VND_APACHE_ARROW_FILE));
    }

    /// `application/vnd.apache.arrow.stream`
    pub const APPLICATION_VND_APACHE_ARROW_STREAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApacheArrowStream),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apache_arrow_stream_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apache.arrow.stream"), Ok(APPLICATION_VND_APACHE_ARROW_STREAM));
        assert_eq!(crate::Mime::parse("aPpLIcATiON/VNd.aPACHe.ArRow.sTreaM"), Ok(APPLICATION_VND_APACHE_ARROW_STREAM));
    }

    /// `application/vnd.apache.thrift.binary`
    pub const APPLICATION_VND_APACHE_THRIFT_BINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApacheThriftBinary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apache_thrift_binary_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apache.thrift.binary"), Ok(APPLICATION_VND_APACHE_THRIFT_BINARY));
        assert_eq!(crate::Mime::parse("aPPLIcatioN/VnD.aPAChE.thrifT.binaRy"), Ok(APPLICATION_VND_APACHE_THRIFT_BINARY));
    }

    /// `application/vnd.apache.thrift.compact`
    pub const APPLICATION_VND_APACHE_THRIFT_COMPACT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApacheThriftCompact),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apache_thrift_compact_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apache.thrift.compact"), Ok(APPLICATION_VND_APACHE_THRIFT_COMPACT));
        assert_eq!(crate::Mime::parse("aPPLICation/VNd.aPaCHE.ThRIFT.CompaCT"), Ok(APPLICATION_VND_APACHE_THRIFT_COMPACT));
    }

    /// `application/vnd.apache.thrift.json`
    pub const APPLICATION_VND_APACHE_THRIFT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApacheThriftJson),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apache_thrift_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apache.thrift.json"), Ok(APPLICATION_VND_APACHE_THRIFT_JSON));
        assert_eq!(crate::Mime::parse("appLIcAtIoN/Vnd.apacHE.thrIfT.JSon"), Ok(APPLICATION_VND_APACHE_THRIFT_JSON));
    }

    /// `application/vnd.api+json`
    pub const APPLICATION_VND_API_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApi),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_api_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.api+json"), Ok(APPLICATION_VND_API_JSON));
        assert_eq!(crate::Mime::parse("aPPLICAtIOn/vNd.apI+jSOn"), Ok(APPLICATION_VND_API_JSON));
    }

    /// `application/vnd.aplextor.warrp+json`
    pub const APPLICATION_VND_APLEXTOR_WARRP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAplextorWarrp),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_aplextor_warrp_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.aplextor.warrp+json"), Ok(APPLICATION_VND_APLEXTOR_WARRP_JSON));
        assert_eq!(crate::Mime::parse("apPLiCaTion/vnd.aPLExtor.WarrP+jSON"), Ok(APPLICATION_VND_APLEXTOR_WARRP_JSON));
    }

    /// `application/vnd.apothekende.reservation+json`
    pub const APPLICATION_VND_APOTHEKENDE_RESERVATION_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApothekendeReservation),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_apothekende_reservation_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apothekende.reservation+json"), Ok(APPLICATION_VND_APOTHEKENDE_RESERVATION_JSON));
        assert_eq!(crate::Mime::parse("APpLICatiOn/vnd.aPotHEKENdE.rEServAtIon+jSON"), Ok(APPLICATION_VND_APOTHEKENDE_RESERVATION_JSON));
    }

    /// `application/vnd.apple.installer+xml`
    pub const APPLICATION_VND_APPLE_INSTALLER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAppleInstaller),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_apple_installer_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apple.installer+xml"), Ok(APPLICATION_VND_APPLE_INSTALLER_XML));
        assert_eq!(crate::Mime::parse("APPLicatIon/VnD.ApPLe.inStAlLer+xml"), Ok(APPLICATION_VND_APPLE_INSTALLER_XML));
    }

    /// `application/vnd.apple.keynote`
    pub const APPLICATION_VND_APPLE_KEYNOTE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAppleKeynote),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apple_keynote_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apple.keynote"), Ok(APPLICATION_VND_APPLE_KEYNOTE));
        assert_eq!(crate::Mime::parse("ApPLicaTiOn/VNd.appLe.keyNoTE"), Ok(APPLICATION_VND_APPLE_KEYNOTE));
    }

    /// `application/vnd.apple.mpegurl`
    pub const APPLICATION_VND_APPLE_MPEGURL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAppleMpegurl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apple_mpegurl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apple.mpegurl"), Ok(APPLICATION_VND_APPLE_MPEGURL));
        assert_eq!(crate::Mime::parse("apPliCAtiON/vnD.Apple.mPEgurL"), Ok(APPLICATION_VND_APPLE_MPEGURL));
    }

    /// `application/vnd.apple.numbers`
    pub const APPLICATION_VND_APPLE_NUMBERS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAppleNumbers),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apple_numbers_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apple.numbers"), Ok(APPLICATION_VND_APPLE_NUMBERS));
        assert_eq!(crate::Mime::parse("apPliCaTIOn/Vnd.apPle.nUMbeRS"), Ok(APPLICATION_VND_APPLE_NUMBERS));
    }

    /// `application/vnd.apple.pages`
    pub const APPLICATION_VND_APPLE_PAGES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndApplePages),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_apple_pages_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.apple.pages"), Ok(APPLICATION_VND_APPLE_PAGES));
        assert_eq!(crate::Mime::parse("APPLiCATIon/vnD.APpLE.pAGES"), Ok(APPLICATION_VND_APPLE_PAGES));
    }

    /// `application/vnd.aristanetworks.swi`
    pub const APPLICATION_VND_ARISTANETWORKS_SWI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAristanetworksSwi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_aristanetworks_swi_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.aristanetworks.swi"), Ok(APPLICATION_VND_ARISTANETWORKS_SWI));
        assert_eq!(crate::Mime::parse("appliCatIoN/vND.arIstANeTworkS.Swi"), Ok(APPLICATION_VND_ARISTANETWORKS_SWI));
    }

    /// `application/vnd.artisan+json`
    pub const APPLICATION_VND_ARTISAN_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndArtisan),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_artisan_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.artisan+json"), Ok(APPLICATION_VND_ARTISAN_JSON));
        assert_eq!(crate::Mime::parse("ApplIcAtion/vND.arTisAN+json"), Ok(APPLICATION_VND_ARTISAN_JSON));
    }

    /// `application/vnd.artsquare`
    pub const APPLICATION_VND_ARTSQUARE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndArtsquare),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_artsquare_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.artsquare"), Ok(APPLICATION_VND_ARTSQUARE));
        assert_eq!(crate::Mime::parse("applicATIon/vnd.ARtSQuaRe"), Ok(APPLICATION_VND_ARTSQUARE));
    }

    /// `application/vnd.astraea-software.iota`
    pub const APPLICATION_VND_ASTRAEA_SOFTWARE_IOTA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAstraeaSoftwareIota),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_astraea_software_iota_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.astraea-software.iota"), Ok(APPLICATION_VND_ASTRAEA_SOFTWARE_IOTA));
        assert_eq!(crate::Mime::parse("ApplicATIOn/VNd.AstrAEA-soFTWare.iOTa"), Ok(APPLICATION_VND_ASTRAEA_SOFTWARE_IOTA));
    }

    /// `application/vnd.audiograph`
    pub const APPLICATION_VND_AUDIOGRAPH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAudiograph),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_audiograph_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.audiograph"), Ok(APPLICATION_VND_AUDIOGRAPH));
        assert_eq!(crate::Mime::parse("apPlicAtioN/VNd.AudIoGrAPh"), Ok(APPLICATION_VND_AUDIOGRAPH));
    }

    /// `application/vnd.autopackage`
    pub const APPLICATION_VND_AUTOPACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAutopackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_autopackage_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.autopackage"), Ok(APPLICATION_VND_AUTOPACKAGE));
        assert_eq!(crate::Mime::parse("AppLiCaTioN/vNd.AutoPaCKage"), Ok(APPLICATION_VND_AUTOPACKAGE));
    }

    /// `application/vnd.avalon+json`
    pub const APPLICATION_VND_AVALON_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAvalon),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_avalon_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.avalon+json"), Ok(APPLICATION_VND_AVALON_JSON));
        assert_eq!(crate::Mime::parse("appLICaTIoN/Vnd.aValON+jSoN"), Ok(APPLICATION_VND_AVALON_JSON));
    }

    /// `application/vnd.avistar+xml`
    pub const APPLICATION_VND_AVISTAR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndAvistar),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_avistar_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.avistar+xml"), Ok(APPLICATION_VND_AVISTAR_XML));
        assert_eq!(crate::Mime::parse("ApplICatIOn/VnD.aViSTAr+XmL"), Ok(APPLICATION_VND_AVISTAR_XML));
    }

    /// `application/vnd.balsamiq.bmml+xml`
    pub const APPLICATION_VND_BALSAMIQ_BMML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBalsamiqBmml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_balsamiq_bmml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.balsamiq.bmml+xml"), Ok(APPLICATION_VND_BALSAMIQ_BMML_XML));
        assert_eq!(crate::Mime::parse("APPLicaTIon/vnd.baLSamIq.bMMl+XmL"), Ok(APPLICATION_VND_BALSAMIQ_BMML_XML));
    }

    /// `application/vnd.balsamiq.bmpr`
    pub const APPLICATION_VND_BALSAMIQ_BMPR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBalsamiqBmpr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_balsamiq_bmpr_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.balsamiq.bmpr"), Ok(APPLICATION_VND_BALSAMIQ_BMPR));
        assert_eq!(crate::Mime::parse("AppliCaTIOn/vND.BALSamIq.bmpr"), Ok(APPLICATION_VND_BALSAMIQ_BMPR));
    }

    /// `application/vnd.banana-accounting`
    pub const APPLICATION_VND_BANANA_ACCOUNTING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBananaAccounting),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_banana_accounting_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.banana-accounting"), Ok(APPLICATION_VND_BANANA_ACCOUNTING));
        assert_eq!(crate::Mime::parse("APplICatioN/VNd.BAnanA-AcCOuNTInG"), Ok(APPLICATION_VND_BANANA_ACCOUNTING));
    }

    /// `application/vnd.bbf.usp.error`
    pub const APPLICATION_VND_BBF_USP_ERROR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBbfUspError),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bbf_usp_error_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bbf.usp.error"), Ok(APPLICATION_VND_BBF_USP_ERROR));
        assert_eq!(crate::Mime::parse("APPLIcatIon/VNd.bbf.uSp.errOR"), Ok(APPLICATION_VND_BBF_USP_ERROR));
    }

    /// `application/vnd.bbf.usp.msg`
    pub const APPLICATION_VND_BBF_USP_MSG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBbfUspMsg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bbf_usp_msg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bbf.usp.msg"), Ok(APPLICATION_VND_BBF_USP_MSG));
        assert_eq!(crate::Mime::parse("APpLIcAtIOn/vnd.BBF.USP.MSG"), Ok(APPLICATION_VND_BBF_USP_MSG));
    }

    /// `application/vnd.bbf.usp.msg+json`
    pub const APPLICATION_VND_BBF_USP_MSG_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBbfUspMsg),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_bbf_usp_msg_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bbf.usp.msg+json"), Ok(APPLICATION_VND_BBF_USP_MSG_JSON));
        assert_eq!(crate::Mime::parse("AppliCAtiON/vnD.BBF.usp.MSg+jSoN"), Ok(APPLICATION_VND_BBF_USP_MSG_JSON));
    }

    /// `application/vnd.bekitzur-stech+json`
    pub const APPLICATION_VND_BEKITZUR_STECH_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBekitzurStech),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_bekitzur_stech_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bekitzur-stech+json"), Ok(APPLICATION_VND_BEKITZUR_STECH_JSON));
        assert_eq!(crate::Mime::parse("aPpLICAtiON/vnD.bekITzur-STEcH+JSoN"), Ok(APPLICATION_VND_BEKITZUR_STECH_JSON));
    }

    /// `application/vnd.bint.med-content`
    pub const APPLICATION_VND_BINT_MED_CONTENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBintMedContent),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bint_med_content_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bint.med-content"), Ok(APPLICATION_VND_BINT_MED_CONTENT));
        assert_eq!(crate::Mime::parse("apPlicAtIOn/VNd.biNT.MEd-content"), Ok(APPLICATION_VND_BINT_MED_CONTENT));
    }

    /// `application/vnd.biopax.rdf+xml`
    pub const APPLICATION_VND_BIOPAX_RDF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBiopaxRdf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_biopax_rdf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.biopax.rdf+xml"), Ok(APPLICATION_VND_BIOPAX_RDF_XML));
        assert_eq!(crate::Mime::parse("aPPlICATIoN/vnd.BiOPax.rDF+xML"), Ok(APPLICATION_VND_BIOPAX_RDF_XML));
    }

    /// `application/vnd.blink-idb-value-wrapper`
    pub const APPLICATION_VND_BLINK_IDB_VALUE_WRAPPER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBlinkIdbValueWrapper),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_blink_idb_value_wrapper_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.blink-idb-value-wrapper"), Ok(APPLICATION_VND_BLINK_IDB_VALUE_WRAPPER));
        assert_eq!(crate::Mime::parse("aPPLICATIon/VND.blINk-iDB-vAluE-WrAPpEr"), Ok(APPLICATION_VND_BLINK_IDB_VALUE_WRAPPER));
    }

    /// `application/vnd.blueice.multipass`
    pub const APPLICATION_VND_BLUEICE_MULTIPASS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBlueiceMultipass),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_blueice_multipass_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.blueice.multipass"), Ok(APPLICATION_VND_BLUEICE_MULTIPASS));
        assert_eq!(crate::Mime::parse("apPLIcAtiON/Vnd.bLuEICE.MULtIpAsS"), Ok(APPLICATION_VND_BLUEICE_MULTIPASS));
    }

    /// `application/vnd.bluetooth.ep.oob`
    pub const APPLICATION_VND_BLUETOOTH_EP_OOB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBluetoothEpOob),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bluetooth_ep_oob_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bluetooth.ep.oob"), Ok(APPLICATION_VND_BLUETOOTH_EP_OOB));
        assert_eq!(crate::Mime::parse("ApPlICation/VnD.bLueToOTH.eP.oOb"), Ok(APPLICATION_VND_BLUETOOTH_EP_OOB));
    }

    /// `application/vnd.bluetooth.le.oob`
    pub const APPLICATION_VND_BLUETOOTH_LE_OOB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBluetoothLeOob),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bluetooth_le_oob_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bluetooth.le.oob"), Ok(APPLICATION_VND_BLUETOOTH_LE_OOB));
        assert_eq!(crate::Mime::parse("aPPLicaTION/vNd.bLuEtOoTh.lE.ooB"), Ok(APPLICATION_VND_BLUETOOTH_LE_OOB));
    }

    /// `application/vnd.bmi`
    pub const APPLICATION_VND_BMI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBmi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bmi_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bmi"), Ok(APPLICATION_VND_BMI));
        assert_eq!(crate::Mime::parse("AppLIcaTion/Vnd.bmi"), Ok(APPLICATION_VND_BMI));
    }

    /// `application/vnd.bpf`
    pub const APPLICATION_VND_BPF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBpf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bpf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bpf"), Ok(APPLICATION_VND_BPF));
        assert_eq!(crate::Mime::parse("apPLiCaTioN/vnD.bpF"), Ok(APPLICATION_VND_BPF));
    }

    /// `application/vnd.bpf3`
    pub const APPLICATION_VND_BPF3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBpf3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_bpf3_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.bpf3"), Ok(APPLICATION_VND_BPF3));
        assert_eq!(crate::Mime::parse("applicATION/VND.BpF3"), Ok(APPLICATION_VND_BPF3));
    }

    /// `application/vnd.businessobjects`
    pub const APPLICATION_VND_BUSINESSOBJECTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndBusinessobjects),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_businessobjects_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.businessobjects"), Ok(APPLICATION_VND_BUSINESSOBJECTS));
        assert_eq!(crate::Mime::parse("aPPLiCation/Vnd.busiNeSSobJectS"), Ok(APPLICATION_VND_BUSINESSOBJECTS));
    }

    /// `application/vnd.byu.uapi+json`
    pub const APPLICATION_VND_BYU_UAPI_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndByuUapi),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_byu_uapi_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.byu.uapi+json"), Ok(APPLICATION_VND_BYU_UAPI_JSON));
        assert_eq!(crate::Mime::parse("APPlicaTiON/vND.bYU.uaPI+Json"), Ok(APPLICATION_VND_BYU_UAPI_JSON));
    }

    /// `application/vnd.cab-jscript`
    pub const APPLICATION_VND_CAB_JSCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCabJscript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cab_jscript_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cab-jscript"), Ok(APPLICATION_VND_CAB_JSCRIPT));
        assert_eq!(crate::Mime::parse("APpLicATioN/VnD.cAb-jsCriPT"), Ok(APPLICATION_VND_CAB_JSCRIPT));
    }

    /// `application/vnd.canon-cpdl`
    pub const APPLICATION_VND_CANON_CPDL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCanonCpdl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_canon_cpdl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.canon-cpdl"), Ok(APPLICATION_VND_CANON_CPDL));
        assert_eq!(crate::Mime::parse("apPLICATIOn/vnd.caNoN-CPDl"), Ok(APPLICATION_VND_CANON_CPDL));
    }

    /// `application/vnd.canon-lips`
    pub const APPLICATION_VND_CANON_LIPS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCanonLips),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_canon_lips_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.canon-lips"), Ok(APPLICATION_VND_CANON_LIPS));
        assert_eq!(crate::Mime::parse("appLICaTION/VNd.caNoN-lIPS"), Ok(APPLICATION_VND_CANON_LIPS));
    }

    /// `application/vnd.capasystems-pg+json`
    pub const APPLICATION_VND_CAPASYSTEMS_PG_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCapasystemsPg),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_capasystems_pg_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.capasystems-pg+json"), Ok(APPLICATION_VND_CAPASYSTEMS_PG_JSON));
        assert_eq!(crate::Mime::parse("aPPLICATion/vnD.CApasystEms-Pg+JsON"), Ok(APPLICATION_VND_CAPASYSTEMS_PG_JSON));
    }

    /// `application/vnd.cendio.thinlinc.clientconf`
    pub const APPLICATION_VND_CENDIO_THINLINC_CLIENTCONF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCendioThinlincClientconf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cendio_thinlinc_clientconf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cendio.thinlinc.clientconf"), Ok(APPLICATION_VND_CENDIO_THINLINC_CLIENTCONF));
        assert_eq!(crate::Mime::parse("APPLicAtiON/VND.cEnDio.THiNlinc.CLiEnTconf"), Ok(APPLICATION_VND_CENDIO_THINLINC_CLIENTCONF));
    }

    /// `application/vnd.century-systems.tcp_stream`
    pub const APPLICATION_VND_CENTURY_SYSTEMS_TCP_STREAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCenturySystemsTcpStream),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_century_systems_tcp_stream_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.century-systems.tcp_stream"), Ok(APPLICATION_VND_CENTURY_SYSTEMS_TCP_STREAM));
        assert_eq!(crate::Mime::parse("APpLiCATION/VnD.ceNtUry-sYSteMS.TcP_STreAm"), Ok(APPLICATION_VND_CENTURY_SYSTEMS_TCP_STREAM));
    }

    /// `application/vnd.chemdraw+xml`
    pub const APPLICATION_VND_CHEMDRAW_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndChemdraw),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_chemdraw_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.chemdraw+xml"), Ok(APPLICATION_VND_CHEMDRAW_XML));
        assert_eq!(crate::Mime::parse("AppLIcaTiON/vND.chEmDRAw+xmL"), Ok(APPLICATION_VND_CHEMDRAW_XML));
    }

    /// `application/vnd.chess-pgn`
    pub const APPLICATION_VND_CHESS_PGN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndChessPgn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_chess_pgn_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.chess-pgn"), Ok(APPLICATION_VND_CHESS_PGN));
        assert_eq!(crate::Mime::parse("aPPLicatIOn/VNd.CHeSs-Pgn"), Ok(APPLICATION_VND_CHESS_PGN));
    }

    /// `application/vnd.chipnuts.karaoke-mmd`
    pub const APPLICATION_VND_CHIPNUTS_KARAOKE_MMD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndChipnutsKaraokeMmd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_chipnuts_karaoke_mmd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.chipnuts.karaoke-mmd"), Ok(APPLICATION_VND_CHIPNUTS_KARAOKE_MMD));
        assert_eq!(crate::Mime::parse("apPlIcaTION/vnd.CHiPNUtS.KaRAoKe-mmd"), Ok(APPLICATION_VND_CHIPNUTS_KARAOKE_MMD));
    }

    /// `application/vnd.ciedi`
    pub const APPLICATION_VND_CIEDI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCiedi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ciedi_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ciedi"), Ok(APPLICATION_VND_CIEDI));
        assert_eq!(crate::Mime::parse("APPlIcAtiON/Vnd.CiEdI"), Ok(APPLICATION_VND_CIEDI));
    }

    /// `application/vnd.cinderella`
    pub const APPLICATION_VND_CINDERELLA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCinderella),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cinderella_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cinderella"), Ok(APPLICATION_VND_CINDERELLA));
        assert_eq!(crate::Mime::parse("AppLiCAtION/VNd.cinDerElLa"), Ok(APPLICATION_VND_CINDERELLA));
    }

    /// `application/vnd.cirpack.isdn-ext`
    pub const APPLICATION_VND_CIRPACK_ISDN_EXT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCirpackIsdnExt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cirpack_isdn_ext_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cirpack.isdn-ext"), Ok(APPLICATION_VND_CIRPACK_ISDN_EXT));
        assert_eq!(crate::Mime::parse("apPlIcation/vND.CIRPaCk.Isdn-EXt"), Ok(APPLICATION_VND_CIRPACK_ISDN_EXT));
    }

    /// `application/vnd.citationstyles.style+xml`
    pub const APPLICATION_VND_CITATIONSTYLES_STYLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCitationstylesStyle),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_citationstyles_style_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.citationstyles.style+xml"), Ok(APPLICATION_VND_CITATIONSTYLES_STYLE_XML));
        assert_eq!(crate::Mime::parse("ApplICaTIon/vnD.cItAtIoNSTyLES.STYle+xml"), Ok(APPLICATION_VND_CITATIONSTYLES_STYLE_XML));
    }

    /// `application/vnd.claymore`
    pub const APPLICATION_VND_CLAYMORE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndClaymore),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_claymore_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.claymore"), Ok(APPLICATION_VND_CLAYMORE));
        assert_eq!(crate::Mime::parse("APPLICATioN/VnD.cLAYmorE"), Ok(APPLICATION_VND_CLAYMORE));
    }

    /// `application/vnd.cloanto.rp9`
    pub const APPLICATION_VND_CLOANTO_RP9: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCloantoRp9),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cloanto_rp9_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cloanto.rp9"), Ok(APPLICATION_VND_CLOANTO_RP9));
        assert_eq!(crate::Mime::parse("APPlicATion/vnD.CLOaNto.RP9"), Ok(APPLICATION_VND_CLOANTO_RP9));
    }

    /// `application/vnd.clonk.c4group`
    pub const APPLICATION_VND_CLONK_C4GROUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndClonkC4group),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_clonk_c4group_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.clonk.c4group"), Ok(APPLICATION_VND_CLONK_C4GROUP));
        assert_eq!(crate::Mime::parse("APPlICaTIoN/VND.clOnK.c4gRoUp"), Ok(APPLICATION_VND_CLONK_C4GROUP));
    }

    /// `application/vnd.cluetrust.cartomobile-config`
    pub const APPLICATION_VND_CLUETRUST_CARTOMOBILE_CONFIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCluetrustCartomobileConfig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cluetrust_cartomobile_config_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cluetrust.cartomobile-config"), Ok(APPLICATION_VND_CLUETRUST_CARTOMOBILE_CONFIG));
        assert_eq!(crate::Mime::parse("APpLIcatION/vNd.cLUETRUSt.CArToMObIle-COnfIG"), Ok(APPLICATION_VND_CLUETRUST_CARTOMOBILE_CONFIG));
    }

    /// `application/vnd.cluetrust.cartomobile-config-pkg`
    pub const APPLICATION_VND_CLUETRUST_CARTOMOBILE_CONFIG_PKG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCluetrustCartomobileConfigPkg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cluetrust_cartomobile_config_pkg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cluetrust.cartomobile-config-pkg"), Ok(APPLICATION_VND_CLUETRUST_CARTOMOBILE_CONFIG_PKG));
        assert_eq!(crate::Mime::parse("apPLiCaTion/vNd.CLuETRUsT.CArTOmobILe-ConfIg-pKG"), Ok(APPLICATION_VND_CLUETRUST_CARTOMOBILE_CONFIG_PKG));
    }

    /// `application/vnd.coffeescript`
    pub const APPLICATION_VND_COFFEESCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCoffeescript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_coffeescript_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.coffeescript"), Ok(APPLICATION_VND_COFFEESCRIPT));
        assert_eq!(crate::Mime::parse("appLicaTIon/VNd.CoffeeScriPt"), Ok(APPLICATION_VND_COFFEESCRIPT));
    }

    /// `application/vnd.collabio.xodocuments.document`
    pub const APPLICATION_VND_COLLABIO_XODOCUMENTS_DOCUMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollabioXodocumentsDocument),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_collabio_xodocuments_document_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collabio.xodocuments.document"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_DOCUMENT));
        assert_eq!(crate::Mime::parse("aPPlicaTioN/vnD.collAbio.XoDOcuMenTs.doCuMeNt"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_DOCUMENT));
    }

    /// `application/vnd.collabio.xodocuments.document-template`
    pub const APPLICATION_VND_COLLABIO_XODOCUMENTS_DOCUMENT_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollabioXodocumentsDocumentTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_collabio_xodocuments_document_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collabio.xodocuments.document-template"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_DOCUMENT_TEMPLATE));
        assert_eq!(crate::Mime::parse("aPplIcAtiON/Vnd.COlLABIo.xOdoCumenTS.DOcUMeNT-TEmPlAtE"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_DOCUMENT_TEMPLATE));
    }

    /// `application/vnd.collabio.xodocuments.presentation`
    pub const APPLICATION_VND_COLLABIO_XODOCUMENTS_PRESENTATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollabioXodocumentsPresentation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_collabio_xodocuments_presentation_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collabio.xodocuments.presentation"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_PRESENTATION));
        assert_eq!(crate::Mime::parse("applIcatioN/VND.cOlLABIo.XODOCUmeNTS.PreseNTatIon"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_PRESENTATION));
    }

    /// `application/vnd.collabio.xodocuments.presentation-template`
    pub const APPLICATION_VND_COLLABIO_XODOCUMENTS_PRESENTATION_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollabioXodocumentsPresentationTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_collabio_xodocuments_presentation_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collabio.xodocuments.presentation-template"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_PRESENTATION_TEMPLATE));
        assert_eq!(crate::Mime::parse("AppLICaTion/Vnd.cOlLabiO.XoDoCumeNTS.preseNtaTIon-teMPlaTE"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_PRESENTATION_TEMPLATE));
    }

    /// `application/vnd.collabio.xodocuments.spreadsheet`
    pub const APPLICATION_VND_COLLABIO_XODOCUMENTS_SPREADSHEET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollabioXodocumentsSpreadsheet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_collabio_xodocuments_spreadsheet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collabio.xodocuments.spreadsheet"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_SPREADSHEET));
        assert_eq!(crate::Mime::parse("APpLiCaTioN/Vnd.cOlLABiO.xODoCUMENTs.SpREAdsheET"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_SPREADSHEET));
    }

    /// `application/vnd.collabio.xodocuments.spreadsheet-template`
    pub const APPLICATION_VND_COLLABIO_XODOCUMENTS_SPREADSHEET_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollabioXodocumentsSpreadsheetTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_collabio_xodocuments_spreadsheet_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collabio.xodocuments.spreadsheet-template"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_SPREADSHEET_TEMPLATE));
        assert_eq!(crate::Mime::parse("ApPlicaTIoN/VNd.CoLLabio.xodOCUmENtS.SPreadSheet-TeMPLatE"), Ok(APPLICATION_VND_COLLABIO_XODOCUMENTS_SPREADSHEET_TEMPLATE));
    }

    /// `application/vnd.collection+json`
    pub const APPLICATION_VND_COLLECTION_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollection),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_collection_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collection+json"), Ok(APPLICATION_VND_COLLECTION_JSON));
        assert_eq!(crate::Mime::parse("APPLiCaTioN/VNd.cOLlEctiON+jSoN"), Ok(APPLICATION_VND_COLLECTION_JSON));
    }

    /// `application/vnd.collection.doc+json`
    pub const APPLICATION_VND_COLLECTION_DOC_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollectionDoc),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_collection_doc_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collection.doc+json"), Ok(APPLICATION_VND_COLLECTION_DOC_JSON));
        assert_eq!(crate::Mime::parse("AppLicaTIOn/vND.collEctiOn.DOC+json"), Ok(APPLICATION_VND_COLLECTION_DOC_JSON));
    }

    /// `application/vnd.collection.next+json`
    pub const APPLICATION_VND_COLLECTION_NEXT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCollectionNext),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_collection_next_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.collection.next+json"), Ok(APPLICATION_VND_COLLECTION_NEXT_JSON));
        assert_eq!(crate::Mime::parse("ApPlIcatIoN/VnD.cOlleCTIOn.NExt+JSOn"), Ok(APPLICATION_VND_COLLECTION_NEXT_JSON));
    }

    /// `application/vnd.comicbook+zip`
    pub const APPLICATION_VND_COMICBOOK_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndComicbook),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_comicbook_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.comicbook+zip"), Ok(APPLICATION_VND_COMICBOOK_ZIP));
        assert_eq!(crate::Mime::parse("applICatioN/vnD.cOmIcBOoK+ziP"), Ok(APPLICATION_VND_COMICBOOK_ZIP));
    }

    /// `application/vnd.comicbook-rar`
    pub const APPLICATION_VND_COMICBOOK_RAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndComicbookRar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_comicbook_rar_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.comicbook-rar"), Ok(APPLICATION_VND_COMICBOOK_RAR));
        assert_eq!(crate::Mime::parse("aPplicAtIOn/vnD.COMicbOOk-rAR"), Ok(APPLICATION_VND_COMICBOOK_RAR));
    }

    /// `application/vnd.commerce-battelle`
    pub const APPLICATION_VND_COMMERCE_BATTELLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCommerceBattelle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_commerce_battelle_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.commerce-battelle"), Ok(APPLICATION_VND_COMMERCE_BATTELLE));
        assert_eq!(crate::Mime::parse("aPpLICATIoN/VnD.ComMErcE-BatteLLe"), Ok(APPLICATION_VND_COMMERCE_BATTELLE));
    }

    /// `application/vnd.commonspace`
    pub const APPLICATION_VND_COMMONSPACE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCommonspace),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_commonspace_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.commonspace"), Ok(APPLICATION_VND_COMMONSPACE));
        assert_eq!(crate::Mime::parse("aPPlIcaTIOn/vND.coMmoNSPACe"), Ok(APPLICATION_VND_COMMONSPACE));
    }

    /// `application/vnd.contact.cmsg`
    pub const APPLICATION_VND_CONTACT_CMSG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndContactCmsg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_contact_cmsg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.contact.cmsg"), Ok(APPLICATION_VND_CONTACT_CMSG));
        assert_eq!(crate::Mime::parse("apPLicAtiON/Vnd.cONTACT.cMsg"), Ok(APPLICATION_VND_CONTACT_CMSG));
    }

    /// `application/vnd.coreos.ignition+json`
    pub const APPLICATION_VND_COREOS_IGNITION_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCoreosIgnition),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_coreos_ignition_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.coreos.ignition+json"), Ok(APPLICATION_VND_COREOS_IGNITION_JSON));
        assert_eq!(crate::Mime::parse("ApPlIcATion/VnD.cOREos.IGNitIon+jSon"), Ok(APPLICATION_VND_COREOS_IGNITION_JSON));
    }

    /// `application/vnd.cosmocaller`
    pub const APPLICATION_VND_COSMOCALLER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCosmocaller),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cosmocaller_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cosmocaller"), Ok(APPLICATION_VND_COSMOCALLER));
        assert_eq!(crate::Mime::parse("aPpLICaTiOn/vNd.cosMoCALLEr"), Ok(APPLICATION_VND_COSMOCALLER));
    }

    /// `application/vnd.crick.clicker`
    pub const APPLICATION_VND_CRICK_CLICKER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCrickClicker),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_crick_clicker_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.crick.clicker"), Ok(APPLICATION_VND_CRICK_CLICKER));
        assert_eq!(crate::Mime::parse("apPliCatION/VND.CRICk.ClICKEr"), Ok(APPLICATION_VND_CRICK_CLICKER));
    }

    /// `application/vnd.crick.clicker.keyboard`
    pub const APPLICATION_VND_CRICK_CLICKER_KEYBOARD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCrickClickerKeyboard),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_crick_clicker_keyboard_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.crick.clicker.keyboard"), Ok(APPLICATION_VND_CRICK_CLICKER_KEYBOARD));
        assert_eq!(crate::Mime::parse("APPLicaTiOn/vnd.crIcK.clIcker.KeybOard"), Ok(APPLICATION_VND_CRICK_CLICKER_KEYBOARD));
    }

    /// `application/vnd.crick.clicker.palette`
    pub const APPLICATION_VND_CRICK_CLICKER_PALETTE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCrickClickerPalette),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_crick_clicker_palette_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.crick.clicker.palette"), Ok(APPLICATION_VND_CRICK_CLICKER_PALETTE));
        assert_eq!(crate::Mime::parse("APplicatIoN/Vnd.CriCK.ClicKER.pAlEtTE"), Ok(APPLICATION_VND_CRICK_CLICKER_PALETTE));
    }

    /// `application/vnd.crick.clicker.template`
    pub const APPLICATION_VND_CRICK_CLICKER_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCrickClickerTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_crick_clicker_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.crick.clicker.template"), Ok(APPLICATION_VND_CRICK_CLICKER_TEMPLATE));
        assert_eq!(crate::Mime::parse("aPPlIcAtiON/VnD.CRiCK.clIcKeR.teMPLaTE"), Ok(APPLICATION_VND_CRICK_CLICKER_TEMPLATE));
    }

    /// `application/vnd.crick.clicker.wordbank`
    pub const APPLICATION_VND_CRICK_CLICKER_WORDBANK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCrickClickerWordbank),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_crick_clicker_wordbank_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.crick.clicker.wordbank"), Ok(APPLICATION_VND_CRICK_CLICKER_WORDBANK));
        assert_eq!(crate::Mime::parse("aPplicAtioN/vnD.CRIcK.ClIckER.woRdbank"), Ok(APPLICATION_VND_CRICK_CLICKER_WORDBANK));
    }

    /// `application/vnd.criticaltools.wbs+xml`
    pub const APPLICATION_VND_CRITICALTOOLS_WBS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCriticaltoolsWbs),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_criticaltools_wbs_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.criticaltools.wbs+xml"), Ok(APPLICATION_VND_CRITICALTOOLS_WBS_XML));
        assert_eq!(crate::Mime::parse("ApPLICatiOn/vnd.CRITICAltoolS.wbS+xMl"), Ok(APPLICATION_VND_CRITICALTOOLS_WBS_XML));
    }

    /// `application/vnd.cryptii.pipe+json`
    pub const APPLICATION_VND_CRYPTII_PIPE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCryptiiPipe),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_cryptii_pipe_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cryptii.pipe+json"), Ok(APPLICATION_VND_CRYPTII_PIPE_JSON));
        assert_eq!(crate::Mime::parse("aPpliCAtion/vND.crYpTii.piPe+Json"), Ok(APPLICATION_VND_CRYPTII_PIPE_JSON));
    }

    /// `application/vnd.crypto-shade-file`
    pub const APPLICATION_VND_CRYPTO_SHADE_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCryptoShadeFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_crypto_shade_file_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.crypto-shade-file"), Ok(APPLICATION_VND_CRYPTO_SHADE_FILE));
        assert_eq!(crate::Mime::parse("appLICaTioN/VNd.cRYpTO-shAdE-fILe"), Ok(APPLICATION_VND_CRYPTO_SHADE_FILE));
    }

    /// `application/vnd.cryptomator.encrypted`
    pub const APPLICATION_VND_CRYPTOMATOR_ENCRYPTED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCryptomatorEncrypted),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cryptomator_encrypted_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cryptomator.encrypted"), Ok(APPLICATION_VND_CRYPTOMATOR_ENCRYPTED));
        assert_eq!(crate::Mime::parse("apPlICatIon/VNd.CrYptOmATor.eNcRyPTeD"), Ok(APPLICATION_VND_CRYPTOMATOR_ENCRYPTED));
    }

    /// `application/vnd.cryptomator.vault`
    pub const APPLICATION_VND_CRYPTOMATOR_VAULT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCryptomatorVault),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cryptomator_vault_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cryptomator.vault"), Ok(APPLICATION_VND_CRYPTOMATOR_VAULT));
        assert_eq!(crate::Mime::parse("ApPliCAtION/VNd.cRYPToMAtoR.vAULt"), Ok(APPLICATION_VND_CRYPTOMATOR_VAULT));
    }

    /// `application/vnd.ctc-posml`
    pub const APPLICATION_VND_CTC_POSML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCtcPosml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ctc_posml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ctc-posml"), Ok(APPLICATION_VND_CTC_POSML));
        assert_eq!(crate::Mime::parse("APplIcatIoN/Vnd.ctC-pOSMl"), Ok(APPLICATION_VND_CTC_POSML));
    }

    /// `application/vnd.ctct.ws+xml`
    pub const APPLICATION_VND_CTCT_WS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCtctWs),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ctct_ws_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ctct.ws+xml"), Ok(APPLICATION_VND_CTCT_WS_XML));
        assert_eq!(crate::Mime::parse("aPpliCaTION/VNd.cTct.Ws+Xml"), Ok(APPLICATION_VND_CTCT_WS_XML));
    }

    /// `application/vnd.cups-pdf`
    pub const APPLICATION_VND_CUPS_PDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCupsPdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cups_pdf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cups-pdf"), Ok(APPLICATION_VND_CUPS_PDF));
        assert_eq!(crate::Mime::parse("APPlicatIoN/vND.Cups-Pdf"), Ok(APPLICATION_VND_CUPS_PDF));
    }

    /// `application/vnd.cups-postscript`
    pub const APPLICATION_VND_CUPS_POSTSCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCupsPostscript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cups_postscript_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cups-postscript"), Ok(APPLICATION_VND_CUPS_POSTSCRIPT));
        assert_eq!(crate::Mime::parse("APpLicatION/Vnd.cuPs-POstsCRiPT"), Ok(APPLICATION_VND_CUPS_POSTSCRIPT));
    }

    /// `application/vnd.cups-ppd`
    pub const APPLICATION_VND_CUPS_PPD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCupsPpd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cups_ppd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cups-ppd"), Ok(APPLICATION_VND_CUPS_PPD));
        assert_eq!(crate::Mime::parse("APpLICATIoN/vND.cUpS-ppd"), Ok(APPLICATION_VND_CUPS_PPD));
    }

    /// `application/vnd.cups-raster`
    pub const APPLICATION_VND_CUPS_RASTER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCupsRaster),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cups_raster_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cups-raster"), Ok(APPLICATION_VND_CUPS_RASTER));
        assert_eq!(crate::Mime::parse("aPplIcatiON/VND.CUps-rAster"), Ok(APPLICATION_VND_CUPS_RASTER));
    }

    /// `application/vnd.cups-raw`
    pub const APPLICATION_VND_CUPS_RAW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCupsRaw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cups_raw_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cups-raw"), Ok(APPLICATION_VND_CUPS_RAW));
        assert_eq!(crate::Mime::parse("ApPLICatIOn/Vnd.Cups-rAW"), Ok(APPLICATION_VND_CUPS_RAW));
    }

    /// `application/vnd.curl`
    pub const APPLICATION_VND_CURL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCurl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_curl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.curl"), Ok(APPLICATION_VND_CURL));
        assert_eq!(crate::Mime::parse("apPLIcatIoN/vnd.Curl"), Ok(APPLICATION_VND_CURL));
    }

    /// `application/vnd.cyan.dean.root+xml`
    pub const APPLICATION_VND_CYAN_DEAN_ROOT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCyanDeanRoot),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_cyan_dean_root_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cyan.dean.root+xml"), Ok(APPLICATION_VND_CYAN_DEAN_ROOT_XML));
        assert_eq!(crate::Mime::parse("ApPLiCATIOn/vnd.CYAn.dEAN.rOOt+xml"), Ok(APPLICATION_VND_CYAN_DEAN_ROOT_XML));
    }

    /// `application/vnd.cybank`
    pub const APPLICATION_VND_CYBANK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCybank),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_cybank_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cybank"), Ok(APPLICATION_VND_CYBANK));
        assert_eq!(crate::Mime::parse("ApplicaTiOn/VND.cYbaNk"), Ok(APPLICATION_VND_CYBANK));
    }

    /// `application/vnd.cyclonedx+json`
    pub const APPLICATION_VND_CYCLONEDX_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCyclonedx),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_cyclonedx_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cyclonedx+json"), Ok(APPLICATION_VND_CYCLONEDX_JSON));
        assert_eq!(crate::Mime::parse("ApplicaTION/vNd.CYclOnedx+jsoN"), Ok(APPLICATION_VND_CYCLONEDX_JSON));
    }

    /// `application/vnd.cyclonedx+xml`
    pub const APPLICATION_VND_CYCLONEDX_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndCyclonedx),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_cyclonedx_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.cyclonedx+xml"), Ok(APPLICATION_VND_CYCLONEDX_XML));
        assert_eq!(crate::Mime::parse("apPliCATION/VnD.CyClOnEdX+Xml"), Ok(APPLICATION_VND_CYCLONEDX_XML));
    }

    /// `application/vnd.d2l.coursepackage1p0+zip`
    pub const APPLICATION_VND_D2L_COURSEPACKAGE1P0_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndD2lCoursepackage1p0),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_d2l_coursepackage1p0_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.d2l.coursepackage1p0+zip"), Ok(APPLICATION_VND_D2L_COURSEPACKAGE1P0_ZIP));
        assert_eq!(crate::Mime::parse("appLICatIon/VNd.d2l.cOURSEpACkAgE1P0+ziP"), Ok(APPLICATION_VND_D2L_COURSEPACKAGE1P0_ZIP));
    }

    /// `application/vnd.d3m-dataset`
    pub const APPLICATION_VND_D3M_DATASET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndD3mDataset),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_d3m_dataset_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.d3m-dataset"), Ok(APPLICATION_VND_D3M_DATASET));
        assert_eq!(crate::Mime::parse("APPliCatIOn/vNd.d3M-dAtaset"), Ok(APPLICATION_VND_D3M_DATASET));
    }

    /// `application/vnd.d3m-problem`
    pub const APPLICATION_VND_D3M_PROBLEM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndD3mProblem),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_d3m_problem_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.d3m-problem"), Ok(APPLICATION_VND_D3M_PROBLEM));
        assert_eq!(crate::Mime::parse("aPplIcatIoN/VNd.D3M-PrObLeM"), Ok(APPLICATION_VND_D3M_PROBLEM));
    }

    /// `application/vnd.dart`
    pub const APPLICATION_VND_DART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDart),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dart_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dart"), Ok(APPLICATION_VND_DART));
        assert_eq!(crate::Mime::parse("ApPLiCaTIon/vND.DaRT"), Ok(APPLICATION_VND_DART));
    }

    /// `application/vnd.data-vision.rdz`
    pub const APPLICATION_VND_DATA_VISION_RDZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDataVisionRdz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_data_vision_rdz_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.data-vision.rdz"), Ok(APPLICATION_VND_DATA_VISION_RDZ));
        assert_eq!(crate::Mime::parse("APPlICaTiOn/vND.daTa-vISioN.rDz"), Ok(APPLICATION_VND_DATA_VISION_RDZ));
    }

    /// `application/vnd.datapackage+json`
    pub const APPLICATION_VND_DATAPACKAGE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDatapackage),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_datapackage_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.datapackage+json"), Ok(APPLICATION_VND_DATAPACKAGE_JSON));
        assert_eq!(crate::Mime::parse("APpliCaTioN/VNd.DATApACKaGE+JSON"), Ok(APPLICATION_VND_DATAPACKAGE_JSON));
    }

    /// `application/vnd.dataresource+json`
    pub const APPLICATION_VND_DATARESOURCE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDataresource),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dataresource_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dataresource+json"), Ok(APPLICATION_VND_DATARESOURCE_JSON));
        assert_eq!(crate::Mime::parse("ApPlicATiON/vND.daTareSourcE+JSon"), Ok(APPLICATION_VND_DATARESOURCE_JSON));
    }

    /// `application/vnd.dbf`
    pub const APPLICATION_VND_DBF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDbf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dbf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dbf"), Ok(APPLICATION_VND_DBF));
        assert_eq!(crate::Mime::parse("APpLiCATION/Vnd.dbf"), Ok(APPLICATION_VND_DBF));
    }

    /// `application/vnd.debian.binary-package`
    pub const APPLICATION_VND_DEBIAN_BINARY_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDebianBinaryPackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_debian_binary_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.debian.binary-package"), Ok(APPLICATION_VND_DEBIAN_BINARY_PACKAGE));
        assert_eq!(crate::Mime::parse("AppLIcAtION/vnD.DebiAN.bINary-pAcKage"), Ok(APPLICATION_VND_DEBIAN_BINARY_PACKAGE));
    }

    /// `application/vnd.dece.data`
    pub const APPLICATION_VND_DECE_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDeceData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dece_data_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dece.data"), Ok(APPLICATION_VND_DECE_DATA));
        assert_eq!(crate::Mime::parse("appLIcaTION/vNd.dECE.dAta"), Ok(APPLICATION_VND_DECE_DATA));
    }

    /// `application/vnd.dece.ttml+xml`
    pub const APPLICATION_VND_DECE_TTML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDeceTtml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dece_ttml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dece.ttml+xml"), Ok(APPLICATION_VND_DECE_TTML_XML));
        assert_eq!(crate::Mime::parse("aPpliCatiOn/vnd.DECe.ttmL+xMl"), Ok(APPLICATION_VND_DECE_TTML_XML));
    }

    /// `application/vnd.dece.unspecified`
    pub const APPLICATION_VND_DECE_UNSPECIFIED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDeceUnspecified),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dece_unspecified_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dece.unspecified"), Ok(APPLICATION_VND_DECE_UNSPECIFIED));
        assert_eq!(crate::Mime::parse("APpLiCAtiON/VNd.dEce.UnspEciFIeD"), Ok(APPLICATION_VND_DECE_UNSPECIFIED));
    }

    /// `application/vnd.dece.zip`
    pub const APPLICATION_VND_DECE_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDeceZip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dece_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dece.zip"), Ok(APPLICATION_VND_DECE_ZIP));
        assert_eq!(crate::Mime::parse("APPLIcATIoN/vND.DeCe.ZIp"), Ok(APPLICATION_VND_DECE_ZIP));
    }

    /// `application/vnd.denovo.fcselayout-link`
    pub const APPLICATION_VND_DENOVO_FCSELAYOUT_LINK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDenovoFcselayoutLink),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_denovo_fcselayout_link_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.denovo.fcselayout-link"), Ok(APPLICATION_VND_DENOVO_FCSELAYOUT_LINK));
        assert_eq!(crate::Mime::parse("APPLICaTion/VND.DEnOvo.FcseLAyouT-liNk"), Ok(APPLICATION_VND_DENOVO_FCSELAYOUT_LINK));
    }

    /// `application/vnd.desmume.movie`
    pub const APPLICATION_VND_DESMUME_MOVIE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDesmumeMovie),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_desmume_movie_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.desmume.movie"), Ok(APPLICATION_VND_DESMUME_MOVIE));
        assert_eq!(crate::Mime::parse("AppLICAtiON/Vnd.deSMUme.Movie"), Ok(APPLICATION_VND_DESMUME_MOVIE));
    }

    /// `application/vnd.dir-bi.plate-dl-nosuffix`
    pub const APPLICATION_VND_DIR_BI_PLATE_DL_NOSUFFIX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDirBiPlateDlNosuffix),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dir_bi_plate_dl_nosuffix_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dir-bi.plate-dl-nosuffix"), Ok(APPLICATION_VND_DIR_BI_PLATE_DL_NOSUFFIX));
        assert_eq!(crate::Mime::parse("ApPLICATiOn/vnd.DIR-bI.plate-dl-Nosuffix"), Ok(APPLICATION_VND_DIR_BI_PLATE_DL_NOSUFFIX));
    }

    /// `application/vnd.dm.delegation+xml`
    pub const APPLICATION_VND_DM_DELEGATION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDmDelegation),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dm_delegation_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dm.delegation+xml"), Ok(APPLICATION_VND_DM_DELEGATION_XML));
        assert_eq!(crate::Mime::parse("applicATIOn/vnD.dm.DeLeGATion+XMl"), Ok(APPLICATION_VND_DM_DELEGATION_XML));
    }

    /// `application/vnd.dna`
    pub const APPLICATION_VND_DNA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDna),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dna_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dna"), Ok(APPLICATION_VND_DNA));
        assert_eq!(crate::Mime::parse("aPplicAtiOn/VNd.DNa"), Ok(APPLICATION_VND_DNA));
    }

    /// `application/vnd.document+json`
    pub const APPLICATION_VND_DOCUMENT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDocument),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_document_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.document+json"), Ok(APPLICATION_VND_DOCUMENT_JSON));
        assert_eq!(crate::Mime::parse("APPlIcaTIOn/vnd.DOCUMEnt+jsoN"), Ok(APPLICATION_VND_DOCUMENT_JSON));
    }

    /// `application/vnd.dolby.mobile.1`
    pub const APPLICATION_VND_DOLBY_MOBILE_1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyMobile1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dolby_mobile_1_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dolby.mobile.1"), Ok(APPLICATION_VND_DOLBY_MOBILE_1));
        assert_eq!(crate::Mime::parse("appLIcaTiON/VnD.DolbY.mobIle.1"), Ok(APPLICATION_VND_DOLBY_MOBILE_1));
    }

    /// `application/vnd.dolby.mobile.2`
    pub const APPLICATION_VND_DOLBY_MOBILE_2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyMobile2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dolby_mobile_2_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dolby.mobile.2"), Ok(APPLICATION_VND_DOLBY_MOBILE_2));
        assert_eq!(crate::Mime::parse("ApPLiCATIon/VNd.DolBy.mobILE.2"), Ok(APPLICATION_VND_DOLBY_MOBILE_2));
    }

    /// `application/vnd.doremir.scorecloud-binary-document`
    pub const APPLICATION_VND_DOREMIR_SCORECLOUD_BINARY_DOCUMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDoremirScorecloudBinaryDocument),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_doremir_scorecloud_binary_document_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.doremir.scorecloud-binary-document"), Ok(APPLICATION_VND_DOREMIR_SCORECLOUD_BINARY_DOCUMENT));
        assert_eq!(crate::Mime::parse("ApplIcatIoN/vnD.DoRemIR.scorEclOUD-bINARy-DOCUmEnT"), Ok(APPLICATION_VND_DOREMIR_SCORECLOUD_BINARY_DOCUMENT));
    }

    /// `application/vnd.dpgraph`
    pub const APPLICATION_VND_DPGRAPH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDpgraph),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dpgraph_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dpgraph"), Ok(APPLICATION_VND_DPGRAPH));
        assert_eq!(crate::Mime::parse("AppLICatION/Vnd.dpgRApH"), Ok(APPLICATION_VND_DPGRAPH));
    }

    /// `application/vnd.dreamfactory`
    pub const APPLICATION_VND_DREAMFACTORY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDreamfactory),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dreamfactory_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dreamfactory"), Ok(APPLICATION_VND_DREAMFACTORY));
        assert_eq!(crate::Mime::parse("AppLIcATIoN/vND.dreAMFActoRY"), Ok(APPLICATION_VND_DREAMFACTORY));
    }

    /// `application/vnd.drive+json`
    pub const APPLICATION_VND_DRIVE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDrive),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_drive_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.drive+json"), Ok(APPLICATION_VND_DRIVE_JSON));
        assert_eq!(crate::Mime::parse("applIcAtioN/vND.drive+jsoN"), Ok(APPLICATION_VND_DRIVE_JSON));
    }

    /// `application/vnd.dtg.local`
    pub const APPLICATION_VND_DTG_LOCAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDtgLocal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dtg_local_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dtg.local"), Ok(APPLICATION_VND_DTG_LOCAL));
        assert_eq!(crate::Mime::parse("aPPLIcAtioN/vnd.DTG.loCal"), Ok(APPLICATION_VND_DTG_LOCAL));
    }

    /// `application/vnd.dtg.local.flash`
    pub const APPLICATION_VND_DTG_LOCAL_FLASH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDtgLocalFlash),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dtg_local_flash_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dtg.local.flash"), Ok(APPLICATION_VND_DTG_LOCAL_FLASH));
        assert_eq!(crate::Mime::parse("appliCATiON/VnD.dtG.lOcAl.fLash"), Ok(APPLICATION_VND_DTG_LOCAL_FLASH));
    }

    /// `application/vnd.dtg.local.html`
    pub const APPLICATION_VND_DTG_LOCAL_HTML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDtgLocalHtml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dtg_local_html_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dtg.local.html"), Ok(APPLICATION_VND_DTG_LOCAL_HTML));
        assert_eq!(crate::Mime::parse("aPplIcATION/VnD.DTg.locAl.HTMl"), Ok(APPLICATION_VND_DTG_LOCAL_HTML));
    }

    /// `application/vnd.dvb.ait`
    pub const APPLICATION_VND_DVB_AIT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbAit),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_ait_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.ait"), Ok(APPLICATION_VND_DVB_AIT));
        assert_eq!(crate::Mime::parse("aPplIcATiON/vND.dVb.aiT"), Ok(APPLICATION_VND_DVB_AIT));
    }

    /// `application/vnd.dvb.dvbisl+xml`
    pub const APPLICATION_VND_DVB_DVBISL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbDvbisl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_dvbisl_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.dvbisl+xml"), Ok(APPLICATION_VND_DVB_DVBISL_XML));
        assert_eq!(crate::Mime::parse("APpLiCATIOn/vNd.DvB.DvbISl+Xml"), Ok(APPLICATION_VND_DVB_DVBISL_XML));
    }

    /// `application/vnd.dvb.dvbj`
    pub const APPLICATION_VND_DVB_DVBJ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbDvbj),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_dvbj_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.dvbj"), Ok(APPLICATION_VND_DVB_DVBJ));
        assert_eq!(crate::Mime::parse("aPPlIcaTIoN/vND.dVB.DVbJ"), Ok(APPLICATION_VND_DVB_DVBJ));
    }

    /// `application/vnd.dvb.esgcontainer`
    pub const APPLICATION_VND_DVB_ESGCONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbEsgcontainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_esgcontainer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.esgcontainer"), Ok(APPLICATION_VND_DVB_ESGCONTAINER));
        assert_eq!(crate::Mime::parse("aPpLiCATiON/VnD.dVB.EsGCoNTAiNer"), Ok(APPLICATION_VND_DVB_ESGCONTAINER));
    }

    /// `application/vnd.dvb.ipdcdftnotifaccess`
    pub const APPLICATION_VND_DVB_IPDCDFTNOTIFACCESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIpdcdftnotifaccess),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_ipdcdftnotifaccess_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.ipdcdftnotifaccess"), Ok(APPLICATION_VND_DVB_IPDCDFTNOTIFACCESS));
        assert_eq!(crate::Mime::parse("aPPlIcaTiOn/vND.DVb.iPdcDFtNOtiFACceSs"), Ok(APPLICATION_VND_DVB_IPDCDFTNOTIFACCESS));
    }

    /// `application/vnd.dvb.ipdcesgaccess`
    pub const APPLICATION_VND_DVB_IPDCESGACCESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIpdcesgaccess),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_ipdcesgaccess_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.ipdcesgaccess"), Ok(APPLICATION_VND_DVB_IPDCESGACCESS));
        assert_eq!(crate::Mime::parse("ApplICatioN/vNd.dvb.ipdcESGaccESS"), Ok(APPLICATION_VND_DVB_IPDCESGACCESS));
    }

    /// `application/vnd.dvb.ipdcesgaccess2`
    pub const APPLICATION_VND_DVB_IPDCESGACCESS2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIpdcesgaccess2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_ipdcesgaccess2_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.ipdcesgaccess2"), Ok(APPLICATION_VND_DVB_IPDCESGACCESS2));
        assert_eq!(crate::Mime::parse("AppLicatIOn/VNd.DvB.IpDCesGACCeSS2"), Ok(APPLICATION_VND_DVB_IPDCESGACCESS2));
    }

    /// `application/vnd.dvb.ipdcesgpdd`
    pub const APPLICATION_VND_DVB_IPDCESGPDD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIpdcesgpdd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_ipdcesgpdd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.ipdcesgpdd"), Ok(APPLICATION_VND_DVB_IPDCESGPDD));
        assert_eq!(crate::Mime::parse("apPLiCaTioN/vnd.DVb.IpDcESGPDD"), Ok(APPLICATION_VND_DVB_IPDCESGPDD));
    }

    /// `application/vnd.dvb.ipdcroaming`
    pub const APPLICATION_VND_DVB_IPDCROAMING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIpdcroaming),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_ipdcroaming_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.ipdcroaming"), Ok(APPLICATION_VND_DVB_IPDCROAMING));
        assert_eq!(crate::Mime::parse("ApplIcaTIon/vND.DVb.iPDcRoaMiNg"), Ok(APPLICATION_VND_DVB_IPDCROAMING));
    }

    /// `application/vnd.dvb.iptv.alfec-base`
    pub const APPLICATION_VND_DVB_IPTV_ALFEC_BASE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIptvAlfecBase),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_iptv_alfec_base_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.iptv.alfec-base"), Ok(APPLICATION_VND_DVB_IPTV_ALFEC_BASE));
        assert_eq!(crate::Mime::parse("aPpLIcAtioN/vnD.dvB.iPTv.alFeC-base"), Ok(APPLICATION_VND_DVB_IPTV_ALFEC_BASE));
    }

    /// `application/vnd.dvb.iptv.alfec-enhancement`
    pub const APPLICATION_VND_DVB_IPTV_ALFEC_ENHANCEMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbIptvAlfecEnhancement),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_iptv_alfec_enhancement_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.iptv.alfec-enhancement"), Ok(APPLICATION_VND_DVB_IPTV_ALFEC_ENHANCEMENT));
        assert_eq!(crate::Mime::parse("aPpLiCAtioN/VND.dvb.IPTv.alFeC-ENHaNcemenT"), Ok(APPLICATION_VND_DVB_IPTV_ALFEC_ENHANCEMENT));
    }

    /// `application/vnd.dvb.notif-aggregate-root+xml`
    pub const APPLICATION_VND_DVB_NOTIF_AGGREGATE_ROOT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifAggregateRoot),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_aggregate_root_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-aggregate-root+xml"), Ok(APPLICATION_VND_DVB_NOTIF_AGGREGATE_ROOT_XML));
        assert_eq!(crate::Mime::parse("AppLicATION/Vnd.dVB.NOtiF-AGGrEgaTE-RoOT+xMl"), Ok(APPLICATION_VND_DVB_NOTIF_AGGREGATE_ROOT_XML));
    }

    /// `application/vnd.dvb.notif-container+xml`
    pub const APPLICATION_VND_DVB_NOTIF_CONTAINER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifContainer),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_container_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-container+xml"), Ok(APPLICATION_VND_DVB_NOTIF_CONTAINER_XML));
        assert_eq!(crate::Mime::parse("ApPliCaTIOn/VND.dVb.notiF-containeR+XML"), Ok(APPLICATION_VND_DVB_NOTIF_CONTAINER_XML));
    }

    /// `application/vnd.dvb.notif-generic+xml`
    pub const APPLICATION_VND_DVB_NOTIF_GENERIC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifGeneric),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_generic_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-generic+xml"), Ok(APPLICATION_VND_DVB_NOTIF_GENERIC_XML));
        assert_eq!(crate::Mime::parse("aPpLiCation/vNd.dVB.nOtIf-GeNERic+XMl"), Ok(APPLICATION_VND_DVB_NOTIF_GENERIC_XML));
    }

    /// `application/vnd.dvb.notif-ia-msglist+xml`
    pub const APPLICATION_VND_DVB_NOTIF_IA_MSGLIST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifIaMsglist),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_ia_msglist_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-ia-msglist+xml"), Ok(APPLICATION_VND_DVB_NOTIF_IA_MSGLIST_XML));
        assert_eq!(crate::Mime::parse("ApPliCaTIoN/vnd.dVb.noTiF-IA-MsglIsT+xMl"), Ok(APPLICATION_VND_DVB_NOTIF_IA_MSGLIST_XML));
    }

    /// `application/vnd.dvb.notif-ia-registration-request+xml`
    pub const APPLICATION_VND_DVB_NOTIF_IA_REGISTRATION_REQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifIaRegistrationRequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_ia_registration_request_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-ia-registration-request+xml"), Ok(APPLICATION_VND_DVB_NOTIF_IA_REGISTRATION_REQUEST_XML));
        assert_eq!(crate::Mime::parse("ApplICATiOn/VNd.DVb.notIF-IA-rEgISTRAtIoN-rEQuEsT+XmL"), Ok(APPLICATION_VND_DVB_NOTIF_IA_REGISTRATION_REQUEST_XML));
    }

    /// `application/vnd.dvb.notif-ia-registration-response+xml`
    pub const APPLICATION_VND_DVB_NOTIF_IA_REGISTRATION_RESPONSE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifIaRegistrationResponse),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_ia_registration_response_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-ia-registration-response+xml"), Ok(APPLICATION_VND_DVB_NOTIF_IA_REGISTRATION_RESPONSE_XML));
        assert_eq!(crate::Mime::parse("APpLICaTion/vND.Dvb.Notif-iA-REgIstRAtIon-RESPOnSe+XMl"), Ok(APPLICATION_VND_DVB_NOTIF_IA_REGISTRATION_RESPONSE_XML));
    }

    /// `application/vnd.dvb.notif-init+xml`
    pub const APPLICATION_VND_DVB_NOTIF_INIT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbNotifInit),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_notif_init_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.notif-init+xml"), Ok(APPLICATION_VND_DVB_NOTIF_INIT_XML));
        assert_eq!(crate::Mime::parse("aPpLiCATIOn/vnd.dVb.notIf-INIT+XMl"), Ok(APPLICATION_VND_DVB_NOTIF_INIT_XML));
    }

    /// `application/vnd.dvb.pfr`
    pub const APPLICATION_VND_DVB_PFR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbPfr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_pfr_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.pfr"), Ok(APPLICATION_VND_DVB_PFR));
        assert_eq!(crate::Mime::parse("apPLICATIOn/vNd.dVb.pfR"), Ok(APPLICATION_VND_DVB_PFR));
    }

    /// `application/vnd.dvb.service`
    pub const APPLICATION_VND_DVB_SERVICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDvbService),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dvb_service_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dvb.service"), Ok(APPLICATION_VND_DVB_SERVICE));
        assert_eq!(crate::Mime::parse("aPpLicaTIOn/vNd.dVb.sERvICE"), Ok(APPLICATION_VND_DVB_SERVICE));
    }

    /// `application/vnd.dxr`
    pub const APPLICATION_VND_DXR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDxr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dxr_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dxr"), Ok(APPLICATION_VND_DXR));
        assert_eq!(crate::Mime::parse("appLIcaTion/vNd.Dxr"), Ok(APPLICATION_VND_DXR));
    }

    /// `application/vnd.dynageo`
    pub const APPLICATION_VND_DYNAGEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDynageo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dynageo_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dynageo"), Ok(APPLICATION_VND_DYNAGEO));
        assert_eq!(crate::Mime::parse("ApPLIcATiON/vnd.DYnagEo"), Ok(APPLICATION_VND_DYNAGEO));
    }

    /// `application/vnd.dzr`
    pub const APPLICATION_VND_DZR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndDzr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_dzr_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.dzr"), Ok(APPLICATION_VND_DZR));
        assert_eq!(crate::Mime::parse("ApPliCatIOn/vnd.Dzr"), Ok(APPLICATION_VND_DZR));
    }

    /// `application/vnd.easykaraoke.cdgdownload`
    pub const APPLICATION_VND_EASYKARAOKE_CDGDOWNLOAD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEasykaraokeCdgdownload),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_easykaraoke_cdgdownload_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.easykaraoke.cdgdownload"), Ok(APPLICATION_VND_EASYKARAOKE_CDGDOWNLOAD));
        assert_eq!(crate::Mime::parse("apPLIcATion/vNd.easYkARaoKe.cDgdOwNLoaD"), Ok(APPLICATION_VND_EASYKARAOKE_CDGDOWNLOAD));
    }

    /// `application/vnd.ecdis-update`
    pub const APPLICATION_VND_ECDIS_UPDATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcdisUpdate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecdis_update_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecdis-update"), Ok(APPLICATION_VND_ECDIS_UPDATE));
        assert_eq!(crate::Mime::parse("apPliCaTIon/vnd.EcDis-uPdaTE"), Ok(APPLICATION_VND_ECDIS_UPDATE));
    }

    /// `application/vnd.ecip.rlp`
    pub const APPLICATION_VND_ECIP_RLP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcipRlp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecip_rlp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecip.rlp"), Ok(APPLICATION_VND_ECIP_RLP));
        assert_eq!(crate::Mime::parse("aPplIcatiON/vNd.ecIP.Rlp"), Ok(APPLICATION_VND_ECIP_RLP));
    }

    /// `application/vnd.eclipse.ditto+json`
    pub const APPLICATION_VND_ECLIPSE_DITTO_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEclipseDitto),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_eclipse_ditto_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.eclipse.ditto+json"), Ok(APPLICATION_VND_ECLIPSE_DITTO_JSON));
        assert_eq!(crate::Mime::parse("aPPLicAtiOn/vND.EclipsE.DItto+jSon"), Ok(APPLICATION_VND_ECLIPSE_DITTO_JSON));
    }

    /// `application/vnd.ecowin.chart`
    pub const APPLICATION_VND_ECOWIN_CHART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcowinChart),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecowin_chart_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecowin.chart"), Ok(APPLICATION_VND_ECOWIN_CHART));
        assert_eq!(crate::Mime::parse("aPPLIcATIOn/VNd.ecowIN.ChArt"), Ok(APPLICATION_VND_ECOWIN_CHART));
    }

    /// `application/vnd.ecowin.filerequest`
    pub const APPLICATION_VND_ECOWIN_FILEREQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcowinFilerequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecowin_filerequest_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecowin.filerequest"), Ok(APPLICATION_VND_ECOWIN_FILEREQUEST));
        assert_eq!(crate::Mime::parse("APPLIcATioN/VND.ECOWiN.FiLerEqUest"), Ok(APPLICATION_VND_ECOWIN_FILEREQUEST));
    }

    /// `application/vnd.ecowin.fileupdate`
    pub const APPLICATION_VND_ECOWIN_FILEUPDATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcowinFileupdate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecowin_fileupdate_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecowin.fileupdate"), Ok(APPLICATION_VND_ECOWIN_FILEUPDATE));
        assert_eq!(crate::Mime::parse("aPPlICatioN/Vnd.Ecowin.fILEupdATe"), Ok(APPLICATION_VND_ECOWIN_FILEUPDATE));
    }

    /// `application/vnd.ecowin.series`
    pub const APPLICATION_VND_ECOWIN_SERIES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcowinSeries),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecowin_series_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecowin.series"), Ok(APPLICATION_VND_ECOWIN_SERIES));
        assert_eq!(crate::Mime::parse("aPPLiCaTIOn/vND.ecOWin.sEriES"), Ok(APPLICATION_VND_ECOWIN_SERIES));
    }

    /// `application/vnd.ecowin.seriesrequest`
    pub const APPLICATION_VND_ECOWIN_SERIESREQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcowinSeriesrequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecowin_seriesrequest_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecowin.seriesrequest"), Ok(APPLICATION_VND_ECOWIN_SERIESREQUEST));
        assert_eq!(crate::Mime::parse("APpLiCAtIon/vND.eCOwIn.SeRiESrEqUesT"), Ok(APPLICATION_VND_ECOWIN_SERIESREQUEST));
    }

    /// `application/vnd.ecowin.seriesupdate`
    pub const APPLICATION_VND_ECOWIN_SERIESUPDATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEcowinSeriesupdate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ecowin_seriesupdate_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ecowin.seriesupdate"), Ok(APPLICATION_VND_ECOWIN_SERIESUPDATE));
        assert_eq!(crate::Mime::parse("ApPlICatiOn/Vnd.eCOwin.seRIesUpdAtE"), Ok(APPLICATION_VND_ECOWIN_SERIESUPDATE));
    }

    /// `application/vnd.efi.img`
    pub const APPLICATION_VND_EFI_IMG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEfiImg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_efi_img_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.efi.img"), Ok(APPLICATION_VND_EFI_IMG));
        assert_eq!(crate::Mime::parse("APplICaTIoN/Vnd.efI.img"), Ok(APPLICATION_VND_EFI_IMG));
    }

    /// `application/vnd.efi.iso`
    pub const APPLICATION_VND_EFI_ISO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEfiIso),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_efi_iso_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.efi.iso"), Ok(APPLICATION_VND_EFI_ISO));
        assert_eq!(crate::Mime::parse("aPpLicatiOn/Vnd.EFI.iso"), Ok(APPLICATION_VND_EFI_ISO));
    }

    /// `application/vnd.emclient.accessrequest+xml`
    pub const APPLICATION_VND_EMCLIENT_ACCESSREQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEmclientAccessrequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_emclient_accessrequest_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.emclient.accessrequest+xml"), Ok(APPLICATION_VND_EMCLIENT_ACCESSREQUEST_XML));
        assert_eq!(crate::Mime::parse("aPpLICAtIon/VNd.eMcLIeNT.ACCEssREquEsT+XML"), Ok(APPLICATION_VND_EMCLIENT_ACCESSREQUEST_XML));
    }

    /// `application/vnd.enliven`
    pub const APPLICATION_VND_ENLIVEN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEnliven),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_enliven_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.enliven"), Ok(APPLICATION_VND_ENLIVEN));
        assert_eq!(crate::Mime::parse("aPplIcatiON/vNd.EnLiven"), Ok(APPLICATION_VND_ENLIVEN));
    }

    /// `application/vnd.enphase.envoy`
    pub const APPLICATION_VND_ENPHASE_ENVOY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEnphaseEnvoy),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_enphase_envoy_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.enphase.envoy"), Ok(APPLICATION_VND_ENPHASE_ENVOY));
        assert_eq!(crate::Mime::parse("ApPLIcAtIoN/vNd.EnPhase.eNVOY"), Ok(APPLICATION_VND_ENPHASE_ENVOY));
    }

    /// `application/vnd.eprints.data+xml`
    pub const APPLICATION_VND_EPRINTS_DATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEprintsData),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_eprints_data_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.eprints.data+xml"), Ok(APPLICATION_VND_EPRINTS_DATA_XML));
        assert_eq!(crate::Mime::parse("aPpLiCATiOn/VnD.EPRiNTs.DAtA+xML"), Ok(APPLICATION_VND_EPRINTS_DATA_XML));
    }

    /// `application/vnd.epson.esf`
    pub const APPLICATION_VND_EPSON_ESF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEpsonEsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_epson_esf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.epson.esf"), Ok(APPLICATION_VND_EPSON_ESF));
        assert_eq!(crate::Mime::parse("AppLICatION/VND.EPSoN.EsF"), Ok(APPLICATION_VND_EPSON_ESF));
    }

    /// `application/vnd.epson.msf`
    pub const APPLICATION_VND_EPSON_MSF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEpsonMsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_epson_msf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.epson.msf"), Ok(APPLICATION_VND_EPSON_MSF));
        assert_eq!(crate::Mime::parse("ApPlicAtiON/vnd.EpSoN.Msf"), Ok(APPLICATION_VND_EPSON_MSF));
    }

    /// `application/vnd.epson.quickanime`
    pub const APPLICATION_VND_EPSON_QUICKANIME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEpsonQuickanime),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_epson_quickanime_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.epson.quickanime"), Ok(APPLICATION_VND_EPSON_QUICKANIME));
        assert_eq!(crate::Mime::parse("APPlicAtIOn/vND.epsoN.qUICkANIMe"), Ok(APPLICATION_VND_EPSON_QUICKANIME));
    }

    /// `application/vnd.epson.salt`
    pub const APPLICATION_VND_EPSON_SALT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEpsonSalt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_epson_salt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.epson.salt"), Ok(APPLICATION_VND_EPSON_SALT));
        assert_eq!(crate::Mime::parse("aPPlICATIon/VnD.EPSON.salT"), Ok(APPLICATION_VND_EPSON_SALT));
    }

    /// `application/vnd.epson.ssf`
    pub const APPLICATION_VND_EPSON_SSF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEpsonSsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_epson_ssf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.epson.ssf"), Ok(APPLICATION_VND_EPSON_SSF));
        assert_eq!(crate::Mime::parse("aPPLicAtIOn/VNd.epSon.sSf"), Ok(APPLICATION_VND_EPSON_SSF));
    }

    /// `application/vnd.ericsson.quickcall`
    pub const APPLICATION_VND_ERICSSON_QUICKCALL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEricssonQuickcall),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ericsson_quickcall_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ericsson.quickcall"), Ok(APPLICATION_VND_ERICSSON_QUICKCALL));
        assert_eq!(crate::Mime::parse("AppliCatION/VNd.eRiCsSon.qUicKcall"), Ok(APPLICATION_VND_ERICSSON_QUICKCALL));
    }

    /// `application/vnd.espass-espass+zip`
    pub const APPLICATION_VND_ESPASS_ESPASS_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEspassEspass),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_espass_espass_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.espass-espass+zip"), Ok(APPLICATION_VND_ESPASS_ESPASS_ZIP));
        assert_eq!(crate::Mime::parse("applIcATIon/Vnd.espass-esPAss+ZiP"), Ok(APPLICATION_VND_ESPASS_ESPASS_ZIP));
    }

    /// `application/vnd.eszigno3+xml`
    pub const APPLICATION_VND_ESZIGNO3_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEszigno3),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_eszigno3_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.eszigno3+xml"), Ok(APPLICATION_VND_ESZIGNO3_XML));
        assert_eq!(crate::Mime::parse("aPPLIcAtIoN/VnD.esziGnO3+XML"), Ok(APPLICATION_VND_ESZIGNO3_XML));
    }

    /// `application/vnd.etsi.aoc+xml`
    pub const APPLICATION_VND_ETSI_AOC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiAoc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_aoc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.aoc+xml"), Ok(APPLICATION_VND_ETSI_AOC_XML));
        assert_eq!(crate::Mime::parse("apPLiCAtION/VnD.ETsi.Aoc+XmL"), Ok(APPLICATION_VND_ETSI_AOC_XML));
    }

    /// `application/vnd.etsi.asic-e+zip`
    pub const APPLICATION_VND_ETSI_ASIC_E_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiAsicE),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_asic_e_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.asic-e+zip"), Ok(APPLICATION_VND_ETSI_ASIC_E_ZIP));
        assert_eq!(crate::Mime::parse("aPpLIcATION/vND.eTsI.asIC-e+zIp"), Ok(APPLICATION_VND_ETSI_ASIC_E_ZIP));
    }

    /// `application/vnd.etsi.asic-s+zip`
    pub const APPLICATION_VND_ETSI_ASIC_S_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiAsicS),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_asic_s_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.asic-s+zip"), Ok(APPLICATION_VND_ETSI_ASIC_S_ZIP));
        assert_eq!(crate::Mime::parse("appLicATiON/VND.eTSI.ASiC-S+ZIp"), Ok(APPLICATION_VND_ETSI_ASIC_S_ZIP));
    }

    /// `application/vnd.etsi.cug+xml`
    pub const APPLICATION_VND_ETSI_CUG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiCug),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_cug_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.cug+xml"), Ok(APPLICATION_VND_ETSI_CUG_XML));
        assert_eq!(crate::Mime::parse("APPLIcATIoN/VNd.ETsi.cuG+xML"), Ok(APPLICATION_VND_ETSI_CUG_XML));
    }

    /// `application/vnd.etsi.iptvcommand+xml`
    pub const APPLICATION_VND_ETSI_IPTVCOMMAND_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvcommand),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvcommand_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvcommand+xml"), Ok(APPLICATION_VND_ETSI_IPTVCOMMAND_XML));
        assert_eq!(crate::Mime::parse("applIcatiOn/VND.etSI.IPtvCommand+xMl"), Ok(APPLICATION_VND_ETSI_IPTVCOMMAND_XML));
    }

    /// `application/vnd.etsi.iptvdiscovery+xml`
    pub const APPLICATION_VND_ETSI_IPTVDISCOVERY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvdiscovery),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvdiscovery_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvdiscovery+xml"), Ok(APPLICATION_VND_ETSI_IPTVDISCOVERY_XML));
        assert_eq!(crate::Mime::parse("APPliCAtion/VND.etsI.iPTVdiSCoVeRY+XmL"), Ok(APPLICATION_VND_ETSI_IPTVDISCOVERY_XML));
    }

    /// `application/vnd.etsi.iptvprofile+xml`
    pub const APPLICATION_VND_ETSI_IPTVPROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvprofile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvprofile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvprofile+xml"), Ok(APPLICATION_VND_ETSI_IPTVPROFILE_XML));
        assert_eq!(crate::Mime::parse("aPpLicATiON/VnD.EtSI.IPTVPrOfIlE+xmL"), Ok(APPLICATION_VND_ETSI_IPTVPROFILE_XML));
    }

    /// `application/vnd.etsi.iptvsad-bc+xml`
    pub const APPLICATION_VND_ETSI_IPTVSAD_BC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvsadBc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvsad_bc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvsad-bc+xml"), Ok(APPLICATION_VND_ETSI_IPTVSAD_BC_XML));
        assert_eq!(crate::Mime::parse("APPliCaTIon/VND.ETSI.iPTVSAd-bc+XmL"), Ok(APPLICATION_VND_ETSI_IPTVSAD_BC_XML));
    }

    /// `application/vnd.etsi.iptvsad-cod+xml`
    pub const APPLICATION_VND_ETSI_IPTVSAD_COD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvsadCod),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvsad_cod_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvsad-cod+xml"), Ok(APPLICATION_VND_ETSI_IPTVSAD_COD_XML));
        assert_eq!(crate::Mime::parse("aPpLicATioN/VND.ETSi.IPTvSaD-cOd+xMl"), Ok(APPLICATION_VND_ETSI_IPTVSAD_COD_XML));
    }

    /// `application/vnd.etsi.iptvsad-npvr+xml`
    pub const APPLICATION_VND_ETSI_IPTVSAD_NPVR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvsadNpvr),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvsad_npvr_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvsad-npvr+xml"), Ok(APPLICATION_VND_ETSI_IPTVSAD_NPVR_XML));
        assert_eq!(crate::Mime::parse("aPpLiCaTION/vND.etSI.iptVsad-nPvr+xMl"), Ok(APPLICATION_VND_ETSI_IPTVSAD_NPVR_XML));
    }

    /// `application/vnd.etsi.iptvservice+xml`
    pub const APPLICATION_VND_ETSI_IPTVSERVICE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvservice),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvservice_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvservice+xml"), Ok(APPLICATION_VND_ETSI_IPTVSERVICE_XML));
        assert_eq!(crate::Mime::parse("APpLICaTiON/Vnd.eTsI.iPtVSErviCE+Xml"), Ok(APPLICATION_VND_ETSI_IPTVSERVICE_XML));
    }

    /// `application/vnd.etsi.iptvsync+xml`
    pub const APPLICATION_VND_ETSI_IPTVSYNC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvsync),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvsync_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvsync+xml"), Ok(APPLICATION_VND_ETSI_IPTVSYNC_XML));
        assert_eq!(crate::Mime::parse("APPLIcatIon/VNd.EtSi.IpTvSYNC+XmL"), Ok(APPLICATION_VND_ETSI_IPTVSYNC_XML));
    }

    /// `application/vnd.etsi.iptvueprofile+xml`
    pub const APPLICATION_VND_ETSI_IPTVUEPROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiIptvueprofile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_iptvueprofile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.iptvueprofile+xml"), Ok(APPLICATION_VND_ETSI_IPTVUEPROFILE_XML));
        assert_eq!(crate::Mime::parse("apPLICAtIon/vnd.ETsI.IpTvuePROFiLe+XMl"), Ok(APPLICATION_VND_ETSI_IPTVUEPROFILE_XML));
    }

    /// `application/vnd.etsi.mcid+xml`
    pub const APPLICATION_VND_ETSI_MCID_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiMcid),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_mcid_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.mcid+xml"), Ok(APPLICATION_VND_ETSI_MCID_XML));
        assert_eq!(crate::Mime::parse("APPLiCaTIon/VNd.ETSi.MciD+xMl"), Ok(APPLICATION_VND_ETSI_MCID_XML));
    }

    /// `application/vnd.etsi.mheg5`
    pub const APPLICATION_VND_ETSI_MHEG5: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiMheg5),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_mheg5_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.mheg5"), Ok(APPLICATION_VND_ETSI_MHEG5));
        assert_eq!(crate::Mime::parse("apPLiCATIon/VnD.Etsi.mheg5"), Ok(APPLICATION_VND_ETSI_MHEG5));
    }

    /// `application/vnd.etsi.overload-control-policy-dataset+xml`
    pub const APPLICATION_VND_ETSI_OVERLOAD_CONTROL_POLICY_DATASET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiOverloadControlPolicyDataset),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_overload_control_policy_dataset_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.overload-control-policy-dataset+xml"), Ok(APPLICATION_VND_ETSI_OVERLOAD_CONTROL_POLICY_DATASET_XML));
        assert_eq!(crate::Mime::parse("aPPLiCAtIOn/VND.EtSi.OVErlOAd-coNTrOl-pOLICy-DatASet+xML"), Ok(APPLICATION_VND_ETSI_OVERLOAD_CONTROL_POLICY_DATASET_XML));
    }

    /// `application/vnd.etsi.pstn+xml`
    pub const APPLICATION_VND_ETSI_PSTN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiPstn),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_pstn_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.pstn+xml"), Ok(APPLICATION_VND_ETSI_PSTN_XML));
        assert_eq!(crate::Mime::parse("applIcaTiON/VND.eTSI.PsTn+xml"), Ok(APPLICATION_VND_ETSI_PSTN_XML));
    }

    /// `application/vnd.etsi.sci+xml`
    pub const APPLICATION_VND_ETSI_SCI_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiSci),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_sci_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.sci+xml"), Ok(APPLICATION_VND_ETSI_SCI_XML));
        assert_eq!(crate::Mime::parse("APPLicAtIOn/vNd.ETsI.Sci+xML"), Ok(APPLICATION_VND_ETSI_SCI_XML));
    }

    /// `application/vnd.etsi.simservs+xml`
    pub const APPLICATION_VND_ETSI_SIMSERVS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiSimservs),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_simservs_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.simservs+xml"), Ok(APPLICATION_VND_ETSI_SIMSERVS_XML));
        assert_eq!(crate::Mime::parse("ApplIcAtIOn/VNd.EtSI.sIMSERvs+Xml"), Ok(APPLICATION_VND_ETSI_SIMSERVS_XML));
    }

    /// `application/vnd.etsi.timestamp-token`
    pub const APPLICATION_VND_ETSI_TIMESTAMP_TOKEN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiTimestampToken),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_timestamp_token_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.timestamp-token"), Ok(APPLICATION_VND_ETSI_TIMESTAMP_TOKEN));
        assert_eq!(crate::Mime::parse("AppLicaTIOn/vNd.eTSI.timESTAmp-tOKEn"), Ok(APPLICATION_VND_ETSI_TIMESTAMP_TOKEN));
    }

    /// `application/vnd.etsi.tsl+xml`
    pub const APPLICATION_VND_ETSI_TSL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiTsl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_tsl_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.tsl+xml"), Ok(APPLICATION_VND_ETSI_TSL_XML));
        assert_eq!(crate::Mime::parse("apPlicAtIon/vnD.ETsI.tsl+XML"), Ok(APPLICATION_VND_ETSI_TSL_XML));
    }

    /// `application/vnd.etsi.tsl.der`
    pub const APPLICATION_VND_ETSI_TSL_DER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEtsiTslDer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_etsi_tsl_der_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.etsi.tsl.der"), Ok(APPLICATION_VND_ETSI_TSL_DER));
        assert_eq!(crate::Mime::parse("apPLICAtiON/vnD.eTsI.TSl.der"), Ok(APPLICATION_VND_ETSI_TSL_DER));
    }

    /// `application/vnd.eu.kasparian.car+json`
    pub const APPLICATION_VND_EU_KASPARIAN_CAR_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEuKasparianCar),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_eu_kasparian_car_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.eu.kasparian.car+json"), Ok(APPLICATION_VND_EU_KASPARIAN_CAR_JSON));
        assert_eq!(crate::Mime::parse("ApPLiCAtioN/VNd.Eu.kaspAriAN.Car+JsOn"), Ok(APPLICATION_VND_EU_KASPARIAN_CAR_JSON));
    }

    /// `application/vnd.eudora.data`
    pub const APPLICATION_VND_EUDORA_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEudoraData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_eudora_data_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.eudora.data"), Ok(APPLICATION_VND_EUDORA_DATA));
        assert_eq!(crate::Mime::parse("apPlicATIOn/vnD.eudOra.DAtA"), Ok(APPLICATION_VND_EUDORA_DATA));
    }

    /// `application/vnd.evolv.ecig.profile`
    pub const APPLICATION_VND_EVOLV_ECIG_PROFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEvolvEcigProfile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_evolv_ecig_profile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.evolv.ecig.profile"), Ok(APPLICATION_VND_EVOLV_ECIG_PROFILE));
        assert_eq!(crate::Mime::parse("aPPLIcATion/vNd.EvoLV.ECig.PROfILe"), Ok(APPLICATION_VND_EVOLV_ECIG_PROFILE));
    }

    /// `application/vnd.evolv.ecig.settings`
    pub const APPLICATION_VND_EVOLV_ECIG_SETTINGS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEvolvEcigSettings),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_evolv_ecig_settings_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.evolv.ecig.settings"), Ok(APPLICATION_VND_EVOLV_ECIG_SETTINGS));
        assert_eq!(crate::Mime::parse("aPPlICaTION/vnd.eVOLv.EciG.setTINgs"), Ok(APPLICATION_VND_EVOLV_ECIG_SETTINGS));
    }

    /// `application/vnd.evolv.ecig.theme`
    pub const APPLICATION_VND_EVOLV_ECIG_THEME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEvolvEcigTheme),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_evolv_ecig_theme_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.evolv.ecig.theme"), Ok(APPLICATION_VND_EVOLV_ECIG_THEME));
        assert_eq!(crate::Mime::parse("apPLICATiON/vND.EvoLv.ecIg.tHeme"), Ok(APPLICATION_VND_EVOLV_ECIG_THEME));
    }

    /// `application/vnd.exstream-empower+zip`
    pub const APPLICATION_VND_EXSTREAM_EMPOWER_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndExstreamEmpower),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_exstream_empower_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.exstream-empower+zip"), Ok(APPLICATION_VND_EXSTREAM_EMPOWER_ZIP));
        assert_eq!(crate::Mime::parse("apPlIcAtiON/vND.exstREAm-EMpOWeR+zip"), Ok(APPLICATION_VND_EXSTREAM_EMPOWER_ZIP));
    }

    /// `application/vnd.exstream-package`
    pub const APPLICATION_VND_EXSTREAM_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndExstreamPackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_exstream_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.exstream-package"), Ok(APPLICATION_VND_EXSTREAM_PACKAGE));
        assert_eq!(crate::Mime::parse("aPpLIcatiOn/vND.ExSTReAM-pAcKaGe"), Ok(APPLICATION_VND_EXSTREAM_PACKAGE));
    }

    /// `application/vnd.ezpix-album`
    pub const APPLICATION_VND_EZPIX_ALBUM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEzpixAlbum),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ezpix_album_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ezpix-album"), Ok(APPLICATION_VND_EZPIX_ALBUM));
        assert_eq!(crate::Mime::parse("ApPliCaTIon/vnd.eZpiX-Album"), Ok(APPLICATION_VND_EZPIX_ALBUM));
    }

    /// `application/vnd.ezpix-package`
    pub const APPLICATION_VND_EZPIX_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndEzpixPackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ezpix_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ezpix-package"), Ok(APPLICATION_VND_EZPIX_PACKAGE));
        assert_eq!(crate::Mime::parse("APPLicatIOn/vnD.eZpIx-paCkAGE"), Ok(APPLICATION_VND_EZPIX_PACKAGE));
    }

    /// `application/vnd.f-secure.mobile`
    pub const APPLICATION_VND_F_SECURE_MOBILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFSecureMobile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_f_secure_mobile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.f-secure.mobile"), Ok(APPLICATION_VND_F_SECURE_MOBILE));
        assert_eq!(crate::Mime::parse("apPlIcatiOn/VNd.f-sEcURe.MOBIlE"), Ok(APPLICATION_VND_F_SECURE_MOBILE));
    }

    /// `application/vnd.familysearch.gedcom+zip`
    pub const APPLICATION_VND_FAMILYSEARCH_GEDCOM_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFamilysearchGedcom),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_familysearch_gedcom_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.familysearch.gedcom+zip"), Ok(APPLICATION_VND_FAMILYSEARCH_GEDCOM_ZIP));
        assert_eq!(crate::Mime::parse("apPLiCAtiOn/vND.fAmiLyseARch.gEdcOM+ZiP"), Ok(APPLICATION_VND_FAMILYSEARCH_GEDCOM_ZIP));
    }

    /// `application/vnd.fastcopy-disk-image`
    pub const APPLICATION_VND_FASTCOPY_DISK_IMAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFastcopyDiskImage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fastcopy_disk_image_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fastcopy-disk-image"), Ok(APPLICATION_VND_FASTCOPY_DISK_IMAGE));
        assert_eq!(crate::Mime::parse("aPpLiCaTION/VND.fAStCopY-diSk-IMaGE"), Ok(APPLICATION_VND_FASTCOPY_DISK_IMAGE));
    }

    /// `application/vnd.fdf`
    pub const APPLICATION_VND_FDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fdf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fdf"), Ok(APPLICATION_VND_FDF));
        assert_eq!(crate::Mime::parse("appLIcAtiOn/vnd.fdf"), Ok(APPLICATION_VND_FDF));
    }

    /// `application/vnd.fdsn.mseed`
    pub const APPLICATION_VND_FDSN_MSEED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFdsnMseed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fdsn_mseed_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fdsn.mseed"), Ok(APPLICATION_VND_FDSN_MSEED));
        assert_eq!(crate::Mime::parse("ApPlICatiON/VnD.fdSN.mSeeD"), Ok(APPLICATION_VND_FDSN_MSEED));
    }

    /// `application/vnd.fdsn.seed`
    pub const APPLICATION_VND_FDSN_SEED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFdsnSeed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fdsn_seed_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fdsn.seed"), Ok(APPLICATION_VND_FDSN_SEED));
        assert_eq!(crate::Mime::parse("ApPlIcatioN/vND.FDsN.seEd"), Ok(APPLICATION_VND_FDSN_SEED));
    }

    /// `application/vnd.ffsns`
    pub const APPLICATION_VND_FFSNS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFfsns),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ffsns_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ffsns"), Ok(APPLICATION_VND_FFSNS));
        assert_eq!(crate::Mime::parse("ApplIcATiOn/VNd.fFsns"), Ok(APPLICATION_VND_FFSNS));
    }

    /// `application/vnd.ficlab.flb+zip`
    pub const APPLICATION_VND_FICLAB_FLB_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFiclabFlb),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ficlab_flb_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ficlab.flb+zip"), Ok(APPLICATION_VND_FICLAB_FLB_ZIP));
        assert_eq!(crate::Mime::parse("applicAtIOn/VnD.ficlAb.FLb+zip"), Ok(APPLICATION_VND_FICLAB_FLB_ZIP));
    }

    /// `application/vnd.filmit.zfc`
    pub const APPLICATION_VND_FILMIT_ZFC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFilmitZfc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_filmit_zfc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.filmit.zfc"), Ok(APPLICATION_VND_FILMIT_ZFC));
        assert_eq!(crate::Mime::parse("ApPlicATioN/vND.FILmiT.Zfc"), Ok(APPLICATION_VND_FILMIT_ZFC));
    }

    /// `application/vnd.fints`
    pub const APPLICATION_VND_FINTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFints),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fints_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fints"), Ok(APPLICATION_VND_FINTS));
        assert_eq!(crate::Mime::parse("APPlICatIoN/vnd.FintS"), Ok(APPLICATION_VND_FINTS));
    }

    /// `application/vnd.firemonkeys.cloudcell`
    pub const APPLICATION_VND_FIREMONKEYS_CLOUDCELL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFiremonkeysCloudcell),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_firemonkeys_cloudcell_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.firemonkeys.cloudcell"), Ok(APPLICATION_VND_FIREMONKEYS_CLOUDCELL));
        assert_eq!(crate::Mime::parse("APPlicAtIoN/VND.fIremONKEYs.CLouDCEll"), Ok(APPLICATION_VND_FIREMONKEYS_CLOUDCELL));
    }

    /// `application/vnd.FloGraphIt`
    pub const APPLICATION_VND_FLO_GRAPH_IT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFloGraphIt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_flo_graph_it_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.FloGraphIt"), Ok(APPLICATION_VND_FLO_GRAPH_IT));
        assert_eq!(crate::Mime::parse("APplicATIon/VNd.flograPHIt"), Ok(APPLICATION_VND_FLO_GRAPH_IT));
    }

    /// `application/vnd.fluxtime.clip`
    pub const APPLICATION_VND_FLUXTIME_CLIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFluxtimeClip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fluxtime_clip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fluxtime.clip"), Ok(APPLICATION_VND_FLUXTIME_CLIP));
        assert_eq!(crate::Mime::parse("APPlicAtIon/VnD.fluXTiME.CLIP"), Ok(APPLICATION_VND_FLUXTIME_CLIP));
    }

    /// `application/vnd.font-fontforge-sfd`
    pub const APPLICATION_VND_FONT_FONTFORGE_SFD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFontFontforgeSfd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_font_fontforge_sfd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.font-fontforge-sfd"), Ok(APPLICATION_VND_FONT_FONTFORGE_SFD));
        assert_eq!(crate::Mime::parse("apPLICatiOn/VnD.font-FonTfOrGE-SFd"), Ok(APPLICATION_VND_FONT_FONTFORGE_SFD));
    }

    /// `application/vnd.framemaker`
    pub const APPLICATION_VND_FRAMEMAKER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFramemaker),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_framemaker_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.framemaker"), Ok(APPLICATION_VND_FRAMEMAKER));
        assert_eq!(crate::Mime::parse("appLiCAtiOn/VnD.FrAmemakEr"), Ok(APPLICATION_VND_FRAMEMAKER));
    }

    /// `application/vnd.fsc.weblaunch`
    pub const APPLICATION_VND_FSC_WEBLAUNCH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFscWeblaunch),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fsc_weblaunch_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fsc.weblaunch"), Ok(APPLICATION_VND_FSC_WEBLAUNCH));
        assert_eq!(crate::Mime::parse("ApPlICatIon/vNd.fSc.WEBlauNCh"), Ok(APPLICATION_VND_FSC_WEBLAUNCH));
    }

    /// `application/vnd.fujifilm.fb.docuworks`
    pub const APPLICATION_VND_FUJIFILM_FB_DOCUWORKS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujifilmFbDocuworks),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujifilm_fb_docuworks_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujifilm.fb.docuworks"), Ok(APPLICATION_VND_FUJIFILM_FB_DOCUWORKS));
        assert_eq!(crate::Mime::parse("apPlIcAtION/Vnd.FUJifIlm.fB.doCUworkS"), Ok(APPLICATION_VND_FUJIFILM_FB_DOCUWORKS));
    }

    /// `application/vnd.fujifilm.fb.docuworks.binder`
    pub const APPLICATION_VND_FUJIFILM_FB_DOCUWORKS_BINDER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujifilmFbDocuworksBinder),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujifilm_fb_docuworks_binder_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujifilm.fb.docuworks.binder"), Ok(APPLICATION_VND_FUJIFILM_FB_DOCUWORKS_BINDER));
        assert_eq!(crate::Mime::parse("APPLIcAtiON/VnD.FUJiFILm.Fb.DOcuwoRKS.biNdeR"), Ok(APPLICATION_VND_FUJIFILM_FB_DOCUWORKS_BINDER));
    }

    /// `application/vnd.fujifilm.fb.docuworks.container`
    pub const APPLICATION_VND_FUJIFILM_FB_DOCUWORKS_CONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujifilmFbDocuworksContainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujifilm_fb_docuworks_container_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujifilm.fb.docuworks.container"), Ok(APPLICATION_VND_FUJIFILM_FB_DOCUWORKS_CONTAINER));
        assert_eq!(crate::Mime::parse("ApPlicAtIon/vND.fujiFilM.Fb.dOCUWorKS.COnTAInEr"), Ok(APPLICATION_VND_FUJIFILM_FB_DOCUWORKS_CONTAINER));
    }

    /// `application/vnd.fujifilm.fb.jfi+xml`
    pub const APPLICATION_VND_FUJIFILM_FB_JFI_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujifilmFbJfi),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujifilm_fb_jfi_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujifilm.fb.jfi+xml"), Ok(APPLICATION_VND_FUJIFILM_FB_JFI_XML));
        assert_eq!(crate::Mime::parse("apPLIcatiON/VnD.fuJIfILm.Fb.jfI+xmL"), Ok(APPLICATION_VND_FUJIFILM_FB_JFI_XML));
    }

    /// `application/vnd.fujitsu.oasys`
    pub const APPLICATION_VND_FUJITSU_OASYS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujitsuOasys),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujitsu_oasys_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujitsu.oasys"), Ok(APPLICATION_VND_FUJITSU_OASYS));
        assert_eq!(crate::Mime::parse("ApPlIcatioN/vnD.FujITsu.oasYs"), Ok(APPLICATION_VND_FUJITSU_OASYS));
    }

    /// `application/vnd.fujitsu.oasys2`
    pub const APPLICATION_VND_FUJITSU_OASYS2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujitsuOasys2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujitsu_oasys2_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujitsu.oasys2"), Ok(APPLICATION_VND_FUJITSU_OASYS2));
        assert_eq!(crate::Mime::parse("aPPLiCAtiON/vND.fuJITSU.oasyS2"), Ok(APPLICATION_VND_FUJITSU_OASYS2));
    }

    /// `application/vnd.fujitsu.oasys3`
    pub const APPLICATION_VND_FUJITSU_OASYS3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujitsuOasys3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujitsu_oasys3_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujitsu.oasys3"), Ok(APPLICATION_VND_FUJITSU_OASYS3));
        assert_eq!(crate::Mime::parse("ApPlIcaTIoN/VNd.FUJItsU.oasYS3"), Ok(APPLICATION_VND_FUJITSU_OASYS3));
    }

    /// `application/vnd.fujitsu.oasysgp`
    pub const APPLICATION_VND_FUJITSU_OASYSGP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujitsuOasysgp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujitsu_oasysgp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujitsu.oasysgp"), Ok(APPLICATION_VND_FUJITSU_OASYSGP));
        assert_eq!(crate::Mime::parse("ApplIcaTIon/vNd.fUJiTsu.OASYSgp"), Ok(APPLICATION_VND_FUJITSU_OASYSGP));
    }

    /// `application/vnd.fujitsu.oasysprs`
    pub const APPLICATION_VND_FUJITSU_OASYSPRS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujitsuOasysprs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujitsu_oasysprs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujitsu.oasysprs"), Ok(APPLICATION_VND_FUJITSU_OASYSPRS));
        assert_eq!(crate::Mime::parse("APplication/VnD.FUjiTsu.OaSysprS"), Ok(APPLICATION_VND_FUJITSU_OASYSPRS));
    }

    /// `application/vnd.fujixerox.ART-EX`
    pub const APPLICATION_VND_FUJIXEROX_ART_EX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxArtEx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_art_ex_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.ART-EX"), Ok(APPLICATION_VND_FUJIXEROX_ART_EX));
        assert_eq!(crate::Mime::parse("aPPLiCAtiOn/vNd.fujIXeROX.Art-ex"), Ok(APPLICATION_VND_FUJIXEROX_ART_EX));
    }

    /// `application/vnd.fujixerox.ART4`
    pub const APPLICATION_VND_FUJIXEROX_ART4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxArt4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_art4_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.ART4"), Ok(APPLICATION_VND_FUJIXEROX_ART4));
        assert_eq!(crate::Mime::parse("aPPLiCAtIon/VNd.FUjiXerOX.ART4"), Ok(APPLICATION_VND_FUJIXEROX_ART4));
    }

    /// `application/vnd.fujixerox.ddd`
    pub const APPLICATION_VND_FUJIXEROX_DDD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxDdd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_ddd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.ddd"), Ok(APPLICATION_VND_FUJIXEROX_DDD));
        assert_eq!(crate::Mime::parse("APpLIcaTioN/Vnd.FUjiXErox.dDD"), Ok(APPLICATION_VND_FUJIXEROX_DDD));
    }

    /// `application/vnd.fujixerox.docuworks`
    pub const APPLICATION_VND_FUJIXEROX_DOCUWORKS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxDocuworks),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_docuworks_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.docuworks"), Ok(APPLICATION_VND_FUJIXEROX_DOCUWORKS));
        assert_eq!(crate::Mime::parse("ApplICatIOn/vnd.fUjixerOx.docUWOrKs"), Ok(APPLICATION_VND_FUJIXEROX_DOCUWORKS));
    }

    /// `application/vnd.fujixerox.docuworks.binder`
    pub const APPLICATION_VND_FUJIXEROX_DOCUWORKS_BINDER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxDocuworksBinder),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_docuworks_binder_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.docuworks.binder"), Ok(APPLICATION_VND_FUJIXEROX_DOCUWORKS_BINDER));
        assert_eq!(crate::Mime::parse("APPLIcAtion/VND.FUJIxERoX.docUwoRkS.BInDER"), Ok(APPLICATION_VND_FUJIXEROX_DOCUWORKS_BINDER));
    }

    /// `application/vnd.fujixerox.docuworks.container`
    pub const APPLICATION_VND_FUJIXEROX_DOCUWORKS_CONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxDocuworksContainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_docuworks_container_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.docuworks.container"), Ok(APPLICATION_VND_FUJIXEROX_DOCUWORKS_CONTAINER));
        assert_eq!(crate::Mime::parse("aPPLicAtiOn/vNd.FUjIXEROX.DocuwORkS.cOntAINer"), Ok(APPLICATION_VND_FUJIXEROX_DOCUWORKS_CONTAINER));
    }

    /// `application/vnd.fujixerox.HBPL`
    pub const APPLICATION_VND_FUJIXEROX_HBPL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxHbpl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fujixerox_hbpl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fujixerox.HBPL"), Ok(APPLICATION_VND_FUJIXEROX_HBPL));
        assert_eq!(crate::Mime::parse("APpLicAtion/Vnd.fUjIxeroX.hbpL"), Ok(APPLICATION_VND_FUJIXEROX_HBPL));
    }

    /// `application/vnd.fut-misnet`
    pub const APPLICATION_VND_FUT_MISNET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFutMisnet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fut_misnet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fut-misnet"), Ok(APPLICATION_VND_FUT_MISNET));
        assert_eq!(crate::Mime::parse("APPlIcation/vND.FuT-MIsnet"), Ok(APPLICATION_VND_FUT_MISNET));
    }

    /// `application/vnd.futoin+cbor`
    pub const APPLICATION_VND_FUTOIN_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFutoin),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_futoin_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.futoin+cbor"), Ok(APPLICATION_VND_FUTOIN_CBOR));
        assert_eq!(crate::Mime::parse("aPpLicatioN/Vnd.FUtOIn+CBOr"), Ok(APPLICATION_VND_FUTOIN_CBOR));
    }

    /// `application/vnd.futoin+json`
    pub const APPLICATION_VND_FUTOIN_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFutoin),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_futoin_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.futoin+json"), Ok(APPLICATION_VND_FUTOIN_JSON));
        assert_eq!(crate::Mime::parse("apPLICatIoN/vNd.futoIn+jsOn"), Ok(APPLICATION_VND_FUTOIN_JSON));
    }

    /// `application/vnd.fuzzysheet`
    pub const APPLICATION_VND_FUZZYSHEET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndFuzzysheet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_fuzzysheet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.fuzzysheet"), Ok(APPLICATION_VND_FUZZYSHEET));
        assert_eq!(crate::Mime::parse("APpLicATiON/VnD.FuzZYSheet"), Ok(APPLICATION_VND_FUZZYSHEET));
    }

    /// `application/vnd.genomatix.tuxedo`
    pub const APPLICATION_VND_GENOMATIX_TUXEDO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGenomatixTuxedo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_genomatix_tuxedo_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.genomatix.tuxedo"), Ok(APPLICATION_VND_GENOMATIX_TUXEDO));
        assert_eq!(crate::Mime::parse("applicATION/vnd.gEnomatix.Tuxedo"), Ok(APPLICATION_VND_GENOMATIX_TUXEDO));
    }

    /// `application/vnd.gentics.grd+json`
    pub const APPLICATION_VND_GENTICS_GRD_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGenticsGrd),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_gentics_grd_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gentics.grd+json"), Ok(APPLICATION_VND_GENTICS_GRD_JSON));
        assert_eq!(crate::Mime::parse("APPlicaTioN/vND.GENtICS.GRD+jSoN"), Ok(APPLICATION_VND_GENTICS_GRD_JSON));
    }

    /// `application/vnd.geogebra.file`
    pub const APPLICATION_VND_GEOGEBRA_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeogebraFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geogebra_file_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geogebra.file"), Ok(APPLICATION_VND_GEOGEBRA_FILE));
        assert_eq!(crate::Mime::parse("aPPLICATioN/vND.gEoGebrA.fiLe"), Ok(APPLICATION_VND_GEOGEBRA_FILE));
    }

    /// `application/vnd.geogebra.slides`
    pub const APPLICATION_VND_GEOGEBRA_SLIDES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeogebraSlides),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geogebra_slides_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geogebra.slides"), Ok(APPLICATION_VND_GEOGEBRA_SLIDES));
        assert_eq!(crate::Mime::parse("APpliCAtiON/VND.GeOgEBRA.sLIdeS"), Ok(APPLICATION_VND_GEOGEBRA_SLIDES));
    }

    /// `application/vnd.geogebra.tool`
    pub const APPLICATION_VND_GEOGEBRA_TOOL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeogebraTool),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geogebra_tool_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geogebra.tool"), Ok(APPLICATION_VND_GEOGEBRA_TOOL));
        assert_eq!(crate::Mime::parse("ApPLICAtIOn/vnD.gEOgebRa.tool"), Ok(APPLICATION_VND_GEOGEBRA_TOOL));
    }

    /// `application/vnd.geometry-explorer`
    pub const APPLICATION_VND_GEOMETRY_EXPLORER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeometryExplorer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geometry_explorer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geometry-explorer"), Ok(APPLICATION_VND_GEOMETRY_EXPLORER));
        assert_eq!(crate::Mime::parse("APpLicATIOn/vND.GeoMEtRy-EXPLOREr"), Ok(APPLICATION_VND_GEOMETRY_EXPLORER));
    }

    /// `application/vnd.geonext`
    pub const APPLICATION_VND_GEONEXT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeonext),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geonext_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geonext"), Ok(APPLICATION_VND_GEONEXT));
        assert_eq!(crate::Mime::parse("aPPlIcatIon/VND.GEOnexT"), Ok(APPLICATION_VND_GEONEXT));
    }

    /// `application/vnd.geoplan`
    pub const APPLICATION_VND_GEOPLAN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeoplan),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geoplan_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geoplan"), Ok(APPLICATION_VND_GEOPLAN));
        assert_eq!(crate::Mime::parse("APplIcAtIon/VNd.GEoplAn"), Ok(APPLICATION_VND_GEOPLAN));
    }

    /// `application/vnd.geospace`
    pub const APPLICATION_VND_GEOSPACE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGeospace),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_geospace_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.geospace"), Ok(APPLICATION_VND_GEOSPACE));
        assert_eq!(crate::Mime::parse("ApPLiCaTiON/vND.gEOSPAce"), Ok(APPLICATION_VND_GEOSPACE));
    }

    /// `application/vnd.gerber`
    pub const APPLICATION_VND_GERBER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGerber),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_gerber_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gerber"), Ok(APPLICATION_VND_GERBER));
        assert_eq!(crate::Mime::parse("aPpLIcAtiON/VnD.gErBeR"), Ok(APPLICATION_VND_GERBER));
    }

    /// `application/vnd.globalplatform.card-content-mgt`
    pub const APPLICATION_VND_GLOBALPLATFORM_CARD_CONTENT_MGT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGlobalplatformCardContentMgt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_globalplatform_card_content_mgt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.globalplatform.card-content-mgt"), Ok(APPLICATION_VND_GLOBALPLATFORM_CARD_CONTENT_MGT));
        assert_eq!(crate::Mime::parse("AppliCATIOn/vnD.gLobALplaTFOrm.caRd-Content-MGT"), Ok(APPLICATION_VND_GLOBALPLATFORM_CARD_CONTENT_MGT));
    }

    /// `application/vnd.globalplatform.card-content-mgt-response`
    pub const APPLICATION_VND_GLOBALPLATFORM_CARD_CONTENT_MGT_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGlobalplatformCardContentMgtResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_globalplatform_card_content_mgt_response_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.globalplatform.card-content-mgt-response"), Ok(APPLICATION_VND_GLOBALPLATFORM_CARD_CONTENT_MGT_RESPONSE));
        assert_eq!(crate::Mime::parse("ApplIcAtiOn/vNd.GLoBaLpLATfOrm.cArD-COnTenT-MGt-reSpoNSe"), Ok(APPLICATION_VND_GLOBALPLATFORM_CARD_CONTENT_MGT_RESPONSE));
    }

    /// `application/vnd.gnu.taler.exchange+json`
    pub const APPLICATION_VND_GNU_TALER_EXCHANGE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGnuTalerExchange),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_gnu_taler_exchange_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gnu.taler.exchange+json"), Ok(APPLICATION_VND_GNU_TALER_EXCHANGE_JSON));
        assert_eq!(crate::Mime::parse("aPplIcATioN/vnD.GnU.taleR.ExCHange+JSoN"), Ok(APPLICATION_VND_GNU_TALER_EXCHANGE_JSON));
    }

    /// `application/vnd.gnu.taler.merchant+json`
    pub const APPLICATION_VND_GNU_TALER_MERCHANT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGnuTalerMerchant),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_gnu_taler_merchant_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gnu.taler.merchant+json"), Ok(APPLICATION_VND_GNU_TALER_MERCHANT_JSON));
        assert_eq!(crate::Mime::parse("aPPLIcAtiOn/VnD.gnU.tALeR.MErchant+jSON"), Ok(APPLICATION_VND_GNU_TALER_MERCHANT_JSON));
    }

    /// `application/vnd.google-earth.kml+xml`
    pub const APPLICATION_VND_GOOGLE_EARTH_KML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGoogleEarthKml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_google_earth_kml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.google-earth.kml+xml"), Ok(APPLICATION_VND_GOOGLE_EARTH_KML_XML));
        assert_eq!(crate::Mime::parse("applIcaTiOn/vnD.GOOgle-eARth.kMl+XMl"), Ok(APPLICATION_VND_GOOGLE_EARTH_KML_XML));
    }

    /// `application/vnd.google-earth.kmz`
    pub const APPLICATION_VND_GOOGLE_EARTH_KMZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGoogleEarthKmz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_google_earth_kmz_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.google-earth.kmz"), Ok(APPLICATION_VND_GOOGLE_EARTH_KMZ));
        assert_eq!(crate::Mime::parse("AppLICATIOn/vnD.gooGLe-eaRth.kMZ"), Ok(APPLICATION_VND_GOOGLE_EARTH_KMZ));
    }

    /// `application/vnd.gov.sk.e-form+xml`
    pub const APPLICATION_VND_GOV_SK_E_FORM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGovSkEForm),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_gov_sk_e_form_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gov.sk.e-form+xml"), Ok(APPLICATION_VND_GOV_SK_E_FORM_XML));
        assert_eq!(crate::Mime::parse("ApPlIcaTioN/vNd.gOv.SK.E-FORm+xml"), Ok(APPLICATION_VND_GOV_SK_E_FORM_XML));
    }

    /// `application/vnd.gov.sk.e-form+zip`
    pub const APPLICATION_VND_GOV_SK_E_FORM_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGovSkEForm),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_gov_sk_e_form_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gov.sk.e-form+zip"), Ok(APPLICATION_VND_GOV_SK_E_FORM_ZIP));
        assert_eq!(crate::Mime::parse("ApPlIcatION/vnD.gOV.SK.e-fOrm+zIp"), Ok(APPLICATION_VND_GOV_SK_E_FORM_ZIP));
    }

    /// `application/vnd.gov.sk.xmldatacontainer+xml`
    pub const APPLICATION_VND_GOV_SK_XMLDATACONTAINER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGovSkXmldatacontainer),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_gov_sk_xmldatacontainer_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gov.sk.xmldatacontainer+xml"), Ok(APPLICATION_VND_GOV_SK_XMLDATACONTAINER_XML));
        assert_eq!(crate::Mime::parse("appLicatioN/VND.GOv.sK.XMlDaTaCONtaIner+XML"), Ok(APPLICATION_VND_GOV_SK_XMLDATACONTAINER_XML));
    }

    /// `application/vnd.grafeq`
    pub const APPLICATION_VND_GRAFEQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrafeq),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_grafeq_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.grafeq"), Ok(APPLICATION_VND_GRAFEQ));
        assert_eq!(crate::Mime::parse("AppLication/VNd.GRAfeq"), Ok(APPLICATION_VND_GRAFEQ));
    }

    /// `application/vnd.gridmp`
    pub const APPLICATION_VND_GRIDMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGridmp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_gridmp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.gridmp"), Ok(APPLICATION_VND_GRIDMP));
        assert_eq!(crate::Mime::parse("aPpLIcatioN/vnd.gRIdMP"), Ok(APPLICATION_VND_GRIDMP));
    }

    /// `application/vnd.groove-account`
    pub const APPLICATION_VND_GROOVE_ACCOUNT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveAccount),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_account_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-account"), Ok(APPLICATION_VND_GROOVE_ACCOUNT));
        assert_eq!(crate::Mime::parse("APplicATion/vnd.GROOVE-AccOUnT"), Ok(APPLICATION_VND_GROOVE_ACCOUNT));
    }

    /// `application/vnd.groove-help`
    pub const APPLICATION_VND_GROOVE_HELP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveHelp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_help_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-help"), Ok(APPLICATION_VND_GROOVE_HELP));
        assert_eq!(crate::Mime::parse("APPLIcaTION/VnD.grOOVe-heLP"), Ok(APPLICATION_VND_GROOVE_HELP));
    }

    /// `application/vnd.groove-identity-message`
    pub const APPLICATION_VND_GROOVE_IDENTITY_MESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveIdentityMessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_identity_message_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-identity-message"), Ok(APPLICATION_VND_GROOVE_IDENTITY_MESSAGE));
        assert_eq!(crate::Mime::parse("ApPlIcAtIon/vND.groOVE-idENTiTy-MESSage"), Ok(APPLICATION_VND_GROOVE_IDENTITY_MESSAGE));
    }

    /// `application/vnd.groove-injector`
    pub const APPLICATION_VND_GROOVE_INJECTOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveInjector),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_injector_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-injector"), Ok(APPLICATION_VND_GROOVE_INJECTOR));
        assert_eq!(crate::Mime::parse("apPlIcaTIOn/vnD.Groove-injEcTOR"), Ok(APPLICATION_VND_GROOVE_INJECTOR));
    }

    /// `application/vnd.groove-tool-message`
    pub const APPLICATION_VND_GROOVE_TOOL_MESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveToolMessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_tool_message_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-tool-message"), Ok(APPLICATION_VND_GROOVE_TOOL_MESSAGE));
        assert_eq!(crate::Mime::parse("APPLicatioN/VND.gROOVe-TooL-mEssaGe"), Ok(APPLICATION_VND_GROOVE_TOOL_MESSAGE));
    }

    /// `application/vnd.groove-tool-template`
    pub const APPLICATION_VND_GROOVE_TOOL_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveToolTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_tool_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-tool-template"), Ok(APPLICATION_VND_GROOVE_TOOL_TEMPLATE));
        assert_eq!(crate::Mime::parse("APPLICAtION/VnD.GRoove-tOOl-TEmpLATe"), Ok(APPLICATION_VND_GROOVE_TOOL_TEMPLATE));
    }

    /// `application/vnd.groove-vcard`
    pub const APPLICATION_VND_GROOVE_VCARD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndGrooveVcard),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_groove_vcard_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.groove-vcard"), Ok(APPLICATION_VND_GROOVE_VCARD));
        assert_eq!(crate::Mime::parse("aPpLiCation/vND.GRoovE-VcaRD"), Ok(APPLICATION_VND_GROOVE_VCARD));
    }

    /// `application/vnd.hal+json`
    pub const APPLICATION_VND_HAL_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHal),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hal_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hal+json"), Ok(APPLICATION_VND_HAL_JSON));
        assert_eq!(crate::Mime::parse("aPPLicATiOn/vND.HaL+jsON"), Ok(APPLICATION_VND_HAL_JSON));
    }

    /// `application/vnd.hal+xml`
    pub const APPLICATION_VND_HAL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHal),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hal_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hal+xml"), Ok(APPLICATION_VND_HAL_XML));
        assert_eq!(crate::Mime::parse("aPplIcatioN/Vnd.HAl+XmL"), Ok(APPLICATION_VND_HAL_XML));
    }

    /// `application/vnd.HandHeld-Entertainment+xml`
    pub const APPLICATION_VND_HAND_HELD_ENTERTAINMENT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHandHeldEntertainment),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hand_held_entertainment_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.HandHeld-Entertainment+xml"), Ok(APPLICATION_VND_HAND_HELD_ENTERTAINMENT_XML));
        assert_eq!(crate::Mime::parse("ApplIcAtiON/VnD.haNDhElD-enterTaINmEnT+xMl"), Ok(APPLICATION_VND_HAND_HELD_ENTERTAINMENT_XML));
    }

    /// `application/vnd.hbci`
    pub const APPLICATION_VND_HBCI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHbci),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hbci_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hbci"), Ok(APPLICATION_VND_HBCI));
        assert_eq!(crate::Mime::parse("apPlIcATioN/VnD.HBCi"), Ok(APPLICATION_VND_HBCI));
    }

    /// `application/vnd.hc+json`
    pub const APPLICATION_VND_HC_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHc),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hc_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hc+json"), Ok(APPLICATION_VND_HC_JSON));
        assert_eq!(crate::Mime::parse("aPplicAtIoN/VnD.hC+jSOn"), Ok(APPLICATION_VND_HC_JSON));
    }

    /// `application/vnd.hcl-bireports`
    pub const APPLICATION_VND_HCL_BIREPORTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHclBireports),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hcl_bireports_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hcl-bireports"), Ok(APPLICATION_VND_HCL_BIREPORTS));
        assert_eq!(crate::Mime::parse("ApPLICAtION/vnd.hcL-BiREpORts"), Ok(APPLICATION_VND_HCL_BIREPORTS));
    }

    /// `application/vnd.hdt`
    pub const APPLICATION_VND_HDT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHdt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hdt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hdt"), Ok(APPLICATION_VND_HDT));
        assert_eq!(crate::Mime::parse("ApplIcatION/vnD.HdT"), Ok(APPLICATION_VND_HDT));
    }

    /// `application/vnd.heroku+json`
    pub const APPLICATION_VND_HEROKU_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHeroku),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_heroku_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.heroku+json"), Ok(APPLICATION_VND_HEROKU_JSON));
        assert_eq!(crate::Mime::parse("aPPLICatION/vnd.HErokU+jsON"), Ok(APPLICATION_VND_HEROKU_JSON));
    }

    /// `application/vnd.hhe.lesson-player`
    pub const APPLICATION_VND_HHE_LESSON_PLAYER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHheLessonPlayer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hhe_lesson_player_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hhe.lesson-player"), Ok(APPLICATION_VND_HHE_LESSON_PLAYER));
        assert_eq!(crate::Mime::parse("AppLICAtiOn/vnd.HHE.LESSon-plAYER"), Ok(APPLICATION_VND_HHE_LESSON_PLAYER));
    }

    /// `application/vnd.hl7cda+xml`
    pub const APPLICATION_VND_HL7CDA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHl7cda),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hl7cda_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hl7cda+xml"), Ok(APPLICATION_VND_HL7CDA_XML));
        assert_eq!(crate::Mime::parse("applIcAtioN/vnd.HL7CdA+XML"), Ok(APPLICATION_VND_HL7CDA_XML));
    }

    /// `application/vnd.hl7v2+xml`
    pub const APPLICATION_VND_HL7V2_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHl7v2),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hl7v2_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hl7v2+xml"), Ok(APPLICATION_VND_HL7V2_XML));
        assert_eq!(crate::Mime::parse("aPPlIcAtiOn/VnD.hl7V2+xml"), Ok(APPLICATION_VND_HL7V2_XML));
    }

    /// `application/vnd.hp-HPGL`
    pub const APPLICATION_VND_HP_HPGL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHpHpgl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hp_hpgl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hp-HPGL"), Ok(APPLICATION_VND_HP_HPGL));
        assert_eq!(crate::Mime::parse("ApplicaTiOn/vnd.HP-HpgL"), Ok(APPLICATION_VND_HP_HPGL));
    }

    /// `application/vnd.hp-hpid`
    pub const APPLICATION_VND_HP_HPID: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHpHpid),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hp_hpid_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hp-hpid"), Ok(APPLICATION_VND_HP_HPID));
        assert_eq!(crate::Mime::parse("appLICatiOn/VND.Hp-HPID"), Ok(APPLICATION_VND_HP_HPID));
    }

    /// `application/vnd.hp-hps`
    pub const APPLICATION_VND_HP_HPS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHpHps),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hp_hps_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hp-hps"), Ok(APPLICATION_VND_HP_HPS));
        assert_eq!(crate::Mime::parse("ApPliCatIon/VNd.HP-hPs"), Ok(APPLICATION_VND_HP_HPS));
    }

    /// `application/vnd.hp-jlyt`
    pub const APPLICATION_VND_HP_JLYT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHpJlyt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hp_jlyt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hp-jlyt"), Ok(APPLICATION_VND_HP_JLYT));
        assert_eq!(crate::Mime::parse("APPliCaTIoN/VnD.HP-Jlyt"), Ok(APPLICATION_VND_HP_JLYT));
    }

    /// `application/vnd.hp-PCL`
    pub const APPLICATION_VND_HP_PCL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHpPcl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hp_pcl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hp-PCL"), Ok(APPLICATION_VND_HP_PCL));
        assert_eq!(crate::Mime::parse("ApPLiCatiOn/VNd.Hp-pCL"), Ok(APPLICATION_VND_HP_PCL));
    }

    /// `application/vnd.hp-PCLXL`
    pub const APPLICATION_VND_HP_PCLXL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHpPclxl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hp_pclxl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hp-PCLXL"), Ok(APPLICATION_VND_HP_PCLXL));
        assert_eq!(crate::Mime::parse("APpLiCAtioN/vND.hp-PclXL"), Ok(APPLICATION_VND_HP_PCLXL));
    }

    /// `application/vnd.httphone`
    pub const APPLICATION_VND_HTTPHONE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHttphone),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_httphone_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.httphone"), Ok(APPLICATION_VND_HTTPHONE));
        assert_eq!(crate::Mime::parse("APpLicatioN/vND.htTPhonE"), Ok(APPLICATION_VND_HTTPHONE));
    }

    /// `application/vnd.hydrostatix.sof-data`
    pub const APPLICATION_VND_HYDROSTATIX_SOF_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHydrostatixSofData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hydrostatix_sof_data_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hydrostatix.sof-data"), Ok(APPLICATION_VND_HYDROSTATIX_SOF_DATA));
        assert_eq!(crate::Mime::parse("APPliCAtIoN/Vnd.HYDrOstAtix.soF-daTa"), Ok(APPLICATION_VND_HYDROSTATIX_SOF_DATA));
    }

    /// `application/vnd.hyper+json`
    pub const APPLICATION_VND_HYPER_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHyper),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hyper_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hyper+json"), Ok(APPLICATION_VND_HYPER_JSON));
        assert_eq!(crate::Mime::parse("aPpLIcaTIOn/vnd.hyPEr+JsOn"), Ok(APPLICATION_VND_HYPER_JSON));
    }

    /// `application/vnd.hyper-item+json`
    pub const APPLICATION_VND_HYPER_ITEM_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHyperItem),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hyper_item_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hyper-item+json"), Ok(APPLICATION_VND_HYPER_ITEM_JSON));
        assert_eq!(crate::Mime::parse("APpLIcAtIOn/VND.hYper-itEm+JsOn"), Ok(APPLICATION_VND_HYPER_ITEM_JSON));
    }

    /// `application/vnd.hyperdrive+json`
    pub const APPLICATION_VND_HYPERDRIVE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHyperdrive),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_hyperdrive_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hyperdrive+json"), Ok(APPLICATION_VND_HYPERDRIVE_JSON));
        assert_eq!(crate::Mime::parse("APpLicatIOn/Vnd.HYPeRdriVe+JsOn"), Ok(APPLICATION_VND_HYPERDRIVE_JSON));
    }

    /// `application/vnd.hzn-3d-crossword`
    pub const APPLICATION_VND_HZN_3D_CROSSWORD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndHzn3dCrossword),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_hzn_3d_crossword_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.hzn-3d-crossword"), Ok(APPLICATION_VND_HZN_3D_CROSSWORD));
        assert_eq!(crate::Mime::parse("AppLicATIoN/vnd.hzN-3D-CRosSwORD"), Ok(APPLICATION_VND_HZN_3D_CROSSWORD));
    }

    /// `application/vnd.ibm.electronic-media`
    pub const APPLICATION_VND_IBM_ELECTRONIC_MEDIA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIbmElectronicMedia),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ibm_electronic_media_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ibm.electronic-media"), Ok(APPLICATION_VND_IBM_ELECTRONIC_MEDIA));
        assert_eq!(crate::Mime::parse("APPLICatIon/VND.IbM.ELectROnIc-MedIA"), Ok(APPLICATION_VND_IBM_ELECTRONIC_MEDIA));
    }

    /// `application/vnd.ibm.MiniPay`
    pub const APPLICATION_VND_IBM_MINI_PAY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIbmMiniPay),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ibm_mini_pay_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ibm.MiniPay"), Ok(APPLICATION_VND_IBM_MINI_PAY));
        assert_eq!(crate::Mime::parse("APpLIcatiON/VnD.ibM.MINipaY"), Ok(APPLICATION_VND_IBM_MINI_PAY));
    }

    /// `application/vnd.ibm.rights-management`
    pub const APPLICATION_VND_IBM_RIGHTS_MANAGEMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIbmRightsManagement),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ibm_rights_management_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ibm.rights-management"), Ok(APPLICATION_VND_IBM_RIGHTS_MANAGEMENT));
        assert_eq!(crate::Mime::parse("ApplicATIon/Vnd.IBM.Rights-mAnAGeMENT"), Ok(APPLICATION_VND_IBM_RIGHTS_MANAGEMENT));
    }

    /// `application/vnd.ibm.secure-container`
    pub const APPLICATION_VND_IBM_SECURE_CONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIbmSecureContainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ibm_secure_container_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ibm.secure-container"), Ok(APPLICATION_VND_IBM_SECURE_CONTAINER));
        assert_eq!(crate::Mime::parse("applICATION/Vnd.Ibm.sEcuRE-CoNtAiNer"), Ok(APPLICATION_VND_IBM_SECURE_CONTAINER));
    }

    /// `application/vnd.iccprofile`
    pub const APPLICATION_VND_ICCPROFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIccprofile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_iccprofile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iccprofile"), Ok(APPLICATION_VND_ICCPROFILE));
        assert_eq!(crate::Mime::parse("aPplicAtion/vNd.ICcPRoFIlE"), Ok(APPLICATION_VND_ICCPROFILE));
    }

    /// `application/vnd.ieee.1905`
    pub const APPLICATION_VND_IEEE_1905: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIeee1905),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ieee_1905_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ieee.1905"), Ok(APPLICATION_VND_IEEE_1905));
        assert_eq!(crate::Mime::parse("APplICaTiOn/Vnd.IEeE.1905"), Ok(APPLICATION_VND_IEEE_1905));
    }

    /// `application/vnd.igloader`
    pub const APPLICATION_VND_IGLOADER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIgloader),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_igloader_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.igloader"), Ok(APPLICATION_VND_IGLOADER));
        assert_eq!(crate::Mime::parse("appliCaTIOn/VNd.IGlOaDer"), Ok(APPLICATION_VND_IGLOADER));
    }

    /// `application/vnd.imagemeter.folder+zip`
    pub const APPLICATION_VND_IMAGEMETER_FOLDER_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImagemeterFolder),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_imagemeter_folder_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.imagemeter.folder+zip"), Ok(APPLICATION_VND_IMAGEMETER_FOLDER_ZIP));
        assert_eq!(crate::Mime::parse("apPliCatIOn/vnD.ImaGEMETER.FOldEr+ZiP"), Ok(APPLICATION_VND_IMAGEMETER_FOLDER_ZIP));
    }

    /// `application/vnd.imagemeter.image+zip`
    pub const APPLICATION_VND_IMAGEMETER_IMAGE_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImagemeterImage),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_imagemeter_image_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.imagemeter.image+zip"), Ok(APPLICATION_VND_IMAGEMETER_IMAGE_ZIP));
        assert_eq!(crate::Mime::parse("appliCaTioN/vnD.imagemEtER.ImaGe+ZiP"), Ok(APPLICATION_VND_IMAGEMETER_IMAGE_ZIP));
    }

    /// `application/vnd.immervision-ivp`
    pub const APPLICATION_VND_IMMERVISION_IVP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImmervisionIvp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_immervision_ivp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.immervision-ivp"), Ok(APPLICATION_VND_IMMERVISION_IVP));
        assert_eq!(crate::Mime::parse("APPlIcatIOn/VNd.iMMERVISiON-IVP"), Ok(APPLICATION_VND_IMMERVISION_IVP));
    }

    /// `application/vnd.immervision-ivu`
    pub const APPLICATION_VND_IMMERVISION_IVU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImmervisionIvu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_immervision_ivu_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.immervision-ivu"), Ok(APPLICATION_VND_IMMERVISION_IVU));
        assert_eq!(crate::Mime::parse("aPpLIcaTIOn/vnd.imMeRvisION-IvU"), Ok(APPLICATION_VND_IMMERVISION_IVU));
    }

    /// `application/vnd.ims.imsccv1p1`
    pub const APPLICATION_VND_IMS_IMSCCV1P1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsImsccv1p1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_imsccv1p1_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.imsccv1p1"), Ok(APPLICATION_VND_IMS_IMSCCV1P1));
        assert_eq!(crate::Mime::parse("APplICAtiOn/VND.iMS.imsCcV1P1"), Ok(APPLICATION_VND_IMS_IMSCCV1P1));
    }

    /// `application/vnd.ims.imsccv1p2`
    pub const APPLICATION_VND_IMS_IMSCCV1P2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsImsccv1p2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_imsccv1p2_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.imsccv1p2"), Ok(APPLICATION_VND_IMS_IMSCCV1P2));
        assert_eq!(crate::Mime::parse("appLIcATIon/vNd.imS.imsCCV1P2"), Ok(APPLICATION_VND_IMS_IMSCCV1P2));
    }

    /// `application/vnd.ims.imsccv1p3`
    pub const APPLICATION_VND_IMS_IMSCCV1P3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsImsccv1p3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_imsccv1p3_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.imsccv1p3"), Ok(APPLICATION_VND_IMS_IMSCCV1P3));
        assert_eq!(crate::Mime::parse("ApPliCatIoN/Vnd.IMs.iMsCCV1P3"), Ok(APPLICATION_VND_IMS_IMSCCV1P3));
    }

    /// `application/vnd.ims.lis.v2.result+json`
    pub const APPLICATION_VND_IMS_LIS_V2_RESULT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsLisV2Result),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_lis_v2_result_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.lis.v2.result+json"), Ok(APPLICATION_VND_IMS_LIS_V2_RESULT_JSON));
        assert_eq!(crate::Mime::parse("ApplicAtIoN/vnd.iMS.lis.v2.REsULT+JsON"), Ok(APPLICATION_VND_IMS_LIS_V2_RESULT_JSON));
    }

    /// `application/vnd.ims.lti.v2.toolconsumerprofile+json`
    pub const APPLICATION_VND_IMS_LTI_V2_TOOLCONSUMERPROFILE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsLtiV2Toolconsumerprofile),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_lti_v2_toolconsumerprofile_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.lti.v2.toolconsumerprofile+json"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLCONSUMERPROFILE_JSON));
        assert_eq!(crate::Mime::parse("APplication/VNd.ims.LTi.V2.tOOLCoNSUMeRpRoFILe+JSON"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLCONSUMERPROFILE_JSON));
    }

    /// `application/vnd.ims.lti.v2.toolproxy+json`
    pub const APPLICATION_VND_IMS_LTI_V2_TOOLPROXY_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsLtiV2Toolproxy),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_lti_v2_toolproxy_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.lti.v2.toolproxy+json"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLPROXY_JSON));
        assert_eq!(crate::Mime::parse("ApplIcATIoN/vND.IMs.LtI.v2.toOLPrOxY+jSON"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLPROXY_JSON));
    }

    /// `application/vnd.ims.lti.v2.toolproxy.id+json`
    pub const APPLICATION_VND_IMS_LTI_V2_TOOLPROXY_ID_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsLtiV2ToolproxyId),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_lti_v2_toolproxy_id_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.lti.v2.toolproxy.id+json"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLPROXY_ID_JSON));
        assert_eq!(crate::Mime::parse("apPlicaTION/VND.IMS.LtI.v2.TOOlpROXy.Id+jsOn"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLPROXY_ID_JSON));
    }

    /// `application/vnd.ims.lti.v2.toolsettings+json`
    pub const APPLICATION_VND_IMS_LTI_V2_TOOLSETTINGS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsLtiV2Toolsettings),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_lti_v2_toolsettings_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.lti.v2.toolsettings+json"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLSETTINGS_JSON));
        assert_eq!(crate::Mime::parse("aPPLIcAtIoN/vNd.ImS.LTi.v2.tOOlSeTtinGs+JsoN"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLSETTINGS_JSON));
    }

    /// `application/vnd.ims.lti.v2.toolsettings.simple+json`
    pub const APPLICATION_VND_IMS_LTI_V2_TOOLSETTINGS_SIMPLE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndImsLtiV2ToolsettingsSimple),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ims_lti_v2_toolsettings_simple_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ims.lti.v2.toolsettings.simple+json"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLSETTINGS_SIMPLE_JSON));
        assert_eq!(crate::Mime::parse("APplication/vND.IMS.lTi.v2.tOoLsettinGS.sImPle+jSON"), Ok(APPLICATION_VND_IMS_LTI_V2_TOOLSETTINGS_SIMPLE_JSON));
    }

    /// `application/vnd.informedcontrol.rms+xml`
    pub const APPLICATION_VND_INFORMEDCONTROL_RMS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndInformedcontrolRms),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_informedcontrol_rms_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.informedcontrol.rms+xml"), Ok(APPLICATION_VND_INFORMEDCONTROL_RMS_XML));
        assert_eq!(crate::Mime::parse("ApPLiCatiON/VND.iNfOrMedcOntroL.rMs+Xml"), Ok(APPLICATION_VND_INFORMEDCONTROL_RMS_XML));
    }

    /// `application/vnd.infotech.project`
    pub const APPLICATION_VND_INFOTECH_PROJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndInfotechProject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_infotech_project_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.infotech.project"), Ok(APPLICATION_VND_INFOTECH_PROJECT));
        assert_eq!(crate::Mime::parse("APpLicatIoN/vND.inFOTeCH.PrOJect"), Ok(APPLICATION_VND_INFOTECH_PROJECT));
    }

    /// `application/vnd.infotech.project+xml`
    pub const APPLICATION_VND_INFOTECH_PROJECT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndInfotechProject),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_infotech_project_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.infotech.project+xml"), Ok(APPLICATION_VND_INFOTECH_PROJECT_XML));
        assert_eq!(crate::Mime::parse("aPPlicatIoN/VND.InfOtECH.pROJeCT+XML"), Ok(APPLICATION_VND_INFOTECH_PROJECT_XML));
    }

    /// `application/vnd.innopath.wamp.notification`
    pub const APPLICATION_VND_INNOPATH_WAMP_NOTIFICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndInnopathWampNotification),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_innopath_wamp_notification_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.innopath.wamp.notification"), Ok(APPLICATION_VND_INNOPATH_WAMP_NOTIFICATION));
        assert_eq!(crate::Mime::parse("appLIcation/vnD.InNoPATH.WAmp.nOTifiCaTIoN"), Ok(APPLICATION_VND_INNOPATH_WAMP_NOTIFICATION));
    }

    /// `application/vnd.insors.igm`
    pub const APPLICATION_VND_INSORS_IGM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndInsorsIgm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_insors_igm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.insors.igm"), Ok(APPLICATION_VND_INSORS_IGM));
        assert_eq!(crate::Mime::parse("aPpLIcaTION/vnD.InsOrs.igm"), Ok(APPLICATION_VND_INSORS_IGM));
    }

    /// `application/vnd.intercon.formnet`
    pub const APPLICATION_VND_INTERCON_FORMNET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndInterconFormnet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_intercon_formnet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.intercon.formnet"), Ok(APPLICATION_VND_INTERCON_FORMNET));
        assert_eq!(crate::Mime::parse("AppLicaTIon/vnd.InTErcOn.fORMneT"), Ok(APPLICATION_VND_INTERCON_FORMNET));
    }

    /// `application/vnd.intergeo`
    pub const APPLICATION_VND_INTERGEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIntergeo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_intergeo_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.intergeo"), Ok(APPLICATION_VND_INTERGEO));
        assert_eq!(crate::Mime::parse("ApPlIcAtIoN/vNd.INtergeO"), Ok(APPLICATION_VND_INTERGEO));
    }

    /// `application/vnd.intertrust.digibox`
    pub const APPLICATION_VND_INTERTRUST_DIGIBOX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIntertrustDigibox),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_intertrust_digibox_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.intertrust.digibox"), Ok(APPLICATION_VND_INTERTRUST_DIGIBOX));
        assert_eq!(crate::Mime::parse("APPliCatIoN/vND.inTERTrUST.dIgIBOX"), Ok(APPLICATION_VND_INTERTRUST_DIGIBOX));
    }

    /// `application/vnd.intertrust.nncp`
    pub const APPLICATION_VND_INTERTRUST_NNCP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIntertrustNncp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_intertrust_nncp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.intertrust.nncp"), Ok(APPLICATION_VND_INTERTRUST_NNCP));
        assert_eq!(crate::Mime::parse("ApPLiCaTiOn/vnD.IntErTRusT.NncP"), Ok(APPLICATION_VND_INTERTRUST_NNCP));
    }

    /// `application/vnd.intu.qbo`
    pub const APPLICATION_VND_INTU_QBO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIntuQbo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_intu_qbo_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.intu.qbo"), Ok(APPLICATION_VND_INTU_QBO));
        assert_eq!(crate::Mime::parse("appLiCAtion/vnD.InTU.QBO"), Ok(APPLICATION_VND_INTU_QBO));
    }

    /// `application/vnd.intu.qfx`
    pub const APPLICATION_VND_INTU_QFX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIntuQfx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_intu_qfx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.intu.qfx"), Ok(APPLICATION_VND_INTU_QFX));
        assert_eq!(crate::Mime::parse("APPLIcatIon/vNd.INTu.qFX"), Ok(APPLICATION_VND_INTU_QFX));
    }

    /// `application/vnd.iptc.g2.catalogitem+xml`
    pub const APPLICATION_VND_IPTC_G2_CATALOGITEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Catalogitem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_catalogitem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.catalogitem+xml"), Ok(APPLICATION_VND_IPTC_G2_CATALOGITEM_XML));
        assert_eq!(crate::Mime::parse("apPLICAtION/vNd.IpTC.G2.cATaLogItEm+XML"), Ok(APPLICATION_VND_IPTC_G2_CATALOGITEM_XML));
    }

    /// `application/vnd.iptc.g2.conceptitem+xml`
    pub const APPLICATION_VND_IPTC_G2_CONCEPTITEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Conceptitem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_conceptitem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.conceptitem+xml"), Ok(APPLICATION_VND_IPTC_G2_CONCEPTITEM_XML));
        assert_eq!(crate::Mime::parse("appLIcATion/vND.Iptc.g2.coNCEPTIteM+XmL"), Ok(APPLICATION_VND_IPTC_G2_CONCEPTITEM_XML));
    }

    /// `application/vnd.iptc.g2.knowledgeitem+xml`
    pub const APPLICATION_VND_IPTC_G2_KNOWLEDGEITEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Knowledgeitem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_knowledgeitem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.knowledgeitem+xml"), Ok(APPLICATION_VND_IPTC_G2_KNOWLEDGEITEM_XML));
        assert_eq!(crate::Mime::parse("ApplICatION/VnD.IpTC.g2.KNowleDgeItEM+XMl"), Ok(APPLICATION_VND_IPTC_G2_KNOWLEDGEITEM_XML));
    }

    /// `application/vnd.iptc.g2.newsitem+xml`
    pub const APPLICATION_VND_IPTC_G2_NEWSITEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Newsitem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_newsitem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.newsitem+xml"), Ok(APPLICATION_VND_IPTC_G2_NEWSITEM_XML));
        assert_eq!(crate::Mime::parse("aPpLIcaTIon/vnd.IPTc.G2.newsitEM+xml"), Ok(APPLICATION_VND_IPTC_G2_NEWSITEM_XML));
    }

    /// `application/vnd.iptc.g2.newsmessage+xml`
    pub const APPLICATION_VND_IPTC_G2_NEWSMESSAGE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Newsmessage),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_newsmessage_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.newsmessage+xml"), Ok(APPLICATION_VND_IPTC_G2_NEWSMESSAGE_XML));
        assert_eq!(crate::Mime::parse("APpLiCaTiON/vND.IptC.G2.NewsmESsAGE+xML"), Ok(APPLICATION_VND_IPTC_G2_NEWSMESSAGE_XML));
    }

    /// `application/vnd.iptc.g2.packageitem+xml`
    pub const APPLICATION_VND_IPTC_G2_PACKAGEITEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Packageitem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_packageitem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.packageitem+xml"), Ok(APPLICATION_VND_IPTC_G2_PACKAGEITEM_XML));
        assert_eq!(crate::Mime::parse("AppliCATION/Vnd.Iptc.g2.pACKAgeITem+XMl"), Ok(APPLICATION_VND_IPTC_G2_PACKAGEITEM_XML));
    }

    /// `application/vnd.iptc.g2.planningitem+xml`
    pub const APPLICATION_VND_IPTC_G2_PLANNINGITEM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIptcG2Planningitem),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iptc_g2_planningitem_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iptc.g2.planningitem+xml"), Ok(APPLICATION_VND_IPTC_G2_PLANNINGITEM_XML));
        assert_eq!(crate::Mime::parse("aPplIcaTIoN/Vnd.IPtc.g2.plaNNiNGiTEM+Xml"), Ok(APPLICATION_VND_IPTC_G2_PLANNINGITEM_XML));
    }

    /// `application/vnd.ipunplugged.rcprofile`
    pub const APPLICATION_VND_IPUNPLUGGED_RCPROFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIpunpluggedRcprofile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ipunplugged_rcprofile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ipunplugged.rcprofile"), Ok(APPLICATION_VND_IPUNPLUGGED_RCPROFILE));
        assert_eq!(crate::Mime::parse("apPLICatIon/vnD.iPuNPLugGeD.RCPrOFIlE"), Ok(APPLICATION_VND_IPUNPLUGGED_RCPROFILE));
    }

    /// `application/vnd.irepository.package+xml`
    pub const APPLICATION_VND_IREPOSITORY_PACKAGE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIrepositoryPackage),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_irepository_package_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.irepository.package+xml"), Ok(APPLICATION_VND_IREPOSITORY_PACKAGE_XML));
        assert_eq!(crate::Mime::parse("ApPlICATiOn/vNd.IREpositorY.PaCKAGE+xMl"), Ok(APPLICATION_VND_IREPOSITORY_PACKAGE_XML));
    }

    /// `application/vnd.is-xpr`
    pub const APPLICATION_VND_IS_XPR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIsXpr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_is_xpr_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.is-xpr"), Ok(APPLICATION_VND_IS_XPR));
        assert_eq!(crate::Mime::parse("appLIcaTIOn/VNd.iS-xpR"), Ok(APPLICATION_VND_IS_XPR));
    }

    /// `application/vnd.isac.fcs`
    pub const APPLICATION_VND_ISAC_FCS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIsacFcs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_isac_fcs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.isac.fcs"), Ok(APPLICATION_VND_ISAC_FCS));
        assert_eq!(crate::Mime::parse("APPLIcATiON/vNd.iSAC.FCS"), Ok(APPLICATION_VND_ISAC_FCS));
    }

    /// `application/vnd.iso11783-10+zip`
    pub const APPLICATION_VND_ISO11783_10_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndIso1178310),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_iso11783_10_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.iso11783-10+zip"), Ok(APPLICATION_VND_ISO11783_10_ZIP));
        assert_eq!(crate::Mime::parse("aPPlICaTION/Vnd.iSo11783-10+ZIp"), Ok(APPLICATION_VND_ISO11783_10_ZIP));
    }

    /// `application/vnd.jam`
    pub const APPLICATION_VND_JAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJam),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_jam_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.jam"), Ok(APPLICATION_VND_JAM));
        assert_eq!(crate::Mime::parse("AppLICatiON/vnd.JaM"), Ok(APPLICATION_VND_JAM));
    }

    /// `application/vnd.japannet-directory-service`
    pub const APPLICATION_VND_JAPANNET_DIRECTORY_SERVICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetDirectoryService),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_directory_service_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-directory-service"), Ok(APPLICATION_VND_JAPANNET_DIRECTORY_SERVICE));
        assert_eq!(crate::Mime::parse("APplICATION/vND.JAPaNNeT-DirectOrY-sErViCE"), Ok(APPLICATION_VND_JAPANNET_DIRECTORY_SERVICE));
    }

    /// `application/vnd.japannet-jpnstore-wakeup`
    pub const APPLICATION_VND_JAPANNET_JPNSTORE_WAKEUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetJpnstoreWakeup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_jpnstore_wakeup_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-jpnstore-wakeup"), Ok(APPLICATION_VND_JAPANNET_JPNSTORE_WAKEUP));
        assert_eq!(crate::Mime::parse("aPPLiCaTIon/vND.JAPaNnET-jPNstOrE-WaKeup"), Ok(APPLICATION_VND_JAPANNET_JPNSTORE_WAKEUP));
    }

    /// `application/vnd.japannet-payment-wakeup`
    pub const APPLICATION_VND_JAPANNET_PAYMENT_WAKEUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetPaymentWakeup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_payment_wakeup_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-payment-wakeup"), Ok(APPLICATION_VND_JAPANNET_PAYMENT_WAKEUP));
        assert_eq!(crate::Mime::parse("aPPLicATiOn/vnD.jaPANnet-PAYmeNT-WAkEUp"), Ok(APPLICATION_VND_JAPANNET_PAYMENT_WAKEUP));
    }

    /// `application/vnd.japannet-registration`
    pub const APPLICATION_VND_JAPANNET_REGISTRATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetRegistration),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_registration_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-registration"), Ok(APPLICATION_VND_JAPANNET_REGISTRATION));
        assert_eq!(crate::Mime::parse("apPLiCatIOn/vnD.jApaNNET-rEGIstRAtIoN"), Ok(APPLICATION_VND_JAPANNET_REGISTRATION));
    }

    /// `application/vnd.japannet-registration-wakeup`
    pub const APPLICATION_VND_JAPANNET_REGISTRATION_WAKEUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetRegistrationWakeup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_registration_wakeup_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-registration-wakeup"), Ok(APPLICATION_VND_JAPANNET_REGISTRATION_WAKEUP));
        assert_eq!(crate::Mime::parse("ApPlIcATiOn/vND.JAPaNneT-ReGiSTRaTIon-WAkeUp"), Ok(APPLICATION_VND_JAPANNET_REGISTRATION_WAKEUP));
    }

    /// `application/vnd.japannet-setstore-wakeup`
    pub const APPLICATION_VND_JAPANNET_SETSTORE_WAKEUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetSetstoreWakeup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_setstore_wakeup_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-setstore-wakeup"), Ok(APPLICATION_VND_JAPANNET_SETSTORE_WAKEUP));
        assert_eq!(crate::Mime::parse("APpLicAtiOn/VnD.JapANNeT-SetsTORE-WakeuP"), Ok(APPLICATION_VND_JAPANNET_SETSTORE_WAKEUP));
    }

    /// `application/vnd.japannet-verification`
    pub const APPLICATION_VND_JAPANNET_VERIFICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetVerification),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_verification_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-verification"), Ok(APPLICATION_VND_JAPANNET_VERIFICATION));
        assert_eq!(crate::Mime::parse("AppLICAtioN/VND.JAPANNet-verifIcATION"), Ok(APPLICATION_VND_JAPANNET_VERIFICATION));
    }

    /// `application/vnd.japannet-verification-wakeup`
    pub const APPLICATION_VND_JAPANNET_VERIFICATION_WAKEUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJapannetVerificationWakeup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_japannet_verification_wakeup_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.japannet-verification-wakeup"), Ok(APPLICATION_VND_JAPANNET_VERIFICATION_WAKEUP));
        assert_eq!(crate::Mime::parse("appLICaTiON/VnD.japAnneT-VEriFIcATion-WaKeUP"), Ok(APPLICATION_VND_JAPANNET_VERIFICATION_WAKEUP));
    }

    /// `application/vnd.jcp.javame.midlet-rms`
    pub const APPLICATION_VND_JCP_JAVAME_MIDLET_RMS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJcpJavameMidletRms),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_jcp_javame_midlet_rms_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.jcp.javame.midlet-rms"), Ok(APPLICATION_VND_JCP_JAVAME_MIDLET_RMS));
        assert_eq!(crate::Mime::parse("AppLicAtion/VnD.JCP.JaVame.MIdLet-RmS"), Ok(APPLICATION_VND_JCP_JAVAME_MIDLET_RMS));
    }

    /// `application/vnd.jisp`
    pub const APPLICATION_VND_JISP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJisp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_jisp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.jisp"), Ok(APPLICATION_VND_JISP));
        assert_eq!(crate::Mime::parse("APPLIcaTioN/VND.JISp"), Ok(APPLICATION_VND_JISP));
    }

    /// `application/vnd.joost.joda-archive`
    pub const APPLICATION_VND_JOOST_JODA_ARCHIVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJoostJodaArchive),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_joost_joda_archive_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.joost.joda-archive"), Ok(APPLICATION_VND_JOOST_JODA_ARCHIVE));
        assert_eq!(crate::Mime::parse("apPlICATIon/vnD.jOost.joDa-ARchiVE"), Ok(APPLICATION_VND_JOOST_JODA_ARCHIVE));
    }

    /// `application/vnd.jsk.isdn-ngn`
    pub const APPLICATION_VND_JSK_ISDN_NGN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndJskIsdnNgn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_jsk_isdn_ngn_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.jsk.isdn-ngn"), Ok(APPLICATION_VND_JSK_ISDN_NGN));
        assert_eq!(crate::Mime::parse("APPlIcaTION/vND.Jsk.ISdN-NgN"), Ok(APPLICATION_VND_JSK_ISDN_NGN));
    }

    /// `application/vnd.kahootz`
    pub const APPLICATION_VND_KAHOOTZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKahootz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kahootz_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kahootz"), Ok(APPLICATION_VND_KAHOOTZ));
        assert_eq!(crate::Mime::parse("AppLiCaTiON/VnD.KaHOotz"), Ok(APPLICATION_VND_KAHOOTZ));
    }

    /// `application/vnd.kde.karbon`
    pub const APPLICATION_VND_KDE_KARBON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKarbon),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_karbon_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.karbon"), Ok(APPLICATION_VND_KDE_KARBON));
        assert_eq!(crate::Mime::parse("aPpLIcAtiON/Vnd.kDE.kaRBOn"), Ok(APPLICATION_VND_KDE_KARBON));
    }

    /// `application/vnd.kde.kchart`
    pub const APPLICATION_VND_KDE_KCHART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKchart),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kchart_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kchart"), Ok(APPLICATION_VND_KDE_KCHART));
        assert_eq!(crate::Mime::parse("apPLiCATioN/Vnd.kDe.kCHart"), Ok(APPLICATION_VND_KDE_KCHART));
    }

    /// `application/vnd.kde.kformula`
    pub const APPLICATION_VND_KDE_KFORMULA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKformula),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kformula_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kformula"), Ok(APPLICATION_VND_KDE_KFORMULA));
        assert_eq!(crate::Mime::parse("APpLicaTIOn/vND.kdE.KFORmuLA"), Ok(APPLICATION_VND_KDE_KFORMULA));
    }

    /// `application/vnd.kde.kivio`
    pub const APPLICATION_VND_KDE_KIVIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKivio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kivio_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kivio"), Ok(APPLICATION_VND_KDE_KIVIO));
        assert_eq!(crate::Mime::parse("ApplicAtIon/vNd.Kde.kivio"), Ok(APPLICATION_VND_KDE_KIVIO));
    }

    /// `application/vnd.kde.kontour`
    pub const APPLICATION_VND_KDE_KONTOUR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKontour),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kontour_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kontour"), Ok(APPLICATION_VND_KDE_KONTOUR));
        assert_eq!(crate::Mime::parse("aPpLiCATIoN/VnD.kdE.koNtOuR"), Ok(APPLICATION_VND_KDE_KONTOUR));
    }

    /// `application/vnd.kde.kpresenter`
    pub const APPLICATION_VND_KDE_KPRESENTER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKpresenter),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kpresenter_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kpresenter"), Ok(APPLICATION_VND_KDE_KPRESENTER));
        assert_eq!(crate::Mime::parse("aPPLicaTion/vnd.KDE.kPReSENtER"), Ok(APPLICATION_VND_KDE_KPRESENTER));
    }

    /// `application/vnd.kde.kspread`
    pub const APPLICATION_VND_KDE_KSPREAD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKspread),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kspread_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kspread"), Ok(APPLICATION_VND_KDE_KSPREAD));
        assert_eq!(crate::Mime::parse("aPPLIcATIon/vNd.kDe.ksPREad"), Ok(APPLICATION_VND_KDE_KSPREAD));
    }

    /// `application/vnd.kde.kword`
    pub const APPLICATION_VND_KDE_KWORD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKdeKword),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kde_kword_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kde.kword"), Ok(APPLICATION_VND_KDE_KWORD));
        assert_eq!(crate::Mime::parse("ApplicaTIoN/VnD.kDe.KwOrd"), Ok(APPLICATION_VND_KDE_KWORD));
    }

    /// `application/vnd.kenameaapp`
    pub const APPLICATION_VND_KENAMEAAPP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKenameaapp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kenameaapp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kenameaapp"), Ok(APPLICATION_VND_KENAMEAAPP));
        assert_eq!(crate::Mime::parse("aPplICation/Vnd.kEnAmEaapp"), Ok(APPLICATION_VND_KENAMEAAPP));
    }

    /// `application/vnd.kidspiration`
    pub const APPLICATION_VND_KIDSPIRATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKidspiration),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kidspiration_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kidspiration"), Ok(APPLICATION_VND_KIDSPIRATION));
        assert_eq!(crate::Mime::parse("APPlIcaTion/VND.kidspIrATIOn"), Ok(APPLICATION_VND_KIDSPIRATION));
    }

    /// `application/vnd.Kinar`
    pub const APPLICATION_VND_KINAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKinar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kinar_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Kinar"), Ok(APPLICATION_VND_KINAR));
        assert_eq!(crate::Mime::parse("apPLICAtioN/vnd.kInAr"), Ok(APPLICATION_VND_KINAR));
    }

    /// `application/vnd.koan`
    pub const APPLICATION_VND_KOAN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKoan),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_koan_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.koan"), Ok(APPLICATION_VND_KOAN));
        assert_eq!(crate::Mime::parse("APpliCAtiON/vnd.kOAn"), Ok(APPLICATION_VND_KOAN));
    }

    /// `application/vnd.kodak-descriptor`
    pub const APPLICATION_VND_KODAK_DESCRIPTOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndKodakDescriptor),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_kodak_descriptor_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.kodak-descriptor"), Ok(APPLICATION_VND_KODAK_DESCRIPTOR));
        assert_eq!(crate::Mime::parse("aPPlicATIOn/Vnd.kodAK-deScRIpTor"), Ok(APPLICATION_VND_KODAK_DESCRIPTOR));
    }

    /// `application/vnd.las`
    pub const APPLICATION_VND_LAS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLas),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_las_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.las"), Ok(APPLICATION_VND_LAS));
        assert_eq!(crate::Mime::parse("aPpLiCaTIoN/vnD.LAs"), Ok(APPLICATION_VND_LAS));
    }

    /// `application/vnd.las.las+json`
    pub const APPLICATION_VND_LAS_LAS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLasLas),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_las_las_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.las.las+json"), Ok(APPLICATION_VND_LAS_LAS_JSON));
        assert_eq!(crate::Mime::parse("APpLICAtION/VND.LaS.las+JsOn"), Ok(APPLICATION_VND_LAS_LAS_JSON));
    }

    /// `application/vnd.las.las+xml`
    pub const APPLICATION_VND_LAS_LAS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLasLas),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_las_las_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.las.las+xml"), Ok(APPLICATION_VND_LAS_LAS_XML));
        assert_eq!(crate::Mime::parse("appliCaTiON/VNd.lAs.LaS+XML"), Ok(APPLICATION_VND_LAS_LAS_XML));
    }

    /// `application/vnd.laszip`
    pub const APPLICATION_VND_LASZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLaszip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_laszip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.laszip"), Ok(APPLICATION_VND_LASZIP));
        assert_eq!(crate::Mime::parse("APplIcATIOn/VnD.LasziP"), Ok(APPLICATION_VND_LASZIP));
    }

    /// `application/vnd.leap+json`
    pub const APPLICATION_VND_LEAP_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLeap),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_leap_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.leap+json"), Ok(APPLICATION_VND_LEAP_JSON));
        assert_eq!(crate::Mime::parse("appLicatIOn/vND.leAP+JSON"), Ok(APPLICATION_VND_LEAP_JSON));
    }

    /// `application/vnd.liberty-request+xml`
    pub const APPLICATION_VND_LIBERTY_REQUEST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLibertyRequest),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_liberty_request_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.liberty-request+xml"), Ok(APPLICATION_VND_LIBERTY_REQUEST_XML));
        assert_eq!(crate::Mime::parse("Application/VnD.lIBeRtY-reQUEST+XMl"), Ok(APPLICATION_VND_LIBERTY_REQUEST_XML));
    }

    /// `application/vnd.llamagraphics.life-balance.desktop`
    pub const APPLICATION_VND_LLAMAGRAPHICS_LIFE_BALANCE_DESKTOP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLlamagraphicsLifeBalanceDesktop),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_llamagraphics_life_balance_desktop_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.llamagraphics.life-balance.desktop"), Ok(APPLICATION_VND_LLAMAGRAPHICS_LIFE_BALANCE_DESKTOP));
        assert_eq!(crate::Mime::parse("ApPliCaTION/Vnd.lLAmAgRAphIcs.LiFe-BALaNcE.dEsktOp"), Ok(APPLICATION_VND_LLAMAGRAPHICS_LIFE_BALANCE_DESKTOP));
    }

    /// `application/vnd.llamagraphics.life-balance.exchange+xml`
    pub const APPLICATION_VND_LLAMAGRAPHICS_LIFE_BALANCE_EXCHANGE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLlamagraphicsLifeBalanceExchange),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_llamagraphics_life_balance_exchange_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.llamagraphics.life-balance.exchange+xml"), Ok(APPLICATION_VND_LLAMAGRAPHICS_LIFE_BALANCE_EXCHANGE_XML));
        assert_eq!(crate::Mime::parse("APPlICaTioN/vND.lLamaGRaphiCs.lIfE-bALAnCe.eXCHANgE+XmL"), Ok(APPLICATION_VND_LLAMAGRAPHICS_LIFE_BALANCE_EXCHANGE_XML));
    }

    /// `application/vnd.logipipe.circuit+zip`
    pub const APPLICATION_VND_LOGIPIPE_CIRCUIT_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLogipipeCircuit),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_logipipe_circuit_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.logipipe.circuit+zip"), Ok(APPLICATION_VND_LOGIPIPE_CIRCUIT_ZIP));
        assert_eq!(crate::Mime::parse("ApPliCatiOn/vnd.logiPIPe.circUIT+ZiP"), Ok(APPLICATION_VND_LOGIPIPE_CIRCUIT_ZIP));
    }

    /// `application/vnd.loom`
    pub const APPLICATION_VND_LOOM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLoom),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_loom_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.loom"), Ok(APPLICATION_VND_LOOM));
        assert_eq!(crate::Mime::parse("ApplicaTioN/VnD.lOoM"), Ok(APPLICATION_VND_LOOM));
    }

    /// `application/vnd.lotus-1-2-3`
    pub const APPLICATION_VND_LOTUS_1_2_3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotus123),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_1_2_3_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-1-2-3"), Ok(APPLICATION_VND_LOTUS_1_2_3));
        assert_eq!(crate::Mime::parse("APplICAtiON/VND.lOTuS-1-2-3"), Ok(APPLICATION_VND_LOTUS_1_2_3));
    }

    /// `application/vnd.lotus-approach`
    pub const APPLICATION_VND_LOTUS_APPROACH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotusApproach),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_approach_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-approach"), Ok(APPLICATION_VND_LOTUS_APPROACH));
        assert_eq!(crate::Mime::parse("apPLicATion/vnd.Lotus-apPRoACH"), Ok(APPLICATION_VND_LOTUS_APPROACH));
    }

    /// `application/vnd.lotus-freelance`
    pub const APPLICATION_VND_LOTUS_FREELANCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotusFreelance),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_freelance_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-freelance"), Ok(APPLICATION_VND_LOTUS_FREELANCE));
        assert_eq!(crate::Mime::parse("ApPlicAtIoN/vnD.loTuS-FReelANcE"), Ok(APPLICATION_VND_LOTUS_FREELANCE));
    }

    /// `application/vnd.lotus-notes`
    pub const APPLICATION_VND_LOTUS_NOTES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotusNotes),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_notes_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-notes"), Ok(APPLICATION_VND_LOTUS_NOTES));
        assert_eq!(crate::Mime::parse("APPLiCatioN/Vnd.lotuS-noTeS"), Ok(APPLICATION_VND_LOTUS_NOTES));
    }

    /// `application/vnd.lotus-organizer`
    pub const APPLICATION_VND_LOTUS_ORGANIZER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotusOrganizer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_organizer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-organizer"), Ok(APPLICATION_VND_LOTUS_ORGANIZER));
        assert_eq!(crate::Mime::parse("APPlicATIoN/VnD.lotuS-oRGaNIzEr"), Ok(APPLICATION_VND_LOTUS_ORGANIZER));
    }

    /// `application/vnd.lotus-screencam`
    pub const APPLICATION_VND_LOTUS_SCREENCAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotusScreencam),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_screencam_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-screencam"), Ok(APPLICATION_VND_LOTUS_SCREENCAM));
        assert_eq!(crate::Mime::parse("apPLICatioN/vnd.loTus-scREencaM"), Ok(APPLICATION_VND_LOTUS_SCREENCAM));
    }

    /// `application/vnd.lotus-wordpro`
    pub const APPLICATION_VND_LOTUS_WORDPRO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndLotusWordpro),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_lotus_wordpro_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.lotus-wordpro"), Ok(APPLICATION_VND_LOTUS_WORDPRO));
        assert_eq!(crate::Mime::parse("ApplIcatION/Vnd.lOtus-wORDPRO"), Ok(APPLICATION_VND_LOTUS_WORDPRO));
    }

    /// `application/vnd.macports.portpkg`
    pub const APPLICATION_VND_MACPORTS_PORTPKG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMacportsPortpkg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_macports_portpkg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.macports.portpkg"), Ok(APPLICATION_VND_MACPORTS_PORTPKG));
        assert_eq!(crate::Mime::parse("apPlIcatION/VND.mACPORTS.pOrtpkg"), Ok(APPLICATION_VND_MACPORTS_PORTPKG));
    }

    /// `application/vnd.mapbox-vector-tile`
    pub const APPLICATION_VND_MAPBOX_VECTOR_TILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMapboxVectorTile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mapbox_vector_tile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mapbox-vector-tile"), Ok(APPLICATION_VND_MAPBOX_VECTOR_TILE));
        assert_eq!(crate::Mime::parse("APpLICaTIon/VND.MaPBox-VecToR-TiLe"), Ok(APPLICATION_VND_MAPBOX_VECTOR_TILE));
    }

    /// `application/vnd.marlin.drm.actiontoken+xml`
    pub const APPLICATION_VND_MARLIN_DRM_ACTIONTOKEN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMarlinDrmActiontoken),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_marlin_drm_actiontoken_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.marlin.drm.actiontoken+xml"), Ok(APPLICATION_VND_MARLIN_DRM_ACTIONTOKEN_XML));
        assert_eq!(crate::Mime::parse("apPLIcaTIon/vnD.mArLin.DRM.ActiOntOkeN+xml"), Ok(APPLICATION_VND_MARLIN_DRM_ACTIONTOKEN_XML));
    }

    /// `application/vnd.marlin.drm.conftoken+xml`
    pub const APPLICATION_VND_MARLIN_DRM_CONFTOKEN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMarlinDrmConftoken),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_marlin_drm_conftoken_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.marlin.drm.conftoken+xml"), Ok(APPLICATION_VND_MARLIN_DRM_CONFTOKEN_XML));
        assert_eq!(crate::Mime::parse("APPliCaTion/vnD.maRlIn.Drm.CONFtOKEN+xml"), Ok(APPLICATION_VND_MARLIN_DRM_CONFTOKEN_XML));
    }

    /// `application/vnd.marlin.drm.license+xml`
    pub const APPLICATION_VND_MARLIN_DRM_LICENSE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMarlinDrmLicense),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_marlin_drm_license_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.marlin.drm.license+xml"), Ok(APPLICATION_VND_MARLIN_DRM_LICENSE_XML));
        assert_eq!(crate::Mime::parse("APpLiCaTion/VNd.MarLiN.DRM.lIcenSe+XML"), Ok(APPLICATION_VND_MARLIN_DRM_LICENSE_XML));
    }

    /// `application/vnd.marlin.drm.mdcf`
    pub const APPLICATION_VND_MARLIN_DRM_MDCF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMarlinDrmMdcf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_marlin_drm_mdcf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.marlin.drm.mdcf"), Ok(APPLICATION_VND_MARLIN_DRM_MDCF));
        assert_eq!(crate::Mime::parse("aPPlICAtion/vND.MaRLIN.DRM.mdcF"), Ok(APPLICATION_VND_MARLIN_DRM_MDCF));
    }

    /// `application/vnd.mason+json`
    pub const APPLICATION_VND_MASON_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMason),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_mason_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mason+json"), Ok(APPLICATION_VND_MASON_JSON));
        assert_eq!(crate::Mime::parse("AppLicAtion/vND.maSOn+Json"), Ok(APPLICATION_VND_MASON_JSON));
    }

    /// `application/vnd.maxar.archive.3tz+zip`
    pub const APPLICATION_VND_MAXAR_ARCHIVE_3TZ_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMaxarArchive3tz),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_maxar_archive_3tz_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.maxar.archive.3tz+zip"), Ok(APPLICATION_VND_MAXAR_ARCHIVE_3TZ_ZIP));
        assert_eq!(crate::Mime::parse("apPlicAtIoN/VNd.MAxaR.ArcHivE.3TZ+ZIP"), Ok(APPLICATION_VND_MAXAR_ARCHIVE_3TZ_ZIP));
    }

    /// `application/vnd.maxmind.maxmind-db`
    pub const APPLICATION_VND_MAXMIND_MAXMIND_DB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMaxmindMaxmindDb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_maxmind_maxmind_db_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.maxmind.maxmind-db"), Ok(APPLICATION_VND_MAXMIND_MAXMIND_DB));
        assert_eq!(crate::Mime::parse("appliCaTION/VNd.maxmiNd.MAXmind-Db"), Ok(APPLICATION_VND_MAXMIND_MAXMIND_DB));
    }

    /// `application/vnd.mcd`
    pub const APPLICATION_VND_MCD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMcd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mcd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mcd"), Ok(APPLICATION_VND_MCD));
        assert_eq!(crate::Mime::parse("aPplIcatIon/vND.MCd"), Ok(APPLICATION_VND_MCD));
    }

    /// `application/vnd.medcalcdata`
    pub const APPLICATION_VND_MEDCALCDATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMedcalcdata),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_medcalcdata_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.medcalcdata"), Ok(APPLICATION_VND_MEDCALCDATA));
        assert_eq!(crate::Mime::parse("APplIcatIoN/VND.medCalCdATA"), Ok(APPLICATION_VND_MEDCALCDATA));
    }

    /// `application/vnd.mediastation.cdkey`
    pub const APPLICATION_VND_MEDIASTATION_CDKEY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMediastationCdkey),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mediastation_cdkey_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mediastation.cdkey"), Ok(APPLICATION_VND_MEDIASTATION_CDKEY));
        assert_eq!(crate::Mime::parse("aPpLiCatION/vnD.mEDIAStaTION.cDkEY"), Ok(APPLICATION_VND_MEDIASTATION_CDKEY));
    }

    /// `application/vnd.meridian-slingshot`
    pub const APPLICATION_VND_MERIDIAN_SLINGSHOT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMeridianSlingshot),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_meridian_slingshot_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.meridian-slingshot"), Ok(APPLICATION_VND_MERIDIAN_SLINGSHOT));
        assert_eq!(crate::Mime::parse("AppLICAtiOn/vnd.mErIDIAN-SlIngShOt"), Ok(APPLICATION_VND_MERIDIAN_SLINGSHOT));
    }

    /// `application/vnd.MFER`
    pub const APPLICATION_VND_MFER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMfer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mfer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.MFER"), Ok(APPLICATION_VND_MFER));
        assert_eq!(crate::Mime::parse("ApPLiCaTiOn/vND.mfEr"), Ok(APPLICATION_VND_MFER));
    }

    /// `application/vnd.mfmp`
    pub const APPLICATION_VND_MFMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMfmp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mfmp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mfmp"), Ok(APPLICATION_VND_MFMP));
        assert_eq!(crate::Mime::parse("aPpLICatiOn/vND.mfMP"), Ok(APPLICATION_VND_MFMP));
    }

    /// `application/vnd.micro+json`
    pub const APPLICATION_VND_MICRO_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMicro),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_micro_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.micro+json"), Ok(APPLICATION_VND_MICRO_JSON));
        assert_eq!(crate::Mime::parse("ApPLIcAtION/VND.mICRo+JsOn"), Ok(APPLICATION_VND_MICRO_JSON));
    }

    /// `application/vnd.micrografx.flo`
    pub const APPLICATION_VND_MICROGRAFX_FLO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMicrografxFlo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_micrografx_flo_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.micrografx.flo"), Ok(APPLICATION_VND_MICROGRAFX_FLO));
        assert_eq!(crate::Mime::parse("apPlIcaTiOn/VnD.mIcROgrAFx.FLo"), Ok(APPLICATION_VND_MICROGRAFX_FLO));
    }

    /// `application/vnd.micrografx.igx`
    pub const APPLICATION_VND_MICROGRAFX_IGX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMicrografxIgx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_micrografx_igx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.micrografx.igx"), Ok(APPLICATION_VND_MICROGRAFX_IGX));
        assert_eq!(crate::Mime::parse("aPpLIcatION/vNd.MiCroGRaFx.igx"), Ok(APPLICATION_VND_MICROGRAFX_IGX));
    }

    /// `application/vnd.microsoft.portable-executable`
    pub const APPLICATION_VND_MICROSOFT_PORTABLE_EXECUTABLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMicrosoftPortableExecutable),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_microsoft_portable_executable_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.microsoft.portable-executable"), Ok(APPLICATION_VND_MICROSOFT_PORTABLE_EXECUTABLE));
        assert_eq!(crate::Mime::parse("ApPLIcatiOn/Vnd.MICroSofT.POrTaBLe-eXecuTabLE"), Ok(APPLICATION_VND_MICROSOFT_PORTABLE_EXECUTABLE));
    }

    /// `application/vnd.microsoft.windows.thumbnail-cache`
    pub const APPLICATION_VND_MICROSOFT_WINDOWS_THUMBNAIL_CACHE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMicrosoftWindowsThumbnailCache),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_microsoft_windows_thumbnail_cache_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.microsoft.windows.thumbnail-cache"), Ok(APPLICATION_VND_MICROSOFT_WINDOWS_THUMBNAIL_CACHE));
        assert_eq!(crate::Mime::parse("APPLICatiOn/Vnd.micRoSoFt.wiNdOws.tHumbNaiL-CachE"), Ok(APPLICATION_VND_MICROSOFT_WINDOWS_THUMBNAIL_CACHE));
    }

    /// `application/vnd.miele+json`
    pub const APPLICATION_VND_MIELE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMiele),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_miele_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.miele+json"), Ok(APPLICATION_VND_MIELE_JSON));
        assert_eq!(crate::Mime::parse("APpLicaTioN/VND.mIeLe+jSON"), Ok(APPLICATION_VND_MIELE_JSON));
    }

    /// `application/vnd.mif`
    pub const APPLICATION_VND_MIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mif_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mif"), Ok(APPLICATION_VND_MIF));
        assert_eq!(crate::Mime::parse("apPlicatiON/vNd.miF"), Ok(APPLICATION_VND_MIF));
    }

    /// `application/vnd.minisoft-hp3000-save`
    pub const APPLICATION_VND_MINISOFT_HP3000_SAVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMinisoftHp3000Save),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_minisoft_hp3000_save_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.minisoft-hp3000-save"), Ok(APPLICATION_VND_MINISOFT_HP3000_SAVE));
        assert_eq!(crate::Mime::parse("aPpLICatioN/VnD.mINIsOFT-Hp3000-Save"), Ok(APPLICATION_VND_MINISOFT_HP3000_SAVE));
    }

    /// `application/vnd.mitsubishi.misty-guard.trustweb`
    pub const APPLICATION_VND_MITSUBISHI_MISTY_GUARD_TRUSTWEB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMitsubishiMistyGuardTrustweb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mitsubishi_misty_guard_trustweb_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mitsubishi.misty-guard.trustweb"), Ok(APPLICATION_VND_MITSUBISHI_MISTY_GUARD_TRUSTWEB));
        assert_eq!(crate::Mime::parse("ApPLicatioN/Vnd.MItsuBIshi.MisTY-gUaRd.TRUSTweb"), Ok(APPLICATION_VND_MITSUBISHI_MISTY_GUARD_TRUSTWEB));
    }

    /// `application/vnd.Mobius.DAF`
    pub const APPLICATION_VND_MOBIUS_DAF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusDaf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_daf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.DAF"), Ok(APPLICATION_VND_MOBIUS_DAF));
        assert_eq!(crate::Mime::parse("apPLicaTIon/vnd.MObIuS.daF"), Ok(APPLICATION_VND_MOBIUS_DAF));
    }

    /// `application/vnd.Mobius.DIS`
    pub const APPLICATION_VND_MOBIUS_DIS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusDis),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_dis_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.DIS"), Ok(APPLICATION_VND_MOBIUS_DIS));
        assert_eq!(crate::Mime::parse("aPPLIcatiOn/vNd.mObIUs.DIs"), Ok(APPLICATION_VND_MOBIUS_DIS));
    }

    /// `application/vnd.Mobius.MBK`
    pub const APPLICATION_VND_MOBIUS_MBK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusMbk),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_mbk_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.MBK"), Ok(APPLICATION_VND_MOBIUS_MBK));
        assert_eq!(crate::Mime::parse("AppLICaTion/VnD.moBiUS.Mbk"), Ok(APPLICATION_VND_MOBIUS_MBK));
    }

    /// `application/vnd.Mobius.MQY`
    pub const APPLICATION_VND_MOBIUS_MQY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusMqy),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_mqy_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.MQY"), Ok(APPLICATION_VND_MOBIUS_MQY));
        assert_eq!(crate::Mime::parse("apPliCatioN/vND.mobIUs.mqy"), Ok(APPLICATION_VND_MOBIUS_MQY));
    }

    /// `application/vnd.Mobius.MSL`
    pub const APPLICATION_VND_MOBIUS_MSL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusMsl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_msl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.MSL"), Ok(APPLICATION_VND_MOBIUS_MSL));
        assert_eq!(crate::Mime::parse("APPLiCaTiOn/vnd.moBIus.MSl"), Ok(APPLICATION_VND_MOBIUS_MSL));
    }

    /// `application/vnd.Mobius.PLC`
    pub const APPLICATION_VND_MOBIUS_PLC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusPlc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_plc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.PLC"), Ok(APPLICATION_VND_MOBIUS_PLC));
        assert_eq!(crate::Mime::parse("apPlIcAtIOn/VNd.moBiuS.plc"), Ok(APPLICATION_VND_MOBIUS_PLC));
    }

    /// `application/vnd.Mobius.TXF`
    pub const APPLICATION_VND_MOBIUS_TXF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMobiusTxf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mobius_txf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Mobius.TXF"), Ok(APPLICATION_VND_MOBIUS_TXF));
        assert_eq!(crate::Mime::parse("APplIcAtIon/VnD.moBIUs.tXf"), Ok(APPLICATION_VND_MOBIUS_TXF));
    }

    /// `application/vnd.mophun.application`
    pub const APPLICATION_VND_MOPHUN_APPLICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMophunApplication),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mophun_application_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mophun.application"), Ok(APPLICATION_VND_MOPHUN_APPLICATION));
        assert_eq!(crate::Mime::parse("appLiCaTiOn/VNd.mOpHUn.ApplicatioN"), Ok(APPLICATION_VND_MOPHUN_APPLICATION));
    }

    /// `application/vnd.mophun.certificate`
    pub const APPLICATION_VND_MOPHUN_CERTIFICATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMophunCertificate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mophun_certificate_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mophun.certificate"), Ok(APPLICATION_VND_MOPHUN_CERTIFICATE));
        assert_eq!(crate::Mime::parse("aPplicATiOn/VND.moPhuN.cErtIFicATe"), Ok(APPLICATION_VND_MOPHUN_CERTIFICATE));
    }

    /// `application/vnd.motorola.flexsuite`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuite),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE));
        assert_eq!(crate::Mime::parse("applicatiON/vnD.moToRola.fLexSUITe"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE));
    }

    /// `application/vnd.motorola.flexsuite.adsi`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE_ADSI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuiteAdsi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_adsi_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite.adsi"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_ADSI));
        assert_eq!(crate::Mime::parse("APPlIcatiON/vND.mOTORola.FLEXsuITE.ADSi"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_ADSI));
    }

    /// `application/vnd.motorola.flexsuite.fis`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE_FIS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuiteFis),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_fis_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite.fis"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_FIS));
        assert_eq!(crate::Mime::parse("apPlIcaTiOn/VnD.motorOLa.fLEXsUITE.Fis"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_FIS));
    }

    /// `application/vnd.motorola.flexsuite.gotap`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE_GOTAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuiteGotap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_gotap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite.gotap"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_GOTAP));
        assert_eq!(crate::Mime::parse("appLIcAtioN/VNd.MoTorola.fLEXsuItE.GOtAp"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_GOTAP));
    }

    /// `application/vnd.motorola.flexsuite.kmr`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE_KMR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuiteKmr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_kmr_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite.kmr"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_KMR));
        assert_eq!(crate::Mime::parse("aPPlicaTiOn/vnD.mOtoROLa.fLEXSuITe.Kmr"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_KMR));
    }

    /// `application/vnd.motorola.flexsuite.ttc`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE_TTC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuiteTtc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_ttc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite.ttc"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_TTC));
        assert_eq!(crate::Mime::parse("aPpLicATIoN/Vnd.moTOrOLa.FlexsUite.ttC"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_TTC));
    }

    /// `application/vnd.motorola.flexsuite.wem`
    pub const APPLICATION_VND_MOTOROLA_FLEXSUITE_WEM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaFlexsuiteWem),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_flexsuite_wem_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.flexsuite.wem"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_WEM));
        assert_eq!(crate::Mime::parse("APPLICaTiOn/VnD.mOToROlA.FlEXsUiTE.wEM"), Ok(APPLICATION_VND_MOTOROLA_FLEXSUITE_WEM));
    }

    /// `application/vnd.motorola.iprm`
    pub const APPLICATION_VND_MOTOROLA_IPRM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaIprm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_motorola_iprm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.motorola.iprm"), Ok(APPLICATION_VND_MOTOROLA_IPRM));
        assert_eq!(crate::Mime::parse("APpLiCaTIon/VND.MOTorOlA.IPrM"), Ok(APPLICATION_VND_MOTOROLA_IPRM));
    }

    /// `application/vnd.mozilla.xul+xml`
    pub const APPLICATION_VND_MOZILLA_XUL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMozillaXul),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_mozilla_xul_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mozilla.xul+xml"), Ok(APPLICATION_VND_MOZILLA_XUL_XML));
        assert_eq!(crate::Mime::parse("aPplIcAtIon/vnD.mOZIlLA.XuL+XmL"), Ok(APPLICATION_VND_MOZILLA_XUL_XML));
    }

    /// `application/vnd.ms-3mfdocument`
    pub const APPLICATION_VND_MS_3MFDOCUMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMs3mfdocument),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_3mfdocument_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-3mfdocument"), Ok(APPLICATION_VND_MS_3MFDOCUMENT));
        assert_eq!(crate::Mime::parse("applIcAtioN/vND.mS-3MFdOCuMenT"), Ok(APPLICATION_VND_MS_3MFDOCUMENT));
    }

    /// `application/vnd.ms-artgalry`
    pub const APPLICATION_VND_MS_ARTGALRY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsArtgalry),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_artgalry_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-artgalry"), Ok(APPLICATION_VND_MS_ARTGALRY));
        assert_eq!(crate::Mime::parse("ApplICATion/vnD.Ms-ArtGAlRY"), Ok(APPLICATION_VND_MS_ARTGALRY));
    }

    /// `application/vnd.ms-asf`
    pub const APPLICATION_VND_MS_ASF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsAsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_asf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-asf"), Ok(APPLICATION_VND_MS_ASF));
        assert_eq!(crate::Mime::parse("ApPliCaTion/vND.mS-AsF"), Ok(APPLICATION_VND_MS_ASF));
    }

    /// `application/vnd.ms-cab-compressed`
    pub const APPLICATION_VND_MS_CAB_COMPRESSED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsCabCompressed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_cab_compressed_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-cab-compressed"), Ok(APPLICATION_VND_MS_CAB_COMPRESSED));
        assert_eq!(crate::Mime::parse("appLIcation/vnD.mS-caB-compREssed"), Ok(APPLICATION_VND_MS_CAB_COMPRESSED));
    }

    /// `application/vnd.ms-excel`
    pub const APPLICATION_VND_MS_EXCEL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsExcel),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_excel_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-excel"), Ok(APPLICATION_VND_MS_EXCEL));
        assert_eq!(crate::Mime::parse("appLICaTIoN/VnD.MS-EXCel"), Ok(APPLICATION_VND_MS_EXCEL));
    }

    /// `application/vnd.ms-excel.addin.macroEnabled.12`
    pub const APPLICATION_VND_MS_EXCEL_ADDIN_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsExcelAddinMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_excel_addin_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-excel.addin.macroEnabled.12"), Ok(APPLICATION_VND_MS_EXCEL_ADDIN_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("APPLiCAtion/vnD.ms-eXceL.AddIn.MaCRoENabled.12"), Ok(APPLICATION_VND_MS_EXCEL_ADDIN_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-excel.sheet.binary.macroEnabled.12`
    pub const APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsExcelSheetBinaryMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_excel_sheet_binary_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-excel.sheet.binary.macroEnabled.12"), Ok(APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("appliCATION/VND.mS-exceL.SHEeT.bINARY.MaCROenabLeD.12"), Ok(APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-excel.sheet.macroEnabled.12`
    pub const APPLICATION_VND_MS_EXCEL_SHEET_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsExcelSheetMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_excel_sheet_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-excel.sheet.macroEnabled.12"), Ok(APPLICATION_VND_MS_EXCEL_SHEET_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("ApPLIcAtiOn/VND.Ms-EXcel.sHEeT.MACROeNABLed.12"), Ok(APPLICATION_VND_MS_EXCEL_SHEET_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-excel.template.macroEnabled.12`
    pub const APPLICATION_VND_MS_EXCEL_TEMPLATE_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsExcelTemplateMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_excel_template_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-excel.template.macroEnabled.12"), Ok(APPLICATION_VND_MS_EXCEL_TEMPLATE_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("AppLiCATion/Vnd.ms-EXCel.TEmplATE.mAcroENaBled.12"), Ok(APPLICATION_VND_MS_EXCEL_TEMPLATE_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-fontobject`
    pub const APPLICATION_VND_MS_FONTOBJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsFontobject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_fontobject_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-fontobject"), Ok(APPLICATION_VND_MS_FONTOBJECT));
        assert_eq!(crate::Mime::parse("AppLiCatioN/vNd.ms-fontOBjEcT"), Ok(APPLICATION_VND_MS_FONTOBJECT));
    }

    /// `application/vnd.ms-htmlhelp`
    pub const APPLICATION_VND_MS_HTMLHELP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsHtmlhelp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_htmlhelp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-htmlhelp"), Ok(APPLICATION_VND_MS_HTMLHELP));
        assert_eq!(crate::Mime::parse("ApPlIcAtIoN/VND.ms-HTMLheLp"), Ok(APPLICATION_VND_MS_HTMLHELP));
    }

    /// `application/vnd.ms-ims`
    pub const APPLICATION_VND_MS_IMS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsIms),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_ims_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-ims"), Ok(APPLICATION_VND_MS_IMS));
        assert_eq!(crate::Mime::parse("APpLiCatIon/Vnd.Ms-imS"), Ok(APPLICATION_VND_MS_IMS));
    }

    /// `application/vnd.ms-lrm`
    pub const APPLICATION_VND_MS_LRM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsLrm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_lrm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-lrm"), Ok(APPLICATION_VND_MS_LRM));
        assert_eq!(crate::Mime::parse("APPLicaTiOn/vND.ms-Lrm"), Ok(APPLICATION_VND_MS_LRM));
    }

    /// `application/vnd.ms-office.activeX+xml`
    pub const APPLICATION_VND_MS_OFFICE_ACTIVE_X_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsOfficeActiveX),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_office_active_x_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-office.activeX+xml"), Ok(APPLICATION_VND_MS_OFFICE_ACTIVE_X_XML));
        assert_eq!(crate::Mime::parse("apPLICAtiON/VND.ms-Office.aCTiveX+XML"), Ok(APPLICATION_VND_MS_OFFICE_ACTIVE_X_XML));
    }

    /// `application/vnd.ms-officetheme`
    pub const APPLICATION_VND_MS_OFFICETHEME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsOfficetheme),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_officetheme_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-officetheme"), Ok(APPLICATION_VND_MS_OFFICETHEME));
        assert_eq!(crate::Mime::parse("apPliCATIoN/vNd.mS-OFFiCEThEMe"), Ok(APPLICATION_VND_MS_OFFICETHEME));
    }

    /// `application/vnd.ms-pki.seccat`
    pub const APPLICATION_VND_MS_PKI_SECCAT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPkiSeccat),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_pki_seccat_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-pki.seccat"), Ok(APPLICATION_VND_MS_PKI_SECCAT));
        assert_eq!(crate::Mime::parse("aPPLicATION/vNd.mS-Pki.seccat"), Ok(APPLICATION_VND_MS_PKI_SECCAT));
    }

    /// `application/vnd.ms-playready.initiator+xml`
    pub const APPLICATION_VND_MS_PLAYREADY_INITIATOR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPlayreadyInitiator),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_playready_initiator_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-playready.initiator+xml"), Ok(APPLICATION_VND_MS_PLAYREADY_INITIATOR_XML));
        assert_eq!(crate::Mime::parse("APpLIcaTioN/vnD.mS-PlaYreADY.iniTiATOR+xMl"), Ok(APPLICATION_VND_MS_PLAYREADY_INITIATOR_XML));
    }

    /// `application/vnd.ms-powerpoint`
    pub const APPLICATION_VND_MS_POWERPOINT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPowerpoint),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_powerpoint_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-powerpoint"), Ok(APPLICATION_VND_MS_POWERPOINT));
        assert_eq!(crate::Mime::parse("AppLiCatIon/VNd.Ms-powerPOInT"), Ok(APPLICATION_VND_MS_POWERPOINT));
    }

    /// `application/vnd.ms-powerpoint.addin.macroEnabled.12`
    pub const APPLICATION_VND_MS_POWERPOINT_ADDIN_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPowerpointAddinMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_powerpoint_addin_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-powerpoint.addin.macroEnabled.12"), Ok(APPLICATION_VND_MS_POWERPOINT_ADDIN_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("APPlIcATion/vnd.ms-poWerPoint.AdDIn.macROENABLEd.12"), Ok(APPLICATION_VND_MS_POWERPOINT_ADDIN_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-powerpoint.presentation.macroEnabled.12`
    pub const APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPowerpointPresentationMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_powerpoint_presentation_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-powerpoint.presentation.macroEnabled.12"), Ok(APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("ApPLicaTion/vnD.ms-pOWeRpoInt.PReseNtAtion.mACroenaBled.12"), Ok(APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-powerpoint.slide.macroEnabled.12`
    pub const APPLICATION_VND_MS_POWERPOINT_SLIDE_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPowerpointSlideMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_powerpoint_slide_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-powerpoint.slide.macroEnabled.12"), Ok(APPLICATION_VND_MS_POWERPOINT_SLIDE_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("aPPLIcAtiON/VNd.Ms-PoWERpOiNt.SliDE.mAcRoenabLEd.12"), Ok(APPLICATION_VND_MS_POWERPOINT_SLIDE_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-powerpoint.slideshow.macroEnabled.12`
    pub const APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPowerpointSlideshowMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_powerpoint_slideshow_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-powerpoint.slideshow.macroEnabled.12"), Ok(APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("appliCATIoN/VNd.MS-pOwERPOiNt.sLidEsHow.MACROENaBlEd.12"), Ok(APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-powerpoint.template.macroEnabled.12`
    pub const APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPowerpointTemplateMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_powerpoint_template_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-powerpoint.template.macroEnabled.12"), Ok(APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("APpLiCaTIoN/vND.Ms-poWerPOINt.TemPLaTE.maCROenABlEd.12"), Ok(APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-PrintDeviceCapabilities+xml`
    pub const APPLICATION_VND_MS_PRINT_DEVICE_CAPABILITIES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPrintDeviceCapabilities),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_print_device_capabilities_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-PrintDeviceCapabilities+xml"), Ok(APPLICATION_VND_MS_PRINT_DEVICE_CAPABILITIES_XML));
        assert_eq!(crate::Mime::parse("ApplIcATiON/vNd.ms-PRinTDEVicecApabiLITIes+XMl"), Ok(APPLICATION_VND_MS_PRINT_DEVICE_CAPABILITIES_XML));
    }

    /// `application/vnd.ms-PrintSchemaTicket+xml`
    pub const APPLICATION_VND_MS_PRINT_SCHEMA_TICKET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsPrintSchemaTicket),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_print_schema_ticket_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-PrintSchemaTicket+xml"), Ok(APPLICATION_VND_MS_PRINT_SCHEMA_TICKET_XML));
        assert_eq!(crate::Mime::parse("aPpLIcatION/VNd.mS-PRiNTScheMaTickET+XML"), Ok(APPLICATION_VND_MS_PRINT_SCHEMA_TICKET_XML));
    }

    /// `application/vnd.ms-project`
    pub const APPLICATION_VND_MS_PROJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsProject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_project_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-project"), Ok(APPLICATION_VND_MS_PROJECT));
        assert_eq!(crate::Mime::parse("ApPlicatiOn/vND.MS-PRojeCT"), Ok(APPLICATION_VND_MS_PROJECT));
    }

    /// `application/vnd.ms-tnef`
    pub const APPLICATION_VND_MS_TNEF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsTnef),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_tnef_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-tnef"), Ok(APPLICATION_VND_MS_TNEF));
        assert_eq!(crate::Mime::parse("APPliCaTion/VNd.mS-tNEf"), Ok(APPLICATION_VND_MS_TNEF));
    }

    /// `application/vnd.ms-windows.devicepairing`
    pub const APPLICATION_VND_MS_WINDOWS_DEVICEPAIRING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWindowsDevicepairing),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_windows_devicepairing_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-windows.devicepairing"), Ok(APPLICATION_VND_MS_WINDOWS_DEVICEPAIRING));
        assert_eq!(crate::Mime::parse("aPPlIcATIOn/vND.ms-winDoWs.dEvIcEpAIriNG"), Ok(APPLICATION_VND_MS_WINDOWS_DEVICEPAIRING));
    }

    /// `application/vnd.ms-windows.nwprinting.oob`
    pub const APPLICATION_VND_MS_WINDOWS_NWPRINTING_OOB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWindowsNwprintingOob),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_windows_nwprinting_oob_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-windows.nwprinting.oob"), Ok(APPLICATION_VND_MS_WINDOWS_NWPRINTING_OOB));
        assert_eq!(crate::Mime::parse("APPLICation/Vnd.ms-wiNdOWS.NwPRiNTiNg.OOB"), Ok(APPLICATION_VND_MS_WINDOWS_NWPRINTING_OOB));
    }

    /// `application/vnd.ms-windows.printerpairing`
    pub const APPLICATION_VND_MS_WINDOWS_PRINTERPAIRING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWindowsPrinterpairing),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_windows_printerpairing_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-windows.printerpairing"), Ok(APPLICATION_VND_MS_WINDOWS_PRINTERPAIRING));
        assert_eq!(crate::Mime::parse("APPlIcAtion/vNd.Ms-WiNdOWS.prInTErpaIrIng"), Ok(APPLICATION_VND_MS_WINDOWS_PRINTERPAIRING));
    }

    /// `application/vnd.ms-windows.wsd.oob`
    pub const APPLICATION_VND_MS_WINDOWS_WSD_OOB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWindowsWsdOob),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_windows_wsd_oob_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-windows.wsd.oob"), Ok(APPLICATION_VND_MS_WINDOWS_WSD_OOB));
        assert_eq!(crate::Mime::parse("APPlIcatIoN/VND.ms-wiNdows.Wsd.ooB"), Ok(APPLICATION_VND_MS_WINDOWS_WSD_OOB));
    }

    /// `application/vnd.ms-wmdrm.lic-chlg-req`
    pub const APPLICATION_VND_MS_WMDRM_LIC_CHLG_REQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWmdrmLicChlgReq),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_wmdrm_lic_chlg_req_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-wmdrm.lic-chlg-req"), Ok(APPLICATION_VND_MS_WMDRM_LIC_CHLG_REQ));
        assert_eq!(crate::Mime::parse("AppLiCAtIon/VND.mS-WmDrm.liC-ChlG-Req"), Ok(APPLICATION_VND_MS_WMDRM_LIC_CHLG_REQ));
    }

    /// `application/vnd.ms-wmdrm.lic-resp`
    pub const APPLICATION_VND_MS_WMDRM_LIC_RESP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWmdrmLicResp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_wmdrm_lic_resp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-wmdrm.lic-resp"), Ok(APPLICATION_VND_MS_WMDRM_LIC_RESP));
        assert_eq!(crate::Mime::parse("APPlIcaTIoN/vnD.ms-WmdRm.lic-reSp"), Ok(APPLICATION_VND_MS_WMDRM_LIC_RESP));
    }

    /// `application/vnd.ms-wmdrm.meter-chlg-req`
    pub const APPLICATION_VND_MS_WMDRM_METER_CHLG_REQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWmdrmMeterChlgReq),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_wmdrm_meter_chlg_req_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-wmdrm.meter-chlg-req"), Ok(APPLICATION_VND_MS_WMDRM_METER_CHLG_REQ));
        assert_eq!(crate::Mime::parse("ApplicATion/VnD.Ms-wMdrM.METEr-CHLG-ReQ"), Ok(APPLICATION_VND_MS_WMDRM_METER_CHLG_REQ));
    }

    /// `application/vnd.ms-wmdrm.meter-resp`
    pub const APPLICATION_VND_MS_WMDRM_METER_RESP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWmdrmMeterResp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_wmdrm_meter_resp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-wmdrm.meter-resp"), Ok(APPLICATION_VND_MS_WMDRM_METER_RESP));
        assert_eq!(crate::Mime::parse("applicAtIon/Vnd.ms-WmDRM.METER-resp"), Ok(APPLICATION_VND_MS_WMDRM_METER_RESP));
    }

    /// `application/vnd.ms-word.document.macroEnabled.12`
    pub const APPLICATION_VND_MS_WORD_DOCUMENT_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWordDocumentMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_word_document_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-word.document.macroEnabled.12"), Ok(APPLICATION_VND_MS_WORD_DOCUMENT_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("appliCATION/Vnd.MS-Word.DOcUMENt.maCroenaBLed.12"), Ok(APPLICATION_VND_MS_WORD_DOCUMENT_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-word.template.macroEnabled.12`
    pub const APPLICATION_VND_MS_WORD_TEMPLATE_MACRO_ENABLED_12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWordTemplateMacroEnabled12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_word_template_macro_enabled_12_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-word.template.macroEnabled.12"), Ok(APPLICATION_VND_MS_WORD_TEMPLATE_MACRO_ENABLED_12));
        assert_eq!(crate::Mime::parse("ApPliCATION/Vnd.MS-WOrD.tEMplate.MAcROenableD.12"), Ok(APPLICATION_VND_MS_WORD_TEMPLATE_MACRO_ENABLED_12));
    }

    /// `application/vnd.ms-works`
    pub const APPLICATION_VND_MS_WORKS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWorks),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_works_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-works"), Ok(APPLICATION_VND_MS_WORKS));
        assert_eq!(crate::Mime::parse("APplicAtIon/VNd.MS-WorKS"), Ok(APPLICATION_VND_MS_WORKS));
    }

    /// `application/vnd.ms-wpl`
    pub const APPLICATION_VND_MS_WPL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsWpl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_wpl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-wpl"), Ok(APPLICATION_VND_MS_WPL));
        assert_eq!(crate::Mime::parse("APPliCatiON/vNd.MS-wPL"), Ok(APPLICATION_VND_MS_WPL));
    }

    /// `application/vnd.ms-xpsdocument`
    pub const APPLICATION_VND_MS_XPSDOCUMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsXpsdocument),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ms_xpsdocument_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ms-xpsdocument"), Ok(APPLICATION_VND_MS_XPSDOCUMENT));
        assert_eq!(crate::Mime::parse("APPLICATIon/VnD.MS-xpsDoCuMenT"), Ok(APPLICATION_VND_MS_XPSDOCUMENT));
    }

    /// `application/vnd.msa-disk-image`
    pub const APPLICATION_VND_MSA_DISK_IMAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsaDiskImage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_msa_disk_image_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.msa-disk-image"), Ok(APPLICATION_VND_MSA_DISK_IMAGE));
        assert_eq!(crate::Mime::parse("ApPLiCATiON/vND.MSA-diSK-ImAGE"), Ok(APPLICATION_VND_MSA_DISK_IMAGE));
    }

    /// `application/vnd.mseq`
    pub const APPLICATION_VND_MSEQ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMseq),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mseq_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mseq"), Ok(APPLICATION_VND_MSEQ));
        assert_eq!(crate::Mime::parse("aPplIcATiON/Vnd.mSEq"), Ok(APPLICATION_VND_MSEQ));
    }

    /// `application/vnd.msign`
    pub const APPLICATION_VND_MSIGN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMsign),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_msign_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.msign"), Ok(APPLICATION_VND_MSIGN));
        assert_eq!(crate::Mime::parse("APplICATIOn/VND.msiGn"), Ok(APPLICATION_VND_MSIGN));
    }

    /// `application/vnd.multiad.creator`
    pub const APPLICATION_VND_MULTIAD_CREATOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMultiadCreator),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_multiad_creator_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.multiad.creator"), Ok(APPLICATION_VND_MULTIAD_CREATOR));
        assert_eq!(crate::Mime::parse("aPPLiCATion/Vnd.muLTIAd.crEAtOr"), Ok(APPLICATION_VND_MULTIAD_CREATOR));
    }

    /// `application/vnd.multiad.creator.cif`
    pub const APPLICATION_VND_MULTIAD_CREATOR_CIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMultiadCreatorCif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_multiad_creator_cif_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.multiad.creator.cif"), Ok(APPLICATION_VND_MULTIAD_CREATOR_CIF));
        assert_eq!(crate::Mime::parse("APPliCATION/Vnd.mULtiAD.creatOr.CIf"), Ok(APPLICATION_VND_MULTIAD_CREATOR_CIF));
    }

    /// `application/vnd.music-niff`
    pub const APPLICATION_VND_MUSIC_NIFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMusicNiff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_music_niff_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.music-niff"), Ok(APPLICATION_VND_MUSIC_NIFF));
        assert_eq!(crate::Mime::parse("ApPlICation/vND.music-nIFF"), Ok(APPLICATION_VND_MUSIC_NIFF));
    }

    /// `application/vnd.musician`
    pub const APPLICATION_VND_MUSICIAN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMusician),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_musician_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.musician"), Ok(APPLICATION_VND_MUSICIAN));
        assert_eq!(crate::Mime::parse("aPpLicatioN/VND.MUSICIaN"), Ok(APPLICATION_VND_MUSICIAN));
    }

    /// `application/vnd.muvee.style`
    pub const APPLICATION_VND_MUVEE_STYLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMuveeStyle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_muvee_style_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.muvee.style"), Ok(APPLICATION_VND_MUVEE_STYLE));
        assert_eq!(crate::Mime::parse("APpLicatiON/Vnd.MUVEe.stYle"), Ok(APPLICATION_VND_MUVEE_STYLE));
    }

    /// `application/vnd.mynfc`
    pub const APPLICATION_VND_MYNFC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndMynfc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_mynfc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.mynfc"), Ok(APPLICATION_VND_MYNFC));
        assert_eq!(crate::Mime::parse("APplIcAtioN/VND.mYnFc"), Ok(APPLICATION_VND_MYNFC));
    }

    /// `application/vnd.nacamar.ybrid+json`
    pub const APPLICATION_VND_NACAMAR_YBRID_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNacamarYbrid),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nacamar_ybrid_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nacamar.ybrid+json"), Ok(APPLICATION_VND_NACAMAR_YBRID_JSON));
        assert_eq!(crate::Mime::parse("aPPLICATIOn/VND.NaCamAR.yBRID+jSoN"), Ok(APPLICATION_VND_NACAMAR_YBRID_JSON));
    }

    /// `application/vnd.ncd.control`
    pub const APPLICATION_VND_NCD_CONTROL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNcdControl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ncd_control_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ncd.control"), Ok(APPLICATION_VND_NCD_CONTROL));
        assert_eq!(crate::Mime::parse("ApPlicAtioN/vnd.NcD.contRoL"), Ok(APPLICATION_VND_NCD_CONTROL));
    }

    /// `application/vnd.ncd.reference`
    pub const APPLICATION_VND_NCD_REFERENCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNcdReference),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ncd_reference_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ncd.reference"), Ok(APPLICATION_VND_NCD_REFERENCE));
        assert_eq!(crate::Mime::parse("aPpLiCaTIon/VND.NcD.reFerenCE"), Ok(APPLICATION_VND_NCD_REFERENCE));
    }

    /// `application/vnd.nearst.inv+json`
    pub const APPLICATION_VND_NEARST_INV_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNearstInv),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nearst_inv_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nearst.inv+json"), Ok(APPLICATION_VND_NEARST_INV_JSON));
        assert_eq!(crate::Mime::parse("aPplicAtIon/VNd.nEarST.iNv+Json"), Ok(APPLICATION_VND_NEARST_INV_JSON));
    }

    /// `application/vnd.nebumind.line`
    pub const APPLICATION_VND_NEBUMIND_LINE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNebumindLine),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nebumind_line_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nebumind.line"), Ok(APPLICATION_VND_NEBUMIND_LINE));
        assert_eq!(crate::Mime::parse("APplIcATIon/VND.nEBUmind.LiNe"), Ok(APPLICATION_VND_NEBUMIND_LINE));
    }

    /// `application/vnd.nervana`
    pub const APPLICATION_VND_NERVANA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNervana),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nervana_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nervana"), Ok(APPLICATION_VND_NERVANA));
        assert_eq!(crate::Mime::parse("aPPlIcaTioN/vnD.neRvAnA"), Ok(APPLICATION_VND_NERVANA));
    }

    /// `application/vnd.netfpx`
    pub const APPLICATION_VND_NETFPX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNetfpx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_netfpx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.netfpx"), Ok(APPLICATION_VND_NETFPX));
        assert_eq!(crate::Mime::parse("APPLicaTIon/vnd.nEtFpX"), Ok(APPLICATION_VND_NETFPX));
    }

    /// `application/vnd.neurolanguage.nlu`
    pub const APPLICATION_VND_NEUROLANGUAGE_NLU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNeurolanguageNlu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_neurolanguage_nlu_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.neurolanguage.nlu"), Ok(APPLICATION_VND_NEUROLANGUAGE_NLU));
        assert_eq!(crate::Mime::parse("APPliCaTioN/Vnd.nEurOLaNGuage.nlU"), Ok(APPLICATION_VND_NEUROLANGUAGE_NLU));
    }

    /// `application/vnd.nimn`
    pub const APPLICATION_VND_NIMN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNimn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nimn_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nimn"), Ok(APPLICATION_VND_NIMN));
        assert_eq!(crate::Mime::parse("APPlICaTion/vnD.nIMn"), Ok(APPLICATION_VND_NIMN));
    }

    /// `application/vnd.nintendo.nitro.rom`
    pub const APPLICATION_VND_NINTENDO_NITRO_ROM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNintendoNitroRom),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nintendo_nitro_rom_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nintendo.nitro.rom"), Ok(APPLICATION_VND_NINTENDO_NITRO_ROM));
        assert_eq!(crate::Mime::parse("ApPlICAtion/VnD.NiNTENdO.nitro.Rom"), Ok(APPLICATION_VND_NINTENDO_NITRO_ROM));
    }

    /// `application/vnd.nintendo.snes.rom`
    pub const APPLICATION_VND_NINTENDO_SNES_ROM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNintendoSnesRom),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nintendo_snes_rom_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nintendo.snes.rom"), Ok(APPLICATION_VND_NINTENDO_SNES_ROM));
        assert_eq!(crate::Mime::parse("aPpLIcAtion/vNd.nINtEndO.sNES.roM"), Ok(APPLICATION_VND_NINTENDO_SNES_ROM));
    }

    /// `application/vnd.nitf`
    pub const APPLICATION_VND_NITF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNitf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nitf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nitf"), Ok(APPLICATION_VND_NITF));
        assert_eq!(crate::Mime::parse("aPPLiCATION/vNd.Nitf"), Ok(APPLICATION_VND_NITF));
    }

    /// `application/vnd.noblenet-directory`
    pub const APPLICATION_VND_NOBLENET_DIRECTORY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNoblenetDirectory),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_noblenet_directory_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.noblenet-directory"), Ok(APPLICATION_VND_NOBLENET_DIRECTORY));
        assert_eq!(crate::Mime::parse("applICATiOn/vnd.nOBLeNEt-direCtOry"), Ok(APPLICATION_VND_NOBLENET_DIRECTORY));
    }

    /// `application/vnd.noblenet-sealer`
    pub const APPLICATION_VND_NOBLENET_SEALER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNoblenetSealer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_noblenet_sealer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.noblenet-sealer"), Ok(APPLICATION_VND_NOBLENET_SEALER));
        assert_eq!(crate::Mime::parse("AppLiCAtioN/Vnd.nObLenet-seaLer"), Ok(APPLICATION_VND_NOBLENET_SEALER));
    }

    /// `application/vnd.noblenet-web`
    pub const APPLICATION_VND_NOBLENET_WEB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNoblenetWeb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_noblenet_web_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.noblenet-web"), Ok(APPLICATION_VND_NOBLENET_WEB));
        assert_eq!(crate::Mime::parse("APpLiCAtIOn/Vnd.nobLeNEt-WeB"), Ok(APPLICATION_VND_NOBLENET_WEB));
    }

    /// `application/vnd.nokia.catalogs`
    pub const APPLICATION_VND_NOKIA_CATALOGS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaCatalogs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_catalogs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.catalogs"), Ok(APPLICATION_VND_NOKIA_CATALOGS));
        assert_eq!(crate::Mime::parse("aPpLicatION/Vnd.nOkIa.CAtaLogS"), Ok(APPLICATION_VND_NOKIA_CATALOGS));
    }

    /// `application/vnd.nokia.conml+wbxml`
    pub const APPLICATION_VND_NOKIA_CONML_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaConml),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_conml_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.conml+wbxml"), Ok(APPLICATION_VND_NOKIA_CONML_WBXML));
        assert_eq!(crate::Mime::parse("aPPliCATIon/vND.NOKIa.cONMl+WBxml"), Ok(APPLICATION_VND_NOKIA_CONML_WBXML));
    }

    /// `application/vnd.nokia.conml+xml`
    pub const APPLICATION_VND_NOKIA_CONML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaConml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_conml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.conml+xml"), Ok(APPLICATION_VND_NOKIA_CONML_XML));
        assert_eq!(crate::Mime::parse("aPPlICatIOn/VnD.nOkia.cONMl+xml"), Ok(APPLICATION_VND_NOKIA_CONML_XML));
    }

    /// `application/vnd.nokia.iptv.config+xml`
    pub const APPLICATION_VND_NOKIA_IPTV_CONFIG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaIptvConfig),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_iptv_config_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.iptv.config+xml"), Ok(APPLICATION_VND_NOKIA_IPTV_CONFIG_XML));
        assert_eq!(crate::Mime::parse("APPLiCATIon/vNd.NOkIA.Iptv.ConFig+XmL"), Ok(APPLICATION_VND_NOKIA_IPTV_CONFIG_XML));
    }

    /// `application/vnd.nokia.iSDS-radio-presets`
    pub const APPLICATION_VND_NOKIA_I_SDS_RADIO_PRESETS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaISdsRadioPresets),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_i_sds_radio_presets_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.iSDS-radio-presets"), Ok(APPLICATION_VND_NOKIA_I_SDS_RADIO_PRESETS));
        assert_eq!(crate::Mime::parse("AppLiCation/VnD.NokIA.IsdS-RADIo-preSETs"), Ok(APPLICATION_VND_NOKIA_I_SDS_RADIO_PRESETS));
    }

    /// `application/vnd.nokia.landmark+wbxml`
    pub const APPLICATION_VND_NOKIA_LANDMARK_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaLandmark),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_landmark_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.landmark+wbxml"), Ok(APPLICATION_VND_NOKIA_LANDMARK_WBXML));
        assert_eq!(crate::Mime::parse("aPpLICATION/vnd.nokia.LANDMaRk+wbXmL"), Ok(APPLICATION_VND_NOKIA_LANDMARK_WBXML));
    }

    /// `application/vnd.nokia.landmark+xml`
    pub const APPLICATION_VND_NOKIA_LANDMARK_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaLandmark),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_landmark_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.landmark+xml"), Ok(APPLICATION_VND_NOKIA_LANDMARK_XML));
        assert_eq!(crate::Mime::parse("AppLIcatION/VNd.NokIA.LanDMARK+xMl"), Ok(APPLICATION_VND_NOKIA_LANDMARK_XML));
    }

    /// `application/vnd.nokia.landmarkcollection+xml`
    pub const APPLICATION_VND_NOKIA_LANDMARKCOLLECTION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaLandmarkcollection),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_landmarkcollection_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.landmarkcollection+xml"), Ok(APPLICATION_VND_NOKIA_LANDMARKCOLLECTION_XML));
        assert_eq!(crate::Mime::parse("aPplicAtION/VnD.noKiA.lanDmARKCoLLECtIoN+XmL"), Ok(APPLICATION_VND_NOKIA_LANDMARKCOLLECTION_XML));
    }

    /// `application/vnd.nokia.n-gage.ac+xml`
    pub const APPLICATION_VND_NOKIA_N_GAGE_AC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaNGageAc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_n_gage_ac_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.n-gage.ac+xml"), Ok(APPLICATION_VND_NOKIA_N_GAGE_AC_XML));
        assert_eq!(crate::Mime::parse("appLicaTIon/vnd.NOKIA.N-gaGe.AC+Xml"), Ok(APPLICATION_VND_NOKIA_N_GAGE_AC_XML));
    }

    /// `application/vnd.nokia.n-gage.data`
    pub const APPLICATION_VND_NOKIA_N_GAGE_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaNGageData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_n_gage_data_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.n-gage.data"), Ok(APPLICATION_VND_NOKIA_N_GAGE_DATA));
        assert_eq!(crate::Mime::parse("aPpLIcATIoN/VNd.NoKiA.N-GaGe.daTA"), Ok(APPLICATION_VND_NOKIA_N_GAGE_DATA));
    }

    /// `application/vnd.nokia.ncd`
    pub const APPLICATION_VND_NOKIA_NCD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaNcd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_ncd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.ncd"), Ok(APPLICATION_VND_NOKIA_NCD));
        assert_eq!(crate::Mime::parse("apPlicAtIon/VNd.nOkIa.Ncd"), Ok(APPLICATION_VND_NOKIA_NCD));
    }

    /// `application/vnd.nokia.pcd+wbxml`
    pub const APPLICATION_VND_NOKIA_PCD_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaPcd),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_pcd_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.pcd+wbxml"), Ok(APPLICATION_VND_NOKIA_PCD_WBXML));
        assert_eq!(crate::Mime::parse("aPPLiCAtIOn/VNd.NOkIA.pcd+WbXmL"), Ok(APPLICATION_VND_NOKIA_PCD_WBXML));
    }

    /// `application/vnd.nokia.pcd+xml`
    pub const APPLICATION_VND_NOKIA_PCD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaPcd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_pcd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.pcd+xml"), Ok(APPLICATION_VND_NOKIA_PCD_XML));
        assert_eq!(crate::Mime::parse("ApPlICaTiOn/vNd.NOkIa.Pcd+XML"), Ok(APPLICATION_VND_NOKIA_PCD_XML));
    }

    /// `application/vnd.nokia.radio-preset`
    pub const APPLICATION_VND_NOKIA_RADIO_PRESET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaRadioPreset),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_radio_preset_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.radio-preset"), Ok(APPLICATION_VND_NOKIA_RADIO_PRESET));
        assert_eq!(crate::Mime::parse("APplICATiON/vND.NOKia.raDio-PRESeT"), Ok(APPLICATION_VND_NOKIA_RADIO_PRESET));
    }

    /// `application/vnd.nokia.radio-presets`
    pub const APPLICATION_VND_NOKIA_RADIO_PRESETS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaRadioPresets),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_nokia_radio_presets_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.nokia.radio-presets"), Ok(APPLICATION_VND_NOKIA_RADIO_PRESETS));
        assert_eq!(crate::Mime::parse("ApPLIcATIoN/VND.NokIa.radIO-PResETS"), Ok(APPLICATION_VND_NOKIA_RADIO_PRESETS));
    }

    /// `application/vnd.novadigm.EDM`
    pub const APPLICATION_VND_NOVADIGM_EDM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNovadigmEdm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_novadigm_edm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.novadigm.EDM"), Ok(APPLICATION_VND_NOVADIGM_EDM));
        assert_eq!(crate::Mime::parse("APPlicATION/VnD.nOvadiGM.edM"), Ok(APPLICATION_VND_NOVADIGM_EDM));
    }

    /// `application/vnd.novadigm.EDX`
    pub const APPLICATION_VND_NOVADIGM_EDX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNovadigmEdx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_novadigm_edx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.novadigm.EDX"), Ok(APPLICATION_VND_NOVADIGM_EDX));
        assert_eq!(crate::Mime::parse("ApPLICAtION/VNd.novadIgm.eDx"), Ok(APPLICATION_VND_NOVADIGM_EDX));
    }

    /// `application/vnd.novadigm.EXT`
    pub const APPLICATION_VND_NOVADIGM_EXT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNovadigmExt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_novadigm_ext_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.novadigm.EXT"), Ok(APPLICATION_VND_NOVADIGM_EXT));
        assert_eq!(crate::Mime::parse("APpLicAtION/VND.nOvadIgM.ExT"), Ok(APPLICATION_VND_NOVADIGM_EXT));
    }

    /// `application/vnd.ntt-local.content-share`
    pub const APPLICATION_VND_NTT_LOCAL_CONTENT_SHARE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNttLocalContentShare),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ntt_local_content_share_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ntt-local.content-share"), Ok(APPLICATION_VND_NTT_LOCAL_CONTENT_SHARE));
        assert_eq!(crate::Mime::parse("APPLICaTiON/VND.nTt-loCAL.ConteNT-share"), Ok(APPLICATION_VND_NTT_LOCAL_CONTENT_SHARE));
    }

    /// `application/vnd.ntt-local.file-transfer`
    pub const APPLICATION_VND_NTT_LOCAL_FILE_TRANSFER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNttLocalFileTransfer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ntt_local_file_transfer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ntt-local.file-transfer"), Ok(APPLICATION_VND_NTT_LOCAL_FILE_TRANSFER));
        assert_eq!(crate::Mime::parse("aPPlICATIoN/VnD.Ntt-LoCal.FiLE-tRAnsFEr"), Ok(APPLICATION_VND_NTT_LOCAL_FILE_TRANSFER));
    }

    /// `application/vnd.ntt-local.ogw_remote-access`
    pub const APPLICATION_VND_NTT_LOCAL_OGW_REMOTE_ACCESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNttLocalOgwRemoteAccess),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ntt_local_ogw_remote_access_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ntt-local.ogw_remote-access"), Ok(APPLICATION_VND_NTT_LOCAL_OGW_REMOTE_ACCESS));
        assert_eq!(crate::Mime::parse("aPplicATIon/vNd.Ntt-LOcAL.OGW_REmOte-ACcESS"), Ok(APPLICATION_VND_NTT_LOCAL_OGW_REMOTE_ACCESS));
    }

    /// `application/vnd.ntt-local.sip-ta_remote`
    pub const APPLICATION_VND_NTT_LOCAL_SIP_TA_REMOTE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNttLocalSipTaRemote),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ntt_local_sip_ta_remote_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ntt-local.sip-ta_remote"), Ok(APPLICATION_VND_NTT_LOCAL_SIP_TA_REMOTE));
        assert_eq!(crate::Mime::parse("aPplicATIon/Vnd.ntT-LOcAL.siP-TA_reMOTe"), Ok(APPLICATION_VND_NTT_LOCAL_SIP_TA_REMOTE));
    }

    /// `application/vnd.ntt-local.sip-ta_tcp_stream`
    pub const APPLICATION_VND_NTT_LOCAL_SIP_TA_TCP_STREAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndNttLocalSipTaTcpStream),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ntt_local_sip_ta_tcp_stream_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ntt-local.sip-ta_tcp_stream"), Ok(APPLICATION_VND_NTT_LOCAL_SIP_TA_TCP_STREAM));
        assert_eq!(crate::Mime::parse("aPPlICAtIon/vnD.ntt-lOcAl.SIP-Ta_TCp_stREAM"), Ok(APPLICATION_VND_NTT_LOCAL_SIP_TA_TCP_STREAM));
    }

    /// `application/vnd.oasis.opendocument.chart`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_CHART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentChart),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_chart_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.chart"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_CHART));
        assert_eq!(crate::Mime::parse("APpLIcatIon/vNd.OaSIS.oPEndOCumENt.Chart"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_CHART));
    }

    /// `application/vnd.oasis.opendocument.chart-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_CHART_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentChartTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_chart_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.chart-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_CHART_TEMPLATE));
        assert_eq!(crate::Mime::parse("apPliCATion/vnD.oasiS.OPEndocuMEnt.chart-TeMplaTe"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_CHART_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.database`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentDatabase),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_database_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.database"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE));
        assert_eq!(crate::Mime::parse("ApPlICaTioN/vnD.OAsIs.oPENdOCumeNt.DATaBasE"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE));
    }

    /// `application/vnd.oasis.opendocument.formula`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentFormula),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_formula_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.formula"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA));
        assert_eq!(crate::Mime::parse("aPPLIcAtion/vNd.oAsiS.OpeNdOCumEnt.formULa"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA));
    }

    /// `application/vnd.oasis.opendocument.formula-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentFormulaTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_formula_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.formula-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA_TEMPLATE));
        assert_eq!(crate::Mime::parse("ApPLicAtIon/VNd.oAsIS.OPendocUmEnt.Formula-TeMpLate"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.graphics`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentGraphics),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_graphics_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.graphics"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS));
        assert_eq!(crate::Mime::parse("apPliCatIoN/VND.OaSis.OpEndOcumeNt.GraPhIcS"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS));
    }

    /// `application/vnd.oasis.opendocument.graphics-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentGraphicsTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_graphics_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.graphics-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS_TEMPLATE));
        assert_eq!(crate::Mime::parse("aPplicAtiOn/vNd.oASIs.oPendoCuMeNt.GrapHiCs-TempLATE"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.image`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_IMAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentImage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_image_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.image"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_IMAGE));
        assert_eq!(crate::Mime::parse("APplicaTION/vnd.oASis.opEndOCUmeNt.iMAgE"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_IMAGE));
    }

    /// `application/vnd.oasis.opendocument.image-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_IMAGE_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentImageTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_image_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.image-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_IMAGE_TEMPLATE));
        assert_eq!(crate::Mime::parse("APplICAtION/vNd.oaSIs.OPendOcumeNt.ImagE-TEMplAte"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_IMAGE_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.presentation`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentPresentation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_presentation_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.presentation"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION));
        assert_eq!(crate::Mime::parse("aPPLICATION/Vnd.OAsis.opEnDOcuMENT.PrESentATIOn"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION));
    }

    /// `application/vnd.oasis.opendocument.presentation-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentPresentationTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_presentation_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.presentation-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION_TEMPLATE));
        assert_eq!(crate::Mime::parse("aPpLicAtioN/VNd.oAsIs.OpENdoCumENt.pREsEnTation-TeMPLATe"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.spreadsheet`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentSpreadsheet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_spreadsheet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.spreadsheet"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET));
        assert_eq!(crate::Mime::parse("appLICaTiOn/VNd.oasiS.oPeNDOcUMeNT.SPREAdSHeet"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET));
    }

    /// `application/vnd.oasis.opendocument.spreadsheet-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentSpreadsheetTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_spreadsheet_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.spreadsheet-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET_TEMPLATE));
        assert_eq!(crate::Mime::parse("aPPlicATiOn/vnd.oAsiS.OpEnDOCUMent.SpREADShEEt-tEmpLATE"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.text`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentText),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_text_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.text"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT));
        assert_eq!(crate::Mime::parse("aPPLicaTION/vnD.oasIs.opEnDoCumEnt.TEXT"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT));
    }

    /// `application/vnd.oasis.opendocument.text-master`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_MASTER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentTextMaster),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_text_master_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.text-master"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_MASTER));
        assert_eq!(crate::Mime::parse("aPPliCAtioN/vNd.OasiS.opeNDOcuMent.TEXt-maSter"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_MASTER));
    }

    /// `application/vnd.oasis.opendocument.text-template`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentTextTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_text_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.text-template"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_TEMPLATE));
        assert_eq!(crate::Mime::parse("APPLIcAtion/VND.OaSIS.OPEnDOcUmENt.TEXT-tEmplate"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_TEMPLATE));
    }

    /// `application/vnd.oasis.opendocument.text-web`
    pub const APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_WEB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOasisOpendocumentTextWeb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oasis_opendocument_text_web_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oasis.opendocument.text-web"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_WEB));
        assert_eq!(crate::Mime::parse("APpLiCaTiOn/vnd.oASIS.OpendOcUMEnt.tExT-web"), Ok(APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT_WEB));
    }

    /// `application/vnd.obn`
    pub const APPLICATION_VND_OBN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndObn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_obn_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.obn"), Ok(APPLICATION_VND_OBN));
        assert_eq!(crate::Mime::parse("APpLICATIoN/VnD.ObN"), Ok(APPLICATION_VND_OBN));
    }

    /// `application/vnd.ocf+cbor`
    pub const APPLICATION_VND_OCF_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOcf),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_ocf_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ocf+cbor"), Ok(APPLICATION_VND_OCF_CBOR));
        assert_eq!(crate::Mime::parse("aPplICAtioN/vnD.OcF+cBOr"), Ok(APPLICATION_VND_OCF_CBOR));
    }

    /// `application/vnd.oci.image.manifest.v1+json`
    pub const APPLICATION_VND_OCI_IMAGE_MANIFEST_V1_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOciImageManifestV1),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oci_image_manifest_v1_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oci.image.manifest.v1+json"), Ok(APPLICATION_VND_OCI_IMAGE_MANIFEST_V1_JSON));
        assert_eq!(crate::Mime::parse("APPlIcATIOn/vND.OCi.iMAGe.mANIFesT.V1+jSON"), Ok(APPLICATION_VND_OCI_IMAGE_MANIFEST_V1_JSON));
    }

    /// `application/vnd.oftn.l10n+json`
    pub const APPLICATION_VND_OFTN_L10N_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOftnL10n),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oftn_l10n_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oftn.l10n+json"), Ok(APPLICATION_VND_OFTN_L10N_JSON));
        assert_eq!(crate::Mime::parse("APPLicatIoN/vnD.oftN.L10N+JSon"), Ok(APPLICATION_VND_OFTN_L10N_JSON));
    }

    /// `application/vnd.oipf.contentaccessdownload+xml`
    pub const APPLICATION_VND_OIPF_CONTENTACCESSDOWNLOAD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfContentaccessdownload),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_contentaccessdownload_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.contentaccessdownload+xml"), Ok(APPLICATION_VND_OIPF_CONTENTACCESSDOWNLOAD_XML));
        assert_eq!(crate::Mime::parse("aPPLICatiOn/vnD.oIpF.coNTeNtacCesSdOwnlOAD+xml"), Ok(APPLICATION_VND_OIPF_CONTENTACCESSDOWNLOAD_XML));
    }

    /// `application/vnd.oipf.contentaccessstreaming+xml`
    pub const APPLICATION_VND_OIPF_CONTENTACCESSSTREAMING_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfContentaccessstreaming),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_contentaccessstreaming_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.contentaccessstreaming+xml"), Ok(APPLICATION_VND_OIPF_CONTENTACCESSSTREAMING_XML));
        assert_eq!(crate::Mime::parse("aPplIcATion/vND.oIpf.ConTENtAcCeSSsTrEaMINg+XML"), Ok(APPLICATION_VND_OIPF_CONTENTACCESSSTREAMING_XML));
    }

    /// `application/vnd.oipf.cspg-hexbinary`
    pub const APPLICATION_VND_OIPF_CSPG_HEXBINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfCspgHexbinary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_cspg_hexbinary_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.cspg-hexbinary"), Ok(APPLICATION_VND_OIPF_CSPG_HEXBINARY));
        assert_eq!(crate::Mime::parse("aPplIcAtioN/Vnd.OIpF.cspG-HExbiNary"), Ok(APPLICATION_VND_OIPF_CSPG_HEXBINARY));
    }

    /// `application/vnd.oipf.dae.svg+xml`
    pub const APPLICATION_VND_OIPF_DAE_SVG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfDaeSvg),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_dae_svg_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.dae.svg+xml"), Ok(APPLICATION_VND_OIPF_DAE_SVG_XML));
        assert_eq!(crate::Mime::parse("aPPLIcAtiOn/VnD.OIpf.daE.sVg+xMl"), Ok(APPLICATION_VND_OIPF_DAE_SVG_XML));
    }

    /// `application/vnd.oipf.dae.xhtml+xml`
    pub const APPLICATION_VND_OIPF_DAE_XHTML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfDaeXhtml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_dae_xhtml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.dae.xhtml+xml"), Ok(APPLICATION_VND_OIPF_DAE_XHTML_XML));
        assert_eq!(crate::Mime::parse("aPPLIcatIOn/vNd.oipf.Dae.xhTml+XmL"), Ok(APPLICATION_VND_OIPF_DAE_XHTML_XML));
    }

    /// `application/vnd.oipf.mippvcontrolmessage+xml`
    pub const APPLICATION_VND_OIPF_MIPPVCONTROLMESSAGE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfMippvcontrolmessage),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_mippvcontrolmessage_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.mippvcontrolmessage+xml"), Ok(APPLICATION_VND_OIPF_MIPPVCONTROLMESSAGE_XML));
        assert_eq!(crate::Mime::parse("ApPLiCATIon/vNd.OIpf.MIpPvcoNTRolmessaGE+xml"), Ok(APPLICATION_VND_OIPF_MIPPVCONTROLMESSAGE_XML));
    }

    /// `application/vnd.oipf.pae.gem`
    pub const APPLICATION_VND_OIPF_PAE_GEM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfPaeGem),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_pae_gem_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.pae.gem"), Ok(APPLICATION_VND_OIPF_PAE_GEM));
        assert_eq!(crate::Mime::parse("appLICAtIOn/vnd.oiPf.paE.GEM"), Ok(APPLICATION_VND_OIPF_PAE_GEM));
    }

    /// `application/vnd.oipf.spdiscovery+xml`
    pub const APPLICATION_VND_OIPF_SPDISCOVERY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfSpdiscovery),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_spdiscovery_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.spdiscovery+xml"), Ok(APPLICATION_VND_OIPF_SPDISCOVERY_XML));
        assert_eq!(crate::Mime::parse("AppliCATIon/Vnd.oiPf.SPdisCOvERY+xml"), Ok(APPLICATION_VND_OIPF_SPDISCOVERY_XML));
    }

    /// `application/vnd.oipf.spdlist+xml`
    pub const APPLICATION_VND_OIPF_SPDLIST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfSpdlist),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_spdlist_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.spdlist+xml"), Ok(APPLICATION_VND_OIPF_SPDLIST_XML));
        assert_eq!(crate::Mime::parse("ApplICaTION/vND.OiPf.sPDliST+XMl"), Ok(APPLICATION_VND_OIPF_SPDLIST_XML));
    }

    /// `application/vnd.oipf.ueprofile+xml`
    pub const APPLICATION_VND_OIPF_UEPROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfUeprofile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_ueprofile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.ueprofile+xml"), Ok(APPLICATION_VND_OIPF_UEPROFILE_XML));
        assert_eq!(crate::Mime::parse("ApPlicATION/VNd.oIpf.uEpRofIlE+XML"), Ok(APPLICATION_VND_OIPF_UEPROFILE_XML));
    }

    /// `application/vnd.oipf.userprofile+xml`
    pub const APPLICATION_VND_OIPF_USERPROFILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOipfUserprofile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oipf_userprofile_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oipf.userprofile+xml"), Ok(APPLICATION_VND_OIPF_USERPROFILE_XML));
        assert_eq!(crate::Mime::parse("apPlICaTIoN/vNd.oiPf.usERProFIlE+xMl"), Ok(APPLICATION_VND_OIPF_USERPROFILE_XML));
    }

    /// `application/vnd.olpc-sugar`
    pub const APPLICATION_VND_OLPC_SUGAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOlpcSugar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_olpc_sugar_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.olpc-sugar"), Ok(APPLICATION_VND_OLPC_SUGAR));
        assert_eq!(crate::Mime::parse("aPplicATiON/vnd.OLpc-sUgAr"), Ok(APPLICATION_VND_OLPC_SUGAR));
    }

    /// `application/vnd.oma-scws-config`
    pub const APPLICATION_VND_OMA_SCWS_CONFIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaScwsConfig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_scws_config_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma-scws-config"), Ok(APPLICATION_VND_OMA_SCWS_CONFIG));
        assert_eq!(crate::Mime::parse("aPpLicaTioN/VNd.oMA-scWS-ConFig"), Ok(APPLICATION_VND_OMA_SCWS_CONFIG));
    }

    /// `application/vnd.oma-scws-http-request`
    pub const APPLICATION_VND_OMA_SCWS_HTTP_REQUEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaScwsHttpRequest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_scws_http_request_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma-scws-http-request"), Ok(APPLICATION_VND_OMA_SCWS_HTTP_REQUEST));
        assert_eq!(crate::Mime::parse("APpLICAtiOn/vNd.OMa-ScWs-HTtp-ReQUEST"), Ok(APPLICATION_VND_OMA_SCWS_HTTP_REQUEST));
    }

    /// `application/vnd.oma-scws-http-response`
    pub const APPLICATION_VND_OMA_SCWS_HTTP_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaScwsHttpResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_scws_http_response_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma-scws-http-response"), Ok(APPLICATION_VND_OMA_SCWS_HTTP_RESPONSE));
        assert_eq!(crate::Mime::parse("appLiCAtIoN/vnD.Oma-sCWS-htTP-rESPonsE"), Ok(APPLICATION_VND_OMA_SCWS_HTTP_RESPONSE));
    }

    /// `application/vnd.oma.bcast.associated-procedure-parameter+xml`
    pub const APPLICATION_VND_OMA_BCAST_ASSOCIATED_PROCEDURE_PARAMETER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastAssociatedProcedureParameter),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_associated_procedure_parameter_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.associated-procedure-parameter+xml"), Ok(APPLICATION_VND_OMA_BCAST_ASSOCIATED_PROCEDURE_PARAMETER_XML));
        assert_eq!(crate::Mime::parse("AppLicAtIOn/VNd.OMA.bCAsT.aSsOciaTEd-prOCEdURE-PARAmEtEr+xmL"), Ok(APPLICATION_VND_OMA_BCAST_ASSOCIATED_PROCEDURE_PARAMETER_XML));
    }

    /// `application/vnd.oma.bcast.drm-trigger+xml`
    pub const APPLICATION_VND_OMA_BCAST_DRM_TRIGGER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastDrmTrigger),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_drm_trigger_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.drm-trigger+xml"), Ok(APPLICATION_VND_OMA_BCAST_DRM_TRIGGER_XML));
        assert_eq!(crate::Mime::parse("aPPLiCaTIoN/VnD.omA.BCAsT.drm-TriGGER+XmL"), Ok(APPLICATION_VND_OMA_BCAST_DRM_TRIGGER_XML));
    }

    /// `application/vnd.oma.bcast.imd+xml`
    pub const APPLICATION_VND_OMA_BCAST_IMD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastImd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_imd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.imd+xml"), Ok(APPLICATION_VND_OMA_BCAST_IMD_XML));
        assert_eq!(crate::Mime::parse("apPLIcatioN/VNd.Oma.bCaST.ImD+XmL"), Ok(APPLICATION_VND_OMA_BCAST_IMD_XML));
    }

    /// `application/vnd.oma.bcast.ltkm`
    pub const APPLICATION_VND_OMA_BCAST_LTKM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastLtkm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_ltkm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.ltkm"), Ok(APPLICATION_VND_OMA_BCAST_LTKM));
        assert_eq!(crate::Mime::parse("ApPlicATION/VND.oMa.Bcast.LTkm"), Ok(APPLICATION_VND_OMA_BCAST_LTKM));
    }

    /// `application/vnd.oma.bcast.notification+xml`
    pub const APPLICATION_VND_OMA_BCAST_NOTIFICATION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastNotification),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_notification_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.notification+xml"), Ok(APPLICATION_VND_OMA_BCAST_NOTIFICATION_XML));
        assert_eq!(crate::Mime::parse("APplicatiOn/vnd.omA.BCAsT.NoTIFicAtion+XMl"), Ok(APPLICATION_VND_OMA_BCAST_NOTIFICATION_XML));
    }

    /// `application/vnd.oma.bcast.provisioningtrigger`
    pub const APPLICATION_VND_OMA_BCAST_PROVISIONINGTRIGGER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastProvisioningtrigger),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_provisioningtrigger_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.provisioningtrigger"), Ok(APPLICATION_VND_OMA_BCAST_PROVISIONINGTRIGGER));
        assert_eq!(crate::Mime::parse("ApplIcaTION/VND.oMa.bCAST.PRoVIsIoninGTRigger"), Ok(APPLICATION_VND_OMA_BCAST_PROVISIONINGTRIGGER));
    }

    /// `application/vnd.oma.bcast.sgboot`
    pub const APPLICATION_VND_OMA_BCAST_SGBOOT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastSgboot),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_sgboot_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.sgboot"), Ok(APPLICATION_VND_OMA_BCAST_SGBOOT));
        assert_eq!(crate::Mime::parse("aPpLiCAtIOn/Vnd.oMA.bcaSt.SgbooT"), Ok(APPLICATION_VND_OMA_BCAST_SGBOOT));
    }

    /// `application/vnd.oma.bcast.sgdd+xml`
    pub const APPLICATION_VND_OMA_BCAST_SGDD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastSgdd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_sgdd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.sgdd+xml"), Ok(APPLICATION_VND_OMA_BCAST_SGDD_XML));
        assert_eq!(crate::Mime::parse("aPPLiCation/Vnd.Oma.bcaST.SGDd+Xml"), Ok(APPLICATION_VND_OMA_BCAST_SGDD_XML));
    }

    /// `application/vnd.oma.bcast.sgdu`
    pub const APPLICATION_VND_OMA_BCAST_SGDU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastSgdu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_sgdu_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.sgdu"), Ok(APPLICATION_VND_OMA_BCAST_SGDU));
        assert_eq!(crate::Mime::parse("appliCaTIon/VNd.OmA.BcAsT.SGDU"), Ok(APPLICATION_VND_OMA_BCAST_SGDU));
    }

    /// `application/vnd.oma.bcast.simple-symbol-container`
    pub const APPLICATION_VND_OMA_BCAST_SIMPLE_SYMBOL_CONTAINER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastSimpleSymbolContainer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_simple_symbol_container_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.simple-symbol-container"), Ok(APPLICATION_VND_OMA_BCAST_SIMPLE_SYMBOL_CONTAINER));
        assert_eq!(crate::Mime::parse("APplicaTION/vNd.oMa.bCaST.siMplE-SymbOL-cONTAINer"), Ok(APPLICATION_VND_OMA_BCAST_SIMPLE_SYMBOL_CONTAINER));
    }

    /// `application/vnd.oma.bcast.smartcard-trigger+xml`
    pub const APPLICATION_VND_OMA_BCAST_SMARTCARD_TRIGGER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastSmartcardTrigger),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_smartcard_trigger_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.smartcard-trigger+xml"), Ok(APPLICATION_VND_OMA_BCAST_SMARTCARD_TRIGGER_XML));
        assert_eq!(crate::Mime::parse("ApplicAtiON/vnD.OMa.bCAsT.sMarTcArD-triggER+xml"), Ok(APPLICATION_VND_OMA_BCAST_SMARTCARD_TRIGGER_XML));
    }

    /// `application/vnd.oma.bcast.sprov+xml`
    pub const APPLICATION_VND_OMA_BCAST_SPROV_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastSprov),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_sprov_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.sprov+xml"), Ok(APPLICATION_VND_OMA_BCAST_SPROV_XML));
        assert_eq!(crate::Mime::parse("appliCatiOn/vNd.oMa.BCAsT.SPRoV+XMl"), Ok(APPLICATION_VND_OMA_BCAST_SPROV_XML));
    }

    /// `application/vnd.oma.bcast.stkm`
    pub const APPLICATION_VND_OMA_BCAST_STKM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaBcastStkm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_bcast_stkm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.bcast.stkm"), Ok(APPLICATION_VND_OMA_BCAST_STKM));
        assert_eq!(crate::Mime::parse("aPPlicAtIOn/vND.oMa.BCAst.StkM"), Ok(APPLICATION_VND_OMA_BCAST_STKM));
    }

    /// `application/vnd.oma.cab-address-book+xml`
    pub const APPLICATION_VND_OMA_CAB_ADDRESS_BOOK_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaCabAddressBook),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_cab_address_book_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.cab-address-book+xml"), Ok(APPLICATION_VND_OMA_CAB_ADDRESS_BOOK_XML));
        assert_eq!(crate::Mime::parse("aPpLiCaTioN/vNd.oMa.CaB-ADdrESS-book+xMl"), Ok(APPLICATION_VND_OMA_CAB_ADDRESS_BOOK_XML));
    }

    /// `application/vnd.oma.cab-feature-handler+xml`
    pub const APPLICATION_VND_OMA_CAB_FEATURE_HANDLER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaCabFeatureHandler),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_cab_feature_handler_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.cab-feature-handler+xml"), Ok(APPLICATION_VND_OMA_CAB_FEATURE_HANDLER_XML));
        assert_eq!(crate::Mime::parse("apPLIcaTiOn/VNd.Oma.CAb-FEATURE-hAndler+xmL"), Ok(APPLICATION_VND_OMA_CAB_FEATURE_HANDLER_XML));
    }

    /// `application/vnd.oma.cab-pcc+xml`
    pub const APPLICATION_VND_OMA_CAB_PCC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaCabPcc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_cab_pcc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.cab-pcc+xml"), Ok(APPLICATION_VND_OMA_CAB_PCC_XML));
        assert_eq!(crate::Mime::parse("ApplicAtiOn/VnD.oMa.cAb-PCC+xmL"), Ok(APPLICATION_VND_OMA_CAB_PCC_XML));
    }

    /// `application/vnd.oma.cab-subs-invite+xml`
    pub const APPLICATION_VND_OMA_CAB_SUBS_INVITE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaCabSubsInvite),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_cab_subs_invite_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.cab-subs-invite+xml"), Ok(APPLICATION_VND_OMA_CAB_SUBS_INVITE_XML));
        assert_eq!(crate::Mime::parse("APpLIcaTIOn/vND.oma.cAB-subS-iNVIte+XML"), Ok(APPLICATION_VND_OMA_CAB_SUBS_INVITE_XML));
    }

    /// `application/vnd.oma.cab-user-prefs+xml`
    pub const APPLICATION_VND_OMA_CAB_USER_PREFS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaCabUserPrefs),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_cab_user_prefs_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.cab-user-prefs+xml"), Ok(APPLICATION_VND_OMA_CAB_USER_PREFS_XML));
        assert_eq!(crate::Mime::parse("APpliCaTIoN/vND.oma.cAb-useR-PrEFs+XMl"), Ok(APPLICATION_VND_OMA_CAB_USER_PREFS_XML));
    }

    /// `application/vnd.oma.dcd`
    pub const APPLICATION_VND_OMA_DCD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaDcd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_dcd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.dcd"), Ok(APPLICATION_VND_OMA_DCD));
        assert_eq!(crate::Mime::parse("APPlicaTioN/VND.OMA.dCD"), Ok(APPLICATION_VND_OMA_DCD));
    }

    /// `application/vnd.oma.dcdc`
    pub const APPLICATION_VND_OMA_DCDC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaDcdc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_dcdc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.dcdc"), Ok(APPLICATION_VND_OMA_DCDC));
        assert_eq!(crate::Mime::parse("APPLicatioN/Vnd.OMa.dcDC"), Ok(APPLICATION_VND_OMA_DCDC));
    }

    /// `application/vnd.oma.dd2+xml`
    pub const APPLICATION_VND_OMA_DD2_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaDd2),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_dd2_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.dd2+xml"), Ok(APPLICATION_VND_OMA_DD2_XML));
        assert_eq!(crate::Mime::parse("APplIcATion/vND.Oma.dd2+XmL"), Ok(APPLICATION_VND_OMA_DD2_XML));
    }

    /// `application/vnd.oma.drm.risd+xml`
    pub const APPLICATION_VND_OMA_DRM_RISD_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaDrmRisd),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_drm_risd_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.drm.risd+xml"), Ok(APPLICATION_VND_OMA_DRM_RISD_XML));
        assert_eq!(crate::Mime::parse("ApPlICatIon/VND.oMA.Drm.Risd+xml"), Ok(APPLICATION_VND_OMA_DRM_RISD_XML));
    }

    /// `application/vnd.oma.group-usage-list+xml`
    pub const APPLICATION_VND_OMA_GROUP_USAGE_LIST_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaGroupUsageList),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_group_usage_list_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.group-usage-list+xml"), Ok(APPLICATION_VND_OMA_GROUP_USAGE_LIST_XML));
        assert_eq!(crate::Mime::parse("APPLICAtIoN/vNd.oMA.gRouP-uSaGe-lIST+Xml"), Ok(APPLICATION_VND_OMA_GROUP_USAGE_LIST_XML));
    }

    /// `application/vnd.oma.lwm2m+cbor`
    pub const APPLICATION_VND_OMA_LWM2M_CBOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaLwm2m),
        suffix: Some(crate::Name::Interned(super::Suffix::Cbor)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_lwm2m_cbor_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.lwm2m+cbor"), Ok(APPLICATION_VND_OMA_LWM2M_CBOR));
        assert_eq!(crate::Mime::parse("AppLIcatIon/vnd.OmA.Lwm2M+CboR"), Ok(APPLICATION_VND_OMA_LWM2M_CBOR));
    }

    /// `application/vnd.oma.lwm2m+json`
    pub const APPLICATION_VND_OMA_LWM2M_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaLwm2m),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_lwm2m_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.lwm2m+json"), Ok(APPLICATION_VND_OMA_LWM2M_JSON));
        assert_eq!(crate::Mime::parse("aPpLiCAtION/vnD.OMA.lwM2m+jsoN"), Ok(APPLICATION_VND_OMA_LWM2M_JSON));
    }

    /// `application/vnd.oma.lwm2m+tlv`
    pub const APPLICATION_VND_OMA_LWM2M_TLV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaLwm2m),
        suffix: Some(crate::Name::Interned(super::Suffix::Tlv)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_lwm2m_tlv_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.lwm2m+tlv"), Ok(APPLICATION_VND_OMA_LWM2M_TLV));
        assert_eq!(crate::Mime::parse("appLiCaTion/vND.oma.lwm2m+tLv"), Ok(APPLICATION_VND_OMA_LWM2M_TLV));
    }

    /// `application/vnd.oma.pal+xml`
    pub const APPLICATION_VND_OMA_PAL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPal),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_pal_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.pal+xml"), Ok(APPLICATION_VND_OMA_PAL_XML));
        assert_eq!(crate::Mime::parse("aPpliCatiOn/VNd.OMA.PAl+XmL"), Ok(APPLICATION_VND_OMA_PAL_XML));
    }

    /// `application/vnd.oma.poc.detailed-progress-report+xml`
    pub const APPLICATION_VND_OMA_POC_DETAILED_PROGRESS_REPORT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPocDetailedProgressReport),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_poc_detailed_progress_report_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.poc.detailed-progress-report+xml"), Ok(APPLICATION_VND_OMA_POC_DETAILED_PROGRESS_REPORT_XML));
        assert_eq!(crate::Mime::parse("aPpLICAtioN/vND.OMa.POC.DETaiLeD-PROgREsS-rEpORT+XmL"), Ok(APPLICATION_VND_OMA_POC_DETAILED_PROGRESS_REPORT_XML));
    }

    /// `application/vnd.oma.poc.final-report+xml`
    pub const APPLICATION_VND_OMA_POC_FINAL_REPORT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPocFinalReport),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_poc_final_report_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.poc.final-report+xml"), Ok(APPLICATION_VND_OMA_POC_FINAL_REPORT_XML));
        assert_eq!(crate::Mime::parse("ApplIcaTioN/vNd.OmA.poC.final-rEPort+XMl"), Ok(APPLICATION_VND_OMA_POC_FINAL_REPORT_XML));
    }

    /// `application/vnd.oma.poc.groups+xml`
    pub const APPLICATION_VND_OMA_POC_GROUPS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPocGroups),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_poc_groups_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.poc.groups+xml"), Ok(APPLICATION_VND_OMA_POC_GROUPS_XML));
        assert_eq!(crate::Mime::parse("APPLIcatION/vnD.oMa.pOc.gROupS+xML"), Ok(APPLICATION_VND_OMA_POC_GROUPS_XML));
    }

    /// `application/vnd.oma.poc.invocation-descriptor+xml`
    pub const APPLICATION_VND_OMA_POC_INVOCATION_DESCRIPTOR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPocInvocationDescriptor),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_poc_invocation_descriptor_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.poc.invocation-descriptor+xml"), Ok(APPLICATION_VND_OMA_POC_INVOCATION_DESCRIPTOR_XML));
        assert_eq!(crate::Mime::parse("aPpLICAtiON/VnD.oMA.pOC.inVoCATioN-desCRiPTOr+xml"), Ok(APPLICATION_VND_OMA_POC_INVOCATION_DESCRIPTOR_XML));
    }

    /// `application/vnd.oma.poc.optimized-progress-report+xml`
    pub const APPLICATION_VND_OMA_POC_OPTIMIZED_PROGRESS_REPORT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPocOptimizedProgressReport),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_poc_optimized_progress_report_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.poc.optimized-progress-report+xml"), Ok(APPLICATION_VND_OMA_POC_OPTIMIZED_PROGRESS_REPORT_XML));
        assert_eq!(crate::Mime::parse("apPliCaTioN/vNd.oMa.Poc.oPTimIzEd-PrOgREsS-RePoRT+xMl"), Ok(APPLICATION_VND_OMA_POC_OPTIMIZED_PROGRESS_REPORT_XML));
    }

    /// `application/vnd.oma.push`
    pub const APPLICATION_VND_OMA_PUSH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaPush),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_push_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.push"), Ok(APPLICATION_VND_OMA_PUSH));
        assert_eq!(crate::Mime::parse("appLiCaTIOn/VNd.omA.puSH"), Ok(APPLICATION_VND_OMA_PUSH));
    }

    /// `application/vnd.oma.scidm.messages+xml`
    pub const APPLICATION_VND_OMA_SCIDM_MESSAGES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaScidmMessages),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_scidm_messages_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.scidm.messages+xml"), Ok(APPLICATION_VND_OMA_SCIDM_MESSAGES_XML));
        assert_eq!(crate::Mime::parse("ApPLiCatIon/vNd.OMa.ScidM.mESsagEs+XmL"), Ok(APPLICATION_VND_OMA_SCIDM_MESSAGES_XML));
    }

    /// `application/vnd.oma.xcap-directory+xml`
    pub const APPLICATION_VND_OMA_XCAP_DIRECTORY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmaXcapDirectory),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oma_xcap_directory_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oma.xcap-directory+xml"), Ok(APPLICATION_VND_OMA_XCAP_DIRECTORY_XML));
        assert_eq!(crate::Mime::parse("aPPLICaTION/Vnd.Oma.xcaP-dirECtOry+XMl"), Ok(APPLICATION_VND_OMA_XCAP_DIRECTORY_XML));
    }

    /// `application/vnd.omads-email+xml`
    pub const APPLICATION_VND_OMADS_EMAIL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmadsEmail),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_omads_email_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.omads-email+xml"), Ok(APPLICATION_VND_OMADS_EMAIL_XML));
        assert_eq!(crate::Mime::parse("ApPlicaTION/VNd.oMAds-eMAil+XmL"), Ok(APPLICATION_VND_OMADS_EMAIL_XML));
    }

    /// `application/vnd.omads-file+xml`
    pub const APPLICATION_VND_OMADS_FILE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmadsFile),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_omads_file_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.omads-file+xml"), Ok(APPLICATION_VND_OMADS_FILE_XML));
        assert_eq!(crate::Mime::parse("apPLIcATIon/VND.omAds-fIle+XML"), Ok(APPLICATION_VND_OMADS_FILE_XML));
    }

    /// `application/vnd.omads-folder+xml`
    pub const APPLICATION_VND_OMADS_FOLDER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmadsFolder),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_omads_folder_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.omads-folder+xml"), Ok(APPLICATION_VND_OMADS_FOLDER_XML));
        assert_eq!(crate::Mime::parse("APplicaTioN/Vnd.oMAdS-fOlDEr+XML"), Ok(APPLICATION_VND_OMADS_FOLDER_XML));
    }

    /// `application/vnd.omaloc-supl-init`
    pub const APPLICATION_VND_OMALOC_SUPL_INIT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOmalocSuplInit),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_omaloc_supl_init_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.omaloc-supl-init"), Ok(APPLICATION_VND_OMALOC_SUPL_INIT));
        assert_eq!(crate::Mime::parse("apPliCATIon/VND.OmALoc-SuPL-iNiT"), Ok(APPLICATION_VND_OMALOC_SUPL_INIT));
    }

    /// `application/vnd.onepager`
    pub const APPLICATION_VND_ONEPAGER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOnepager),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_onepager_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.onepager"), Ok(APPLICATION_VND_ONEPAGER));
        assert_eq!(crate::Mime::parse("aPpLIcaTioN/vNd.OnEpAger"), Ok(APPLICATION_VND_ONEPAGER));
    }

    /// `application/vnd.onepagertamp`
    pub const APPLICATION_VND_ONEPAGERTAMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOnepagertamp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_onepagertamp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.onepagertamp"), Ok(APPLICATION_VND_ONEPAGERTAMP));
        assert_eq!(crate::Mime::parse("aPPLiCATion/Vnd.onEPaGerTaMP"), Ok(APPLICATION_VND_ONEPAGERTAMP));
    }

    /// `application/vnd.onepagertamx`
    pub const APPLICATION_VND_ONEPAGERTAMX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOnepagertamx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_onepagertamx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.onepagertamx"), Ok(APPLICATION_VND_ONEPAGERTAMX));
        assert_eq!(crate::Mime::parse("aPplicaTion/VND.ONePagErTAmx"), Ok(APPLICATION_VND_ONEPAGERTAMX));
    }

    /// `application/vnd.onepagertat`
    pub const APPLICATION_VND_ONEPAGERTAT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOnepagertat),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_onepagertat_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.onepagertat"), Ok(APPLICATION_VND_ONEPAGERTAT));
        assert_eq!(crate::Mime::parse("apPliCation/vnd.onEpagertAt"), Ok(APPLICATION_VND_ONEPAGERTAT));
    }

    /// `application/vnd.onepagertatp`
    pub const APPLICATION_VND_ONEPAGERTATP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOnepagertatp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_onepagertatp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.onepagertatp"), Ok(APPLICATION_VND_ONEPAGERTATP));
        assert_eq!(crate::Mime::parse("aPplIcAtIOn/VNd.onePAgErtATP"), Ok(APPLICATION_VND_ONEPAGERTATP));
    }

    /// `application/vnd.onepagertatx`
    pub const APPLICATION_VND_ONEPAGERTATX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOnepagertatx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_onepagertatx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.onepagertatx"), Ok(APPLICATION_VND_ONEPAGERTATX));
        assert_eq!(crate::Mime::parse("aPpliCAtIOn/vNd.onepAgERtaTX"), Ok(APPLICATION_VND_ONEPAGERTATX));
    }

    /// `application/vnd.openblox.game+xml`
    pub const APPLICATION_VND_OPENBLOX_GAME_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenbloxGame),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openblox_game_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openblox.game+xml"), Ok(APPLICATION_VND_OPENBLOX_GAME_XML));
        assert_eq!(crate::Mime::parse("aPPlIcatION/Vnd.opENbLoX.gAME+XmL"), Ok(APPLICATION_VND_OPENBLOX_GAME_XML));
    }

    /// `application/vnd.openblox.game-binary`
    pub const APPLICATION_VND_OPENBLOX_GAME_BINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenbloxGameBinary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openblox_game_binary_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openblox.game-binary"), Ok(APPLICATION_VND_OPENBLOX_GAME_BINARY));
        assert_eq!(crate::Mime::parse("APPlICatiON/vnd.oPENBloX.Game-bInARY"), Ok(APPLICATION_VND_OPENBLOX_GAME_BINARY));
    }

    /// `application/vnd.openeye.oeb`
    pub const APPLICATION_VND_OPENEYE_OEB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpeneyeOeb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openeye_oeb_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openeye.oeb"), Ok(APPLICATION_VND_OPENEYE_OEB));
        assert_eq!(crate::Mime::parse("aPplIcAtIon/vnD.OpEnEYE.oeb"), Ok(APPLICATION_VND_OPENEYE_OEB));
    }

    /// `application/vnd.openofficeorg.extension`
    pub const APPLICATION_VND_OPENOFFICEORG_EXTENSION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenofficeorgExtension),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openofficeorg_extension_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openofficeorg.extension"), Ok(APPLICATION_VND_OPENOFFICEORG_EXTENSION));
        assert_eq!(crate::Mime::parse("aPPLicaTioN/vNd.oPENofFICEoRG.exTEnsiOn"), Ok(APPLICATION_VND_OPENOFFICEORG_EXTENSION));
    }

    /// `application/vnd.openstreetmap.data+xml`
    pub const APPLICATION_VND_OPENSTREETMAP_DATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenstreetmapData),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openstreetmap_data_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openstreetmap.data+xml"), Ok(APPLICATION_VND_OPENSTREETMAP_DATA_XML));
        assert_eq!(crate::Mime::parse("ApPLICATiON/VND.oPENSTreETMap.daTa+xMl"), Ok(APPLICATION_VND_OPENSTREETMAP_DATA_XML));
    }

    /// `application/vnd.opentimestamps.ots`
    pub const APPLICATION_VND_OPENTIMESTAMPS_OTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpentimestampsOts),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_opentimestamps_ots_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.opentimestamps.ots"), Ok(APPLICATION_VND_OPENTIMESTAMPS_OTS));
        assert_eq!(crate::Mime::parse("ApPlICatIOn/vND.OpenTIMesTampS.ots"), Ok(APPLICATION_VND_OPENTIMESTAMPS_OTS));
    }

    /// `application/vnd.openxmlformats-officedocument.custom-properties+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_CUSTOM_PROPERTIES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentCustomProperties),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_custom_properties_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.custom-properties+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_CUSTOM_PROPERTIES_XML));
        assert_eq!(crate::Mime::parse("appLIcATIOn/vND.oPenXMlfORMatS-OfFiCedOCUmENt.CUsToM-pRoPertiES+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_CUSTOM_PROPERTIES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.customXmlProperties+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_CUSTOM_XML_PROPERTIES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentCustomXmlProperties),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_custom_xml_properties_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.customXmlProperties+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_CUSTOM_XML_PROPERTIES_XML));
        assert_eq!(crate::Mime::parse("aPpLicAtIOn/vND.OpENXmLFoRMAtS-ofFIceDoCUmeNt.CUstOMxmLproPeRtieS+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_CUSTOM_XML_PROPERTIES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawing+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWING_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawing),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawing_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawing+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWING_XML));
        assert_eq!(crate::Mime::parse("appLicATiON/VnD.OPENXMLforMats-OFFICEDocUMeNt.DrawINg+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWING_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawingml.chart+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_CHART_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChart),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawingml_chart_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawingml.chart+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_CHART_XML));
        assert_eq!(crate::Mime::parse("appLicAtIoN/VnD.oPENxMLfOrmaTs-ofFICeDOcUMEnt.DRAwiNgmL.chaRT+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_CHART_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_CHARTSHAPES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawingmlChartshapes),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawingml_chartshapes_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_CHARTSHAPES_XML));
        assert_eq!(crate::Mime::parse("APPLiCaTioN/Vnd.opeNXMLFORMATS-OfficEdOCument.DRawINGMl.CHArtshAPES+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_CHARTSHAPES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_COLORS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramColors),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawingml_diagram_colors_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_COLORS_XML));
        assert_eq!(crate::Mime::parse("ApPliCation/vnD.OpeNxmlfORMATS-OFfICeDOcument.drAWingml.diagraMCoLOrS+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_COLORS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_DATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramData),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawingml_diagram_data_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_DATA_XML));
        assert_eq!(crate::Mime::parse("aPpliCATIon/VNd.openxMLFORmATs-offiCEdoCumENT.drAwingML.dIaGrAmdAtA+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_DATA_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_LAYOUT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramLayout),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawingml_diagram_layout_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_LAYOUT_XML));
        assert_eq!(crate::Mime::parse("APplicATioN/VND.OpEnxmLForMATS-oFficEdoCUment.DraWinGmL.diAGrAmLaYout+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_LAYOUT_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_STYLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentDrawingmlDiagramStyle),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_drawingml_diagram_style_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_STYLE_XML));
        assert_eq!(crate::Mime::parse("APPLICatiOn/vNd.OPEnXmlfoRMAts-OFfiCedOCUment.drAWinGMl.diAGrAmstylE+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_DRAWINGML_DIAGRAM_STYLE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.extended-properties+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_EXTENDED_PROPERTIES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentExtendedProperties),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_extended_properties_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.extended-properties+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_EXTENDED_PROPERTIES_XML));
        assert_eq!(crate::Mime::parse("aPplicAtiOn/VND.opEnxMLForMAtS-OFFiCeDoCUmEnT.eXTenDED-PRoPeRTIes+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_EXTENDED_PROPERTIES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.commentAuthors+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_COMMENT_AUTHORS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlCommentAuthors),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_comment_authors_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.commentAuthors+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_COMMENT_AUTHORS_XML));
        assert_eq!(crate::Mime::parse("ApPLicATIon/vNd.OPENxMlFormATs-OFFIcEDocumENT.PreSeNTaTIOnml.coMmEnTaUtHoRs+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_COMMENT_AUTHORS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.comments+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_COMMENTS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlComments),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_comments_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.comments+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_COMMENTS_XML));
        assert_eq!(crate::Mime::parse("appLIcAtiON/vNd.OPeNXMlfOrmAtS-OFfICEDoCumEnT.pReSeNtAtioNml.CoMmENts+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_COMMENTS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.handoutMaster+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_HANDOUT_MASTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlHandoutMaster),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_handout_master_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.handoutMaster+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_HANDOUT_MASTER_XML));
        assert_eq!(crate::Mime::parse("AppLIcatIOn/VNd.OpEnxmLFOrmaTs-ofFIceDOCUment.preseNtatIoNml.haNDoutmaSteR+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_HANDOUT_MASTER_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.notesMaster+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_NOTES_MASTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesMaster),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_notes_master_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.notesMaster+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_NOTES_MASTER_XML));
        assert_eq!(crate::Mime::parse("aPpliCAtIon/VNd.OPenXmlFormAtS-OFficEDOcUmeNT.presEnTATIONmL.NoTesMaster+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_NOTES_MASTER_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.notesSlide+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_NOTES_SLIDE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlNotesSlide),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_notes_slide_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.notesSlide+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_NOTES_SLIDE_XML));
        assert_eq!(crate::Mime::parse("ApPLication/VnD.OPeNXMlfORMats-OfFICEdocUmEnt.PreseNTaTIOnMl.NoTessLidE+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_NOTES_SLIDE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.presentation`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_presentation_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.presentation"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION));
        assert_eq!(crate::Mime::parse("APpLIcatiON/vND.oPeNXMLFOrmATs-offIcEdOCUmeNT.pReSeNTAtIONml.pRESENTATIoN"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresentationMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_presentation_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION_MAIN_XML));
        assert_eq!(crate::Mime::parse("APpLIcaTiOn/vNd.oPeNXMlfOrMATS-OfficeDoCUmEnt.PreseNTAtioNML.PresenTaTION.MAin+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.presProps+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRES_PROPS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlPresProps),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_pres_props_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.presProps+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRES_PROPS_XML));
        assert_eq!(crate::Mime::parse("aPpliCAtION/vnD.OpeNxmLForMaTS-oFFICedOCuMent.prEsentatIonml.preSPrOpS+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRES_PROPS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slide`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlide),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slide_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slide"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE));
        assert_eq!(crate::Mime::parse("APPliCatioN/vnD.OPeNXmLfOrmatS-OFfIceDocUmEnt.PResENTaTIonML.SLide"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slide+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlide),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slide_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slide+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_XML));
        assert_eq!(crate::Mime::parse("aPpLICATiOn/vND.OpeNXMLFORmATs-OfFIcedOcuMENT.PRESEnTatIOnml.slIDE+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_LAYOUT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideLayout),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slide_layout_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_LAYOUT_XML));
        assert_eq!(crate::Mime::parse("ApplICATiOn/vnd.OpeNxMlFORmATs-OffIcEdoCumeNT.pREseNTatiOnml.sliDelAyOUT+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_LAYOUT_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_MASTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideMaster),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slide_master_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_MASTER_XML));
        assert_eq!(crate::Mime::parse("ApplicATioN/VnD.oPEnxMLfoRmATS-OFfICedOCumeNt.PResenTatiONMl.SlIdEMasTeR+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_MASTER_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slideshow`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshow),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slideshow_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slideshow"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW));
        assert_eq!(crate::Mime::parse("APpLICatioN/VnD.OPEnxmLFORmATs-oFficEDocumenT.PResEntATIoNml.slIDESHOw"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideshowMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slideshow_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW_MAIN_XML));
        assert_eq!(crate::Mime::parse("aPPLIcatIoN/vnd.OPENXMlfoRMAts-offICEDOcuMEnT.prEseNtatIOnmL.sliDesHow.MAIn+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_UPDATE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlSlideUpdateInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_slide_update_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_UPDATE_INFO_XML));
        assert_eq!(crate::Mime::parse("appLicATION/vNd.oPenxmLFOrmaTs-officEdoCUMEnt.PResentAtIONmL.SLiDeuPdAtEiNfO+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE_UPDATE_INFO_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.tableStyles+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TABLE_STYLES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTableStyles),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_table_styles_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.tableStyles+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TABLE_STYLES_XML));
        assert_eq!(crate::Mime::parse("AppLIcaTION/vnD.oPeNxMlfORMatS-OFFICEdoCumeNt.PresEntATiOnmL.taBLEStyleS+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TABLE_STYLES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.tags+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TAGS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTags),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_tags_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.tags+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TAGS_XML));
        assert_eq!(crate::Mime::parse("aPpLICATIon/vnD.OPEnXMLfORmatS-OFficEDocUmenT.PReSeNTAtioNML.TaGS+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TAGS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.template`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.template"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE));
        assert_eq!(crate::Mime::parse("appLICatiOn/VnD.oPENXmlFormATs-oFFIceDocumEnt.prEsEntatiONMl.tEMPlate"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.template.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlTemplateMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_template_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.template.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE_MAIN_XML));
        assert_eq!(crate::Mime::parse("ApPLIcAtiOn/Vnd.OpeNXmLforMaTs-OFficEdoCUMeNT.preSenTatiONml.template.MaIN+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.presentationml.viewProps+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_VIEW_PROPS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentPresentationmlViewProps),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_presentationml_view_props_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.presentationml.viewProps+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_VIEW_PROPS_XML));
        assert_eq!(crate::Mime::parse("APpLIcAtIoN/vnD.OPENxMlfORMaTs-OFfiCeDocuMenT.PReSEntationmL.ViewPrOps+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_VIEW_PROPS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CALC_CHAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlCalcChain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_calc_chain_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CALC_CHAIN_XML));
        assert_eq!(crate::Mime::parse("AppLicATioN/VND.opEnxMLFoRMATs-oFfICEdoCumenT.spReADsHeETmL.calccHaIn+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CALC_CHAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CHARTSHEET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlChartsheet),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_chartsheet_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CHARTSHEET_XML));
        assert_eq!(crate::Mime::parse("apPlICATiOn/VND.opeNXMLFOrmAtS-OfficeDocUmEnt.sPreaDsHEetml.cHArTsHEet+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CHARTSHEET_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_COMMENTS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlComments),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_comments_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_COMMENTS_XML));
        assert_eq!(crate::Mime::parse("aPpliCatIOn/Vnd.OPenXMlfoRmAtS-OFFiCeDoCumenT.sPreADsheetmL.cOmMENTS+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_COMMENTS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CONNECTIONS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlConnections),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_connections_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CONNECTIONS_XML));
        assert_eq!(crate::Mime::parse("APPLIcaTion/vNd.OPENXMlFOrmats-ofFICedOCUMENt.sPrEAdSheETMl.ConneCTionS+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_CONNECTIONS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_DIALOGSHEET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlDialogsheet),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_dialogsheet_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_DIALOGSHEET_XML));
        assert_eq!(crate::Mime::parse("appliCAtiON/vnD.OPenXMlForMaTS-OfFiCEDoCumenT.sPreADSheETml.dIalOGShEet+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_DIALOGSHEET_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_EXTERNAL_LINK_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlExternalLink),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_external_link_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_EXTERNAL_LINK_XML));
        assert_eq!(crate::Mime::parse("APPLicatiOn/VNd.OpEnXmLFoRMats-OfficedoCUMENT.SpreAdSHeeTml.ExteRnALLink+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_EXTERNAL_LINK_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_CACHE_DEFINITION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheDefinition),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_pivot_cache_definition_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_CACHE_DEFINITION_XML));
        assert_eq!(crate::Mime::parse("APPlicatIoN/vnd.opEnxmLFoRMATs-OFFicEdoCUment.sprEaDSHEEtML.pIVoTCaCHeDEfInItiON+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_CACHE_DEFINITION_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_CACHE_RECORDS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotCacheRecords),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_pivot_cache_records_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_CACHE_RECORDS_XML));
        assert_eq!(crate::Mime::parse("applIcaTIon/vnD.oPeNxMlfoRMatS-oFfICedOcumEnt.spReAdSheEtmL.piVoTCaChEREcORdS+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_CACHE_RECORDS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_TABLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlPivotTable),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_pivot_table_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_TABLE_XML));
        assert_eq!(crate::Mime::parse("APpLicatiOn/vNd.oPeNXmLfORMaTs-oFfIcEdoCUMEnT.SPReADshEEtML.pIvoTTABLe+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_PIVOT_TABLE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_QUERY_TABLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlQueryTable),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_query_table_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_QUERY_TABLE_XML));
        assert_eq!(crate::Mime::parse("aPpLicatION/VnD.OPENxmLfORmatS-oFFiCEdocuMENt.SPREaDshEetML.QUerYtAblE+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_QUERY_TABLE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_REVISION_HEADERS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionHeaders),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_revision_headers_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_REVISION_HEADERS_XML));
        assert_eq!(crate::Mime::parse("appLicatION/vnD.OpENXMlfoRMAts-oFFIcEDoCumeNT.sPreAdSHeeTml.RevisIonheAdErS+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_REVISION_HEADERS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_REVISION_LOG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlRevisionLog),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_revision_log_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_REVISION_LOG_XML));
        assert_eq!(crate::Mime::parse("appLICAtioN/vNd.OPENxMLForMaTs-offIcedoCUmeNt.sPReAdshEetML.rEVISIoNlOg+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_REVISION_LOG_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHARED_STRINGS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSharedStrings),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_shared_strings_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHARED_STRINGS_XML));
        assert_eq!(crate::Mime::parse("aPPLIcATiOn/vnD.oPeNXmlfORMATs-oFFIcEDOcUmeNt.sPreaDsHeeTMl.SHAREDstRINgS+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHARED_STRINGS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_sheet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET));
        assert_eq!(crate::Mime::parse("apPLicaTioN/vND.opeNxMlFOrMats-oFFICEdOcUMENT.sprEAdSheeTMl.SHeeT"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_sheet_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET_MAIN_XML));
        assert_eq!(crate::Mime::parse("APPlIcaTIoN/VnD.OPeNXMlFOrMaTs-OffIcedocument.SPREadSheEtMl.sHEeT.MaiN+XML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET_METADATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlSheetMetadata),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_sheet_metadata_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET_METADATA_XML));
        assert_eq!(crate::Mime::parse("ApplIcatION/VNd.OPenxMlfORmATs-oFFiCEdoCumEnT.SPREADsHeEtML.ShEeTmetaData+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET_METADATA_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_STYLES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlStyles),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_styles_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_STYLES_XML));
        assert_eq!(crate::Mime::parse("aPplIcAtiOn/vnD.opENxMLFORmats-ofFIcEDOcumenT.SpReadSheEtMl.styLES+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_STYLES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TABLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTable),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_table_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TABLE_XML));
        assert_eq!(crate::Mime::parse("apPLiCATiOn/vND.opEnxMLforMatS-offiCeDOcUmeNT.SPReaDSHeEtmL.TabLE+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TABLE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TABLE_SINGLE_CELLS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTableSingleCells),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_table_single_cells_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TABLE_SINGLE_CELLS_XML));
        assert_eq!(crate::Mime::parse("APplIcATIoN/vND.OpenxmlfoRmats-ofFicEDoCument.SPReAdShEeTml.TAblesiNgLEceLls+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TABLE_SINGLE_CELLS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.template`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.template"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE));
        assert_eq!(crate::Mime::parse("APpLiCATION/VnD.OPENxMlForMatS-OfFICEdOCUMent.sprEADSHeEtMl.teMpLAte"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlTemplateMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_template_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE_MAIN_XML));
        assert_eq!(crate::Mime::parse("apPlICAtioN/VNd.OPENXMLforMATS-OFFiCedoCumEnT.SpREADsHEEtmL.temPLATe.maIN+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_USER_NAMES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlUserNames),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_user_names_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_USER_NAMES_XML));
        assert_eq!(crate::Mime::parse("APPlIcATIoN/vnD.OPenxmlFOrMATS-oFFICEDOCUMent.sPrEadSHeeTml.uSeRnaMeS+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_USER_NAMES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_VOLATILE_DEPENDENCIES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlVolatileDependencies),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_volatile_dependencies_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_VOLATILE_DEPENDENCIES_XML));
        assert_eq!(crate::Mime::parse("ApPlICATion/VNd.opeNxMLFOrmaTS-OFfICedOCUMent.SpreaDshEEtMl.voLATiLEDePEnDEnCIES+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_VOLATILE_DEPENDENCIES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_WORKSHEET_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentSpreadsheetmlWorksheet),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_spreadsheetml_worksheet_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_WORKSHEET_XML));
        assert_eq!(crate::Mime::parse("ApplICAtiON/VND.OpeNXmlfORmATS-oFFICedOCUMEnt.sPreaDsHeETML.WoRKshEet+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_WORKSHEET_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.theme+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_THEME_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentTheme),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_theme_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.theme+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_THEME_XML));
        assert_eq!(crate::Mime::parse("ApplICATion/VNd.OpeNxmlFORmats-OffICEDoCumENt.theme+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_THEME_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.themeOverride+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_THEME_OVERRIDE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentThemeOverride),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_theme_override_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.themeOverride+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_THEME_OVERRIDE_XML));
        assert_eq!(crate::Mime::parse("APpliCAtion/vNd.opENxMlformATs-OfficEdoCUMeNt.ThEmEovERRiDE+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_THEME_OVERRIDE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.vmlDrawing`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_VML_DRAWING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentVmlDrawing),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_vml_drawing_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.vmlDrawing"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_VML_DRAWING));
        assert_eq!(crate::Mime::parse("aPpLicatION/vNd.OPEnxmLFoRMats-ofFICEDOcuMeNT.VmlDRawIng"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_VML_DRAWING));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_COMMENTS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlComments),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_comments_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_COMMENTS_XML));
        assert_eq!(crate::Mime::parse("ApPLICATION/vNd.opeNXmlfOrmAtS-OFfIcedOcuMENt.woRdPrOCeSsingMl.ComMeNts+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_COMMENTS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.document`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocument),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_document_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.document"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT));
        assert_eq!(crate::Mime::parse("apPlIcaTiON/vnd.OpENxmlFORMatS-OffiCeDocuMeNT.WordPRocEsSiNgml.DocuMent"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT_GLOSSARY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentGlossary),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_document_glossary_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT_GLOSSARY_XML));
        assert_eq!(crate::Mime::parse("aPPlIcatIon/vND.opeNXMLfORMAtS-oFFicEdoCuMeNt.worDprocEssiNgml.DoCUmeNT.glOSsAry+XmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT_GLOSSARY_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlDocumentMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_document_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT_MAIN_XML));
        assert_eq!(crate::Mime::parse("ApPliCaTioN/VnD.OpENXmlfoRMaTS-ofFiceDocUMEnT.wORdProCEsSingmL.DOCuMeNT.main+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_ENDNOTES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlEndnotes),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_endnotes_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_ENDNOTES_XML));
        assert_eq!(crate::Mime::parse("APPliCatIoN/VND.opeNXMlFoRmATS-OffIcEDOCumeNt.WOrdproceSSiNGmL.eNDNotEs+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_ENDNOTES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FONT_TABLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFontTable),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_font_table_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FONT_TABLE_XML));
        assert_eq!(crate::Mime::parse("apPlIcaTion/VNd.oPEnXmLformAtS-OFFIcedOcUMEnt.WoRdPRoCeSsINgML.fOnTtaBlE+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FONT_TABLE_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FOOTER_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFooter),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_footer_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FOOTER_XML));
        assert_eq!(crate::Mime::parse("apPLIcAtIOn/Vnd.opEnxMLFOrmAtS-OffiCEDocuMENT.WORDprocesSINgmL.foOter+Xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FOOTER_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FOOTNOTES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlFootnotes),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_footnotes_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FOOTNOTES_XML));
        assert_eq!(crate::Mime::parse("aPpliCaTiON/VnD.oPEnXmlformATS-offICeDoCUMent.WOrdPROCESsiNgml.FooTnOtES+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_FOOTNOTES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_NUMBERING_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlNumbering),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_numbering_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_NUMBERING_XML));
        assert_eq!(crate::Mime::parse("APPliCation/VnD.oPEnXMLfORmATS-OFfICeDOCuMent.wordprocESsIngmL.nUMBEriNG+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_NUMBERING_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_SETTINGS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlSettings),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_settings_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_SETTINGS_XML));
        assert_eq!(crate::Mime::parse("appLIcatiON/vnD.OPENxMlfOrMats-oFfiCEDOcUMEnt.WORDProceSsINGml.sEtTINgS+xmL"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_SETTINGS_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_STYLES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlStyles),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_styles_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_STYLES_XML));
        assert_eq!(crate::Mime::parse("ApPlICAtIon/VnD.oPENXmlForMaTs-OFFICedOcuMEnt.wORDprOcESSInGmL.StylES+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_STYLES_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.template`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.template"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE));
        assert_eq!(crate::Mime::parse("apPLicATIon/VND.opENxmlfOrmATS-OFFiCEDocuMeNt.WoRDprOcessInGML.TEMpLATE"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE_MAIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlTemplateMain),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_template_main_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE_MAIN_XML));
        assert_eq!(crate::Mime::parse("AppLIcAtiON/vnd.OpEnXMlfORmAts-offICEdoCuMent.wORDPrOCeSsiNGMl.TempLaTe.Main+xML"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE_MAIN_XML));
    }

    /// `application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_WEB_SETTINGS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsOfficedocumentWordprocessingmlWebSettings),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_officedocument_wordprocessingml_web_settings_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_WEB_SETTINGS_XML));
        assert_eq!(crate::Mime::parse("AppliCAtioN/VND.OPenxMlForMAts-OffiCEDoCument.WOrDprOCEsSINgMl.WebSetTings+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_WEB_SETTINGS_XML));
    }

    /// `application/vnd.openxmlformats-package.core-properties+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_PACKAGE_CORE_PROPERTIES_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsPackageCoreProperties),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_package_core_properties_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-package.core-properties+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_PACKAGE_CORE_PROPERTIES_XML));
        assert_eq!(crate::Mime::parse("aPPliCAtIoN/vnd.OpeNxMLfORMATS-PaCKAge.corE-PRoPERTIeS+XMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_PACKAGE_CORE_PROPERTIES_XML));
    }

    /// `application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_PACKAGE_DIGITAL_SIGNATURE_XMLSIGNATURE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsPackageDigitalSignatureXmlsignature),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_package_digital_signature_xmlsignature_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_PACKAGE_DIGITAL_SIGNATURE_XMLSIGNATURE_XML));
        assert_eq!(crate::Mime::parse("ApPliCAtIOn/Vnd.OPeNXmLFoRmATs-PAcKaGE.diGItal-SIgnaTuRe-XMlSIgnATURe+xMl"), Ok(APPLICATION_VND_OPENXMLFORMATS_PACKAGE_DIGITAL_SIGNATURE_XMLSIGNATURE_XML));
    }

    /// `application/vnd.openxmlformats-package.relationships+xml`
    pub const APPLICATION_VND_OPENXMLFORMATS_PACKAGE_RELATIONSHIPS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOpenxmlformatsPackageRelationships),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_openxmlformats_package_relationships_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.openxmlformats-package.relationships+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_PACKAGE_RELATIONSHIPS_XML));
        assert_eq!(crate::Mime::parse("AppLiCatIon/vNd.OpENXmLFORmATS-PAcKaGe.RELAtIONsHipS+xml"), Ok(APPLICATION_VND_OPENXMLFORMATS_PACKAGE_RELATIONSHIPS_XML));
    }

    /// `application/vnd.oracle.resource+json`
    pub const APPLICATION_VND_ORACLE_RESOURCE_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOracleResource),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_oracle_resource_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oracle.resource+json"), Ok(APPLICATION_VND_ORACLE_RESOURCE_JSON));
        assert_eq!(crate::Mime::parse("appLICaTIOn/vNd.oRACLE.ResOURCE+json"), Ok(APPLICATION_VND_ORACLE_RESOURCE_JSON));
    }

    /// `application/vnd.orange.indata`
    pub const APPLICATION_VND_ORANGE_INDATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOrangeIndata),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_orange_indata_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.orange.indata"), Ok(APPLICATION_VND_ORANGE_INDATA));
        assert_eq!(crate::Mime::parse("aPpliCatION/VNd.oRANGE.INDATa"), Ok(APPLICATION_VND_ORANGE_INDATA));
    }

    /// `application/vnd.osa.netdeploy`
    pub const APPLICATION_VND_OSA_NETDEPLOY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOsaNetdeploy),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_osa_netdeploy_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.osa.netdeploy"), Ok(APPLICATION_VND_OSA_NETDEPLOY));
        assert_eq!(crate::Mime::parse("apPLicATIon/VND.Osa.NEtDEpLoY"), Ok(APPLICATION_VND_OSA_NETDEPLOY));
    }

    /// `application/vnd.osgeo.mapguide.package`
    pub const APPLICATION_VND_OSGEO_MAPGUIDE_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOsgeoMapguidePackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_osgeo_mapguide_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.osgeo.mapguide.package"), Ok(APPLICATION_VND_OSGEO_MAPGUIDE_PACKAGE));
        assert_eq!(crate::Mime::parse("APpLicATIoN/vnd.osgEo.MaPGUiDe.PAckAgE"), Ok(APPLICATION_VND_OSGEO_MAPGUIDE_PACKAGE));
    }

    /// `application/vnd.osgi.bundle`
    pub const APPLICATION_VND_OSGI_BUNDLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOsgiBundle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_osgi_bundle_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.osgi.bundle"), Ok(APPLICATION_VND_OSGI_BUNDLE));
        assert_eq!(crate::Mime::parse("apPlICATIon/vNd.oSGI.BUndLe"), Ok(APPLICATION_VND_OSGI_BUNDLE));
    }

    /// `application/vnd.osgi.dp`
    pub const APPLICATION_VND_OSGI_DP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOsgiDp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_osgi_dp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.osgi.dp"), Ok(APPLICATION_VND_OSGI_DP));
        assert_eq!(crate::Mime::parse("AppLicATioN/vnD.osGi.dp"), Ok(APPLICATION_VND_OSGI_DP));
    }

    /// `application/vnd.osgi.subsystem`
    pub const APPLICATION_VND_OSGI_SUBSYSTEM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOsgiSubsystem),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_osgi_subsystem_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.osgi.subsystem"), Ok(APPLICATION_VND_OSGI_SUBSYSTEM));
        assert_eq!(crate::Mime::parse("APPlICatiON/vND.oSgI.sUBSYSteM"), Ok(APPLICATION_VND_OSGI_SUBSYSTEM));
    }

    /// `application/vnd.otps.ct-kip+xml`
    pub const APPLICATION_VND_OTPS_CT_KIP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOtpsCtKip),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_otps_ct_kip_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.otps.ct-kip+xml"), Ok(APPLICATION_VND_OTPS_CT_KIP_XML));
        assert_eq!(crate::Mime::parse("ApPlIcaTIon/vnd.otps.CT-kIP+XML"), Ok(APPLICATION_VND_OTPS_CT_KIP_XML));
    }

    /// `application/vnd.oxli.countgraph`
    pub const APPLICATION_VND_OXLI_COUNTGRAPH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndOxliCountgraph),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_oxli_countgraph_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.oxli.countgraph"), Ok(APPLICATION_VND_OXLI_COUNTGRAPH));
        assert_eq!(crate::Mime::parse("apPLiCation/vNd.OXLI.COUntGrApH"), Ok(APPLICATION_VND_OXLI_COUNTGRAPH));
    }

    /// `application/vnd.pagerduty+json`
    pub const APPLICATION_VND_PAGERDUTY_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPagerduty),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_pagerduty_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pagerduty+json"), Ok(APPLICATION_VND_PAGERDUTY_JSON));
        assert_eq!(crate::Mime::parse("appLIcaTIOn/Vnd.PaGERdUTY+jsON"), Ok(APPLICATION_VND_PAGERDUTY_JSON));
    }

    /// `application/vnd.palm`
    pub const APPLICATION_VND_PALM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPalm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_palm_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.palm"), Ok(APPLICATION_VND_PALM));
        assert_eq!(crate::Mime::parse("aPpLIcaTION/Vnd.PaLm"), Ok(APPLICATION_VND_PALM));
    }

    /// `application/vnd.panoply`
    pub const APPLICATION_VND_PANOPLY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPanoply),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_panoply_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.panoply"), Ok(APPLICATION_VND_PANOPLY));
        assert_eq!(crate::Mime::parse("ApplicatiON/vND.pAnopLY"), Ok(APPLICATION_VND_PANOPLY));
    }

    /// `application/vnd.paos.xml`
    pub const APPLICATION_VND_PAOS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPaosXml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_paos_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.paos.xml"), Ok(APPLICATION_VND_PAOS_XML));
        assert_eq!(crate::Mime::parse("appLICatiOn/vND.pAos.Xml"), Ok(APPLICATION_VND_PAOS_XML));
    }

    /// `application/vnd.patentdive`
    pub const APPLICATION_VND_PATENTDIVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPatentdive),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_patentdive_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.patentdive"), Ok(APPLICATION_VND_PATENTDIVE));
        assert_eq!(crate::Mime::parse("APPliCAtIon/VND.pateNtDivE"), Ok(APPLICATION_VND_PATENTDIVE));
    }

    /// `application/vnd.patientecommsdoc`
    pub const APPLICATION_VND_PATIENTECOMMSDOC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPatientecommsdoc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_patientecommsdoc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.patientecommsdoc"), Ok(APPLICATION_VND_PATIENTECOMMSDOC));
        assert_eq!(crate::Mime::parse("apPLicatIoN/VnD.pAtienteComMsDOc"), Ok(APPLICATION_VND_PATIENTECOMMSDOC));
    }

    /// `application/vnd.pawaafile`
    pub const APPLICATION_VND_PAWAAFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPawaafile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pawaafile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pawaafile"), Ok(APPLICATION_VND_PAWAAFILE));
        assert_eq!(crate::Mime::parse("aPpLication/vNd.pawAaFile"), Ok(APPLICATION_VND_PAWAAFILE));
    }

    /// `application/vnd.pcos`
    pub const APPLICATION_VND_PCOS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPcos),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pcos_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pcos"), Ok(APPLICATION_VND_PCOS));
        assert_eq!(crate::Mime::parse("APPlICaTiOn/vND.pCOs"), Ok(APPLICATION_VND_PCOS));
    }

    /// `application/vnd.pg.format`
    pub const APPLICATION_VND_PG_FORMAT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPgFormat),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pg_format_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pg.format"), Ok(APPLICATION_VND_PG_FORMAT));
        assert_eq!(crate::Mime::parse("APPLIcaTioN/VND.pG.foRmAT"), Ok(APPLICATION_VND_PG_FORMAT));
    }

    /// `application/vnd.pg.osasli`
    pub const APPLICATION_VND_PG_OSASLI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPgOsasli),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pg_osasli_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pg.osasli"), Ok(APPLICATION_VND_PG_OSASLI));
        assert_eq!(crate::Mime::parse("ApPlIcAtioN/vnD.pg.osaSLi"), Ok(APPLICATION_VND_PG_OSASLI));
    }

    /// `application/vnd.piaccess.application-licence`
    pub const APPLICATION_VND_PIACCESS_APPLICATION_LICENCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPiaccessApplicationLicence),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_piaccess_application_licence_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.piaccess.application-licence"), Ok(APPLICATION_VND_PIACCESS_APPLICATION_LICENCE));
        assert_eq!(crate::Mime::parse("ApPliCatiOn/vnD.piACCesS.apPLiCaTIOn-liCeNcE"), Ok(APPLICATION_VND_PIACCESS_APPLICATION_LICENCE));
    }

    /// `application/vnd.picsel`
    pub const APPLICATION_VND_PICSEL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPicsel),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_picsel_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.picsel"), Ok(APPLICATION_VND_PICSEL));
        assert_eq!(crate::Mime::parse("aPpLICAtiON/VND.picsel"), Ok(APPLICATION_VND_PICSEL));
    }

    /// `application/vnd.pmi.widget`
    pub const APPLICATION_VND_PMI_WIDGET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPmiWidget),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pmi_widget_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pmi.widget"), Ok(APPLICATION_VND_PMI_WIDGET));
        assert_eq!(crate::Mime::parse("appLicAtIOn/vnd.PMI.WIdGet"), Ok(APPLICATION_VND_PMI_WIDGET));
    }

    /// `application/vnd.poc.group-advertisement+xml`
    pub const APPLICATION_VND_POC_GROUP_ADVERTISEMENT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPocGroupAdvertisement),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_poc_group_advertisement_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.poc.group-advertisement+xml"), Ok(APPLICATION_VND_POC_GROUP_ADVERTISEMENT_XML));
        assert_eq!(crate::Mime::parse("applIcATion/vNd.poc.GrOUp-ADVertiseMeNT+xmL"), Ok(APPLICATION_VND_POC_GROUP_ADVERTISEMENT_XML));
    }

    /// `application/vnd.pocketlearn`
    pub const APPLICATION_VND_POCKETLEARN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPocketlearn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pocketlearn_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pocketlearn"), Ok(APPLICATION_VND_POCKETLEARN));
        assert_eq!(crate::Mime::parse("ApPLIcATiOn/Vnd.POCkEtLeARn"), Ok(APPLICATION_VND_POCKETLEARN));
    }

    /// `application/vnd.powerbuilder6`
    pub const APPLICATION_VND_POWERBUILDER6: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPowerbuilder6),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_powerbuilder6_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.powerbuilder6"), Ok(APPLICATION_VND_POWERBUILDER6));
        assert_eq!(crate::Mime::parse("apPLICAtIoN/vNd.PowERBuILdEr6"), Ok(APPLICATION_VND_POWERBUILDER6));
    }

    /// `application/vnd.powerbuilder6-s`
    pub const APPLICATION_VND_POWERBUILDER6_S: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPowerbuilder6S),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_powerbuilder6_s_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.powerbuilder6-s"), Ok(APPLICATION_VND_POWERBUILDER6_S));
        assert_eq!(crate::Mime::parse("APplICatioN/VnD.powErbuilder6-s"), Ok(APPLICATION_VND_POWERBUILDER6_S));
    }

    /// `application/vnd.powerbuilder7`
    pub const APPLICATION_VND_POWERBUILDER7: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPowerbuilder7),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_powerbuilder7_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.powerbuilder7"), Ok(APPLICATION_VND_POWERBUILDER7));
        assert_eq!(crate::Mime::parse("aPPLiCatIoN/VNd.pOwerbuiLDeR7"), Ok(APPLICATION_VND_POWERBUILDER7));
    }

    /// `application/vnd.powerbuilder7-s`
    pub const APPLICATION_VND_POWERBUILDER7_S: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPowerbuilder7S),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_powerbuilder7_s_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.powerbuilder7-s"), Ok(APPLICATION_VND_POWERBUILDER7_S));
        assert_eq!(crate::Mime::parse("APPLICATion/VNd.POWErbuilDER7-s"), Ok(APPLICATION_VND_POWERBUILDER7_S));
    }

    /// `application/vnd.powerbuilder75`
    pub const APPLICATION_VND_POWERBUILDER75: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPowerbuilder75),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_powerbuilder75_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.powerbuilder75"), Ok(APPLICATION_VND_POWERBUILDER75));
        assert_eq!(crate::Mime::parse("ApPlICaTIoN/VNd.PowerbuILdeR75"), Ok(APPLICATION_VND_POWERBUILDER75));
    }

    /// `application/vnd.powerbuilder75-s`
    pub const APPLICATION_VND_POWERBUILDER75_S: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPowerbuilder75S),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_powerbuilder75_s_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.powerbuilder75-s"), Ok(APPLICATION_VND_POWERBUILDER75_S));
        assert_eq!(crate::Mime::parse("appliCatiOn/VNd.poweRbuilDEr75-S"), Ok(APPLICATION_VND_POWERBUILDER75_S));
    }

    /// `application/vnd.preminet`
    pub const APPLICATION_VND_PREMINET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPreminet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_preminet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.preminet"), Ok(APPLICATION_VND_PREMINET));
        assert_eq!(crate::Mime::parse("ApplICaTION/VND.PreMiNET"), Ok(APPLICATION_VND_PREMINET));
    }

    /// `application/vnd.previewsystems.box`
    pub const APPLICATION_VND_PREVIEWSYSTEMS_BOX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPreviewsystemsBox),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_previewsystems_box_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.previewsystems.box"), Ok(APPLICATION_VND_PREVIEWSYSTEMS_BOX));
        assert_eq!(crate::Mime::parse("ApPlIcatiON/vND.PrEvieWsystemS.BoX"), Ok(APPLICATION_VND_PREVIEWSYSTEMS_BOX));
    }

    /// `application/vnd.proteus.magazine`
    pub const APPLICATION_VND_PROTEUS_MAGAZINE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndProteusMagazine),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_proteus_magazine_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.proteus.magazine"), Ok(APPLICATION_VND_PROTEUS_MAGAZINE));
        assert_eq!(crate::Mime::parse("APplICAtion/vnD.ProtEUS.maGAzIne"), Ok(APPLICATION_VND_PROTEUS_MAGAZINE));
    }

    /// `application/vnd.psfs`
    pub const APPLICATION_VND_PSFS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPsfs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_psfs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.psfs"), Ok(APPLICATION_VND_PSFS));
        assert_eq!(crate::Mime::parse("aPPlICaTion/vnd.Psfs"), Ok(APPLICATION_VND_PSFS));
    }

    /// `application/vnd.publishare-delta-tree`
    pub const APPLICATION_VND_PUBLISHARE_DELTA_TREE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPublishareDeltaTree),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_publishare_delta_tree_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.publishare-delta-tree"), Ok(APPLICATION_VND_PUBLISHARE_DELTA_TREE));
        assert_eq!(crate::Mime::parse("ApPlIcAtIoN/vnD.puBliShARe-delta-tREE"), Ok(APPLICATION_VND_PUBLISHARE_DELTA_TREE));
    }

    /// `application/vnd.pvi.ptid1`
    pub const APPLICATION_VND_PVI_PTID1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPviPtid1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pvi_ptid1_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pvi.ptid1"), Ok(APPLICATION_VND_PVI_PTID1));
        assert_eq!(crate::Mime::parse("applicaTion/vnD.PvI.ptid1"), Ok(APPLICATION_VND_PVI_PTID1));
    }

    /// `application/vnd.pwg-multiplexed`
    pub const APPLICATION_VND_PWG_MULTIPLEXED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPwgMultiplexed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_pwg_multiplexed_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pwg-multiplexed"), Ok(APPLICATION_VND_PWG_MULTIPLEXED));
        assert_eq!(crate::Mime::parse("aPPliCatiON/vND.PwG-MULtIPlEXEd"), Ok(APPLICATION_VND_PWG_MULTIPLEXED));
    }

    /// `application/vnd.pwg-xhtml-print+xml`
    pub const APPLICATION_VND_PWG_XHTML_PRINT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndPwgXhtmlPrint),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_pwg_xhtml_print_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.pwg-xhtml-print+xml"), Ok(APPLICATION_VND_PWG_XHTML_PRINT_XML));
        assert_eq!(crate::Mime::parse("aPPlIcatIoN/Vnd.PwG-XHtml-PRInt+xml"), Ok(APPLICATION_VND_PWG_XHTML_PRINT_XML));
    }

    /// `application/vnd.qualcomm.brew-app-res`
    pub const APPLICATION_VND_QUALCOMM_BREW_APP_RES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndQualcommBrewAppRes),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_qualcomm_brew_app_res_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.qualcomm.brew-app-res"), Ok(APPLICATION_VND_QUALCOMM_BREW_APP_RES));
        assert_eq!(crate::Mime::parse("ApplIcATIOn/Vnd.qUalCOmm.bReW-aPP-RES"), Ok(APPLICATION_VND_QUALCOMM_BREW_APP_RES));
    }

    /// `application/vnd.quarantainenet`
    pub const APPLICATION_VND_QUARANTAINENET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndQuarantainenet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_quarantainenet_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.quarantainenet"), Ok(APPLICATION_VND_QUARANTAINENET));
        assert_eq!(crate::Mime::parse("apPLIcatioN/vnd.QUArAntaInenEt"), Ok(APPLICATION_VND_QUARANTAINENET));
    }

    /// `application/vnd.Quark.QuarkXPress`
    pub const APPLICATION_VND_QUARK_QUARK_X_PRESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndQuarkQuarkXPress),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_quark_quark_x_press_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.Quark.QuarkXPress"), Ok(APPLICATION_VND_QUARK_QUARK_X_PRESS));
        assert_eq!(crate::Mime::parse("APplicaTion/vND.QuARk.qUaRkxprESs"), Ok(APPLICATION_VND_QUARK_QUARK_X_PRESS));
    }

    /// `application/vnd.quobject-quoxdocument`
    pub const APPLICATION_VND_QUOBJECT_QUOXDOCUMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndQuobjectQuoxdocument),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_quobject_quoxdocument_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.quobject-quoxdocument"), Ok(APPLICATION_VND_QUOBJECT_QUOXDOCUMENT));
        assert_eq!(crate::Mime::parse("apPliCATIOn/VND.QUObjECT-qUOxDoCumENt"), Ok(APPLICATION_VND_QUOBJECT_QUOXDOCUMENT));
    }

    /// `application/vnd.radisys.moml+xml`
    pub const APPLICATION_VND_RADISYS_MOML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMoml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_moml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.moml+xml"), Ok(APPLICATION_VND_RADISYS_MOML_XML));
        assert_eq!(crate::Mime::parse("aPpLicAtiON/VNd.radisyS.MoML+XMl"), Ok(APPLICATION_VND_RADISYS_MOML_XML));
    }

    /// `application/vnd.radisys.msml+xml`
    pub const APPLICATION_VND_RADISYS_MSML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml+xml"), Ok(APPLICATION_VND_RADISYS_MSML_XML));
        assert_eq!(crate::Mime::parse("apPLicaTioN/vNd.RadISYS.Msml+xML"), Ok(APPLICATION_VND_RADISYS_MSML_XML));
    }

    /// `application/vnd.radisys.msml-audit+xml`
    pub const APPLICATION_VND_RADISYS_MSML_AUDIT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlAudit),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_audit_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-audit+xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_XML));
        assert_eq!(crate::Mime::parse("AppLiCATiON/vnD.radiSYS.mSml-AudIt+xML"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_XML));
    }

    /// `application/vnd.radisys.msml-audit-conf+xml`
    pub const APPLICATION_VND_RADISYS_MSML_AUDIT_CONF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlAuditConf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_audit_conf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-audit-conf+xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_CONF_XML));
        assert_eq!(crate::Mime::parse("ApPLiCAtIon/vnd.rADIsYs.Msml-audit-COnf+XMl"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_CONF_XML));
    }

    /// `application/vnd.radisys.msml-audit-conn+xml`
    pub const APPLICATION_VND_RADISYS_MSML_AUDIT_CONN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlAuditConn),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_audit_conn_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-audit-conn+xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_CONN_XML));
        assert_eq!(crate::Mime::parse("aPplIcAtION/vNd.RaDIsYs.MSML-auDiT-COnn+Xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_CONN_XML));
    }

    /// `application/vnd.radisys.msml-audit-dialog+xml`
    pub const APPLICATION_VND_RADISYS_MSML_AUDIT_DIALOG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlAuditDialog),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_audit_dialog_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-audit-dialog+xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_DIALOG_XML));
        assert_eq!(crate::Mime::parse("APPlIcAtION/Vnd.RADisYS.msMl-aUdiT-dIALoG+XMl"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_DIALOG_XML));
    }

    /// `application/vnd.radisys.msml-audit-stream+xml`
    pub const APPLICATION_VND_RADISYS_MSML_AUDIT_STREAM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlAuditStream),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_audit_stream_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-audit-stream+xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_STREAM_XML));
        assert_eq!(crate::Mime::parse("APplicatIOn/vnd.raDiSYS.mSML-auDIT-STrEaM+Xml"), Ok(APPLICATION_VND_RADISYS_MSML_AUDIT_STREAM_XML));
    }

    /// `application/vnd.radisys.msml-conf+xml`
    pub const APPLICATION_VND_RADISYS_MSML_CONF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlConf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_conf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-conf+xml"), Ok(APPLICATION_VND_RADISYS_MSML_CONF_XML));
        assert_eq!(crate::Mime::parse("aPpLIcation/vNd.RaDiSyS.MSMl-cOnf+xML"), Ok(APPLICATION_VND_RADISYS_MSML_CONF_XML));
    }

    /// `application/vnd.radisys.msml-dialog+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialog),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_XML));
        assert_eq!(crate::Mime::parse("AppLicATIoN/vNd.RADiSys.MsmL-diAlOg+xmL"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_XML));
    }

    /// `application/vnd.radisys.msml-dialog-base+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_BASE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialogBase),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_base_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog-base+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_BASE_XML));
        assert_eq!(crate::Mime::parse("ApPLiCAtION/Vnd.rAdISys.MSmL-DIaLOg-bASe+xML"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_BASE_XML));
    }

    /// `application/vnd.radisys.msml-dialog-fax-detect+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_FAX_DETECT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialogFaxDetect),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_fax_detect_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog-fax-detect+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_FAX_DETECT_XML));
        assert_eq!(crate::Mime::parse("AppLICatIOn/vND.RaDIsYS.MSmL-DIaLOG-fAx-DETECt+xMl"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_FAX_DETECT_XML));
    }

    /// `application/vnd.radisys.msml-dialog-fax-sendrecv+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_FAX_SENDRECV_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialogFaxSendrecv),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_fax_sendrecv_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog-fax-sendrecv+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_FAX_SENDRECV_XML));
        assert_eq!(crate::Mime::parse("appliCAtion/VnD.radISYs.MSmL-diaLOG-fAx-seNdreCv+Xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_FAX_SENDRECV_XML));
    }

    /// `application/vnd.radisys.msml-dialog-group+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_GROUP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialogGroup),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_group_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog-group+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_GROUP_XML));
        assert_eq!(crate::Mime::parse("aPplIcatIOn/vND.rADisys.msml-dIalog-GROUp+XmL"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_GROUP_XML));
    }

    /// `application/vnd.radisys.msml-dialog-speech+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_SPEECH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialogSpeech),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_speech_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog-speech+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_SPEECH_XML));
        assert_eq!(crate::Mime::parse("apPliCaTIoN/VnD.RAdiSYS.MsML-DIaLoG-spEECH+XML"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_SPEECH_XML));
    }

    /// `application/vnd.radisys.msml-dialog-transform+xml`
    pub const APPLICATION_VND_RADISYS_MSML_DIALOG_TRANSFORM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlDialogTransform),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_radisys_msml_dialog_transform_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.radisys.msml-dialog-transform+xml"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_TRANSFORM_XML));
        assert_eq!(crate::Mime::parse("ApPLIcatioN/vNd.RAdisys.MSml-DIaLOg-trANsFoRm+XMl"), Ok(APPLICATION_VND_RADISYS_MSML_DIALOG_TRANSFORM_XML));
    }

    /// `application/vnd.rainstor.data`
    pub const APPLICATION_VND_RAINSTOR_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRainstorData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_rainstor_data_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.rainstor.data"), Ok(APPLICATION_VND_RAINSTOR_DATA));
        assert_eq!(crate::Mime::parse("ApPlIcation/vnd.RAiNsTor.dATA"), Ok(APPLICATION_VND_RAINSTOR_DATA));
    }

    /// `application/vnd.rapid`
    pub const APPLICATION_VND_RAPID: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRapid),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_rapid_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.rapid"), Ok(APPLICATION_VND_RAPID));
        assert_eq!(crate::Mime::parse("AppLICAtIoN/vnD.rApID"), Ok(APPLICATION_VND_RAPID));
    }

    /// `application/vnd.rar`
    pub const APPLICATION_VND_RAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_rar_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.rar"), Ok(APPLICATION_VND_RAR));
        assert_eq!(crate::Mime::parse("AppliCaTION/VND.raR"), Ok(APPLICATION_VND_RAR));
    }

    /// `application/vnd.realvnc.bed`
    pub const APPLICATION_VND_REALVNC_BED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRealvncBed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_realvnc_bed_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.realvnc.bed"), Ok(APPLICATION_VND_REALVNC_BED));
        assert_eq!(crate::Mime::parse("appLICation/VnD.rEALvNc.Bed"), Ok(APPLICATION_VND_REALVNC_BED));
    }

    /// `application/vnd.recordare.musicxml`
    pub const APPLICATION_VND_RECORDARE_MUSICXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRecordareMusicxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_recordare_musicxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.recordare.musicxml"), Ok(APPLICATION_VND_RECORDARE_MUSICXML));
        assert_eq!(crate::Mime::parse("apPliCatION/VNd.RECorDAre.MuSicXml"), Ok(APPLICATION_VND_RECORDARE_MUSICXML));
    }

    /// `application/vnd.recordare.musicxml+xml`
    pub const APPLICATION_VND_RECORDARE_MUSICXML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRecordareMusicxml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_recordare_musicxml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.recordare.musicxml+xml"), Ok(APPLICATION_VND_RECORDARE_MUSICXML_XML));
        assert_eq!(crate::Mime::parse("APplIcAtIOn/VND.REcoRDARe.MusICxMl+Xml"), Ok(APPLICATION_VND_RECORDARE_MUSICXML_XML));
    }

    /// `application/vnd.RenLearn.rlprint`
    pub const APPLICATION_VND_REN_LEARN_RLPRINT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRenLearnRlprint),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ren_learn_rlprint_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.RenLearn.rlprint"), Ok(APPLICATION_VND_REN_LEARN_RLPRINT));
        assert_eq!(crate::Mime::parse("aPPliCAtioN/VNd.rENlEARn.rLpriNT"), Ok(APPLICATION_VND_REN_LEARN_RLPRINT));
    }

    /// `application/vnd.resilient.logic`
    pub const APPLICATION_VND_RESILIENT_LOGIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndResilientLogic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_resilient_logic_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.resilient.logic"), Ok(APPLICATION_VND_RESILIENT_LOGIC));
        assert_eq!(crate::Mime::parse("apPLiCATION/VNd.resilIeNT.lOGic"), Ok(APPLICATION_VND_RESILIENT_LOGIC));
    }

    /// `application/vnd.restful+json`
    pub const APPLICATION_VND_RESTFUL_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRestful),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_restful_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.restful+json"), Ok(APPLICATION_VND_RESTFUL_JSON));
        assert_eq!(crate::Mime::parse("appLicATIOn/VNd.ReStfuL+jsoN"), Ok(APPLICATION_VND_RESTFUL_JSON));
    }

    /// `application/vnd.rig.cryptonote`
    pub const APPLICATION_VND_RIG_CRYPTONOTE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRigCryptonote),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_rig_cryptonote_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.rig.cryptonote"), Ok(APPLICATION_VND_RIG_CRYPTONOTE));
        assert_eq!(crate::Mime::parse("ApPLicatIOn/VNd.RiG.CRYpTOnote"), Ok(APPLICATION_VND_RIG_CRYPTONOTE));
    }

    /// `application/vnd.rim.cod`
    pub const APPLICATION_VND_RIM_COD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRimCod),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_rim_cod_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.rim.cod"), Ok(APPLICATION_VND_RIM_COD));
        assert_eq!(crate::Mime::parse("applICaTiON/Vnd.rIM.cOd"), Ok(APPLICATION_VND_RIM_COD));
    }

    /// `application/vnd.route66.link66+xml`
    pub const APPLICATION_VND_ROUTE66_LINK66_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRoute66Link66),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_route66_link66_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.route66.link66+xml"), Ok(APPLICATION_VND_ROUTE66_LINK66_XML));
        assert_eq!(crate::Mime::parse("APpLicAtION/vnD.RoutE66.LINk66+xml"), Ok(APPLICATION_VND_ROUTE66_LINK66_XML));
    }

    /// `application/vnd.rs-274x`
    pub const APPLICATION_VND_RS_274X: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRs274x),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_rs_274x_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.rs-274x"), Ok(APPLICATION_VND_RS_274X));
        assert_eq!(crate::Mime::parse("apPLicatiON/vNd.rs-274x"), Ok(APPLICATION_VND_RS_274X));
    }

    /// `application/vnd.ruckus.download`
    pub const APPLICATION_VND_RUCKUS_DOWNLOAD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndRuckusDownload),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ruckus_download_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ruckus.download"), Ok(APPLICATION_VND_RUCKUS_DOWNLOAD));
        assert_eq!(crate::Mime::parse("APpliCATIOn/vNd.ruCkUS.DOwnLoAd"), Ok(APPLICATION_VND_RUCKUS_DOWNLOAD));
    }

    /// `application/vnd.s3sms`
    pub const APPLICATION_VND_S3SMS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndS3sms),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_s3sms_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.s3sms"), Ok(APPLICATION_VND_S3SMS));
        assert_eq!(crate::Mime::parse("APPLiCation/VND.s3smS"), Ok(APPLICATION_VND_S3SMS));
    }

    /// `application/vnd.sailingtracker.track`
    pub const APPLICATION_VND_SAILINGTRACKER_TRACK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSailingtrackerTrack),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sailingtracker_track_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sailingtracker.track"), Ok(APPLICATION_VND_SAILINGTRACKER_TRACK));
        assert_eq!(crate::Mime::parse("APPlicatIOn/Vnd.sailinGtRackER.tRaCK"), Ok(APPLICATION_VND_SAILINGTRACKER_TRACK));
    }

    /// `application/vnd.sar`
    pub const APPLICATION_VND_SAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sar_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sar"), Ok(APPLICATION_VND_SAR));
        assert_eq!(crate::Mime::parse("aPpLiCatiOn/vnd.Sar"), Ok(APPLICATION_VND_SAR));
    }

    /// `application/vnd.sbm.cid`
    pub const APPLICATION_VND_SBM_CID: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSbmCid),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sbm_cid_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sbm.cid"), Ok(APPLICATION_VND_SBM_CID));
        assert_eq!(crate::Mime::parse("APPLiCATIon/VNd.SBM.CId"), Ok(APPLICATION_VND_SBM_CID));
    }

    /// `application/vnd.sbm.mid2`
    pub const APPLICATION_VND_SBM_MID2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSbmMid2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sbm_mid2_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sbm.mid2"), Ok(APPLICATION_VND_SBM_MID2));
        assert_eq!(crate::Mime::parse("APPLIcATIOn/vnd.SbM.mId2"), Ok(APPLICATION_VND_SBM_MID2));
    }

    /// `application/vnd.scribus`
    pub const APPLICATION_VND_SCRIBUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndScribus),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_scribus_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.scribus"), Ok(APPLICATION_VND_SCRIBUS));
        assert_eq!(crate::Mime::parse("applICAtION/Vnd.ScriBuS"), Ok(APPLICATION_VND_SCRIBUS));
    }

    /// `application/vnd.sealed.3df`
    pub const APPLICATION_VND_SEALED_3DF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealed3df),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_3df_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.3df"), Ok(APPLICATION_VND_SEALED_3DF));
        assert_eq!(crate::Mime::parse("ApplicATION/Vnd.sealed.3df"), Ok(APPLICATION_VND_SEALED_3DF));
    }

    /// `application/vnd.sealed.csf`
    pub const APPLICATION_VND_SEALED_CSF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedCsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_csf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.csf"), Ok(APPLICATION_VND_SEALED_CSF));
        assert_eq!(crate::Mime::parse("AppliCAtION/vNd.SeALed.Csf"), Ok(APPLICATION_VND_SEALED_CSF));
    }

    /// `application/vnd.sealed.doc`
    pub const APPLICATION_VND_SEALED_DOC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedDoc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_doc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.doc"), Ok(APPLICATION_VND_SEALED_DOC));
        assert_eq!(crate::Mime::parse("ApplicatIOn/VNd.seAleD.DoC"), Ok(APPLICATION_VND_SEALED_DOC));
    }

    /// `application/vnd.sealed.eml`
    pub const APPLICATION_VND_SEALED_EML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedEml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_eml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.eml"), Ok(APPLICATION_VND_SEALED_EML));
        assert_eq!(crate::Mime::parse("appLIcatIon/vnD.sealEd.Eml"), Ok(APPLICATION_VND_SEALED_EML));
    }

    /// `application/vnd.sealed.mht`
    pub const APPLICATION_VND_SEALED_MHT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedMht),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_mht_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.mht"), Ok(APPLICATION_VND_SEALED_MHT));
        assert_eq!(crate::Mime::parse("APPLICATION/vnD.seALEd.mHt"), Ok(APPLICATION_VND_SEALED_MHT));
    }

    /// `application/vnd.sealed.net`
    pub const APPLICATION_VND_SEALED_NET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedNet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_net_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.net"), Ok(APPLICATION_VND_SEALED_NET));
        assert_eq!(crate::Mime::parse("APpLIcatIoN/VNd.sealed.neT"), Ok(APPLICATION_VND_SEALED_NET));
    }

    /// `application/vnd.sealed.ppt`
    pub const APPLICATION_VND_SEALED_PPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedPpt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_ppt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.ppt"), Ok(APPLICATION_VND_SEALED_PPT));
        assert_eq!(crate::Mime::parse("APplICAtion/VNd.SEaled.ppT"), Ok(APPLICATION_VND_SEALED_PPT));
    }

    /// `application/vnd.sealed.tiff`
    pub const APPLICATION_VND_SEALED_TIFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedTiff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_tiff_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.tiff"), Ok(APPLICATION_VND_SEALED_TIFF));
        assert_eq!(crate::Mime::parse("aPpLiCaTiON/VnD.SeAlED.TiFF"), Ok(APPLICATION_VND_SEALED_TIFF));
    }

    /// `application/vnd.sealed.xls`
    pub const APPLICATION_VND_SEALED_XLS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedXls),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealed_xls_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealed.xls"), Ok(APPLICATION_VND_SEALED_XLS));
        assert_eq!(crate::Mime::parse("aPPLiCAtIOn/VnD.sealeD.xls"), Ok(APPLICATION_VND_SEALED_XLS));
    }

    /// `application/vnd.sealedmedia.softseal.html`
    pub const APPLICATION_VND_SEALEDMEDIA_SOFTSEAL_HTML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedmediaSoftsealHtml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealedmedia_softseal_html_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealedmedia.softseal.html"), Ok(APPLICATION_VND_SEALEDMEDIA_SOFTSEAL_HTML));
        assert_eq!(crate::Mime::parse("APPliCaTION/VND.sEaLEDmEDiA.SofTSeAl.HtMl"), Ok(APPLICATION_VND_SEALEDMEDIA_SOFTSEAL_HTML));
    }

    /// `application/vnd.sealedmedia.softseal.pdf`
    pub const APPLICATION_VND_SEALEDMEDIA_SOFTSEAL_PDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSealedmediaSoftsealPdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sealedmedia_softseal_pdf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sealedmedia.softseal.pdf"), Ok(APPLICATION_VND_SEALEDMEDIA_SOFTSEAL_PDF));
        assert_eq!(crate::Mime::parse("APPLicATiON/vND.sEALedmedIA.SoFTSeAL.pdF"), Ok(APPLICATION_VND_SEALEDMEDIA_SOFTSEAL_PDF));
    }

    /// `application/vnd.seemail`
    pub const APPLICATION_VND_SEEMAIL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSeemail),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_seemail_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.seemail"), Ok(APPLICATION_VND_SEEMAIL));
        assert_eq!(crate::Mime::parse("apPliCaTIoN/vnD.SeemAiL"), Ok(APPLICATION_VND_SEEMAIL));
    }

    /// `application/vnd.seis+json`
    pub const APPLICATION_VND_SEIS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSeis),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_seis_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.seis+json"), Ok(APPLICATION_VND_SEIS_JSON));
        assert_eq!(crate::Mime::parse("ApPlIcaTion/VnD.seIS+json"), Ok(APPLICATION_VND_SEIS_JSON));
    }

    /// `application/vnd.sema`
    pub const APPLICATION_VND_SEMA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSema),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sema_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sema"), Ok(APPLICATION_VND_SEMA));
        assert_eq!(crate::Mime::parse("APPliCatiON/vnD.SEMA"), Ok(APPLICATION_VND_SEMA));
    }

    /// `application/vnd.semd`
    pub const APPLICATION_VND_SEMD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSemd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_semd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.semd"), Ok(APPLICATION_VND_SEMD));
        assert_eq!(crate::Mime::parse("ApPlICaTIon/vnD.Semd"), Ok(APPLICATION_VND_SEMD));
    }

    /// `application/vnd.semf`
    pub const APPLICATION_VND_SEMF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSemf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_semf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.semf"), Ok(APPLICATION_VND_SEMF));
        assert_eq!(crate::Mime::parse("APPlicaTIoN/VND.SeMf"), Ok(APPLICATION_VND_SEMF));
    }

    /// `application/vnd.shade-save-file`
    pub const APPLICATION_VND_SHADE_SAVE_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShadeSaveFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shade_save_file_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shade-save-file"), Ok(APPLICATION_VND_SHADE_SAVE_FILE));
        assert_eq!(crate::Mime::parse("apPlICAtIon/vND.sHADE-SavE-fiLe"), Ok(APPLICATION_VND_SHADE_SAVE_FILE));
    }

    /// `application/vnd.shana.informed.formdata`
    pub const APPLICATION_VND_SHANA_INFORMED_FORMDATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShanaInformedFormdata),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shana_informed_formdata_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shana.informed.formdata"), Ok(APPLICATION_VND_SHANA_INFORMED_FORMDATA));
        assert_eq!(crate::Mime::parse("applicAtIon/Vnd.sHanA.INFormED.FormDAta"), Ok(APPLICATION_VND_SHANA_INFORMED_FORMDATA));
    }

    /// `application/vnd.shana.informed.formtemplate`
    pub const APPLICATION_VND_SHANA_INFORMED_FORMTEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShanaInformedFormtemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shana_informed_formtemplate_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shana.informed.formtemplate"), Ok(APPLICATION_VND_SHANA_INFORMED_FORMTEMPLATE));
        assert_eq!(crate::Mime::parse("APpliCatiON/VNd.shAna.InfoRmEd.foRmTEmplate"), Ok(APPLICATION_VND_SHANA_INFORMED_FORMTEMPLATE));
    }

    /// `application/vnd.shana.informed.interchange`
    pub const APPLICATION_VND_SHANA_INFORMED_INTERCHANGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShanaInformedInterchange),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shana_informed_interchange_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shana.informed.interchange"), Ok(APPLICATION_VND_SHANA_INFORMED_INTERCHANGE));
        assert_eq!(crate::Mime::parse("aPplIcatioN/vnD.ShAna.INfOrMeD.inTERCHANge"), Ok(APPLICATION_VND_SHANA_INFORMED_INTERCHANGE));
    }

    /// `application/vnd.shana.informed.package`
    pub const APPLICATION_VND_SHANA_INFORMED_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShanaInformedPackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shana_informed_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shana.informed.package"), Ok(APPLICATION_VND_SHANA_INFORMED_PACKAGE));
        assert_eq!(crate::Mime::parse("aPPLiCaTIoN/Vnd.ShAna.infOrMED.PACkage"), Ok(APPLICATION_VND_SHANA_INFORMED_PACKAGE));
    }

    /// `application/vnd.shootproof+json`
    pub const APPLICATION_VND_SHOOTPROOF_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShootproof),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_shootproof_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shootproof+json"), Ok(APPLICATION_VND_SHOOTPROOF_JSON));
        assert_eq!(crate::Mime::parse("aPpLICaTioN/VNd.shOOtPROoF+jsON"), Ok(APPLICATION_VND_SHOOTPROOF_JSON));
    }

    /// `application/vnd.shopkick+json`
    pub const APPLICATION_VND_SHOPKICK_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShopkick),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_shopkick_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shopkick+json"), Ok(APPLICATION_VND_SHOPKICK_JSON));
        assert_eq!(crate::Mime::parse("APPLICATiOn/VNd.SHOpkIcK+JsoN"), Ok(APPLICATION_VND_SHOPKICK_JSON));
    }

    /// `application/vnd.shp`
    pub const APPLICATION_VND_SHP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shp"), Ok(APPLICATION_VND_SHP));
        assert_eq!(crate::Mime::parse("aPPLICaTiON/vnd.sHp"), Ok(APPLICATION_VND_SHP));
    }

    /// `application/vnd.shx`
    pub const APPLICATION_VND_SHX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndShx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_shx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.shx"), Ok(APPLICATION_VND_SHX));
        assert_eq!(crate::Mime::parse("aPPliCatioN/VND.Shx"), Ok(APPLICATION_VND_SHX));
    }

    /// `application/vnd.sigrok.session`
    pub const APPLICATION_VND_SIGROK_SESSION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSigrokSession),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sigrok_session_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sigrok.session"), Ok(APPLICATION_VND_SIGROK_SESSION));
        assert_eq!(crate::Mime::parse("appLiCATiON/vNd.sigroK.sesSioN"), Ok(APPLICATION_VND_SIGROK_SESSION));
    }

    /// `application/vnd.SimTech-MindMapper`
    pub const APPLICATION_VND_SIM_TECH_MIND_MAPPER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSimTechMindMapper),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sim_tech_mind_mapper_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.SimTech-MindMapper"), Ok(APPLICATION_VND_SIM_TECH_MIND_MAPPER));
        assert_eq!(crate::Mime::parse("aPPLIcaTion/VND.sImtECH-MinDmAPper"), Ok(APPLICATION_VND_SIM_TECH_MIND_MAPPER));
    }

    /// `application/vnd.siren+json`
    pub const APPLICATION_VND_SIREN_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSiren),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_siren_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.siren+json"), Ok(APPLICATION_VND_SIREN_JSON));
        assert_eq!(crate::Mime::parse("aPPlicATIon/VNd.sIREn+JSOn"), Ok(APPLICATION_VND_SIREN_JSON));
    }

    /// `application/vnd.smaf`
    pub const APPLICATION_VND_SMAF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSmaf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_smaf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.smaf"), Ok(APPLICATION_VND_SMAF));
        assert_eq!(crate::Mime::parse("apPLiCAtIon/VND.SmaF"), Ok(APPLICATION_VND_SMAF));
    }

    /// `application/vnd.smart.notebook`
    pub const APPLICATION_VND_SMART_NOTEBOOK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSmartNotebook),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_smart_notebook_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.smart.notebook"), Ok(APPLICATION_VND_SMART_NOTEBOOK));
        assert_eq!(crate::Mime::parse("AppLicatIoN/vNd.sMaRT.NotEbOok"), Ok(APPLICATION_VND_SMART_NOTEBOOK));
    }

    /// `application/vnd.smart.teacher`
    pub const APPLICATION_VND_SMART_TEACHER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSmartTeacher),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_smart_teacher_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.smart.teacher"), Ok(APPLICATION_VND_SMART_TEACHER));
        assert_eq!(crate::Mime::parse("APplicaTiON/Vnd.sMarT.tEAcHEr"), Ok(APPLICATION_VND_SMART_TEACHER));
    }

    /// `application/vnd.snesdev-page-table`
    pub const APPLICATION_VND_SNESDEV_PAGE_TABLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSnesdevPageTable),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_snesdev_page_table_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.snesdev-page-table"), Ok(APPLICATION_VND_SNESDEV_PAGE_TABLE));
        assert_eq!(crate::Mime::parse("APPlIcAtION/vnd.sNESdev-page-TAblE"), Ok(APPLICATION_VND_SNESDEV_PAGE_TABLE));
    }

    /// `application/vnd.software602.filler.form+xml`
    pub const APPLICATION_VND_SOFTWARE602_FILLER_FORM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSoftware602FillerForm),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_software602_filler_form_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.software602.filler.form+xml"), Ok(APPLICATION_VND_SOFTWARE602_FILLER_FORM_XML));
        assert_eq!(crate::Mime::parse("APPlicATiON/VnD.softWAre602.FIller.foRm+XML"), Ok(APPLICATION_VND_SOFTWARE602_FILLER_FORM_XML));
    }

    /// `application/vnd.software602.filler.form-xml-zip`
    pub const APPLICATION_VND_SOFTWARE602_FILLER_FORM_XML_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSoftware602FillerFormXmlZip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_software602_filler_form_xml_zip_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.software602.filler.form-xml-zip"), Ok(APPLICATION_VND_SOFTWARE602_FILLER_FORM_XML_ZIP));
        assert_eq!(crate::Mime::parse("apPLicatION/Vnd.SOfTware602.FiLLeR.foRM-XML-zIp"), Ok(APPLICATION_VND_SOFTWARE602_FILLER_FORM_XML_ZIP));
    }

    /// `application/vnd.solent.sdkm+xml`
    pub const APPLICATION_VND_SOLENT_SDKM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSolentSdkm),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_solent_sdkm_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.solent.sdkm+xml"), Ok(APPLICATION_VND_SOLENT_SDKM_XML));
        assert_eq!(crate::Mime::parse("aPplIcation/Vnd.soLEnT.sDKM+xmL"), Ok(APPLICATION_VND_SOLENT_SDKM_XML));
    }

    /// `application/vnd.spotfire.dxp`
    pub const APPLICATION_VND_SPOTFIRE_DXP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSpotfireDxp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_spotfire_dxp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.spotfire.dxp"), Ok(APPLICATION_VND_SPOTFIRE_DXP));
        assert_eq!(crate::Mime::parse("APpliCaTIoN/vND.SpOTFiRe.dxP"), Ok(APPLICATION_VND_SPOTFIRE_DXP));
    }

    /// `application/vnd.spotfire.sfs`
    pub const APPLICATION_VND_SPOTFIRE_SFS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSpotfireSfs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_spotfire_sfs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.spotfire.sfs"), Ok(APPLICATION_VND_SPOTFIRE_SFS));
        assert_eq!(crate::Mime::parse("aPplICatIOn/VND.SPOtfire.SFs"), Ok(APPLICATION_VND_SPOTFIRE_SFS));
    }

    /// `application/vnd.sqlite3`
    pub const APPLICATION_VND_SQLITE3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSqlite3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sqlite3_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sqlite3"), Ok(APPLICATION_VND_SQLITE3));
        assert_eq!(crate::Mime::parse("aPplicaTIon/Vnd.SQLiTE3"), Ok(APPLICATION_VND_SQLITE3));
    }

    /// `application/vnd.sss-cod`
    pub const APPLICATION_VND_SSS_COD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSssCod),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sss_cod_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sss-cod"), Ok(APPLICATION_VND_SSS_COD));
        assert_eq!(crate::Mime::parse("apPlicaTION/vND.SSS-COD"), Ok(APPLICATION_VND_SSS_COD));
    }

    /// `application/vnd.sss-dtf`
    pub const APPLICATION_VND_SSS_DTF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSssDtf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sss_dtf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sss-dtf"), Ok(APPLICATION_VND_SSS_DTF));
        assert_eq!(crate::Mime::parse("AppLiCATIon/VND.sSS-dtF"), Ok(APPLICATION_VND_SSS_DTF));
    }

    /// `application/vnd.sss-ntf`
    pub const APPLICATION_VND_SSS_NTF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSssNtf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sss_ntf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sss-ntf"), Ok(APPLICATION_VND_SSS_NTF));
        assert_eq!(crate::Mime::parse("aPPlIcation/Vnd.sss-ntF"), Ok(APPLICATION_VND_SSS_NTF));
    }

    /// `application/vnd.stardivision.calc`
    pub const APPLICATION_VND_STARDIVISION_CALC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionCalc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_calc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.calc"), Ok(APPLICATION_VND_STARDIVISION_CALC));
        assert_eq!(crate::Mime::parse("AppLICAtiON/vnd.STarDivIsion.caLc"), Ok(APPLICATION_VND_STARDIVISION_CALC));
    }

    /// `application/vnd.stardivision.chart`
    pub const APPLICATION_VND_STARDIVISION_CHART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionChart),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_chart_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.chart"), Ok(APPLICATION_VND_STARDIVISION_CHART));
        assert_eq!(crate::Mime::parse("APplICATioN/VND.STArdiviSIoN.ChaRt"), Ok(APPLICATION_VND_STARDIVISION_CHART));
    }

    /// `application/vnd.stardivision.draw`
    pub const APPLICATION_VND_STARDIVISION_DRAW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionDraw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_draw_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.draw"), Ok(APPLICATION_VND_STARDIVISION_DRAW));
        assert_eq!(crate::Mime::parse("ApPLICATion/VNd.staRdiVISIon.Draw"), Ok(APPLICATION_VND_STARDIVISION_DRAW));
    }

    /// `application/vnd.stardivision.impress`
    pub const APPLICATION_VND_STARDIVISION_IMPRESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionImpress),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_impress_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.impress"), Ok(APPLICATION_VND_STARDIVISION_IMPRESS));
        assert_eq!(crate::Mime::parse("aPPlicATion/vNd.StarDIVISIon.IMPresS"), Ok(APPLICATION_VND_STARDIVISION_IMPRESS));
    }

    /// `application/vnd.stardivision.math`
    pub const APPLICATION_VND_STARDIVISION_MATH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionMath),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_math_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.math"), Ok(APPLICATION_VND_STARDIVISION_MATH));
        assert_eq!(crate::Mime::parse("apPLicatIOn/Vnd.stArdivIsioN.mAth"), Ok(APPLICATION_VND_STARDIVISION_MATH));
    }

    /// `application/vnd.stardivision.writer`
    pub const APPLICATION_VND_STARDIVISION_WRITER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionWriter),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_writer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.writer"), Ok(APPLICATION_VND_STARDIVISION_WRITER));
        assert_eq!(crate::Mime::parse("appLIcaTioN/VnD.STArdiViSioN.wRiTer"), Ok(APPLICATION_VND_STARDIVISION_WRITER));
    }

    /// `application/vnd.stardivision.writer-global`
    pub const APPLICATION_VND_STARDIVISION_WRITER_GLOBAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStardivisionWriterGlobal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stardivision_writer_global_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stardivision.writer-global"), Ok(APPLICATION_VND_STARDIVISION_WRITER_GLOBAL));
        assert_eq!(crate::Mime::parse("AppliCatIOn/VND.STaRDivIsioN.wrItEr-GLoBAL"), Ok(APPLICATION_VND_STARDIVISION_WRITER_GLOBAL));
    }

    /// `application/vnd.stepmania.package`
    pub const APPLICATION_VND_STEPMANIA_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStepmaniaPackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stepmania_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stepmania.package"), Ok(APPLICATION_VND_STEPMANIA_PACKAGE));
        assert_eq!(crate::Mime::parse("AppLIcATioN/vNd.stEpMANia.PAckAGE"), Ok(APPLICATION_VND_STEPMANIA_PACKAGE));
    }

    /// `application/vnd.stepmania.stepchart`
    pub const APPLICATION_VND_STEPMANIA_STEPCHART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStepmaniaStepchart),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_stepmania_stepchart_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.stepmania.stepchart"), Ok(APPLICATION_VND_STEPMANIA_STEPCHART));
        assert_eq!(crate::Mime::parse("applicATIon/VND.stEpmaniA.StEpchart"), Ok(APPLICATION_VND_STEPMANIA_STEPCHART));
    }

    /// `application/vnd.street-stream`
    pub const APPLICATION_VND_STREET_STREAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndStreetStream),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_street_stream_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.street-stream"), Ok(APPLICATION_VND_STREET_STREAM));
        assert_eq!(crate::Mime::parse("APPLicaTION/vNd.STreet-sTrEaM"), Ok(APPLICATION_VND_STREET_STREAM));
    }

    /// `application/vnd.sun.wadl+xml`
    pub const APPLICATION_VND_SUN_WADL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunWadl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_wadl_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.wadl+xml"), Ok(APPLICATION_VND_SUN_WADL_XML));
        assert_eq!(crate::Mime::parse("aPPLiCAtiOn/vnD.sUN.Wadl+xML"), Ok(APPLICATION_VND_SUN_WADL_XML));
    }

    /// `application/vnd.sun.xml.calc`
    pub const APPLICATION_VND_SUN_XML_CALC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlCalc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_calc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.calc"), Ok(APPLICATION_VND_SUN_XML_CALC));
        assert_eq!(crate::Mime::parse("APpLicaTIoN/VND.suN.Xml.cAlc"), Ok(APPLICATION_VND_SUN_XML_CALC));
    }

    /// `application/vnd.sun.xml.calc.template`
    pub const APPLICATION_VND_SUN_XML_CALC_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlCalcTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_calc_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.calc.template"), Ok(APPLICATION_VND_SUN_XML_CALC_TEMPLATE));
        assert_eq!(crate::Mime::parse("AppLIcAtiOn/vnD.sUn.Xml.cALc.TEMPLate"), Ok(APPLICATION_VND_SUN_XML_CALC_TEMPLATE));
    }

    /// `application/vnd.sun.xml.draw`
    pub const APPLICATION_VND_SUN_XML_DRAW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlDraw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_draw_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.draw"), Ok(APPLICATION_VND_SUN_XML_DRAW));
        assert_eq!(crate::Mime::parse("appLICAtioN/vNd.sUN.xMl.dRAW"), Ok(APPLICATION_VND_SUN_XML_DRAW));
    }

    /// `application/vnd.sun.xml.draw.template`
    pub const APPLICATION_VND_SUN_XML_DRAW_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlDrawTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_draw_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.draw.template"), Ok(APPLICATION_VND_SUN_XML_DRAW_TEMPLATE));
        assert_eq!(crate::Mime::parse("ApPlicAtiOn/vNd.Sun.XmL.DRAW.tEmplAtE"), Ok(APPLICATION_VND_SUN_XML_DRAW_TEMPLATE));
    }

    /// `application/vnd.sun.xml.impress`
    pub const APPLICATION_VND_SUN_XML_IMPRESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlImpress),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_impress_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.impress"), Ok(APPLICATION_VND_SUN_XML_IMPRESS));
        assert_eq!(crate::Mime::parse("APplicatIoN/vNd.suN.xmL.IMPrEsS"), Ok(APPLICATION_VND_SUN_XML_IMPRESS));
    }

    /// `application/vnd.sun.xml.impress.template`
    pub const APPLICATION_VND_SUN_XML_IMPRESS_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlImpressTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_impress_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.impress.template"), Ok(APPLICATION_VND_SUN_XML_IMPRESS_TEMPLATE));
        assert_eq!(crate::Mime::parse("ApPlicATion/VNd.Sun.xMl.iMprESS.tEmplaTe"), Ok(APPLICATION_VND_SUN_XML_IMPRESS_TEMPLATE));
    }

    /// `application/vnd.sun.xml.math`
    pub const APPLICATION_VND_SUN_XML_MATH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlMath),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_math_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.math"), Ok(APPLICATION_VND_SUN_XML_MATH));
        assert_eq!(crate::Mime::parse("apPliCATIoN/vnD.sUN.Xml.MaTH"), Ok(APPLICATION_VND_SUN_XML_MATH));
    }

    /// `application/vnd.sun.xml.writer`
    pub const APPLICATION_VND_SUN_XML_WRITER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlWriter),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_writer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.writer"), Ok(APPLICATION_VND_SUN_XML_WRITER));
        assert_eq!(crate::Mime::parse("APpLiCatiON/VnD.SUn.Xml.wRiTer"), Ok(APPLICATION_VND_SUN_XML_WRITER));
    }

    /// `application/vnd.sun.xml.writer.global`
    pub const APPLICATION_VND_SUN_XML_WRITER_GLOBAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlWriterGlobal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_writer_global_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.writer.global"), Ok(APPLICATION_VND_SUN_XML_WRITER_GLOBAL));
        assert_eq!(crate::Mime::parse("APpLICaTIOn/vNd.SuN.XmL.wRiter.glObAl"), Ok(APPLICATION_VND_SUN_XML_WRITER_GLOBAL));
    }

    /// `application/vnd.sun.xml.writer.template`
    pub const APPLICATION_VND_SUN_XML_WRITER_TEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSunXmlWriterTemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sun_xml_writer_template_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sun.xml.writer.template"), Ok(APPLICATION_VND_SUN_XML_WRITER_TEMPLATE));
        assert_eq!(crate::Mime::parse("ApPlIcation/VnD.SUN.xmL.wRitEr.TEmplAtE"), Ok(APPLICATION_VND_SUN_XML_WRITER_TEMPLATE));
    }

    /// `application/vnd.sus-calendar`
    pub const APPLICATION_VND_SUS_CALENDAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSusCalendar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_sus_calendar_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sus-calendar"), Ok(APPLICATION_VND_SUS_CALENDAR));
        assert_eq!(crate::Mime::parse("ApPLIcaTioN/vND.sus-cALeNdaR"), Ok(APPLICATION_VND_SUS_CALENDAR));
    }

    /// `application/vnd.svd`
    pub const APPLICATION_VND_SVD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSvd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_svd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.svd"), Ok(APPLICATION_VND_SVD));
        assert_eq!(crate::Mime::parse("apPLiCaTion/VND.SvD"), Ok(APPLICATION_VND_SVD));
    }

    /// `application/vnd.swiftview-ics`
    pub const APPLICATION_VND_SWIFTVIEW_ICS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSwiftviewIcs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_swiftview_ics_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.swiftview-ics"), Ok(APPLICATION_VND_SWIFTVIEW_ICS));
        assert_eq!(crate::Mime::parse("APPLICAtIOn/vND.SWiftVieW-iCS"), Ok(APPLICATION_VND_SWIFTVIEW_ICS));
    }

    /// `application/vnd.sycle+xml`
    pub const APPLICATION_VND_SYCLE_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSycle),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_sycle_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.sycle+xml"), Ok(APPLICATION_VND_SYCLE_XML));
        assert_eq!(crate::Mime::parse("aPpLICAtION/VNd.Sycle+xmL"), Ok(APPLICATION_VND_SYCLE_XML));
    }

    /// `application/vnd.syft+json`
    pub const APPLICATION_VND_SYFT_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyft),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syft_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syft+json"), Ok(APPLICATION_VND_SYFT_JSON));
        assert_eq!(crate::Mime::parse("apPLicatIoN/VND.SYFt+json"), Ok(APPLICATION_VND_SYFT_JSON));
    }

    /// `application/vnd.symbian.install`
    pub const APPLICATION_VND_SYMBIAN_INSTALL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSymbianInstall),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_symbian_install_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.symbian.install"), Ok(APPLICATION_VND_SYMBIAN_INSTALL));
        assert_eq!(crate::Mime::parse("AppLicATiOn/vNd.SyMBian.InStALl"), Ok(APPLICATION_VND_SYMBIAN_INSTALL));
    }

    /// `application/vnd.syncml+xml`
    pub const APPLICATION_VND_SYNCML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml+xml"), Ok(APPLICATION_VND_SYNCML_XML));
        assert_eq!(crate::Mime::parse("aPPLicATion/VnD.sYNCmL+xmL"), Ok(APPLICATION_VND_SYNCML_XML));
    }

    /// `application/vnd.syncml.dm+wbxml`
    pub const APPLICATION_VND_SYNCML_DM_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDm),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dm_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dm+wbxml"), Ok(APPLICATION_VND_SYNCML_DM_WBXML));
        assert_eq!(crate::Mime::parse("appLiCaTiON/vNd.SYNcml.Dm+WBXML"), Ok(APPLICATION_VND_SYNCML_DM_WBXML));
    }

    /// `application/vnd.syncml.dm+xml`
    pub const APPLICATION_VND_SYNCML_DM_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDm),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dm_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dm+xml"), Ok(APPLICATION_VND_SYNCML_DM_XML));
        assert_eq!(crate::Mime::parse("AppLIcATion/VnD.synCmL.dm+Xml"), Ok(APPLICATION_VND_SYNCML_DM_XML));
    }

    /// `application/vnd.syncml.dm.notification`
    pub const APPLICATION_VND_SYNCML_DM_NOTIFICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDmNotification),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dm_notification_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dm.notification"), Ok(APPLICATION_VND_SYNCML_DM_NOTIFICATION));
        assert_eq!(crate::Mime::parse("applICATIon/VNd.SYnCmL.dm.NOtifICAtioN"), Ok(APPLICATION_VND_SYNCML_DM_NOTIFICATION));
    }

    /// `application/vnd.syncml.dmddf+wbxml`
    pub const APPLICATION_VND_SYNCML_DMDDF_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDmddf),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dmddf_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dmddf+wbxml"), Ok(APPLICATION_VND_SYNCML_DMDDF_WBXML));
        assert_eq!(crate::Mime::parse("AppLicatiOn/vNd.SynCML.dmDDF+WbXMl"), Ok(APPLICATION_VND_SYNCML_DMDDF_WBXML));
    }

    /// `application/vnd.syncml.dmddf+xml`
    pub const APPLICATION_VND_SYNCML_DMDDF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDmddf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dmddf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dmddf+xml"), Ok(APPLICATION_VND_SYNCML_DMDDF_XML));
        assert_eq!(crate::Mime::parse("appLICatIOn/vND.sYnCmL.Dmddf+xMl"), Ok(APPLICATION_VND_SYNCML_DMDDF_XML));
    }

    /// `application/vnd.syncml.dmtnds+wbxml`
    pub const APPLICATION_VND_SYNCML_DMTNDS_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDmtnds),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dmtnds_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dmtnds+wbxml"), Ok(APPLICATION_VND_SYNCML_DMTNDS_WBXML));
        assert_eq!(crate::Mime::parse("APpLiCAtIon/Vnd.sYnCMl.dmTnds+WbXMl"), Ok(APPLICATION_VND_SYNCML_DMTNDS_WBXML));
    }

    /// `application/vnd.syncml.dmtnds+xml`
    pub const APPLICATION_VND_SYNCML_DMTNDS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDmtnds),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_dmtnds_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.dmtnds+xml"), Ok(APPLICATION_VND_SYNCML_DMTNDS_XML));
        assert_eq!(crate::Mime::parse("aPPlIcAtIon/VNd.sYNcMl.dMtndS+XML"), Ok(APPLICATION_VND_SYNCML_DMTNDS_XML));
    }

    /// `application/vnd.syncml.ds.notification`
    pub const APPLICATION_VND_SYNCML_DS_NOTIFICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndSyncmlDsNotification),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_syncml_ds_notification_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.syncml.ds.notification"), Ok(APPLICATION_VND_SYNCML_DS_NOTIFICATION));
        assert_eq!(crate::Mime::parse("apPlicatiON/Vnd.sYNcML.ds.NoTiFICatiOn"), Ok(APPLICATION_VND_SYNCML_DS_NOTIFICATION));
    }

    /// `application/vnd.tableschema+json`
    pub const APPLICATION_VND_TABLESCHEMA_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTableschema),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_tableschema_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tableschema+json"), Ok(APPLICATION_VND_TABLESCHEMA_JSON));
        assert_eq!(crate::Mime::parse("APPLiCaTIoN/VNd.tABLEschEma+jSON"), Ok(APPLICATION_VND_TABLESCHEMA_JSON));
    }

    /// `application/vnd.tao.intent-module-archive`
    pub const APPLICATION_VND_TAO_INTENT_MODULE_ARCHIVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTaoIntentModuleArchive),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_tao_intent_module_archive_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tao.intent-module-archive"), Ok(APPLICATION_VND_TAO_INTENT_MODULE_ARCHIVE));
        assert_eq!(crate::Mime::parse("APplIcatIon/VNd.Tao.InTEnT-MODulE-ArchiVE"), Ok(APPLICATION_VND_TAO_INTENT_MODULE_ARCHIVE));
    }

    /// `application/vnd.tcpdump.pcap`
    pub const APPLICATION_VND_TCPDUMP_PCAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTcpdumpPcap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_tcpdump_pcap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tcpdump.pcap"), Ok(APPLICATION_VND_TCPDUMP_PCAP));
        assert_eq!(crate::Mime::parse("applICAtiOn/vND.tCpdUmp.PCap"), Ok(APPLICATION_VND_TCPDUMP_PCAP));
    }

    /// `application/vnd.theqvd`
    pub const APPLICATION_VND_THEQVD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTheqvd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_theqvd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.theqvd"), Ok(APPLICATION_VND_THEQVD));
        assert_eq!(crate::Mime::parse("appLiCATIOn/Vnd.TheqVd"), Ok(APPLICATION_VND_THEQVD));
    }

    /// `application/vnd.think-cell.ppttc+json`
    pub const APPLICATION_VND_THINK_CELL_PPTTC_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndThinkCellPpttc),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_think_cell_ppttc_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.think-cell.ppttc+json"), Ok(APPLICATION_VND_THINK_CELL_PPTTC_JSON));
        assert_eq!(crate::Mime::parse("aPplICAtIoN/vND.THINK-Cell.PpttC+JSoN"), Ok(APPLICATION_VND_THINK_CELL_PPTTC_JSON));
    }

    /// `application/vnd.tmd.mediaflex.api+xml`
    pub const APPLICATION_VND_TMD_MEDIAFLEX_API_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTmdMediaflexApi),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_tmd_mediaflex_api_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tmd.mediaflex.api+xml"), Ok(APPLICATION_VND_TMD_MEDIAFLEX_API_XML));
        assert_eq!(crate::Mime::parse("APPlICAtIoN/vnD.tmD.mEDIaFlEx.Api+XMl"), Ok(APPLICATION_VND_TMD_MEDIAFLEX_API_XML));
    }

    /// `application/vnd.tml`
    pub const APPLICATION_VND_TML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_tml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tml"), Ok(APPLICATION_VND_TML));
        assert_eq!(crate::Mime::parse("ApplICatiOn/vnd.Tml"), Ok(APPLICATION_VND_TML));
    }

    /// `application/vnd.tmobile-livetv`
    pub const APPLICATION_VND_TMOBILE_LIVETV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTmobileLivetv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_tmobile_livetv_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tmobile-livetv"), Ok(APPLICATION_VND_TMOBILE_LIVETV));
        assert_eq!(crate::Mime::parse("apPLiCaTIOn/vnD.TMObiLe-LivEtv"), Ok(APPLICATION_VND_TMOBILE_LIVETV));
    }

    /// `application/vnd.tri.onesource`
    pub const APPLICATION_VND_TRI_ONESOURCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTriOnesource),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_tri_onesource_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.tri.onesource"), Ok(APPLICATION_VND_TRI_ONESOURCE));
        assert_eq!(crate::Mime::parse("APpLiCatiON/vnd.Tri.ONEsOURcE"), Ok(APPLICATION_VND_TRI_ONESOURCE));
    }

    /// `application/vnd.trid.tpt`
    pub const APPLICATION_VND_TRID_TPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTridTpt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_trid_tpt_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.trid.tpt"), Ok(APPLICATION_VND_TRID_TPT));
        assert_eq!(crate::Mime::parse("appLICatIoN/VnD.tRid.tpT"), Ok(APPLICATION_VND_TRID_TPT));
    }

    /// `application/vnd.triscape.mxs`
    pub const APPLICATION_VND_TRISCAPE_MXS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTriscapeMxs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_triscape_mxs_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.triscape.mxs"), Ok(APPLICATION_VND_TRISCAPE_MXS));
        assert_eq!(crate::Mime::parse("ApPLIcAtiOn/vnd.tRIsCape.Mxs"), Ok(APPLICATION_VND_TRISCAPE_MXS));
    }

    /// `application/vnd.trueapp`
    pub const APPLICATION_VND_TRUEAPP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTrueapp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_trueapp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.trueapp"), Ok(APPLICATION_VND_TRUEAPP));
        assert_eq!(crate::Mime::parse("apPlICAtIon/VnD.TrueAPp"), Ok(APPLICATION_VND_TRUEAPP));
    }

    /// `application/vnd.truedoc`
    pub const APPLICATION_VND_TRUEDOC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndTruedoc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_truedoc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.truedoc"), Ok(APPLICATION_VND_TRUEDOC));
        assert_eq!(crate::Mime::parse("APPlICaTion/vNd.TRUEdoc"), Ok(APPLICATION_VND_TRUEDOC));
    }

    /// `application/vnd.ubisoft.webplayer`
    pub const APPLICATION_VND_UBISOFT_WEBPLAYER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUbisoftWebplayer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ubisoft_webplayer_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ubisoft.webplayer"), Ok(APPLICATION_VND_UBISOFT_WEBPLAYER));
        assert_eq!(crate::Mime::parse("APPLICaTioN/VNd.uBIsoFt.webpLayER"), Ok(APPLICATION_VND_UBISOFT_WEBPLAYER));
    }

    /// `application/vnd.ufdl`
    pub const APPLICATION_VND_UFDL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUfdl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ufdl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ufdl"), Ok(APPLICATION_VND_UFDL));
        assert_eq!(crate::Mime::parse("aPplICAtioN/VND.uFdL"), Ok(APPLICATION_VND_UFDL));
    }

    /// `application/vnd.uiq.theme`
    pub const APPLICATION_VND_UIQ_THEME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUiqTheme),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uiq_theme_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uiq.theme"), Ok(APPLICATION_VND_UIQ_THEME));
        assert_eq!(crate::Mime::parse("applICatION/vnd.uIq.themE"), Ok(APPLICATION_VND_UIQ_THEME));
    }

    /// `application/vnd.umajin`
    pub const APPLICATION_VND_UMAJIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUmajin),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_umajin_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.umajin"), Ok(APPLICATION_VND_UMAJIN));
        assert_eq!(crate::Mime::parse("AppLICAtIOn/vnD.umAJIN"), Ok(APPLICATION_VND_UMAJIN));
    }

    /// `application/vnd.unity`
    pub const APPLICATION_VND_UNITY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUnity),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_unity_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.unity"), Ok(APPLICATION_VND_UNITY));
        assert_eq!(crate::Mime::parse("aPpliCAtiON/VND.UnItY"), Ok(APPLICATION_VND_UNITY));
    }

    /// `application/vnd.uoml+xml`
    pub const APPLICATION_VND_UOML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUoml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_uoml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uoml+xml"), Ok(APPLICATION_VND_UOML_XML));
        assert_eq!(crate::Mime::parse("ApPLiCAtiOn/vnD.UOmL+XML"), Ok(APPLICATION_VND_UOML_XML));
    }

    /// `application/vnd.uplanet.alert`
    pub const APPLICATION_VND_UPLANET_ALERT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetAlert),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_alert_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.alert"), Ok(APPLICATION_VND_UPLANET_ALERT));
        assert_eq!(crate::Mime::parse("ApPlIcation/vnD.UplaNEt.alErt"), Ok(APPLICATION_VND_UPLANET_ALERT));
    }

    /// `application/vnd.uplanet.alert-wbxml`
    pub const APPLICATION_VND_UPLANET_ALERT_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetAlertWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_alert_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.alert-wbxml"), Ok(APPLICATION_VND_UPLANET_ALERT_WBXML));
        assert_eq!(crate::Mime::parse("APpLICaTIoN/VNd.uPlAnet.Alert-WbXml"), Ok(APPLICATION_VND_UPLANET_ALERT_WBXML));
    }

    /// `application/vnd.uplanet.bearer-choice`
    pub const APPLICATION_VND_UPLANET_BEARER_CHOICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetBearerChoice),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_bearer_choice_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.bearer-choice"), Ok(APPLICATION_VND_UPLANET_BEARER_CHOICE));
        assert_eq!(crate::Mime::parse("appLICatioN/vnd.UPLaNEt.bEarER-cHOice"), Ok(APPLICATION_VND_UPLANET_BEARER_CHOICE));
    }

    /// `application/vnd.uplanet.bearer-choice-wbxml`
    pub const APPLICATION_VND_UPLANET_BEARER_CHOICE_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetBearerChoiceWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_bearer_choice_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.bearer-choice-wbxml"), Ok(APPLICATION_VND_UPLANET_BEARER_CHOICE_WBXML));
        assert_eq!(crate::Mime::parse("appLIcAtIoN/vND.uplanet.BeAreR-cHoiCe-WBxMl"), Ok(APPLICATION_VND_UPLANET_BEARER_CHOICE_WBXML));
    }

    /// `application/vnd.uplanet.cacheop`
    pub const APPLICATION_VND_UPLANET_CACHEOP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetCacheop),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_cacheop_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.cacheop"), Ok(APPLICATION_VND_UPLANET_CACHEOP));
        assert_eq!(crate::Mime::parse("applicATIoN/Vnd.UpLANEt.CACheOP"), Ok(APPLICATION_VND_UPLANET_CACHEOP));
    }

    /// `application/vnd.uplanet.cacheop-wbxml`
    pub const APPLICATION_VND_UPLANET_CACHEOP_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetCacheopWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_cacheop_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.cacheop-wbxml"), Ok(APPLICATION_VND_UPLANET_CACHEOP_WBXML));
        assert_eq!(crate::Mime::parse("aPPlICatION/VNd.UpLAnET.CachEop-wBxml"), Ok(APPLICATION_VND_UPLANET_CACHEOP_WBXML));
    }

    /// `application/vnd.uplanet.channel`
    pub const APPLICATION_VND_UPLANET_CHANNEL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetChannel),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_channel_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.channel"), Ok(APPLICATION_VND_UPLANET_CHANNEL));
        assert_eq!(crate::Mime::parse("APpLICaTiOn/Vnd.upLANet.channel"), Ok(APPLICATION_VND_UPLANET_CHANNEL));
    }

    /// `application/vnd.uplanet.channel-wbxml`
    pub const APPLICATION_VND_UPLANET_CHANNEL_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetChannelWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_channel_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.channel-wbxml"), Ok(APPLICATION_VND_UPLANET_CHANNEL_WBXML));
        assert_eq!(crate::Mime::parse("appLicATiOn/vnD.UplANEt.ChanNEL-wBxMl"), Ok(APPLICATION_VND_UPLANET_CHANNEL_WBXML));
    }

    /// `application/vnd.uplanet.list`
    pub const APPLICATION_VND_UPLANET_LIST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetList),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_list_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.list"), Ok(APPLICATION_VND_UPLANET_LIST));
        assert_eq!(crate::Mime::parse("aPpLIcatiOn/VND.uPlaNeT.List"), Ok(APPLICATION_VND_UPLANET_LIST));
    }

    /// `application/vnd.uplanet.list-wbxml`
    pub const APPLICATION_VND_UPLANET_LIST_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetListWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_list_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.list-wbxml"), Ok(APPLICATION_VND_UPLANET_LIST_WBXML));
        assert_eq!(crate::Mime::parse("aPpLIcATION/VnD.upLaNEt.lIst-wBxML"), Ok(APPLICATION_VND_UPLANET_LIST_WBXML));
    }

    /// `application/vnd.uplanet.listcmd`
    pub const APPLICATION_VND_UPLANET_LISTCMD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetListcmd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_listcmd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.listcmd"), Ok(APPLICATION_VND_UPLANET_LISTCMD));
        assert_eq!(crate::Mime::parse("appliCatioN/vnD.uPLANet.lIsTCmD"), Ok(APPLICATION_VND_UPLANET_LISTCMD));
    }

    /// `application/vnd.uplanet.listcmd-wbxml`
    pub const APPLICATION_VND_UPLANET_LISTCMD_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetListcmdWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_listcmd_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.listcmd-wbxml"), Ok(APPLICATION_VND_UPLANET_LISTCMD_WBXML));
        assert_eq!(crate::Mime::parse("APPlicatION/VnD.UPlANet.listCmD-WBXml"), Ok(APPLICATION_VND_UPLANET_LISTCMD_WBXML));
    }

    /// `application/vnd.uplanet.signal`
    pub const APPLICATION_VND_UPLANET_SIGNAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUplanetSignal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uplanet_signal_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uplanet.signal"), Ok(APPLICATION_VND_UPLANET_SIGNAL));
        assert_eq!(crate::Mime::parse("appLicaTION/VNd.uplANet.SIgnAL"), Ok(APPLICATION_VND_UPLANET_SIGNAL));
    }

    /// `application/vnd.uri-map`
    pub const APPLICATION_VND_URI_MAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndUriMap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_uri_map_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.uri-map"), Ok(APPLICATION_VND_URI_MAP));
        assert_eq!(crate::Mime::parse("aPpLicAtiOn/VND.uri-maP"), Ok(APPLICATION_VND_URI_MAP));
    }

    /// `application/vnd.valve.source.material`
    pub const APPLICATION_VND_VALVE_SOURCE_MATERIAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndValveSourceMaterial),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_valve_source_material_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.valve.source.material"), Ok(APPLICATION_VND_VALVE_SOURCE_MATERIAL));
        assert_eq!(crate::Mime::parse("AppliCatioN/Vnd.VALVe.soUrCe.mATERiAl"), Ok(APPLICATION_VND_VALVE_SOURCE_MATERIAL));
    }

    /// `application/vnd.vcx`
    pub const APPLICATION_VND_VCX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVcx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_vcx_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vcx"), Ok(APPLICATION_VND_VCX));
        assert_eq!(crate::Mime::parse("APPlicAtiON/Vnd.vcX"), Ok(APPLICATION_VND_VCX));
    }

    /// `application/vnd.vd-study`
    pub const APPLICATION_VND_VD_STUDY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVdStudy),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_vd_study_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vd-study"), Ok(APPLICATION_VND_VD_STUDY));
        assert_eq!(crate::Mime::parse("APpLicATioN/vNd.vd-STUDY"), Ok(APPLICATION_VND_VD_STUDY));
    }

    /// `application/vnd.vectorworks`
    pub const APPLICATION_VND_VECTORWORKS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVectorworks),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_vectorworks_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vectorworks"), Ok(APPLICATION_VND_VECTORWORKS));
        assert_eq!(crate::Mime::parse("applicATION/VND.VEctOrWORKS"), Ok(APPLICATION_VND_VECTORWORKS));
    }

    /// `application/vnd.vel+json`
    pub const APPLICATION_VND_VEL_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVel),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_vel_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vel+json"), Ok(APPLICATION_VND_VEL_JSON));
        assert_eq!(crate::Mime::parse("appLICation/vNd.Vel+jsoN"), Ok(APPLICATION_VND_VEL_JSON));
    }

    /// `application/vnd.verimatrix.vcas`
    pub const APPLICATION_VND_VERIMATRIX_VCAS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVerimatrixVcas),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_verimatrix_vcas_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.verimatrix.vcas"), Ok(APPLICATION_VND_VERIMATRIX_VCAS));
        assert_eq!(crate::Mime::parse("ApPlIcatiON/VnD.VERImaTrix.VcAs"), Ok(APPLICATION_VND_VERIMATRIX_VCAS));
    }

    /// `application/vnd.veritone.aion+json`
    pub const APPLICATION_VND_VERITONE_AION_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVeritoneAion),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_veritone_aion_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.veritone.aion+json"), Ok(APPLICATION_VND_VERITONE_AION_JSON));
        assert_eq!(crate::Mime::parse("APplICatiOn/vnD.VERITonE.aiOn+JSoN"), Ok(APPLICATION_VND_VERITONE_AION_JSON));
    }

    /// `application/vnd.veryant.thin`
    pub const APPLICATION_VND_VERYANT_THIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVeryantThin),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_veryant_thin_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.veryant.thin"), Ok(APPLICATION_VND_VERYANT_THIN));
        assert_eq!(crate::Mime::parse("apPlIcAtiOn/vnd.vERyAnt.tHin"), Ok(APPLICATION_VND_VERYANT_THIN));
    }

    /// `application/vnd.ves.encrypted`
    pub const APPLICATION_VND_VES_ENCRYPTED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVesEncrypted),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_ves_encrypted_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.ves.encrypted"), Ok(APPLICATION_VND_VES_ENCRYPTED));
        assert_eq!(crate::Mime::parse("ApPlIcAtIon/VnD.vES.eNCryPtED"), Ok(APPLICATION_VND_VES_ENCRYPTED));
    }

    /// `application/vnd.vidsoft.vidconference`
    pub const APPLICATION_VND_VIDSOFT_VIDCONFERENCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVidsoftVidconference),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_vidsoft_vidconference_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vidsoft.vidconference"), Ok(APPLICATION_VND_VIDSOFT_VIDCONFERENCE));
        assert_eq!(crate::Mime::parse("ApplicAtIOn/vnD.ViDSoft.VIDCoNfErENCe"), Ok(APPLICATION_VND_VIDSOFT_VIDCONFERENCE));
    }

    /// `application/vnd.visio`
    pub const APPLICATION_VND_VISIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVisio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_visio_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.visio"), Ok(APPLICATION_VND_VISIO));
        assert_eq!(crate::Mime::parse("ApPLicaTION/vNd.VISiO"), Ok(APPLICATION_VND_VISIO));
    }

    /// `application/vnd.visionary`
    pub const APPLICATION_VND_VISIONARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVisionary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_visionary_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.visionary"), Ok(APPLICATION_VND_VISIONARY));
        assert_eq!(crate::Mime::parse("aPPLiCAtiOn/VND.ViSIOnarY"), Ok(APPLICATION_VND_VISIONARY));
    }

    /// `application/vnd.vividence.scriptfile`
    pub const APPLICATION_VND_VIVIDENCE_SCRIPTFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVividenceScriptfile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_vividence_scriptfile_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vividence.scriptfile"), Ok(APPLICATION_VND_VIVIDENCE_SCRIPTFILE));
        assert_eq!(crate::Mime::parse("AppLICatIon/VnD.viViDEnce.SCriPTfiLE"), Ok(APPLICATION_VND_VIVIDENCE_SCRIPTFILE));
    }

    /// `application/vnd.vsf`
    pub const APPLICATION_VND_VSF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndVsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_vsf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.vsf"), Ok(APPLICATION_VND_VSF));
        assert_eq!(crate::Mime::parse("APPlicaTiON/vnD.Vsf"), Ok(APPLICATION_VND_VSF));
    }

    /// `application/vnd.wap.sic`
    pub const APPLICATION_VND_WAP_SIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWapSic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wap_sic_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wap.sic"), Ok(APPLICATION_VND_WAP_SIC));
        assert_eq!(crate::Mime::parse("appLicaTIoN/vND.waP.sIC"), Ok(APPLICATION_VND_WAP_SIC));
    }

    /// `application/vnd.wap.slc`
    pub const APPLICATION_VND_WAP_SLC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWapSlc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wap_slc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wap.slc"), Ok(APPLICATION_VND_WAP_SLC));
        assert_eq!(crate::Mime::parse("aPpLiCATIOn/vnd.WAp.slC"), Ok(APPLICATION_VND_WAP_SLC));
    }

    /// `application/vnd.wap.wbxml`
    pub const APPLICATION_VND_WAP_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWapWbxml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wap_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wap.wbxml"), Ok(APPLICATION_VND_WAP_WBXML));
        assert_eq!(crate::Mime::parse("apPlIcAtiON/VNd.WAP.wbxMl"), Ok(APPLICATION_VND_WAP_WBXML));
    }

    /// `application/vnd.wap.wmlc`
    pub const APPLICATION_VND_WAP_WMLC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWapWmlc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wap_wmlc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wap.wmlc"), Ok(APPLICATION_VND_WAP_WMLC));
        assert_eq!(crate::Mime::parse("APPLicATIOn/Vnd.WAp.wMlc"), Ok(APPLICATION_VND_WAP_WMLC));
    }

    /// `application/vnd.wap.wmlscriptc`
    pub const APPLICATION_VND_WAP_WMLSCRIPTC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWapWmlscriptc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wap_wmlscriptc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wap.wmlscriptc"), Ok(APPLICATION_VND_WAP_WMLSCRIPTC));
        assert_eq!(crate::Mime::parse("APPLicAtIoN/VND.wAp.wmLscRIPtC"), Ok(APPLICATION_VND_WAP_WMLSCRIPTC));
    }

    /// `application/vnd.webturbo`
    pub const APPLICATION_VND_WEBTURBO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWebturbo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_webturbo_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.webturbo"), Ok(APPLICATION_VND_WEBTURBO));
        assert_eq!(crate::Mime::parse("APPlicAtIon/vNd.wEbtUrBO"), Ok(APPLICATION_VND_WEBTURBO));
    }

    /// `application/vnd.wfa.dpp`
    pub const APPLICATION_VND_WFA_DPP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWfaDpp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wfa_dpp_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wfa.dpp"), Ok(APPLICATION_VND_WFA_DPP));
        assert_eq!(crate::Mime::parse("aPPliCAtioN/vnD.WfA.DPP"), Ok(APPLICATION_VND_WFA_DPP));
    }

    /// `application/vnd.wfa.p2p`
    pub const APPLICATION_VND_WFA_P2P: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWfaP2p),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wfa_p2p_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wfa.p2p"), Ok(APPLICATION_VND_WFA_P2P));
        assert_eq!(crate::Mime::parse("appLICaTIon/VNd.WFa.p2p"), Ok(APPLICATION_VND_WFA_P2P));
    }

    /// `application/vnd.wfa.wsc`
    pub const APPLICATION_VND_WFA_WSC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWfaWsc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wfa_wsc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wfa.wsc"), Ok(APPLICATION_VND_WFA_WSC));
        assert_eq!(crate::Mime::parse("APPlicATION/VND.Wfa.wSC"), Ok(APPLICATION_VND_WFA_WSC));
    }

    /// `application/vnd.windows.devicepairing`
    pub const APPLICATION_VND_WINDOWS_DEVICEPAIRING: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWindowsDevicepairing),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_windows_devicepairing_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.windows.devicepairing"), Ok(APPLICATION_VND_WINDOWS_DEVICEPAIRING));
        assert_eq!(crate::Mime::parse("APPLIcATIOn/Vnd.wiNdowS.deVICEPAiriNg"), Ok(APPLICATION_VND_WINDOWS_DEVICEPAIRING));
    }

    /// `application/vnd.wmc`
    pub const APPLICATION_VND_WMC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWmc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wmc_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wmc"), Ok(APPLICATION_VND_WMC));
        assert_eq!(crate::Mime::parse("apPLIcATION/vND.WMc"), Ok(APPLICATION_VND_WMC));
    }

    /// `application/vnd.wmf.bootstrap`
    pub const APPLICATION_VND_WMF_BOOTSTRAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWmfBootstrap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wmf_bootstrap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wmf.bootstrap"), Ok(APPLICATION_VND_WMF_BOOTSTRAP));
        assert_eq!(crate::Mime::parse("apPLicAtION/VnD.wMF.bOOTstrap"), Ok(APPLICATION_VND_WMF_BOOTSTRAP));
    }

    /// `application/vnd.wolfram.mathematica`
    pub const APPLICATION_VND_WOLFRAM_MATHEMATICA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWolframMathematica),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wolfram_mathematica_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wolfram.mathematica"), Ok(APPLICATION_VND_WOLFRAM_MATHEMATICA));
        assert_eq!(crate::Mime::parse("AppLICATIon/vNd.wolfRam.matHeMaTicA"), Ok(APPLICATION_VND_WOLFRAM_MATHEMATICA));
    }

    /// `application/vnd.wolfram.mathematica.package`
    pub const APPLICATION_VND_WOLFRAM_MATHEMATICA_PACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWolframMathematicaPackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wolfram_mathematica_package_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wolfram.mathematica.package"), Ok(APPLICATION_VND_WOLFRAM_MATHEMATICA_PACKAGE));
        assert_eq!(crate::Mime::parse("ApPLiCAtIoN/vNd.WolfRaM.maTheMATiCA.Package"), Ok(APPLICATION_VND_WOLFRAM_MATHEMATICA_PACKAGE));
    }

    /// `application/vnd.wolfram.player`
    pub const APPLICATION_VND_WOLFRAM_PLAYER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWolframPlayer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wolfram_player_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wolfram.player"), Ok(APPLICATION_VND_WOLFRAM_PLAYER));
        assert_eq!(crate::Mime::parse("apPlIcaTion/vnD.wOLFrAm.PlayEr"), Ok(APPLICATION_VND_WOLFRAM_PLAYER));
    }

    /// `application/vnd.wordperfect`
    pub const APPLICATION_VND_WORDPERFECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWordperfect),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wordperfect_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wordperfect"), Ok(APPLICATION_VND_WORDPERFECT));
        assert_eq!(crate::Mime::parse("ApPLIcatIon/VNd.wordpERfecT"), Ok(APPLICATION_VND_WORDPERFECT));
    }

    /// `application/vnd.wordperfect5.1`
    pub const APPLICATION_VND_WORDPERFECT5_1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWordperfect51),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wordperfect5_1_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wordperfect5.1"), Ok(APPLICATION_VND_WORDPERFECT5_1));
        assert_eq!(crate::Mime::parse("APPLiCatIon/VNd.WOrDpErFecT5.1"), Ok(APPLICATION_VND_WORDPERFECT5_1));
    }

    /// `application/vnd.wqd`
    pub const APPLICATION_VND_WQD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWqd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wqd_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wqd"), Ok(APPLICATION_VND_WQD));
        assert_eq!(crate::Mime::parse("ApPLicAtiON/VNd.wQD"), Ok(APPLICATION_VND_WQD));
    }

    /// `application/vnd.wrq-hp3000-labelled`
    pub const APPLICATION_VND_WRQ_HP3000_LABELLED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWrqHp3000Labelled),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wrq_hp3000_labelled_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wrq-hp3000-labelled"), Ok(APPLICATION_VND_WRQ_HP3000_LABELLED));
        assert_eq!(crate::Mime::parse("APPLicatiOn/vNd.WRq-hp3000-LabeLlEd"), Ok(APPLICATION_VND_WRQ_HP3000_LABELLED));
    }

    /// `application/vnd.wt.stf`
    pub const APPLICATION_VND_WT_STF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWtStf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_wt_stf_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wt.stf"), Ok(APPLICATION_VND_WT_STF));
        assert_eq!(crate::Mime::parse("aPpLicAtioN/VNd.wt.sTf"), Ok(APPLICATION_VND_WT_STF));
    }

    /// `application/vnd.wv.csp+wbxml`
    pub const APPLICATION_VND_WV_CSP_WBXML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWvCsp),
        suffix: Some(crate::Name::Interned(super::Suffix::Wbxml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_wv_csp_wbxml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wv.csp+wbxml"), Ok(APPLICATION_VND_WV_CSP_WBXML));
        assert_eq!(crate::Mime::parse("APpLIcatIOn/vND.WV.csP+wbxmL"), Ok(APPLICATION_VND_WV_CSP_WBXML));
    }

    /// `application/vnd.wv.csp+xml`
    pub const APPLICATION_VND_WV_CSP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWvCsp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_wv_csp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wv.csp+xml"), Ok(APPLICATION_VND_WV_CSP_XML));
        assert_eq!(crate::Mime::parse("appLICatION/vnd.WV.csP+xMl"), Ok(APPLICATION_VND_WV_CSP_XML));
    }

    /// `application/vnd.wv.ssp+xml`
    pub const APPLICATION_VND_WV_SSP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndWvSsp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_wv_ssp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.wv.ssp+xml"), Ok(APPLICATION_VND_WV_SSP_XML));
        assert_eq!(crate::Mime::parse("applICATiON/Vnd.wV.sSp+xml"), Ok(APPLICATION_VND_WV_SSP_XML));
    }

    /// `application/vnd.xacml+json`
    pub const APPLICATION_VND_XACML_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXacml),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_xacml_json_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xacml+json"), Ok(APPLICATION_VND_XACML_JSON));
        assert_eq!(crate::Mime::parse("APPLicAtiOn/VNd.xacML+jsON"), Ok(APPLICATION_VND_XACML_JSON));
    }

    /// `application/vnd.xara`
    pub const APPLICATION_VND_XARA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXara),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xara_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xara"), Ok(APPLICATION_VND_XARA));
        assert_eq!(crate::Mime::parse("aPPLICaTion/VNd.xaRa"), Ok(APPLICATION_VND_XARA));
    }

    /// `application/vnd.xfdl`
    pub const APPLICATION_VND_XFDL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXfdl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xfdl_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xfdl"), Ok(APPLICATION_VND_XFDL));
        assert_eq!(crate::Mime::parse("applIcAtIon/VNd.Xfdl"), Ok(APPLICATION_VND_XFDL));
    }

    /// `application/vnd.xfdl.webform`
    pub const APPLICATION_VND_XFDL_WEBFORM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXfdlWebform),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xfdl_webform_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xfdl.webform"), Ok(APPLICATION_VND_XFDL_WEBFORM));
        assert_eq!(crate::Mime::parse("aPpliCaTion/vnD.xFDl.WebFoRM"), Ok(APPLICATION_VND_XFDL_WEBFORM));
    }

    /// `application/vnd.xmi+xml`
    pub const APPLICATION_VND_XMI_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXmi),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_xmi_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xmi+xml"), Ok(APPLICATION_VND_XMI_XML));
        assert_eq!(crate::Mime::parse("aPplIcaTiOn/Vnd.XMi+XmL"), Ok(APPLICATION_VND_XMI_XML));
    }

    /// `application/vnd.xmpie.cpkg`
    pub const APPLICATION_VND_XMPIE_CPKG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXmpieCpkg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xmpie_cpkg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xmpie.cpkg"), Ok(APPLICATION_VND_XMPIE_CPKG));
        assert_eq!(crate::Mime::parse("APplICATIOn/VNd.XmPIe.cPkg"), Ok(APPLICATION_VND_XMPIE_CPKG));
    }

    /// `application/vnd.xmpie.dpkg`
    pub const APPLICATION_VND_XMPIE_DPKG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXmpieDpkg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xmpie_dpkg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xmpie.dpkg"), Ok(APPLICATION_VND_XMPIE_DPKG));
        assert_eq!(crate::Mime::parse("apPlIcAtIOn/VNd.xMPie.DPkg"), Ok(APPLICATION_VND_XMPIE_DPKG));
    }

    /// `application/vnd.xmpie.plan`
    pub const APPLICATION_VND_XMPIE_PLAN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXmpiePlan),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xmpie_plan_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xmpie.plan"), Ok(APPLICATION_VND_XMPIE_PLAN));
        assert_eq!(crate::Mime::parse("apPLiCaTiOn/VnD.XmPie.plAn"), Ok(APPLICATION_VND_XMPIE_PLAN));
    }

    /// `application/vnd.xmpie.ppkg`
    pub const APPLICATION_VND_XMPIE_PPKG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXmpiePpkg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xmpie_ppkg_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xmpie.ppkg"), Ok(APPLICATION_VND_XMPIE_PPKG));
        assert_eq!(crate::Mime::parse("aPPlICATioN/Vnd.XMpiE.ppkg"), Ok(APPLICATION_VND_XMPIE_PPKG));
    }

    /// `application/vnd.xmpie.xlim`
    pub const APPLICATION_VND_XMPIE_XLIM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndXmpieXlim),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_xmpie_xlim_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.xmpie.xlim"), Ok(APPLICATION_VND_XMPIE_XLIM));
        assert_eq!(crate::Mime::parse("aPplIcAtiON/VNd.XMPie.XlIm"), Ok(APPLICATION_VND_XMPIE_XLIM));
    }

    /// `application/vnd.yamaha.hv-dic`
    pub const APPLICATION_VND_YAMAHA_HV_DIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaHvDic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_hv_dic_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.hv-dic"), Ok(APPLICATION_VND_YAMAHA_HV_DIC));
        assert_eq!(crate::Mime::parse("ApPLicATIoN/vND.YAMAhA.hV-dic"), Ok(APPLICATION_VND_YAMAHA_HV_DIC));
    }

    /// `application/vnd.yamaha.hv-script`
    pub const APPLICATION_VND_YAMAHA_HV_SCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaHvScript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_hv_script_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.hv-script"), Ok(APPLICATION_VND_YAMAHA_HV_SCRIPT));
        assert_eq!(crate::Mime::parse("APPLiCATiON/vnD.YAMAhA.Hv-scRIPT"), Ok(APPLICATION_VND_YAMAHA_HV_SCRIPT));
    }

    /// `application/vnd.yamaha.hv-voice`
    pub const APPLICATION_VND_YAMAHA_HV_VOICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaHvVoice),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_hv_voice_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.hv-voice"), Ok(APPLICATION_VND_YAMAHA_HV_VOICE));
        assert_eq!(crate::Mime::parse("apPLiCAtIOn/VnD.yAMAHa.hV-voICE"), Ok(APPLICATION_VND_YAMAHA_HV_VOICE));
    }

    /// `application/vnd.yamaha.openscoreformat`
    pub const APPLICATION_VND_YAMAHA_OPENSCOREFORMAT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaOpenscoreformat),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_openscoreformat_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.openscoreformat"), Ok(APPLICATION_VND_YAMAHA_OPENSCOREFORMAT));
        assert_eq!(crate::Mime::parse("aPPlIcATIOn/vnd.yaMaHA.oPeNScoReFoRmAt"), Ok(APPLICATION_VND_YAMAHA_OPENSCOREFORMAT));
    }

    /// `application/vnd.yamaha.openscoreformat.osfpvg+xml`
    pub const APPLICATION_VND_YAMAHA_OPENSCOREFORMAT_OSFPVG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaOpenscoreformatOsfpvg),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_openscoreformat_osfpvg_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.openscoreformat.osfpvg+xml"), Ok(APPLICATION_VND_YAMAHA_OPENSCOREFORMAT_OSFPVG_XML));
        assert_eq!(crate::Mime::parse("aPPLICATION/VNd.yAmaHA.oPENSCOREFORMat.osfPVg+xMl"), Ok(APPLICATION_VND_YAMAHA_OPENSCOREFORMAT_OSFPVG_XML));
    }

    /// `application/vnd.yamaha.remote-setup`
    pub const APPLICATION_VND_YAMAHA_REMOTE_SETUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaRemoteSetup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_remote_setup_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.remote-setup"), Ok(APPLICATION_VND_YAMAHA_REMOTE_SETUP));
        assert_eq!(crate::Mime::parse("applICaTION/vNd.YaMaHa.RemoTe-SetUP"), Ok(APPLICATION_VND_YAMAHA_REMOTE_SETUP));
    }

    /// `application/vnd.yamaha.smaf-audio`
    pub const APPLICATION_VND_YAMAHA_SMAF_AUDIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaSmafAudio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_smaf_audio_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.smaf-audio"), Ok(APPLICATION_VND_YAMAHA_SMAF_AUDIO));
        assert_eq!(crate::Mime::parse("APpLicAtIoN/vNd.yaMAHA.SMaF-AuDIO"), Ok(APPLICATION_VND_YAMAHA_SMAF_AUDIO));
    }

    /// `application/vnd.yamaha.smaf-phrase`
    pub const APPLICATION_VND_YAMAHA_SMAF_PHRASE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaSmafPhrase),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_smaf_phrase_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.smaf-phrase"), Ok(APPLICATION_VND_YAMAHA_SMAF_PHRASE));
        assert_eq!(crate::Mime::parse("APpliCATIOn/vNd.yaMAhA.sMaF-PHraSe"), Ok(APPLICATION_VND_YAMAHA_SMAF_PHRASE));
    }

    /// `application/vnd.yamaha.through-ngn`
    pub const APPLICATION_VND_YAMAHA_THROUGH_NGN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaThroughNgn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_through_ngn_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.through-ngn"), Ok(APPLICATION_VND_YAMAHA_THROUGH_NGN));
        assert_eq!(crate::Mime::parse("ApPLicATIon/vnd.yaMaha.tHrOUgH-NGN"), Ok(APPLICATION_VND_YAMAHA_THROUGH_NGN));
    }

    /// `application/vnd.yamaha.tunnel-udpencap`
    pub const APPLICATION_VND_YAMAHA_TUNNEL_UDPENCAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYamahaTunnelUdpencap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yamaha_tunnel_udpencap_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yamaha.tunnel-udpencap"), Ok(APPLICATION_VND_YAMAHA_TUNNEL_UDPENCAP));
        assert_eq!(crate::Mime::parse("APPlicatiON/vnd.yamAHa.tUNNel-UDpEncap"), Ok(APPLICATION_VND_YAMAHA_TUNNEL_UDPENCAP));
    }

    /// `application/vnd.yaoweme`
    pub const APPLICATION_VND_YAOWEME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYaoweme),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yaoweme_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yaoweme"), Ok(APPLICATION_VND_YAOWEME));
        assert_eq!(crate::Mime::parse("aPpliCaTIon/vNd.YaOwEME"), Ok(APPLICATION_VND_YAOWEME));
    }

    /// `application/vnd.yellowriver-custom-menu`
    pub const APPLICATION_VND_YELLOWRIVER_CUSTOM_MENU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndYellowriverCustomMenu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_yellowriver_custom_menu_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.yellowriver-custom-menu"), Ok(APPLICATION_VND_YELLOWRIVER_CUSTOM_MENU));
        assert_eq!(crate::Mime::parse("apPlicaTION/vND.YELLoWRIVEr-custoM-MENu"), Ok(APPLICATION_VND_YELLOWRIVER_CUSTOM_MENU));
    }

    /// `application/vnd.zul`
    pub const APPLICATION_VND_ZUL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndZul),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vnd_zul_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.zul"), Ok(APPLICATION_VND_ZUL));
        assert_eq!(crate::Mime::parse("aPPLICATiON/VNd.ZUl"), Ok(APPLICATION_VND_ZUL));
    }

    /// `application/vnd.zzazz.deck+xml`
    pub const APPLICATION_VND_ZZAZZ_DECK_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VndZzazzDeck),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_vnd_zzazz_deck_xml_parse() {
        assert_eq!(crate::Mime::parse("application/vnd.zzazz.deck+xml"), Ok(APPLICATION_VND_ZZAZZ_DECK_XML));
        assert_eq!(crate::Mime::parse("APpLicatioN/vnd.zzAzz.dEck+XML"), Ok(APPLICATION_VND_ZZAZZ_DECK_XML));
    }

    /// `application/voicexml+xml`
    pub const APPLICATION_VOICEXML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Voicexml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_voicexml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/voicexml+xml"), Ok(APPLICATION_VOICEXML_XML));
        assert_eq!(crate::Mime::parse("apPLicAtion/vOIcExMl+xmL"), Ok(APPLICATION_VOICEXML_XML));
    }

    /// `application/voucher-cms+json`
    pub const APPLICATION_VOUCHER_CMS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VoucherCms),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_voucher_cms_json_parse() {
        assert_eq!(crate::Mime::parse("application/voucher-cms+json"), Ok(APPLICATION_VOUCHER_CMS_JSON));
        assert_eq!(crate::Mime::parse("aPpLICaTIon/voUChER-CMS+JSOn"), Ok(APPLICATION_VOUCHER_CMS_JSON));
    }

    /// `application/vq-rtcpxr`
    pub const APPLICATION_VQ_RTCPXR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::VqRtcpxr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_vq_rtcpxr_parse() {
        assert_eq!(crate::Mime::parse("application/vq-rtcpxr"), Ok(APPLICATION_VQ_RTCPXR));
        assert_eq!(crate::Mime::parse("APPLICaTIoN/VQ-RTcPxR"), Ok(APPLICATION_VQ_RTCPXR));
    }

    /// `application/wasm`
    pub const APPLICATION_WASM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Wasm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_wasm_parse() {
        assert_eq!(crate::Mime::parse("application/wasm"), Ok(APPLICATION_WASM));
        assert_eq!(crate::Mime::parse("ApplICatION/wAsm"), Ok(APPLICATION_WASM));
    }

    /// `application/watcherinfo+xml`
    pub const APPLICATION_WATCHERINFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Watcherinfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_watcherinfo_xml_parse() {
        assert_eq!(crate::Mime::parse("application/watcherinfo+xml"), Ok(APPLICATION_WATCHERINFO_XML));
        assert_eq!(crate::Mime::parse("ApPLIcaTIon/WATChEriNfO+Xml"), Ok(APPLICATION_WATCHERINFO_XML));
    }

    /// `application/webpush-options+json`
    pub const APPLICATION_WEBPUSH_OPTIONS_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::WebpushOptions),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_webpush_options_json_parse() {
        assert_eq!(crate::Mime::parse("application/webpush-options+json"), Ok(APPLICATION_WEBPUSH_OPTIONS_JSON));
        assert_eq!(crate::Mime::parse("aPPlicatIOn/wEBpUSH-oPTionS+jsON"), Ok(APPLICATION_WEBPUSH_OPTIONS_JSON));
    }

    /// `application/whoispp-query`
    pub const APPLICATION_WHOISPP_QUERY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::WhoisppQuery),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_whoispp_query_parse() {
        assert_eq!(crate::Mime::parse("application/whoispp-query"), Ok(APPLICATION_WHOISPP_QUERY));
        assert_eq!(crate::Mime::parse("aPplICaTIOn/wHoisPP-qUery"), Ok(APPLICATION_WHOISPP_QUERY));
    }

    /// `application/whoispp-response`
    pub const APPLICATION_WHOISPP_RESPONSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::WhoisppResponse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_whoispp_response_parse() {
        assert_eq!(crate::Mime::parse("application/whoispp-response"), Ok(APPLICATION_WHOISPP_RESPONSE));
        assert_eq!(crate::Mime::parse("APPlicAtIon/whOispP-RESPONsE"), Ok(APPLICATION_WHOISPP_RESPONSE));
    }

    /// `application/widget`
    pub const APPLICATION_WIDGET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Widget),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_widget_parse() {
        assert_eq!(crate::Mime::parse("application/widget"), Ok(APPLICATION_WIDGET));
        assert_eq!(crate::Mime::parse("APPlicaTiON/WidGet"), Ok(APPLICATION_WIDGET));
    }

    /// `application/wita`
    pub const APPLICATION_WITA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Wita),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_wita_parse() {
        assert_eq!(crate::Mime::parse("application/wita"), Ok(APPLICATION_WITA));
        assert_eq!(crate::Mime::parse("aPplIcatION/WITA"), Ok(APPLICATION_WITA));
    }

    /// `application/wordperfect5.1`
    pub const APPLICATION_WORDPERFECT5_1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Wordperfect51),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_wordperfect5_1_parse() {
        assert_eq!(crate::Mime::parse("application/wordperfect5.1"), Ok(APPLICATION_WORDPERFECT5_1));
        assert_eq!(crate::Mime::parse("APPLIcATIon/wordPErFECT5.1"), Ok(APPLICATION_WORDPERFECT5_1));
    }

    /// `application/wsdl+xml`
    pub const APPLICATION_WSDL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Wsdl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_wsdl_xml_parse() {
        assert_eq!(crate::Mime::parse("application/wsdl+xml"), Ok(APPLICATION_WSDL_XML));
        assert_eq!(crate::Mime::parse("apPliCAtIon/Wsdl+xmL"), Ok(APPLICATION_WSDL_XML));
    }

    /// `application/wspolicy+xml`
    pub const APPLICATION_WSPOLICY_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Wspolicy),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_wspolicy_xml_parse() {
        assert_eq!(crate::Mime::parse("application/wspolicy+xml"), Ok(APPLICATION_WSPOLICY_XML));
        assert_eq!(crate::Mime::parse("APPLICatiOn/WspOLicy+Xml"), Ok(APPLICATION_WSPOLICY_XML));
    }

    /// `application/x-123`
    pub const APPLICATION_X_123: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::X123),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_123_parse() {
        assert_eq!(crate::Mime::parse("application/x-123"), Ok(APPLICATION_X_123));
        assert_eq!(crate::Mime::parse("AppLIcatioN/x-123"), Ok(APPLICATION_X_123));
    }

    /// `application/x-7z-compressed`
    pub const APPLICATION_X_7Z_COMPRESSED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::X7zCompressed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_7z_compressed_parse() {
        assert_eq!(crate::Mime::parse("application/x-7z-compressed"), Ok(APPLICATION_X_7Z_COMPRESSED));
        assert_eq!(crate::Mime::parse("AppliCaTiOn/X-7Z-CompReSsed"), Ok(APPLICATION_X_7Z_COMPRESSED));
    }

    /// `application/x-abiword`
    pub const APPLICATION_X_ABIWORD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XAbiword),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_abiword_parse() {
        assert_eq!(crate::Mime::parse("application/x-abiword"), Ok(APPLICATION_X_ABIWORD));
        assert_eq!(crate::Mime::parse("APplIcAtION/x-ABiwOrD"), Ok(APPLICATION_X_ABIWORD));
    }

    /// `application/x-apple-diskimage`
    pub const APPLICATION_X_APPLE_DISKIMAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XAppleDiskimage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_apple_diskimage_parse() {
        assert_eq!(crate::Mime::parse("application/x-apple-diskimage"), Ok(APPLICATION_X_APPLE_DISKIMAGE));
        assert_eq!(crate::Mime::parse("APPlicaTiON/X-aPPLe-dISkIMAGE"), Ok(APPLICATION_X_APPLE_DISKIMAGE));
    }

    /// `application/x-bcpio`
    pub const APPLICATION_X_BCPIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XBcpio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_bcpio_parse() {
        assert_eq!(crate::Mime::parse("application/x-bcpio"), Ok(APPLICATION_X_BCPIO));
        assert_eq!(crate::Mime::parse("applIcAtIon/X-BCpio"), Ok(APPLICATION_X_BCPIO));
    }

    /// `application/x-bittorrent`
    pub const APPLICATION_X_BITTORRENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XBittorrent),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_bittorrent_parse() {
        assert_eq!(crate::Mime::parse("application/x-bittorrent"), Ok(APPLICATION_X_BITTORRENT));
        assert_eq!(crate::Mime::parse("apPLIcAtION/x-BITtORrENt"), Ok(APPLICATION_X_BITTORRENT));
    }

    /// `application/x-cdf`
    pub const APPLICATION_X_CDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XCdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_cdf_parse() {
        assert_eq!(crate::Mime::parse("application/x-cdf"), Ok(APPLICATION_X_CDF));
        assert_eq!(crate::Mime::parse("APpLICaTiOn/x-cDf"), Ok(APPLICATION_X_CDF));
    }

    /// `application/x-cdlink`
    pub const APPLICATION_X_CDLINK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XCdlink),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_cdlink_parse() {
        assert_eq!(crate::Mime::parse("application/x-cdlink"), Ok(APPLICATION_X_CDLINK));
        assert_eq!(crate::Mime::parse("apPLICaTiON/x-CdLink"), Ok(APPLICATION_X_CDLINK));
    }

    /// `application/x-comsol`
    pub const APPLICATION_X_COMSOL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XComsol),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_comsol_parse() {
        assert_eq!(crate::Mime::parse("application/x-comsol"), Ok(APPLICATION_X_COMSOL));
        assert_eq!(crate::Mime::parse("applICAtion/X-CoMsoL"), Ok(APPLICATION_X_COMSOL));
    }

    /// `application/x-cpio`
    pub const APPLICATION_X_CPIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XCpio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_cpio_parse() {
        assert_eq!(crate::Mime::parse("application/x-cpio"), Ok(APPLICATION_X_CPIO));
        assert_eq!(crate::Mime::parse("aPPlIcAtioN/x-CPIo"), Ok(APPLICATION_X_CPIO));
    }

    /// `application/x-csh`
    pub const APPLICATION_X_CSH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XCsh),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_csh_parse() {
        assert_eq!(crate::Mime::parse("application/x-csh"), Ok(APPLICATION_X_CSH));
        assert_eq!(crate::Mime::parse("appLIcAtiOn/x-CSH"), Ok(APPLICATION_X_CSH));
    }

    /// `application/x-director`
    pub const APPLICATION_X_DIRECTOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XDirector),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_director_parse() {
        assert_eq!(crate::Mime::parse("application/x-director"), Ok(APPLICATION_X_DIRECTOR));
        assert_eq!(crate::Mime::parse("aPPlIcATiON/X-direCtor"), Ok(APPLICATION_X_DIRECTOR));
    }

    /// `application/x-doom`
    pub const APPLICATION_X_DOOM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XDoom),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_doom_parse() {
        assert_eq!(crate::Mime::parse("application/x-doom"), Ok(APPLICATION_X_DOOM));
        assert_eq!(crate::Mime::parse("aPplICaTioN/X-dooM"), Ok(APPLICATION_X_DOOM));
    }

    /// `application/x-dvi`
    pub const APPLICATION_X_DVI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XDvi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_dvi_parse() {
        assert_eq!(crate::Mime::parse("application/x-dvi"), Ok(APPLICATION_X_DVI));
        assert_eq!(crate::Mime::parse("APplicatIOn/x-DvI"), Ok(APPLICATION_X_DVI));
    }

    /// `application/x-font`
    pub const APPLICATION_X_FONT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XFont),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_font_parse() {
        assert_eq!(crate::Mime::parse("application/x-font"), Ok(APPLICATION_X_FONT));
        assert_eq!(crate::Mime::parse("APplIcATIoN/X-foNT"), Ok(APPLICATION_X_FONT));
    }

    /// `application/x-font-pcf`
    pub const APPLICATION_X_FONT_PCF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XFontPcf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_font_pcf_parse() {
        assert_eq!(crate::Mime::parse("application/x-font-pcf"), Ok(APPLICATION_X_FONT_PCF));
        assert_eq!(crate::Mime::parse("ApPLicatioN/x-FOnT-pCF"), Ok(APPLICATION_X_FONT_PCF));
    }

    /// `application/x-freemind`
    pub const APPLICATION_X_FREEMIND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XFreemind),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_freemind_parse() {
        assert_eq!(crate::Mime::parse("application/x-freemind"), Ok(APPLICATION_X_FREEMIND));
        assert_eq!(crate::Mime::parse("aPpLiCatIon/X-FREEmIND"), Ok(APPLICATION_X_FREEMIND));
    }

    /// `application/x-ganttproject`
    pub const APPLICATION_X_GANTTPROJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XGanttproject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ganttproject_parse() {
        assert_eq!(crate::Mime::parse("application/x-ganttproject"), Ok(APPLICATION_X_GANTTPROJECT));
        assert_eq!(crate::Mime::parse("apPLIcatiOn/x-gaNTtPROjeCT"), Ok(APPLICATION_X_GANTTPROJECT));
    }

    /// `application/x-gnumeric`
    pub const APPLICATION_X_GNUMERIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XGnumeric),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_gnumeric_parse() {
        assert_eq!(crate::Mime::parse("application/x-gnumeric"), Ok(APPLICATION_X_GNUMERIC));
        assert_eq!(crate::Mime::parse("apPLIcation/X-GNUmERIc"), Ok(APPLICATION_X_GNUMERIC));
    }

    /// `application/x-go-sgf`
    pub const APPLICATION_X_GO_SGF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XGoSgf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_go_sgf_parse() {
        assert_eq!(crate::Mime::parse("application/x-go-sgf"), Ok(APPLICATION_X_GO_SGF));
        assert_eq!(crate::Mime::parse("ApplicatiOn/X-gO-sGF"), Ok(APPLICATION_X_GO_SGF));
    }

    /// `application/x-graphing-calculator`
    pub const APPLICATION_X_GRAPHING_CALCULATOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XGraphingCalculator),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_graphing_calculator_parse() {
        assert_eq!(crate::Mime::parse("application/x-graphing-calculator"), Ok(APPLICATION_X_GRAPHING_CALCULATOR));
        assert_eq!(crate::Mime::parse("AppLICAtion/X-graphinG-caLCulatOR"), Ok(APPLICATION_X_GRAPHING_CALCULATOR));
    }

    /// `application/x-gtar`
    pub const APPLICATION_X_GTAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XGtar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_gtar_parse() {
        assert_eq!(crate::Mime::parse("application/x-gtar"), Ok(APPLICATION_X_GTAR));
        assert_eq!(crate::Mime::parse("appLicAtiON/X-GTAR"), Ok(APPLICATION_X_GTAR));
    }

    /// `application/x-gtar-compressed`
    pub const APPLICATION_X_GTAR_COMPRESSED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XGtarCompressed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_gtar_compressed_parse() {
        assert_eq!(crate::Mime::parse("application/x-gtar-compressed"), Ok(APPLICATION_X_GTAR_COMPRESSED));
        assert_eq!(crate::Mime::parse("applicaTioN/X-gtar-coMpREssED"), Ok(APPLICATION_X_GTAR_COMPRESSED));
    }

    /// `application/x-hdf`
    pub const APPLICATION_X_HDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XHdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_hdf_parse() {
        assert_eq!(crate::Mime::parse("application/x-hdf"), Ok(APPLICATION_X_HDF));
        assert_eq!(crate::Mime::parse("AppLiCatION/x-HDf"), Ok(APPLICATION_X_HDF));
    }

    /// `application/x-hwp`
    pub const APPLICATION_X_HWP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XHwp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_hwp_parse() {
        assert_eq!(crate::Mime::parse("application/x-hwp"), Ok(APPLICATION_X_HWP));
        assert_eq!(crate::Mime::parse("APPlicATION/X-HWp"), Ok(APPLICATION_X_HWP));
    }

    /// `application/x-ica`
    pub const APPLICATION_X_ICA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XIca),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ica_parse() {
        assert_eq!(crate::Mime::parse("application/x-ica"), Ok(APPLICATION_X_ICA));
        assert_eq!(crate::Mime::parse("APplICATiON/x-ica"), Ok(APPLICATION_X_ICA));
    }

    /// `application/x-info`
    pub const APPLICATION_X_INFO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XInfo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_info_parse() {
        assert_eq!(crate::Mime::parse("application/x-info"), Ok(APPLICATION_X_INFO));
        assert_eq!(crate::Mime::parse("aPplicATIon/X-iNFo"), Ok(APPLICATION_X_INFO));
    }

    /// `application/x-internet-signup`
    pub const APPLICATION_X_INTERNET_SIGNUP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XInternetSignup),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_internet_signup_parse() {
        assert_eq!(crate::Mime::parse("application/x-internet-signup"), Ok(APPLICATION_X_INTERNET_SIGNUP));
        assert_eq!(crate::Mime::parse("APPlicaTIOn/X-inTeRnEt-SIgNUp"), Ok(APPLICATION_X_INTERNET_SIGNUP));
    }

    /// `application/x-iphone`
    pub const APPLICATION_X_IPHONE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XIphone),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_iphone_parse() {
        assert_eq!(crate::Mime::parse("application/x-iphone"), Ok(APPLICATION_X_IPHONE));
        assert_eq!(crate::Mime::parse("apPlIcAtion/x-iphOne"), Ok(APPLICATION_X_IPHONE));
    }

    /// `application/x-iso9660-image`
    pub const APPLICATION_X_ISO9660_IMAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XIso9660Image),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_iso9660_image_parse() {
        assert_eq!(crate::Mime::parse("application/x-iso9660-image"), Ok(APPLICATION_X_ISO9660_IMAGE));
        assert_eq!(crate::Mime::parse("appLICAtiOn/X-isO9660-IMAGe"), Ok(APPLICATION_X_ISO9660_IMAGE));
    }

    /// `application/x-java-jnlp-file`
    pub const APPLICATION_X_JAVA_JNLP_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XJavaJnlpFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_java_jnlp_file_parse() {
        assert_eq!(crate::Mime::parse("application/x-java-jnlp-file"), Ok(APPLICATION_X_JAVA_JNLP_FILE));
        assert_eq!(crate::Mime::parse("AppLicatIOn/X-jaVA-JNLP-FiLE"), Ok(APPLICATION_X_JAVA_JNLP_FILE));
    }

    /// `application/x-jmol`
    pub const APPLICATION_X_JMOL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XJmol),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_jmol_parse() {
        assert_eq!(crate::Mime::parse("application/x-jmol"), Ok(APPLICATION_X_JMOL));
        assert_eq!(crate::Mime::parse("aPpLIcatION/x-jMOL"), Ok(APPLICATION_X_JMOL));
    }

    /// `application/x-killustrator`
    pub const APPLICATION_X_KILLUSTRATOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XKillustrator),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_killustrator_parse() {
        assert_eq!(crate::Mime::parse("application/x-killustrator"), Ok(APPLICATION_X_KILLUSTRATOR));
        assert_eq!(crate::Mime::parse("apPlICAtIoN/x-KILluSTRatOr"), Ok(APPLICATION_X_KILLUSTRATOR));
    }

    /// `application/x-latex`
    pub const APPLICATION_X_LATEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XLatex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_latex_parse() {
        assert_eq!(crate::Mime::parse("application/x-latex"), Ok(APPLICATION_X_LATEX));
        assert_eq!(crate::Mime::parse("ApPlIcaTiOn/X-LaTEX"), Ok(APPLICATION_X_LATEX));
    }

    /// `application/x-lha`
    pub const APPLICATION_X_LHA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XLha),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_lha_parse() {
        assert_eq!(crate::Mime::parse("application/x-lha"), Ok(APPLICATION_X_LHA));
        assert_eq!(crate::Mime::parse("appLIcATion/X-lHA"), Ok(APPLICATION_X_LHA));
    }

    /// `application/x-lyx`
    pub const APPLICATION_X_LYX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XLyx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_lyx_parse() {
        assert_eq!(crate::Mime::parse("application/x-lyx"), Ok(APPLICATION_X_LYX));
        assert_eq!(crate::Mime::parse("applICATioN/X-LyX"), Ok(APPLICATION_X_LYX));
    }

    /// `application/x-lzh`
    pub const APPLICATION_X_LZH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XLzh),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_lzh_parse() {
        assert_eq!(crate::Mime::parse("application/x-lzh"), Ok(APPLICATION_X_LZH));
        assert_eq!(crate::Mime::parse("apPLICaTIon/x-lzH"), Ok(APPLICATION_X_LZH));
    }

    /// `application/x-lzx`
    pub const APPLICATION_X_LZX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XLzx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_lzx_parse() {
        assert_eq!(crate::Mime::parse("application/x-lzx"), Ok(APPLICATION_X_LZX));
        assert_eq!(crate::Mime::parse("APplIcATIoN/X-Lzx"), Ok(APPLICATION_X_LZX));
    }

    /// `application/x-maker`
    pub const APPLICATION_X_MAKER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XMaker),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_maker_parse() {
        assert_eq!(crate::Mime::parse("application/x-maker"), Ok(APPLICATION_X_MAKER));
        assert_eq!(crate::Mime::parse("applIcATIoN/X-MaKer"), Ok(APPLICATION_X_MAKER));
    }

    /// `application/x-ms-wmd`
    pub const APPLICATION_X_MS_WMD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XMsWmd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ms_wmd_parse() {
        assert_eq!(crate::Mime::parse("application/x-ms-wmd"), Ok(APPLICATION_X_MS_WMD));
        assert_eq!(crate::Mime::parse("apPlICAtIoN/x-Ms-WmD"), Ok(APPLICATION_X_MS_WMD));
    }

    /// `application/x-ms-wmz`
    pub const APPLICATION_X_MS_WMZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XMsWmz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ms_wmz_parse() {
        assert_eq!(crate::Mime::parse("application/x-ms-wmz"), Ok(APPLICATION_X_MS_WMZ));
        assert_eq!(crate::Mime::parse("AppLICATIon/X-mS-Wmz"), Ok(APPLICATION_X_MS_WMZ));
    }

    /// `application/x-msdos-program`
    pub const APPLICATION_X_MSDOS_PROGRAM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XMsdosProgram),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_msdos_program_parse() {
        assert_eq!(crate::Mime::parse("application/x-msdos-program"), Ok(APPLICATION_X_MSDOS_PROGRAM));
        assert_eq!(crate::Mime::parse("apPlicatIon/x-mSdos-ProGRaM"), Ok(APPLICATION_X_MSDOS_PROGRAM));
    }

    /// `application/x-msi`
    pub const APPLICATION_X_MSI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XMsi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_msi_parse() {
        assert_eq!(crate::Mime::parse("application/x-msi"), Ok(APPLICATION_X_MSI));
        assert_eq!(crate::Mime::parse("apPlicAtiOn/x-MSi"), Ok(APPLICATION_X_MSI));
    }

    /// `application/x-netcdf`
    pub const APPLICATION_X_NETCDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XNetcdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_netcdf_parse() {
        assert_eq!(crate::Mime::parse("application/x-netcdf"), Ok(APPLICATION_X_NETCDF));
        assert_eq!(crate::Mime::parse("aPPLicatIon/x-neTCDF"), Ok(APPLICATION_X_NETCDF));
    }

    /// `application/x-ns-proxy-autoconfig`
    pub const APPLICATION_X_NS_PROXY_AUTOCONFIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XNsProxyAutoconfig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ns_proxy_autoconfig_parse() {
        assert_eq!(crate::Mime::parse("application/x-ns-proxy-autoconfig"), Ok(APPLICATION_X_NS_PROXY_AUTOCONFIG));
        assert_eq!(crate::Mime::parse("appLicaTiON/x-nS-PRoxY-AUTOcOnfiG"), Ok(APPLICATION_X_NS_PROXY_AUTOCONFIG));
    }

    /// `application/x-nwc`
    pub const APPLICATION_X_NWC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XNwc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_nwc_parse() {
        assert_eq!(crate::Mime::parse("application/x-nwc"), Ok(APPLICATION_X_NWC));
        assert_eq!(crate::Mime::parse("apPLICaTiON/X-nwc"), Ok(APPLICATION_X_NWC));
    }

    /// `application/x-object`
    pub const APPLICATION_X_OBJECT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XObject),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_object_parse() {
        assert_eq!(crate::Mime::parse("application/x-object"), Ok(APPLICATION_X_OBJECT));
        assert_eq!(crate::Mime::parse("aPPLiCaTIOn/x-ObJECT"), Ok(APPLICATION_X_OBJECT));
    }

    /// `application/x-oz-application`
    pub const APPLICATION_X_OZ_APPLICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XOzApplication),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_oz_application_parse() {
        assert_eq!(crate::Mime::parse("application/x-oz-application"), Ok(APPLICATION_X_OZ_APPLICATION));
        assert_eq!(crate::Mime::parse("aPPLiCATIoN/X-OZ-ApPlicATIoN"), Ok(APPLICATION_X_OZ_APPLICATION));
    }

    /// `application/x-pkcs7-certreqresp`
    pub const APPLICATION_X_PKCS7_CERTREQRESP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XPkcs7Certreqresp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_pkcs7_certreqresp_parse() {
        assert_eq!(crate::Mime::parse("application/x-pkcs7-certreqresp"), Ok(APPLICATION_X_PKCS7_CERTREQRESP));
        assert_eq!(crate::Mime::parse("appliCATIoN/X-Pkcs7-cErTreQrEsp"), Ok(APPLICATION_X_PKCS7_CERTREQRESP));
    }

    /// `application/x-python-code`
    pub const APPLICATION_X_PYTHON_CODE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XPythonCode),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_python_code_parse() {
        assert_eq!(crate::Mime::parse("application/x-python-code"), Ok(APPLICATION_X_PYTHON_CODE));
        assert_eq!(crate::Mime::parse("apPlIcatIon/X-PytHon-coDe"), Ok(APPLICATION_X_PYTHON_CODE));
    }

    /// `application/x-qgis`
    pub const APPLICATION_X_QGIS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XQgis),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_qgis_parse() {
        assert_eq!(crate::Mime::parse("application/x-qgis"), Ok(APPLICATION_X_QGIS));
        assert_eq!(crate::Mime::parse("aPPlicATion/X-Qgis"), Ok(APPLICATION_X_QGIS));
    }

    /// `application/x-quicktimeplayer`
    pub const APPLICATION_X_QUICKTIMEPLAYER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XQuicktimeplayer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_quicktimeplayer_parse() {
        assert_eq!(crate::Mime::parse("application/x-quicktimeplayer"), Ok(APPLICATION_X_QUICKTIMEPLAYER));
        assert_eq!(crate::Mime::parse("APPLiCAtION/X-qUICktImeplAYeR"), Ok(APPLICATION_X_QUICKTIMEPLAYER));
    }

    /// `application/x-rdp`
    pub const APPLICATION_X_RDP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XRdp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_rdp_parse() {
        assert_eq!(crate::Mime::parse("application/x-rdp"), Ok(APPLICATION_X_RDP));
        assert_eq!(crate::Mime::parse("ApPLicaTIon/x-RdP"), Ok(APPLICATION_X_RDP));
    }

    /// `application/x-redhat-package-manager`
    pub const APPLICATION_X_REDHAT_PACKAGE_MANAGER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XRedhatPackageManager),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_redhat_package_manager_parse() {
        assert_eq!(crate::Mime::parse("application/x-redhat-package-manager"), Ok(APPLICATION_X_REDHAT_PACKAGE_MANAGER));
        assert_eq!(crate::Mime::parse("aPplICaTIon/X-REdhat-PACkaGE-MANagER"), Ok(APPLICATION_X_REDHAT_PACKAGE_MANAGER));
    }

    /// `application/x-rss+xml`
    pub const APPLICATION_X_RSS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XRss),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_x_rss_xml_parse() {
        assert_eq!(crate::Mime::parse("application/x-rss+xml"), Ok(APPLICATION_X_RSS_XML));
        assert_eq!(crate::Mime::parse("APPLIcAtioN/x-rsS+XML"), Ok(APPLICATION_X_RSS_XML));
    }

    /// `application/x-ruby`
    pub const APPLICATION_X_RUBY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XRuby),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ruby_parse() {
        assert_eq!(crate::Mime::parse("application/x-ruby"), Ok(APPLICATION_X_RUBY));
        assert_eq!(crate::Mime::parse("AppLIcaTiOn/x-RUby"), Ok(APPLICATION_X_RUBY));
    }

    /// `application/x-scilab`
    pub const APPLICATION_X_SCILAB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XScilab),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_scilab_parse() {
        assert_eq!(crate::Mime::parse("application/x-scilab"), Ok(APPLICATION_X_SCILAB));
        assert_eq!(crate::Mime::parse("APPLIcaTIOn/x-ScILAB"), Ok(APPLICATION_X_SCILAB));
    }

    /// `application/x-scilab-xcos`
    pub const APPLICATION_X_SCILAB_XCOS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XScilabXcos),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_scilab_xcos_parse() {
        assert_eq!(crate::Mime::parse("application/x-scilab-xcos"), Ok(APPLICATION_X_SCILAB_XCOS));
        assert_eq!(crate::Mime::parse("APplicatIoN/X-ScIlab-xcOs"), Ok(APPLICATION_X_SCILAB_XCOS));
    }

    /// `application/x-sh`
    pub const APPLICATION_X_SH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XSh),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_sh_parse() {
        assert_eq!(crate::Mime::parse("application/x-sh"), Ok(APPLICATION_X_SH));
        assert_eq!(crate::Mime::parse("APPlicaTiON/x-sh"), Ok(APPLICATION_X_SH));
    }

    /// `application/x-shar`
    pub const APPLICATION_X_SHAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XShar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_shar_parse() {
        assert_eq!(crate::Mime::parse("application/x-shar"), Ok(APPLICATION_X_SHAR));
        assert_eq!(crate::Mime::parse("aPPLiCaTIoN/x-Shar"), Ok(APPLICATION_X_SHAR));
    }

    /// `application/x-silverlight`
    pub const APPLICATION_X_SILVERLIGHT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XSilverlight),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_silverlight_parse() {
        assert_eq!(crate::Mime::parse("application/x-silverlight"), Ok(APPLICATION_X_SILVERLIGHT));
        assert_eq!(crate::Mime::parse("APplICAtIoN/x-SILvERLIgHt"), Ok(APPLICATION_X_SILVERLIGHT));
    }

    /// `application/x-stuffit`
    pub const APPLICATION_X_STUFFIT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XStuffit),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_stuffit_parse() {
        assert_eq!(crate::Mime::parse("application/x-stuffit"), Ok(APPLICATION_X_STUFFIT));
        assert_eq!(crate::Mime::parse("ApPlicatiON/X-StuFFiT"), Ok(APPLICATION_X_STUFFIT));
    }

    /// `application/x-sv4cpio`
    pub const APPLICATION_X_SV4CPIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XSv4cpio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_sv4cpio_parse() {
        assert_eq!(crate::Mime::parse("application/x-sv4cpio"), Ok(APPLICATION_X_SV4CPIO));
        assert_eq!(crate::Mime::parse("ApPLICaTIOn/X-Sv4CpIO"), Ok(APPLICATION_X_SV4CPIO));
    }

    /// `application/x-sv4crc`
    pub const APPLICATION_X_SV4CRC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XSv4crc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_sv4crc_parse() {
        assert_eq!(crate::Mime::parse("application/x-sv4crc"), Ok(APPLICATION_X_SV4CRC));
        assert_eq!(crate::Mime::parse("apPliCatioN/X-SV4CRc"), Ok(APPLICATION_X_SV4CRC));
    }

    /// `application/x-tar`
    pub const APPLICATION_X_TAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_tar_parse() {
        assert_eq!(crate::Mime::parse("application/x-tar"), Ok(APPLICATION_X_TAR));
        assert_eq!(crate::Mime::parse("AppLicaTioN/X-Tar"), Ok(APPLICATION_X_TAR));
    }

    /// `application/x-tcl`
    pub const APPLICATION_X_TCL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTcl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_tcl_parse() {
        assert_eq!(crate::Mime::parse("application/x-tcl"), Ok(APPLICATION_X_TCL));
        assert_eq!(crate::Mime::parse("APpLiCatioN/X-tCl"), Ok(APPLICATION_X_TCL));
    }

    /// `application/x-tex-gf`
    pub const APPLICATION_X_TEX_GF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTexGf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_tex_gf_parse() {
        assert_eq!(crate::Mime::parse("application/x-tex-gf"), Ok(APPLICATION_X_TEX_GF));
        assert_eq!(crate::Mime::parse("aPPLicaTIoN/X-teX-gf"), Ok(APPLICATION_X_TEX_GF));
    }

    /// `application/x-tex-pk`
    pub const APPLICATION_X_TEX_PK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTexPk),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_tex_pk_parse() {
        assert_eq!(crate::Mime::parse("application/x-tex-pk"), Ok(APPLICATION_X_TEX_PK));
        assert_eq!(crate::Mime::parse("aPPLiCaTIon/x-TEX-pK"), Ok(APPLICATION_X_TEX_PK));
    }

    /// `application/x-texinfo`
    pub const APPLICATION_X_TEXINFO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTexinfo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_texinfo_parse() {
        assert_eq!(crate::Mime::parse("application/x-texinfo"), Ok(APPLICATION_X_TEXINFO));
        assert_eq!(crate::Mime::parse("aPplicATiOn/X-Texinfo"), Ok(APPLICATION_X_TEXINFO));
    }

    /// `application/x-trash`
    pub const APPLICATION_X_TRASH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTrash),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_trash_parse() {
        assert_eq!(crate::Mime::parse("application/x-trash"), Ok(APPLICATION_X_TRASH));
        assert_eq!(crate::Mime::parse("APPlicAtion/x-TrAsh"), Ok(APPLICATION_X_TRASH));
    }

    /// `application/x-troff-man`
    pub const APPLICATION_X_TROFF_MAN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTroffMan),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_troff_man_parse() {
        assert_eq!(crate::Mime::parse("application/x-troff-man"), Ok(APPLICATION_X_TROFF_MAN));
        assert_eq!(crate::Mime::parse("apPliCaTiOn/X-tROff-MAN"), Ok(APPLICATION_X_TROFF_MAN));
    }

    /// `application/x-troff-me`
    pub const APPLICATION_X_TROFF_ME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTroffMe),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_troff_me_parse() {
        assert_eq!(crate::Mime::parse("application/x-troff-me"), Ok(APPLICATION_X_TROFF_ME));
        assert_eq!(crate::Mime::parse("AppLICAtIOn/x-Troff-mE"), Ok(APPLICATION_X_TROFF_ME));
    }

    /// `application/x-troff-ms`
    pub const APPLICATION_X_TROFF_MS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XTroffMs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_troff_ms_parse() {
        assert_eq!(crate::Mime::parse("application/x-troff-ms"), Ok(APPLICATION_X_TROFF_MS));
        assert_eq!(crate::Mime::parse("apPliCATioN/X-troFf-ms"), Ok(APPLICATION_X_TROFF_MS));
    }

    /// `application/x-ustar`
    pub const APPLICATION_X_USTAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XUstar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_ustar_parse() {
        assert_eq!(crate::Mime::parse("application/x-ustar"), Ok(APPLICATION_X_USTAR));
        assert_eq!(crate::Mime::parse("ApplICATiOn/X-uStar"), Ok(APPLICATION_X_USTAR));
    }

    /// `application/x-wais-source`
    pub const APPLICATION_X_WAIS_SOURCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XWaisSource),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_wais_source_parse() {
        assert_eq!(crate::Mime::parse("application/x-wais-source"), Ok(APPLICATION_X_WAIS_SOURCE));
        assert_eq!(crate::Mime::parse("aPPlIcaTIoN/x-WAIS-SouRcE"), Ok(APPLICATION_X_WAIS_SOURCE));
    }

    /// `application/x-wingz`
    pub const APPLICATION_X_WINGZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XWingz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_wingz_parse() {
        assert_eq!(crate::Mime::parse("application/x-wingz"), Ok(APPLICATION_X_WINGZ));
        assert_eq!(crate::Mime::parse("ApplICAtIon/X-wiNGZ"), Ok(APPLICATION_X_WINGZ));
    }

    /// `application/x-x509-ca-cert`
    pub const APPLICATION_X_X509_CA_CERT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XX509CaCert),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_x509_ca_cert_parse() {
        assert_eq!(crate::Mime::parse("application/x-x509-ca-cert"), Ok(APPLICATION_X_X509_CA_CERT));
        assert_eq!(crate::Mime::parse("APplICATIoN/x-x509-CA-ceRT"), Ok(APPLICATION_X_X509_CA_CERT));
    }

    /// `application/x-xfig`
    pub const APPLICATION_X_XFIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XXfig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_xfig_parse() {
        assert_eq!(crate::Mime::parse("application/x-xfig"), Ok(APPLICATION_X_XFIG));
        assert_eq!(crate::Mime::parse("APpLICatIOn/x-xFIG"), Ok(APPLICATION_X_XFIG));
    }

    /// `application/x-xpinstall`
    pub const APPLICATION_X_XPINSTALL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XXpinstall),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_xpinstall_parse() {
        assert_eq!(crate::Mime::parse("application/x-xpinstall"), Ok(APPLICATION_X_XPINSTALL));
        assert_eq!(crate::Mime::parse("APPlICatiOn/x-xPInsTaLL"), Ok(APPLICATION_X_XPINSTALL));
    }

    /// `application/x-xz`
    pub const APPLICATION_X_XZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XXz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x_xz_parse() {
        assert_eq!(crate::Mime::parse("application/x-xz"), Ok(APPLICATION_X_XZ));
        assert_eq!(crate::Mime::parse("aPplicAtION/x-xZ"), Ok(APPLICATION_X_XZ));
    }

    /// `application/x400-bp`
    pub const APPLICATION_X400_BP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::X400Bp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_x400_bp_parse() {
        assert_eq!(crate::Mime::parse("application/x400-bp"), Ok(APPLICATION_X400_BP));
        assert_eq!(crate::Mime::parse("apPlIcAtIon/x400-bP"), Ok(APPLICATION_X400_BP));
    }

    /// `application/xacml+xml`
    pub const APPLICATION_XACML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xacml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xacml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xacml+xml"), Ok(APPLICATION_XACML_XML));
        assert_eq!(crate::Mime::parse("applicAtIon/xACmL+xmL"), Ok(APPLICATION_XACML_XML));
    }

    /// `application/xcap-att+xml`
    pub const APPLICATION_XCAP_ATT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XcapAtt),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcap_att_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcap-att+xml"), Ok(APPLICATION_XCAP_ATT_XML));
        assert_eq!(crate::Mime::parse("apPliCaTIOn/XCAP-aTt+XmL"), Ok(APPLICATION_XCAP_ATT_XML));
    }

    /// `application/xcap-caps+xml`
    pub const APPLICATION_XCAP_CAPS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XcapCaps),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcap_caps_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcap-caps+xml"), Ok(APPLICATION_XCAP_CAPS_XML));
        assert_eq!(crate::Mime::parse("APplIcAtION/XCAP-cApS+xml"), Ok(APPLICATION_XCAP_CAPS_XML));
    }

    /// `application/xcap-diff+xml`
    pub const APPLICATION_XCAP_DIFF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XcapDiff),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcap_diff_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcap-diff+xml"), Ok(APPLICATION_XCAP_DIFF_XML));
        assert_eq!(crate::Mime::parse("ApPLiCaTiOn/xcaP-dIff+xML"), Ok(APPLICATION_XCAP_DIFF_XML));
    }

    /// `application/xcap-el+xml`
    pub const APPLICATION_XCAP_EL_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XcapEl),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcap_el_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcap-el+xml"), Ok(APPLICATION_XCAP_EL_XML));
        assert_eq!(crate::Mime::parse("appLicaTIOn/XCAP-El+xmL"), Ok(APPLICATION_XCAP_EL_XML));
    }

    /// `application/xcap-error+xml`
    pub const APPLICATION_XCAP_ERROR_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XcapError),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcap_error_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcap-error+xml"), Ok(APPLICATION_XCAP_ERROR_XML));
        assert_eq!(crate::Mime::parse("ApplIcAtION/xcap-erROR+XmL"), Ok(APPLICATION_XCAP_ERROR_XML));
    }

    /// `application/xcap-ns+xml`
    pub const APPLICATION_XCAP_NS_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XcapNs),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcap_ns_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcap-ns+xml"), Ok(APPLICATION_XCAP_NS_XML));
        assert_eq!(crate::Mime::parse("aPPLicATiON/XcAp-nS+Xml"), Ok(APPLICATION_XCAP_NS_XML));
    }

    /// `application/xcon-conference-info+xml`
    pub const APPLICATION_XCON_CONFERENCE_INFO_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XconConferenceInfo),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcon_conference_info_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcon-conference-info+xml"), Ok(APPLICATION_XCON_CONFERENCE_INFO_XML));
        assert_eq!(crate::Mime::parse("applIcatiOn/xCON-coNFEREncE-INFO+xML"), Ok(APPLICATION_XCON_CONFERENCE_INFO_XML));
    }

    /// `application/xcon-conference-info-diff+xml`
    pub const APPLICATION_XCON_CONFERENCE_INFO_DIFF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XconConferenceInfoDiff),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xcon_conference_info_diff_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xcon-conference-info-diff+xml"), Ok(APPLICATION_XCON_CONFERENCE_INFO_DIFF_XML));
        assert_eq!(crate::Mime::parse("applICatiON/xcoN-cOnFeRENce-Info-Diff+xmL"), Ok(APPLICATION_XCON_CONFERENCE_INFO_DIFF_XML));
    }

    /// `application/xenc+xml`
    pub const APPLICATION_XENC_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xenc),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xenc_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xenc+xml"), Ok(APPLICATION_XENC_XML));
        assert_eq!(crate::Mime::parse("aPpLICatION/XENc+Xml"), Ok(APPLICATION_XENC_XML));
    }

    /// `application/xhtml+xml`
    pub const APPLICATION_XHTML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xhtml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xhtml_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xhtml+xml"), Ok(APPLICATION_XHTML_XML));
        assert_eq!(crate::Mime::parse("APPlIcATion/xhTML+xmL"), Ok(APPLICATION_XHTML_XML));
    }

    /// `application/xliff+xml`
    pub const APPLICATION_XLIFF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xliff),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xliff_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xliff+xml"), Ok(APPLICATION_XLIFF_XML));
        assert_eq!(crate::Mime::parse("aPPLiCATIOn/xliff+XmL"), Ok(APPLICATION_XLIFF_XML));
    }

    /// `application/xml`
    pub const APPLICATION_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xml"), Ok(APPLICATION_XML));
        assert_eq!(crate::Mime::parse("ApplICatiOn/xml"), Ok(APPLICATION_XML));
    }

    /// `application/xml-dtd`
    pub const APPLICATION_XML_DTD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XmlDtd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_xml_dtd_parse() {
        assert_eq!(crate::Mime::parse("application/xml-dtd"), Ok(APPLICATION_XML_DTD));
        assert_eq!(crate::Mime::parse("APPLIcaTiOn/XML-dTD"), Ok(APPLICATION_XML_DTD));
    }

    /// `application/xml-external-parsed-entity`
    pub const APPLICATION_XML_EXTERNAL_PARSED_ENTITY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XmlExternalParsedEntity),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_xml_external_parsed_entity_parse() {
        assert_eq!(crate::Mime::parse("application/xml-external-parsed-entity"), Ok(APPLICATION_XML_EXTERNAL_PARSED_ENTITY));
        assert_eq!(crate::Mime::parse("ApPlIcATIon/XML-EXTerNAl-pARSED-entiTY"), Ok(APPLICATION_XML_EXTERNAL_PARSED_ENTITY));
    }

    /// `application/xml-patch+xml`
    pub const APPLICATION_XML_PATCH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::XmlPatch),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xml_patch_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xml-patch+xml"), Ok(APPLICATION_XML_PATCH_XML));
        assert_eq!(crate::Mime::parse("apPliCAtION/xmL-pAtcH+XMl"), Ok(APPLICATION_XML_PATCH_XML));
    }

    /// `application/xmpp+xml`
    pub const APPLICATION_XMPP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xmpp),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xmpp_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xmpp+xml"), Ok(APPLICATION_XMPP_XML));
        assert_eq!(crate::Mime::parse("AppLIcaTIon/XMpP+xML"), Ok(APPLICATION_XMPP_XML));
    }

    /// `application/xop+xml`
    pub const APPLICATION_XOP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xop),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xop_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xop+xml"), Ok(APPLICATION_XOP_XML));
        assert_eq!(crate::Mime::parse("apPLICaTIOn/Xop+xMl"), Ok(APPLICATION_XOP_XML));
    }

    /// `application/xslt+xml`
    pub const APPLICATION_XSLT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xslt),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xslt_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xslt+xml"), Ok(APPLICATION_XSLT_XML));
        assert_eq!(crate::Mime::parse("aPPlIcATIon/XSLT+xml"), Ok(APPLICATION_XSLT_XML));
    }

    /// `application/xspf+xml`
    pub const APPLICATION_XSPF_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xspf),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xspf_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xspf+xml"), Ok(APPLICATION_XSPF_XML));
        assert_eq!(crate::Mime::parse("AppLiCatION/xSpf+xML"), Ok(APPLICATION_XSPF_XML));
    }

    /// `application/xv+xml`
    pub const APPLICATION_XV_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Xv),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_xv_xml_parse() {
        assert_eq!(crate::Mime::parse("application/xv+xml"), Ok(APPLICATION_XV_XML));
        assert_eq!(crate::Mime::parse("apPLIcaTIon/xv+xmL"), Ok(APPLICATION_XV_XML));
    }

    /// `application/yang`
    pub const APPLICATION_YANG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Yang),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_yang_parse() {
        assert_eq!(crate::Mime::parse("application/yang"), Ok(APPLICATION_YANG));
        assert_eq!(crate::Mime::parse("aPPlicaTIoN/YAnG"), Ok(APPLICATION_YANG));
    }

    /// `application/yang-data+json`
    pub const APPLICATION_YANG_DATA_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::YangData),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_yang_data_json_parse() {
        assert_eq!(crate::Mime::parse("application/yang-data+json"), Ok(APPLICATION_YANG_DATA_JSON));
        assert_eq!(crate::Mime::parse("appLiCAtiOn/Yang-DATA+JsON"), Ok(APPLICATION_YANG_DATA_JSON));
    }

    /// `application/yang-data+xml`
    pub const APPLICATION_YANG_DATA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::YangData),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_yang_data_xml_parse() {
        assert_eq!(crate::Mime::parse("application/yang-data+xml"), Ok(APPLICATION_YANG_DATA_XML));
        assert_eq!(crate::Mime::parse("appLicatioN/yANG-DaTa+XmL"), Ok(APPLICATION_YANG_DATA_XML));
    }

    /// `application/yang-patch+json`
    pub const APPLICATION_YANG_PATCH_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::YangPatch),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn application_yang_patch_json_parse() {
        assert_eq!(crate::Mime::parse("application/yang-patch+json"), Ok(APPLICATION_YANG_PATCH_JSON));
        assert_eq!(crate::Mime::parse("ApPlICATION/YanG-PAtcH+jSoN"), Ok(APPLICATION_YANG_PATCH_JSON));
    }

    /// `application/yang-patch+xml`
    pub const APPLICATION_YANG_PATCH_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::YangPatch),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_yang_patch_xml_parse() {
        assert_eq!(crate::Mime::parse("application/yang-patch+xml"), Ok(APPLICATION_YANG_PATCH_XML));
        assert_eq!(crate::Mime::parse("ApPlICaTION/YAng-pATcH+XmL"), Ok(APPLICATION_YANG_PATCH_XML));
    }

    /// `application/yin+xml`
    pub const APPLICATION_YIN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Yin),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn application_yin_xml_parse() {
        assert_eq!(crate::Mime::parse("application/yin+xml"), Ok(APPLICATION_YIN_XML));
        assert_eq!(crate::Mime::parse("ApplicaTion/YIN+XMl"), Ok(APPLICATION_YIN_XML));
    }

    /// `application/zip`
    pub const APPLICATION_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Zip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_zip_parse() {
        assert_eq!(crate::Mime::parse("application/zip"), Ok(APPLICATION_ZIP));
        assert_eq!(crate::Mime::parse("aPpLIcAtiOn/zIp"), Ok(APPLICATION_ZIP));
    }

    /// `application/zlib`
    pub const APPLICATION_ZLIB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Zlib),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_zlib_parse() {
        assert_eq!(crate::Mime::parse("application/zlib"), Ok(APPLICATION_ZLIB));
        assert_eq!(crate::Mime::parse("APPLICaTION/zLiB"), Ok(APPLICATION_ZLIB));
    }

    /// `application/zstd`
    pub const APPLICATION_ZSTD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Application),
        subtype: crate::Name::Interned(super::Subtype::Zstd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn application_zstd_parse() {
        assert_eq!(crate::Mime::parse("application/zstd"), Ok(APPLICATION_ZSTD));
        assert_eq!(crate::Mime::parse("aPpLICATion/ZSTd"), Ok(APPLICATION_ZSTD));
    }

    /// `audio/aac`
    pub const AUDIO_AAC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Aac),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_aac_parse() {
        assert_eq!(crate::Mime::parse("audio/aac"), Ok(AUDIO_AAC));
        assert_eq!(crate::Mime::parse("auDiO/Aac"), Ok(AUDIO_AAC));
    }

    /// `audio/ac3`
    pub const AUDIO_AC3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Ac3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_ac3_parse() {
        assert_eq!(crate::Mime::parse("audio/ac3"), Ok(AUDIO_AC3));
        assert_eq!(crate::Mime::parse("aUDiO/aC3"), Ok(AUDIO_AC3));
    }

    /// `audio/AMR`
    pub const AUDIO_AMR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Amr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_amr_parse() {
        assert_eq!(crate::Mime::parse("audio/AMR"), Ok(AUDIO_AMR));
        assert_eq!(crate::Mime::parse("Audio/Amr"), Ok(AUDIO_AMR));
    }

    /// `audio/AMR-WB`
    pub const AUDIO_AMR_WB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::AmrWb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_amr_wb_parse() {
        assert_eq!(crate::Mime::parse("audio/AMR-WB"), Ok(AUDIO_AMR_WB));
        assert_eq!(crate::Mime::parse("aUdio/amr-wB"), Ok(AUDIO_AMR_WB));
    }

    /// `audio/annodex`
    pub const AUDIO_ANNODEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Annodex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_annodex_parse() {
        assert_eq!(crate::Mime::parse("audio/annodex"), Ok(AUDIO_ANNODEX));
        assert_eq!(crate::Mime::parse("aUdio/AnNodex"), Ok(AUDIO_ANNODEX));
    }

    /// `audio/aptx`
    pub const AUDIO_APTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Aptx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_aptx_parse() {
        assert_eq!(crate::Mime::parse("audio/aptx"), Ok(AUDIO_APTX));
        assert_eq!(crate::Mime::parse("AuDiO/aPTX"), Ok(AUDIO_APTX));
    }

    /// `audio/asc`
    pub const AUDIO_ASC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Asc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_asc_parse() {
        assert_eq!(crate::Mime::parse("audio/asc"), Ok(AUDIO_ASC));
        assert_eq!(crate::Mime::parse("AudIO/asc"), Ok(AUDIO_ASC));
    }

    /// `audio/ATRAC-ADVANCED-LOSSLESS`
    pub const AUDIO_ATRAC_ADVANCED_LOSSLESS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::AtracAdvancedLossless),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_atrac_advanced_lossless_parse() {
        assert_eq!(crate::Mime::parse("audio/ATRAC-ADVANCED-LOSSLESS"), Ok(AUDIO_ATRAC_ADVANCED_LOSSLESS));
        assert_eq!(crate::Mime::parse("AudIo/atrAC-ADVAnceD-lOSsLEss"), Ok(AUDIO_ATRAC_ADVANCED_LOSSLESS));
    }

    /// `audio/ATRAC-X`
    pub const AUDIO_ATRAC_X: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::AtracX),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_atrac_x_parse() {
        assert_eq!(crate::Mime::parse("audio/ATRAC-X"), Ok(AUDIO_ATRAC_X));
        assert_eq!(crate::Mime::parse("aUDio/ATrAC-X"), Ok(AUDIO_ATRAC_X));
    }

    /// `audio/ATRAC3`
    pub const AUDIO_ATRAC3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Atrac3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_atrac3_parse() {
        assert_eq!(crate::Mime::parse("audio/ATRAC3"), Ok(AUDIO_ATRAC3));
        assert_eq!(crate::Mime::parse("AudIo/AtrAc3"), Ok(AUDIO_ATRAC3));
    }

    /// `audio/basic`
    pub const AUDIO_BASIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Basic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_basic_parse() {
        assert_eq!(crate::Mime::parse("audio/basic"), Ok(AUDIO_BASIC));
        assert_eq!(crate::Mime::parse("AUdIo/baSIc"), Ok(AUDIO_BASIC));
    }

    /// `audio/BV16`
    pub const AUDIO_BV16: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Bv16),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_bv16_parse() {
        assert_eq!(crate::Mime::parse("audio/BV16"), Ok(AUDIO_BV16));
        assert_eq!(crate::Mime::parse("audio/bV16"), Ok(AUDIO_BV16));
    }

    /// `audio/BV32`
    pub const AUDIO_BV32: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Bv32),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_bv32_parse() {
        assert_eq!(crate::Mime::parse("audio/BV32"), Ok(AUDIO_BV32));
        assert_eq!(crate::Mime::parse("AUDIO/bV32"), Ok(AUDIO_BV32));
    }

    /// `audio/clearmode`
    pub const AUDIO_CLEARMODE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Clearmode),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_clearmode_parse() {
        assert_eq!(crate::Mime::parse("audio/clearmode"), Ok(AUDIO_CLEARMODE));
        assert_eq!(crate::Mime::parse("AudIO/clEarMode"), Ok(AUDIO_CLEARMODE));
    }

    /// `audio/CN`
    pub const AUDIO_CN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Cn),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_cn_parse() {
        assert_eq!(crate::Mime::parse("audio/CN"), Ok(AUDIO_CN));
        assert_eq!(crate::Mime::parse("AuDio/cn"), Ok(AUDIO_CN));
    }

    /// `audio/csound`
    pub const AUDIO_CSOUND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Csound),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_csound_parse() {
        assert_eq!(crate::Mime::parse("audio/csound"), Ok(AUDIO_CSOUND));
        assert_eq!(crate::Mime::parse("auDio/CsOund"), Ok(AUDIO_CSOUND));
    }

    /// `audio/DAT12`
    pub const AUDIO_DAT12: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Dat12),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dat12_parse() {
        assert_eq!(crate::Mime::parse("audio/DAT12"), Ok(AUDIO_DAT12));
        assert_eq!(crate::Mime::parse("aUDiO/Dat12"), Ok(AUDIO_DAT12));
    }

    /// `audio/dls`
    pub const AUDIO_DLS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Dls),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dls_parse() {
        assert_eq!(crate::Mime::parse("audio/dls"), Ok(AUDIO_DLS));
        assert_eq!(crate::Mime::parse("AUDiO/dLS"), Ok(AUDIO_DLS));
    }

    /// `audio/dsr-es201108`
    pub const AUDIO_DSR_ES201108: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::DsrEs201108),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dsr_es201108_parse() {
        assert_eq!(crate::Mime::parse("audio/dsr-es201108"), Ok(AUDIO_DSR_ES201108));
        assert_eq!(crate::Mime::parse("AUdiO/dSR-es201108"), Ok(AUDIO_DSR_ES201108));
    }

    /// `audio/dsr-es202050`
    pub const AUDIO_DSR_ES202050: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::DsrEs202050),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dsr_es202050_parse() {
        assert_eq!(crate::Mime::parse("audio/dsr-es202050"), Ok(AUDIO_DSR_ES202050));
        assert_eq!(crate::Mime::parse("auDiO/dSR-ES202050"), Ok(AUDIO_DSR_ES202050));
    }

    /// `audio/dsr-es202211`
    pub const AUDIO_DSR_ES202211: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::DsrEs202211),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dsr_es202211_parse() {
        assert_eq!(crate::Mime::parse("audio/dsr-es202211"), Ok(AUDIO_DSR_ES202211));
        assert_eq!(crate::Mime::parse("audIO/DSr-ES202211"), Ok(AUDIO_DSR_ES202211));
    }

    /// `audio/dsr-es202212`
    pub const AUDIO_DSR_ES202212: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::DsrEs202212),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dsr_es202212_parse() {
        assert_eq!(crate::Mime::parse("audio/dsr-es202212"), Ok(AUDIO_DSR_ES202212));
        assert_eq!(crate::Mime::parse("AUDiO/dsR-Es202212"), Ok(AUDIO_DSR_ES202212));
    }

    /// `audio/DV`
    pub const AUDIO_DV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Dv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dv_parse() {
        assert_eq!(crate::Mime::parse("audio/DV"), Ok(AUDIO_DV));
        assert_eq!(crate::Mime::parse("AudIO/dv"), Ok(AUDIO_DV));
    }

    /// `audio/DVI4`
    pub const AUDIO_DVI4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Dvi4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_dvi4_parse() {
        assert_eq!(crate::Mime::parse("audio/DVI4"), Ok(AUDIO_DVI4));
        assert_eq!(crate::Mime::parse("AUdiO/dvi4"), Ok(AUDIO_DVI4));
    }

    /// `audio/eac3`
    pub const AUDIO_EAC3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Eac3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_eac3_parse() {
        assert_eq!(crate::Mime::parse("audio/eac3"), Ok(AUDIO_EAC3));
        assert_eq!(crate::Mime::parse("aUDiO/EAc3"), Ok(AUDIO_EAC3));
    }

    /// `audio/encaprtp`
    pub const AUDIO_ENCAPRTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Encaprtp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_encaprtp_parse() {
        assert_eq!(crate::Mime::parse("audio/encaprtp"), Ok(AUDIO_ENCAPRTP));
        assert_eq!(crate::Mime::parse("audIo/eNcaPRtp"), Ok(AUDIO_ENCAPRTP));
    }

    /// `audio/EVRC`
    pub const AUDIO_EVRC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrc_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRC"), Ok(AUDIO_EVRC));
        assert_eq!(crate::Mime::parse("AUdio/EVrC"), Ok(AUDIO_EVRC));
    }

    /// `audio/EVRC-QCP`
    pub const AUDIO_EVRC_QCP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::EvrcQcp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrc_qcp_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRC-QCP"), Ok(AUDIO_EVRC_QCP));
        assert_eq!(crate::Mime::parse("auDIO/EVRC-QCp"), Ok(AUDIO_EVRC_QCP));
    }

    /// `audio/EVRC0`
    pub const AUDIO_EVRC0: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrc0),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrc0_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRC0"), Ok(AUDIO_EVRC0));
        assert_eq!(crate::Mime::parse("AuDiO/evRC0"), Ok(AUDIO_EVRC0));
    }

    /// `audio/EVRC1`
    pub const AUDIO_EVRC1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrc1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrc1_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRC1"), Ok(AUDIO_EVRC1));
        assert_eq!(crate::Mime::parse("AudiO/evRC1"), Ok(AUDIO_EVRC1));
    }

    /// `audio/EVRCB`
    pub const AUDIO_EVRCB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcb_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCB"), Ok(AUDIO_EVRCB));
        assert_eq!(crate::Mime::parse("AuDiO/evrcB"), Ok(AUDIO_EVRCB));
    }

    /// `audio/EVRCB0`
    pub const AUDIO_EVRCB0: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcb0),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcb0_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCB0"), Ok(AUDIO_EVRCB0));
        assert_eq!(crate::Mime::parse("AudIO/EVrcb0"), Ok(AUDIO_EVRCB0));
    }

    /// `audio/EVRCB1`
    pub const AUDIO_EVRCB1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcb1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcb1_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCB1"), Ok(AUDIO_EVRCB1));
        assert_eq!(crate::Mime::parse("auDiO/evRCb1"), Ok(AUDIO_EVRCB1));
    }

    /// `audio/EVRCNW`
    pub const AUDIO_EVRCNW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcnw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcnw_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCNW"), Ok(AUDIO_EVRCNW));
        assert_eq!(crate::Mime::parse("aUdIO/EvrCnW"), Ok(AUDIO_EVRCNW));
    }

    /// `audio/EVRCNW0`
    pub const AUDIO_EVRCNW0: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcnw0),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcnw0_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCNW0"), Ok(AUDIO_EVRCNW0));
        assert_eq!(crate::Mime::parse("AuDio/eVrCnw0"), Ok(AUDIO_EVRCNW0));
    }

    /// `audio/EVRCNW1`
    pub const AUDIO_EVRCNW1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcnw1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcnw1_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCNW1"), Ok(AUDIO_EVRCNW1));
        assert_eq!(crate::Mime::parse("auDiO/EvrCNW1"), Ok(AUDIO_EVRCNW1));
    }

    /// `audio/EVRCWB`
    pub const AUDIO_EVRCWB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcwb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcwb_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCWB"), Ok(AUDIO_EVRCWB));
        assert_eq!(crate::Mime::parse("aUdIo/eVrcWb"), Ok(AUDIO_EVRCWB));
    }

    /// `audio/EVRCWB0`
    pub const AUDIO_EVRCWB0: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcwb0),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcwb0_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCWB0"), Ok(AUDIO_EVRCWB0));
        assert_eq!(crate::Mime::parse("AudiO/evrcWb0"), Ok(AUDIO_EVRCWB0));
    }

    /// `audio/EVRCWB1`
    pub const AUDIO_EVRCWB1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evrcwb1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evrcwb1_parse() {
        assert_eq!(crate::Mime::parse("audio/EVRCWB1"), Ok(AUDIO_EVRCWB1));
        assert_eq!(crate::Mime::parse("aUdIo/EVrcwB1"), Ok(AUDIO_EVRCWB1));
    }

    /// `audio/EVS`
    pub const AUDIO_EVS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Evs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_evs_parse() {
        assert_eq!(crate::Mime::parse("audio/EVS"), Ok(AUDIO_EVS));
        assert_eq!(crate::Mime::parse("Audio/Evs"), Ok(AUDIO_EVS));
    }

    /// `audio/example`
    pub const AUDIO_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_example_parse() {
        assert_eq!(crate::Mime::parse("audio/example"), Ok(AUDIO_EXAMPLE));
        assert_eq!(crate::Mime::parse("aUDio/eXAmPLe"), Ok(AUDIO_EXAMPLE));
    }

    /// `audio/flac`
    pub const AUDIO_FLAC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Flac),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_flac_parse() {
        assert_eq!(crate::Mime::parse("audio/flac"), Ok(AUDIO_FLAC));
        assert_eq!(crate::Mime::parse("AuDio/fLaC"), Ok(AUDIO_FLAC));
    }

    /// `audio/flexfec`
    pub const AUDIO_FLEXFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Flexfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_flexfec_parse() {
        assert_eq!(crate::Mime::parse("audio/flexfec"), Ok(AUDIO_FLEXFEC));
        assert_eq!(crate::Mime::parse("audio/fleXfeC"), Ok(AUDIO_FLEXFEC));
    }

    /// `audio/fwdred`
    pub const AUDIO_FWDRED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Fwdred),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_fwdred_parse() {
        assert_eq!(crate::Mime::parse("audio/fwdred"), Ok(AUDIO_FWDRED));
        assert_eq!(crate::Mime::parse("AuDIo/fwDRED"), Ok(AUDIO_FWDRED));
    }

    /// `audio/G711-0`
    pub const AUDIO_G711_0: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G7110),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g711_0_parse() {
        assert_eq!(crate::Mime::parse("audio/G711-0"), Ok(AUDIO_G711_0));
        assert_eq!(crate::Mime::parse("auDiO/g711-0"), Ok(AUDIO_G711_0));
    }

    /// `audio/G719`
    pub const AUDIO_G719: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G719),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g719_parse() {
        assert_eq!(crate::Mime::parse("audio/G719"), Ok(AUDIO_G719));
        assert_eq!(crate::Mime::parse("AUdio/g719"), Ok(AUDIO_G719));
    }

    /// `audio/G722`
    pub const AUDIO_G722: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G722),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g722_parse() {
        assert_eq!(crate::Mime::parse("audio/G722"), Ok(AUDIO_G722));
        assert_eq!(crate::Mime::parse("AUDIo/g722"), Ok(AUDIO_G722));
    }

    /// `audio/G7221`
    pub const AUDIO_G7221: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G7221),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g7221_parse() {
        assert_eq!(crate::Mime::parse("audio/G7221"), Ok(AUDIO_G7221));
        assert_eq!(crate::Mime::parse("AuDIO/G7221"), Ok(AUDIO_G7221));
    }

    /// `audio/G723`
    pub const AUDIO_G723: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G723),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g723_parse() {
        assert_eq!(crate::Mime::parse("audio/G723"), Ok(AUDIO_G723));
        assert_eq!(crate::Mime::parse("AUDIo/g723"), Ok(AUDIO_G723));
    }

    /// `audio/G726-16`
    pub const AUDIO_G726_16: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G72616),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g726_16_parse() {
        assert_eq!(crate::Mime::parse("audio/G726-16"), Ok(AUDIO_G726_16));
        assert_eq!(crate::Mime::parse("AudIO/G726-16"), Ok(AUDIO_G726_16));
    }

    /// `audio/G726-24`
    pub const AUDIO_G726_24: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G72624),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g726_24_parse() {
        assert_eq!(crate::Mime::parse("audio/G726-24"), Ok(AUDIO_G726_24));
        assert_eq!(crate::Mime::parse("aUdIo/g726-24"), Ok(AUDIO_G726_24));
    }

    /// `audio/G726-32`
    pub const AUDIO_G726_32: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G72632),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g726_32_parse() {
        assert_eq!(crate::Mime::parse("audio/G726-32"), Ok(AUDIO_G726_32));
        assert_eq!(crate::Mime::parse("AUDiO/G726-32"), Ok(AUDIO_G726_32));
    }

    /// `audio/G726-40`
    pub const AUDIO_G726_40: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G72640),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g726_40_parse() {
        assert_eq!(crate::Mime::parse("audio/G726-40"), Ok(AUDIO_G726_40));
        assert_eq!(crate::Mime::parse("auDIo/G726-40"), Ok(AUDIO_G726_40));
    }

    /// `audio/G728`
    pub const AUDIO_G728: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G728),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g728_parse() {
        assert_eq!(crate::Mime::parse("audio/G728"), Ok(AUDIO_G728));
        assert_eq!(crate::Mime::parse("auDiO/g728"), Ok(AUDIO_G728));
    }

    /// `audio/G729`
    pub const AUDIO_G729: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G729),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g729_parse() {
        assert_eq!(crate::Mime::parse("audio/G729"), Ok(AUDIO_G729));
        assert_eq!(crate::Mime::parse("AUdIO/G729"), Ok(AUDIO_G729));
    }

    /// `audio/G7291`
    pub const AUDIO_G7291: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G7291),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g7291_parse() {
        assert_eq!(crate::Mime::parse("audio/G7291"), Ok(AUDIO_G7291));
        assert_eq!(crate::Mime::parse("audIo/g7291"), Ok(AUDIO_G7291));
    }

    /// `audio/G729D`
    pub const AUDIO_G729D: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G729d),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g729d_parse() {
        assert_eq!(crate::Mime::parse("audio/G729D"), Ok(AUDIO_G729D));
        assert_eq!(crate::Mime::parse("audIo/g729d"), Ok(AUDIO_G729D));
    }

    /// `audio/G729E`
    pub const AUDIO_G729E: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::G729e),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_g729e_parse() {
        assert_eq!(crate::Mime::parse("audio/G729E"), Ok(AUDIO_G729E));
        assert_eq!(crate::Mime::parse("auDIo/G729e"), Ok(AUDIO_G729E));
    }

    /// `audio/GSM`
    pub const AUDIO_GSM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Gsm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_gsm_parse() {
        assert_eq!(crate::Mime::parse("audio/GSM"), Ok(AUDIO_GSM));
        assert_eq!(crate::Mime::parse("AuDIo/GsM"), Ok(AUDIO_GSM));
    }

    /// `audio/GSM-EFR`
    pub const AUDIO_GSM_EFR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::GsmEfr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_gsm_efr_parse() {
        assert_eq!(crate::Mime::parse("audio/GSM-EFR"), Ok(AUDIO_GSM_EFR));
        assert_eq!(crate::Mime::parse("aUdIo/Gsm-eFr"), Ok(AUDIO_GSM_EFR));
    }

    /// `audio/GSM-HR-08`
    pub const AUDIO_GSM_HR_08: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::GsmHr08),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_gsm_hr_08_parse() {
        assert_eq!(crate::Mime::parse("audio/GSM-HR-08"), Ok(AUDIO_GSM_HR_08));
        assert_eq!(crate::Mime::parse("auDiO/Gsm-Hr-08"), Ok(AUDIO_GSM_HR_08));
    }

    /// `audio/iLBC`
    pub const AUDIO_I_LBC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::ILbc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_i_lbc_parse() {
        assert_eq!(crate::Mime::parse("audio/iLBC"), Ok(AUDIO_I_LBC));
        assert_eq!(crate::Mime::parse("audio/ILbc"), Ok(AUDIO_I_LBC));
    }

    /// `audio/ip-mr_v2.5`
    pub const AUDIO_IP_MR_V2_5: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::IpMrV25),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_ip_mr_v2_5_parse() {
        assert_eq!(crate::Mime::parse("audio/ip-mr_v2.5"), Ok(AUDIO_IP_MR_V2_5));
        assert_eq!(crate::Mime::parse("aUDIO/iP-Mr_v2.5"), Ok(AUDIO_IP_MR_V2_5));
    }

    /// `audio/L16`
    pub const AUDIO_L16: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::L16),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_l16_parse() {
        assert_eq!(crate::Mime::parse("audio/L16"), Ok(AUDIO_L16));
        assert_eq!(crate::Mime::parse("AuDio/L16"), Ok(AUDIO_L16));
    }

    /// `audio/L20`
    pub const AUDIO_L20: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::L20),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_l20_parse() {
        assert_eq!(crate::Mime::parse("audio/L20"), Ok(AUDIO_L20));
        assert_eq!(crate::Mime::parse("AuDIo/l20"), Ok(AUDIO_L20));
    }

    /// `audio/L24`
    pub const AUDIO_L24: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::L24),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_l24_parse() {
        assert_eq!(crate::Mime::parse("audio/L24"), Ok(AUDIO_L24));
        assert_eq!(crate::Mime::parse("AUdIo/L24"), Ok(AUDIO_L24));
    }

    /// `audio/L8`
    pub const AUDIO_L8: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::L8),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_l8_parse() {
        assert_eq!(crate::Mime::parse("audio/L8"), Ok(AUDIO_L8));
        assert_eq!(crate::Mime::parse("aUDIO/L8"), Ok(AUDIO_L8));
    }

    /// `audio/LPC`
    pub const AUDIO_LPC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Lpc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_lpc_parse() {
        assert_eq!(crate::Mime::parse("audio/LPC"), Ok(AUDIO_LPC));
        assert_eq!(crate::Mime::parse("AudIo/lpc"), Ok(AUDIO_LPC));
    }

    /// `audio/MELP`
    pub const AUDIO_MELP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Melp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_melp_parse() {
        assert_eq!(crate::Mime::parse("audio/MELP"), Ok(AUDIO_MELP));
        assert_eq!(crate::Mime::parse("auDio/mELP"), Ok(AUDIO_MELP));
    }

    /// `audio/MELP1200`
    pub const AUDIO_MELP1200: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Melp1200),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_melp1200_parse() {
        assert_eq!(crate::Mime::parse("audio/MELP1200"), Ok(AUDIO_MELP1200));
        assert_eq!(crate::Mime::parse("AUdIo/mELP1200"), Ok(AUDIO_MELP1200));
    }

    /// `audio/MELP2400`
    pub const AUDIO_MELP2400: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Melp2400),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_melp2400_parse() {
        assert_eq!(crate::Mime::parse("audio/MELP2400"), Ok(AUDIO_MELP2400));
        assert_eq!(crate::Mime::parse("AuDiO/melP2400"), Ok(AUDIO_MELP2400));
    }

    /// `audio/MELP600`
    pub const AUDIO_MELP600: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Melp600),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_melp600_parse() {
        assert_eq!(crate::Mime::parse("audio/MELP600"), Ok(AUDIO_MELP600));
        assert_eq!(crate::Mime::parse("AUdiO/melp600"), Ok(AUDIO_MELP600));
    }

    /// `audio/mhas`
    pub const AUDIO_MHAS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mhas),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mhas_parse() {
        assert_eq!(crate::Mime::parse("audio/mhas"), Ok(AUDIO_MHAS));
        assert_eq!(crate::Mime::parse("AUDiO/MHAS"), Ok(AUDIO_MHAS));
    }

    /// `audio/mobile-xmf`
    pub const AUDIO_MOBILE_XMF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::MobileXmf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mobile_xmf_parse() {
        assert_eq!(crate::Mime::parse("audio/mobile-xmf"), Ok(AUDIO_MOBILE_XMF));
        assert_eq!(crate::Mime::parse("aUdIO/mOBiLE-xmF"), Ok(AUDIO_MOBILE_XMF));
    }

    /// `audio/mp4`
    pub const AUDIO_MP4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mp4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mp4_parse() {
        assert_eq!(crate::Mime::parse("audio/mp4"), Ok(AUDIO_MP4));
        assert_eq!(crate::Mime::parse("auDIo/mp4"), Ok(AUDIO_MP4));
    }

    /// `audio/MP4A-LATM`
    pub const AUDIO_MP4A_LATM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mp4aLatm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mp4a_latm_parse() {
        assert_eq!(crate::Mime::parse("audio/MP4A-LATM"), Ok(AUDIO_MP4A_LATM));
        assert_eq!(crate::Mime::parse("auDIo/mp4A-LaTM"), Ok(AUDIO_MP4A_LATM));
    }

    /// `audio/MPA`
    pub const AUDIO_MPA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mpa),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mpa_parse() {
        assert_eq!(crate::Mime::parse("audio/MPA"), Ok(AUDIO_MPA));
        assert_eq!(crate::Mime::parse("audIo/mpA"), Ok(AUDIO_MPA));
    }

    /// `audio/mpa-robust`
    pub const AUDIO_MPA_ROBUST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::MpaRobust),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mpa_robust_parse() {
        assert_eq!(crate::Mime::parse("audio/mpa-robust"), Ok(AUDIO_MPA_ROBUST));
        assert_eq!(crate::Mime::parse("AudiO/MpA-ROBUSt"), Ok(AUDIO_MPA_ROBUST));
    }

    /// `audio/mpeg`
    pub const AUDIO_MPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mpeg_parse() {
        assert_eq!(crate::Mime::parse("audio/mpeg"), Ok(AUDIO_MPEG));
        assert_eq!(crate::Mime::parse("auDio/MPEg"), Ok(AUDIO_MPEG));
    }

    /// `audio/mpeg4-generic`
    pub const AUDIO_MPEG4_GENERIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mpeg4Generic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mpeg4_generic_parse() {
        assert_eq!(crate::Mime::parse("audio/mpeg4-generic"), Ok(AUDIO_MPEG4_GENERIC));
        assert_eq!(crate::Mime::parse("audIo/MPeg4-GENerIC"), Ok(AUDIO_MPEG4_GENERIC));
    }

    /// `audio/mpegurl`
    pub const AUDIO_MPEGURL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Mpegurl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_mpegurl_parse() {
        assert_eq!(crate::Mime::parse("audio/mpegurl"), Ok(AUDIO_MPEGURL));
        assert_eq!(crate::Mime::parse("aUdIO/MPEGUrL"), Ok(AUDIO_MPEGURL));
    }

    /// `audio/ogg`
    pub const AUDIO_OGG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Ogg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_ogg_parse() {
        assert_eq!(crate::Mime::parse("audio/ogg"), Ok(AUDIO_OGG));
        assert_eq!(crate::Mime::parse("AUDiO/OGg"), Ok(AUDIO_OGG));
    }

    /// `audio/opus`
    pub const AUDIO_OPUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Opus),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_opus_parse() {
        assert_eq!(crate::Mime::parse("audio/opus"), Ok(AUDIO_OPUS));
        assert_eq!(crate::Mime::parse("auDio/opUS"), Ok(AUDIO_OPUS));
    }

    /// `audio/parityfec`
    pub const AUDIO_PARITYFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Parityfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_parityfec_parse() {
        assert_eq!(crate::Mime::parse("audio/parityfec"), Ok(AUDIO_PARITYFEC));
        assert_eq!(crate::Mime::parse("AUdio/pAriTyfeC"), Ok(AUDIO_PARITYFEC));
    }

    /// `audio/PCMA`
    pub const AUDIO_PCMA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Pcma),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_pcma_parse() {
        assert_eq!(crate::Mime::parse("audio/PCMA"), Ok(AUDIO_PCMA));
        assert_eq!(crate::Mime::parse("AudiO/PCmA"), Ok(AUDIO_PCMA));
    }

    /// `audio/PCMA-WB`
    pub const AUDIO_PCMA_WB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::PcmaWb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_pcma_wb_parse() {
        assert_eq!(crate::Mime::parse("audio/PCMA-WB"), Ok(AUDIO_PCMA_WB));
        assert_eq!(crate::Mime::parse("aUDIo/PcMa-wB"), Ok(AUDIO_PCMA_WB));
    }

    /// `audio/PCMU`
    pub const AUDIO_PCMU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Pcmu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_pcmu_parse() {
        assert_eq!(crate::Mime::parse("audio/PCMU"), Ok(AUDIO_PCMU));
        assert_eq!(crate::Mime::parse("AUdio/PCmu"), Ok(AUDIO_PCMU));
    }

    /// `audio/PCMU-WB`
    pub const AUDIO_PCMU_WB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::PcmuWb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_pcmu_wb_parse() {
        assert_eq!(crate::Mime::parse("audio/PCMU-WB"), Ok(AUDIO_PCMU_WB));
        assert_eq!(crate::Mime::parse("AUdio/pCmU-WB"), Ok(AUDIO_PCMU_WB));
    }

    /// `audio/prs.sid`
    pub const AUDIO_PRS_SID: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::PrsSid),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_prs_sid_parse() {
        assert_eq!(crate::Mime::parse("audio/prs.sid"), Ok(AUDIO_PRS_SID));
        assert_eq!(crate::Mime::parse("AuDIo/pRS.SiD"), Ok(AUDIO_PRS_SID));
    }

    /// `audio/QCELP`
    pub const AUDIO_QCELP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Qcelp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_qcelp_parse() {
        assert_eq!(crate::Mime::parse("audio/QCELP"), Ok(AUDIO_QCELP));
        assert_eq!(crate::Mime::parse("aUdio/qCElp"), Ok(AUDIO_QCELP));
    }

    /// `audio/raptorfec`
    pub const AUDIO_RAPTORFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Raptorfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_raptorfec_parse() {
        assert_eq!(crate::Mime::parse("audio/raptorfec"), Ok(AUDIO_RAPTORFEC));
        assert_eq!(crate::Mime::parse("audio/raPTORFEc"), Ok(AUDIO_RAPTORFEC));
    }

    /// `audio/RED`
    pub const AUDIO_RED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Red),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_red_parse() {
        assert_eq!(crate::Mime::parse("audio/RED"), Ok(AUDIO_RED));
        assert_eq!(crate::Mime::parse("AuDio/REd"), Ok(AUDIO_RED));
    }

    /// `audio/rtp-enc-aescm128`
    pub const AUDIO_RTP_ENC_AESCM128: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::RtpEncAescm128),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_rtp_enc_aescm128_parse() {
        assert_eq!(crate::Mime::parse("audio/rtp-enc-aescm128"), Ok(AUDIO_RTP_ENC_AESCM128));
        assert_eq!(crate::Mime::parse("audIO/rTp-enc-AEscm128"), Ok(AUDIO_RTP_ENC_AESCM128));
    }

    /// `audio/rtp-midi`
    pub const AUDIO_RTP_MIDI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::RtpMidi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_rtp_midi_parse() {
        assert_eq!(crate::Mime::parse("audio/rtp-midi"), Ok(AUDIO_RTP_MIDI));
        assert_eq!(crate::Mime::parse("AuDiO/rTp-Midi"), Ok(AUDIO_RTP_MIDI));
    }

    /// `audio/rtploopback`
    pub const AUDIO_RTPLOOPBACK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Rtploopback),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_rtploopback_parse() {
        assert_eq!(crate::Mime::parse("audio/rtploopback"), Ok(AUDIO_RTPLOOPBACK));
        assert_eq!(crate::Mime::parse("audIO/rtplOoPbacK"), Ok(AUDIO_RTPLOOPBACK));
    }

    /// `audio/rtx`
    pub const AUDIO_RTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Rtx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_rtx_parse() {
        assert_eq!(crate::Mime::parse("audio/rtx"), Ok(AUDIO_RTX));
        assert_eq!(crate::Mime::parse("auDiO/RTX"), Ok(AUDIO_RTX));
    }

    /// `audio/scip`
    pub const AUDIO_SCIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Scip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_scip_parse() {
        assert_eq!(crate::Mime::parse("audio/scip"), Ok(AUDIO_SCIP));
        assert_eq!(crate::Mime::parse("AudiO/sCIp"), Ok(AUDIO_SCIP));
    }

    /// `audio/SMV`
    pub const AUDIO_SMV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Smv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_smv_parse() {
        assert_eq!(crate::Mime::parse("audio/SMV"), Ok(AUDIO_SMV));
        assert_eq!(crate::Mime::parse("aUdIO/SmV"), Ok(AUDIO_SMV));
    }

    /// `audio/SMV-QCP`
    pub const AUDIO_SMV_QCP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::SmvQcp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_smv_qcp_parse() {
        assert_eq!(crate::Mime::parse("audio/SMV-QCP"), Ok(AUDIO_SMV_QCP));
        assert_eq!(crate::Mime::parse("aUdIo/Smv-QCp"), Ok(AUDIO_SMV_QCP));
    }

    /// `audio/SMV0`
    pub const AUDIO_SMV0: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Smv0),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_smv0_parse() {
        assert_eq!(crate::Mime::parse("audio/SMV0"), Ok(AUDIO_SMV0));
        assert_eq!(crate::Mime::parse("AuDIO/sMv0"), Ok(AUDIO_SMV0));
    }

    /// `audio/sofa`
    pub const AUDIO_SOFA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Sofa),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_sofa_parse() {
        assert_eq!(crate::Mime::parse("audio/sofa"), Ok(AUDIO_SOFA));
        assert_eq!(crate::Mime::parse("AUDiO/SofA"), Ok(AUDIO_SOFA));
    }

    /// `audio/sp-midi`
    pub const AUDIO_SP_MIDI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::SpMidi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_sp_midi_parse() {
        assert_eq!(crate::Mime::parse("audio/sp-midi"), Ok(AUDIO_SP_MIDI));
        assert_eq!(crate::Mime::parse("AudiO/sP-midI"), Ok(AUDIO_SP_MIDI));
    }

    /// `audio/speex`
    pub const AUDIO_SPEEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Speex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_speex_parse() {
        assert_eq!(crate::Mime::parse("audio/speex"), Ok(AUDIO_SPEEX));
        assert_eq!(crate::Mime::parse("AUdIO/speeX"), Ok(AUDIO_SPEEX));
    }

    /// `audio/t140c`
    pub const AUDIO_T140C: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::T140c),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_t140c_parse() {
        assert_eq!(crate::Mime::parse("audio/t140c"), Ok(AUDIO_T140C));
        assert_eq!(crate::Mime::parse("audIO/t140c"), Ok(AUDIO_T140C));
    }

    /// `audio/t38`
    pub const AUDIO_T38: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::T38),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_t38_parse() {
        assert_eq!(crate::Mime::parse("audio/t38"), Ok(AUDIO_T38));
        assert_eq!(crate::Mime::parse("AUdio/T38"), Ok(AUDIO_T38));
    }

    /// `audio/telephone-event`
    pub const AUDIO_TELEPHONE_EVENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::TelephoneEvent),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_telephone_event_parse() {
        assert_eq!(crate::Mime::parse("audio/telephone-event"), Ok(AUDIO_TELEPHONE_EVENT));
        assert_eq!(crate::Mime::parse("aUDiO/TeLePhonE-EVEnt"), Ok(AUDIO_TELEPHONE_EVENT));
    }

    /// `audio/TETRA_ACELP`
    pub const AUDIO_TETRA_ACELP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::TetraAcelp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_tetra_acelp_parse() {
        assert_eq!(crate::Mime::parse("audio/TETRA_ACELP"), Ok(AUDIO_TETRA_ACELP));
        assert_eq!(crate::Mime::parse("AudiO/TetrA_acelp"), Ok(AUDIO_TETRA_ACELP));
    }

    /// `audio/TETRA_ACELP_BB`
    pub const AUDIO_TETRA_ACELP_BB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::TetraAcelpBb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_tetra_acelp_bb_parse() {
        assert_eq!(crate::Mime::parse("audio/TETRA_ACELP_BB"), Ok(AUDIO_TETRA_ACELP_BB));
        assert_eq!(crate::Mime::parse("Audio/TeTRA_ACELp_bB"), Ok(AUDIO_TETRA_ACELP_BB));
    }

    /// `audio/tone`
    pub const AUDIO_TONE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Tone),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_tone_parse() {
        assert_eq!(crate::Mime::parse("audio/tone"), Ok(AUDIO_TONE));
        assert_eq!(crate::Mime::parse("AudIO/TONE"), Ok(AUDIO_TONE));
    }

    /// `audio/TSVCIS`
    pub const AUDIO_TSVCIS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Tsvcis),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_tsvcis_parse() {
        assert_eq!(crate::Mime::parse("audio/TSVCIS"), Ok(AUDIO_TSVCIS));
        assert_eq!(crate::Mime::parse("AUdio/tSvCIs"), Ok(AUDIO_TSVCIS));
    }

    /// `audio/UEMCLIP`
    pub const AUDIO_UEMCLIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Uemclip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_uemclip_parse() {
        assert_eq!(crate::Mime::parse("audio/UEMCLIP"), Ok(AUDIO_UEMCLIP));
        assert_eq!(crate::Mime::parse("AuDio/UEmcliP"), Ok(AUDIO_UEMCLIP));
    }

    /// `audio/ulpfec`
    pub const AUDIO_ULPFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Ulpfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_ulpfec_parse() {
        assert_eq!(crate::Mime::parse("audio/ulpfec"), Ok(AUDIO_ULPFEC));
        assert_eq!(crate::Mime::parse("aUDIO/ULpFEC"), Ok(AUDIO_ULPFEC));
    }

    /// `audio/usac`
    pub const AUDIO_USAC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Usac),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_usac_parse() {
        assert_eq!(crate::Mime::parse("audio/usac"), Ok(AUDIO_USAC));
        assert_eq!(crate::Mime::parse("AUDIo/USac"), Ok(AUDIO_USAC));
    }

    /// `audio/VDVI`
    pub const AUDIO_VDVI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Vdvi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vdvi_parse() {
        assert_eq!(crate::Mime::parse("audio/VDVI"), Ok(AUDIO_VDVI));
        assert_eq!(crate::Mime::parse("audIo/vdVi"), Ok(AUDIO_VDVI));
    }

    /// `audio/VMR-WB`
    pub const AUDIO_VMR_WB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VmrWb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vmr_wb_parse() {
        assert_eq!(crate::Mime::parse("audio/VMR-WB"), Ok(AUDIO_VMR_WB));
        assert_eq!(crate::Mime::parse("aUdIO/vmr-Wb"), Ok(AUDIO_VMR_WB));
    }

    /// `audio/vnd.3gpp.iufp`
    pub const AUDIO_VND_3GPP_IUFP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Vnd3gppIufp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_3gpp_iufp_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.3gpp.iufp"), Ok(AUDIO_VND_3GPP_IUFP));
        assert_eq!(crate::Mime::parse("AuDio/vNd.3Gpp.iUfP"), Ok(AUDIO_VND_3GPP_IUFP));
    }

    /// `audio/vnd.4SB`
    pub const AUDIO_VND_4SB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Vnd4sb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_4sb_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.4SB"), Ok(AUDIO_VND_4SB));
        assert_eq!(crate::Mime::parse("aUdiO/vnD.4Sb"), Ok(AUDIO_VND_4SB));
    }

    /// `audio/vnd.audiokoz`
    pub const AUDIO_VND_AUDIOKOZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndAudiokoz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_audiokoz_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.audiokoz"), Ok(AUDIO_VND_AUDIOKOZ));
        assert_eq!(crate::Mime::parse("AUDIo/Vnd.AUdiokoZ"), Ok(AUDIO_VND_AUDIOKOZ));
    }

    /// `audio/vnd.CELP`
    pub const AUDIO_VND_CELP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndCelp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_celp_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.CELP"), Ok(AUDIO_VND_CELP));
        assert_eq!(crate::Mime::parse("AuDio/vnd.Celp"), Ok(AUDIO_VND_CELP));
    }

    /// `audio/vnd.cisco.nse`
    pub const AUDIO_VND_CISCO_NSE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndCiscoNse),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_cisco_nse_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.cisco.nse"), Ok(AUDIO_VND_CISCO_NSE));
        assert_eq!(crate::Mime::parse("AuDIo/vNd.cISCO.NSe"), Ok(AUDIO_VND_CISCO_NSE));
    }

    /// `audio/vnd.cmles.radio-events`
    pub const AUDIO_VND_CMLES_RADIO_EVENTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndCmlesRadioEvents),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_cmles_radio_events_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.cmles.radio-events"), Ok(AUDIO_VND_CMLES_RADIO_EVENTS));
        assert_eq!(crate::Mime::parse("Audio/Vnd.CMLEs.RAdiO-eveNTs"), Ok(AUDIO_VND_CMLES_RADIO_EVENTS));
    }

    /// `audio/vnd.cns.anp1`
    pub const AUDIO_VND_CNS_ANP1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndCnsAnp1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_cns_anp1_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.cns.anp1"), Ok(AUDIO_VND_CNS_ANP1));
        assert_eq!(crate::Mime::parse("audIO/vNd.CnS.Anp1"), Ok(AUDIO_VND_CNS_ANP1));
    }

    /// `audio/vnd.cns.inf1`
    pub const AUDIO_VND_CNS_INF1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndCnsInf1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_cns_inf1_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.cns.inf1"), Ok(AUDIO_VND_CNS_INF1));
        assert_eq!(crate::Mime::parse("auDIo/vnd.CNS.INf1"), Ok(AUDIO_VND_CNS_INF1));
    }

    /// `audio/vnd.dece.audio`
    pub const AUDIO_VND_DECE_AUDIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDeceAudio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dece_audio_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dece.audio"), Ok(AUDIO_VND_DECE_AUDIO));
        assert_eq!(crate::Mime::parse("aUdio/vnd.deCe.AudiO"), Ok(AUDIO_VND_DECE_AUDIO));
    }

    /// `audio/vnd.digital-winds`
    pub const AUDIO_VND_DIGITAL_WINDS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDigitalWinds),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_digital_winds_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.digital-winds"), Ok(AUDIO_VND_DIGITAL_WINDS));
        assert_eq!(crate::Mime::parse("AudiO/Vnd.digital-wiNds"), Ok(AUDIO_VND_DIGITAL_WINDS));
    }

    /// `audio/vnd.dlna.adts`
    pub const AUDIO_VND_DLNA_ADTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDlnaAdts),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dlna_adts_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dlna.adts"), Ok(AUDIO_VND_DLNA_ADTS));
        assert_eq!(crate::Mime::parse("AuDIO/Vnd.dLnA.ADts"), Ok(AUDIO_VND_DLNA_ADTS));
    }

    /// `audio/vnd.dolby.heaac.1`
    pub const AUDIO_VND_DOLBY_HEAAC_1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyHeaac1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_heaac_1_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.heaac.1"), Ok(AUDIO_VND_DOLBY_HEAAC_1));
        assert_eq!(crate::Mime::parse("auDIo/Vnd.dOlby.heaaC.1"), Ok(AUDIO_VND_DOLBY_HEAAC_1));
    }

    /// `audio/vnd.dolby.heaac.2`
    pub const AUDIO_VND_DOLBY_HEAAC_2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyHeaac2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_heaac_2_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.heaac.2"), Ok(AUDIO_VND_DOLBY_HEAAC_2));
        assert_eq!(crate::Mime::parse("AUDio/VND.DolBy.HEaac.2"), Ok(AUDIO_VND_DOLBY_HEAAC_2));
    }

    /// `audio/vnd.dolby.mlp`
    pub const AUDIO_VND_DOLBY_MLP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyMlp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_mlp_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.mlp"), Ok(AUDIO_VND_DOLBY_MLP));
        assert_eq!(crate::Mime::parse("aUDIo/VnD.DolBY.mLp"), Ok(AUDIO_VND_DOLBY_MLP));
    }

    /// `audio/vnd.dolby.mps`
    pub const AUDIO_VND_DOLBY_MPS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyMps),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_mps_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.mps"), Ok(AUDIO_VND_DOLBY_MPS));
        assert_eq!(crate::Mime::parse("AuDio/VND.dOlby.MPS"), Ok(AUDIO_VND_DOLBY_MPS));
    }

    /// `audio/vnd.dolby.pl2`
    pub const AUDIO_VND_DOLBY_PL2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyPl2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_pl2_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.pl2"), Ok(AUDIO_VND_DOLBY_PL2));
        assert_eq!(crate::Mime::parse("auDiO/vNd.dolBY.pL2"), Ok(AUDIO_VND_DOLBY_PL2));
    }

    /// `audio/vnd.dolby.pl2x`
    pub const AUDIO_VND_DOLBY_PL2X: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyPl2x),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_pl2x_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.pl2x"), Ok(AUDIO_VND_DOLBY_PL2X));
        assert_eq!(crate::Mime::parse("auDio/Vnd.Dolby.pl2x"), Ok(AUDIO_VND_DOLBY_PL2X));
    }

    /// `audio/vnd.dolby.pl2z`
    pub const AUDIO_VND_DOLBY_PL2Z: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyPl2z),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_pl2z_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.pl2z"), Ok(AUDIO_VND_DOLBY_PL2Z));
        assert_eq!(crate::Mime::parse("auDIo/vND.DoLbY.PL2z"), Ok(AUDIO_VND_DOLBY_PL2Z));
    }

    /// `audio/vnd.dolby.pulse.1`
    pub const AUDIO_VND_DOLBY_PULSE_1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDolbyPulse1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dolby_pulse_1_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dolby.pulse.1"), Ok(AUDIO_VND_DOLBY_PULSE_1));
        assert_eq!(crate::Mime::parse("auDIo/vND.dOlBY.pUlsE.1"), Ok(AUDIO_VND_DOLBY_PULSE_1));
    }

    /// `audio/vnd.dra`
    pub const AUDIO_VND_DRA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDra),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dra_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dra"), Ok(AUDIO_VND_DRA));
        assert_eq!(crate::Mime::parse("AUdIo/vND.Dra"), Ok(AUDIO_VND_DRA));
    }

    /// `audio/vnd.dts`
    pub const AUDIO_VND_DTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDts),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dts_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dts"), Ok(AUDIO_VND_DTS));
        assert_eq!(crate::Mime::parse("AUDIo/vNd.dTS"), Ok(AUDIO_VND_DTS));
    }

    /// `audio/vnd.dts.hd`
    pub const AUDIO_VND_DTS_HD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDtsHd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dts_hd_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dts.hd"), Ok(AUDIO_VND_DTS_HD));
        assert_eq!(crate::Mime::parse("AudIO/VnD.DTs.hd"), Ok(AUDIO_VND_DTS_HD));
    }

    /// `audio/vnd.dts.uhd`
    pub const AUDIO_VND_DTS_UHD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDtsUhd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dts_uhd_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dts.uhd"), Ok(AUDIO_VND_DTS_UHD));
        assert_eq!(crate::Mime::parse("audio/vnd.dtS.Uhd"), Ok(AUDIO_VND_DTS_UHD));
    }

    /// `audio/vnd.dvb.file`
    pub const AUDIO_VND_DVB_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndDvbFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_dvb_file_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.dvb.file"), Ok(AUDIO_VND_DVB_FILE));
        assert_eq!(crate::Mime::parse("AudIo/VND.dvb.FiLE"), Ok(AUDIO_VND_DVB_FILE));
    }

    /// `audio/vnd.everad.plj`
    pub const AUDIO_VND_EVERAD_PLJ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndEveradPlj),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_everad_plj_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.everad.plj"), Ok(AUDIO_VND_EVERAD_PLJ));
        assert_eq!(crate::Mime::parse("aUdIo/Vnd.EVERAd.plj"), Ok(AUDIO_VND_EVERAD_PLJ));
    }

    /// `audio/vnd.hns.audio`
    pub const AUDIO_VND_HNS_AUDIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndHnsAudio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_hns_audio_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.hns.audio"), Ok(AUDIO_VND_HNS_AUDIO));
        assert_eq!(crate::Mime::parse("aUdIO/vnd.hNS.aUdiO"), Ok(AUDIO_VND_HNS_AUDIO));
    }

    /// `audio/vnd.lucent.voice`
    pub const AUDIO_VND_LUCENT_VOICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndLucentVoice),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_lucent_voice_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.lucent.voice"), Ok(AUDIO_VND_LUCENT_VOICE));
        assert_eq!(crate::Mime::parse("AUdIO/vND.luCENt.VOIcE"), Ok(AUDIO_VND_LUCENT_VOICE));
    }

    /// `audio/vnd.ms-playready.media.pya`
    pub const AUDIO_VND_MS_PLAYREADY_MEDIA_PYA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndMsPlayreadyMediaPya),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_ms_playready_media_pya_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.ms-playready.media.pya"), Ok(AUDIO_VND_MS_PLAYREADY_MEDIA_PYA));
        assert_eq!(crate::Mime::parse("auDIO/vnd.MS-PLAYREADY.mEDiA.PyA"), Ok(AUDIO_VND_MS_PLAYREADY_MEDIA_PYA));
    }

    /// `audio/vnd.nokia.mobile-xmf`
    pub const AUDIO_VND_NOKIA_MOBILE_XMF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaMobileXmf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_nokia_mobile_xmf_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.nokia.mobile-xmf"), Ok(AUDIO_VND_NOKIA_MOBILE_XMF));
        assert_eq!(crate::Mime::parse("AUDIo/vNd.NoKIa.mOBILe-Xmf"), Ok(AUDIO_VND_NOKIA_MOBILE_XMF));
    }

    /// `audio/vnd.nortel.vbk`
    pub const AUDIO_VND_NORTEL_VBK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndNortelVbk),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_nortel_vbk_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.nortel.vbk"), Ok(AUDIO_VND_NORTEL_VBK));
        assert_eq!(crate::Mime::parse("aUDio/Vnd.NORTel.vbk"), Ok(AUDIO_VND_NORTEL_VBK));
    }

    /// `audio/vnd.nuera.ecelp4800`
    pub const AUDIO_VND_NUERA_ECELP4800: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndNueraEcelp4800),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_nuera_ecelp4800_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.nuera.ecelp4800"), Ok(AUDIO_VND_NUERA_ECELP4800));
        assert_eq!(crate::Mime::parse("AUDio/VND.NuEra.eCeLP4800"), Ok(AUDIO_VND_NUERA_ECELP4800));
    }

    /// `audio/vnd.nuera.ecelp7470`
    pub const AUDIO_VND_NUERA_ECELP7470: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndNueraEcelp7470),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_nuera_ecelp7470_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.nuera.ecelp7470"), Ok(AUDIO_VND_NUERA_ECELP7470));
        assert_eq!(crate::Mime::parse("auDIo/vnd.NUera.ECELP7470"), Ok(AUDIO_VND_NUERA_ECELP7470));
    }

    /// `audio/vnd.nuera.ecelp9600`
    pub const AUDIO_VND_NUERA_ECELP9600: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndNueraEcelp9600),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_nuera_ecelp9600_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.nuera.ecelp9600"), Ok(AUDIO_VND_NUERA_ECELP9600));
        assert_eq!(crate::Mime::parse("auDIO/Vnd.nUerA.EcelP9600"), Ok(AUDIO_VND_NUERA_ECELP9600));
    }

    /// `audio/vnd.octel.sbc`
    pub const AUDIO_VND_OCTEL_SBC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndOctelSbc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_octel_sbc_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.octel.sbc"), Ok(AUDIO_VND_OCTEL_SBC));
        assert_eq!(crate::Mime::parse("AUDiO/Vnd.OCTeL.SbC"), Ok(AUDIO_VND_OCTEL_SBC));
    }

    /// `audio/vnd.presonus.multitrack`
    pub const AUDIO_VND_PRESONUS_MULTITRACK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndPresonusMultitrack),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_presonus_multitrack_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.presonus.multitrack"), Ok(AUDIO_VND_PRESONUS_MULTITRACK));
        assert_eq!(crate::Mime::parse("AudIo/vnd.preSoNUS.MUltiTrACK"), Ok(AUDIO_VND_PRESONUS_MULTITRACK));
    }

    /// `audio/vnd.rhetorex.32kadpcm`
    pub const AUDIO_VND_RHETOREX_32KADPCM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndRhetorex32kadpcm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_rhetorex_32kadpcm_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.rhetorex.32kadpcm"), Ok(AUDIO_VND_RHETOREX_32KADPCM));
        assert_eq!(crate::Mime::parse("AuDiO/VnD.RhETorex.32KADpCm"), Ok(AUDIO_VND_RHETOREX_32KADPCM));
    }

    /// `audio/vnd.rip`
    pub const AUDIO_VND_RIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndRip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_rip_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.rip"), Ok(AUDIO_VND_RIP));
        assert_eq!(crate::Mime::parse("AUDIO/VND.rip"), Ok(AUDIO_VND_RIP));
    }

    /// `audio/vnd.sealedmedia.softseal.mpeg`
    pub const AUDIO_VND_SEALEDMEDIA_SOFTSEAL_MPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndSealedmediaSoftsealMpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_sealedmedia_softseal_mpeg_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.sealedmedia.softseal.mpeg"), Ok(AUDIO_VND_SEALEDMEDIA_SOFTSEAL_MPEG));
        assert_eq!(crate::Mime::parse("AuDiO/vnD.SEALEdMeDia.SofTseAl.mpEg"), Ok(AUDIO_VND_SEALEDMEDIA_SOFTSEAL_MPEG));
    }

    /// `audio/vnd.vmx.cvsd`
    pub const AUDIO_VND_VMX_CVSD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VndVmxCvsd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vnd_vmx_cvsd_parse() {
        assert_eq!(crate::Mime::parse("audio/vnd.vmx.cvsd"), Ok(AUDIO_VND_VMX_CVSD));
        assert_eq!(crate::Mime::parse("Audio/vND.VmX.CvSd"), Ok(AUDIO_VND_VMX_CVSD));
    }

    /// `audio/vorbis`
    pub const AUDIO_VORBIS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::Vorbis),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vorbis_parse() {
        assert_eq!(crate::Mime::parse("audio/vorbis"), Ok(AUDIO_VORBIS));
        assert_eq!(crate::Mime::parse("auDio/VorBiS"), Ok(AUDIO_VORBIS));
    }

    /// `audio/vorbis-config`
    pub const AUDIO_VORBIS_CONFIG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::VorbisConfig),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_vorbis_config_parse() {
        assert_eq!(crate::Mime::parse("audio/vorbis-config"), Ok(AUDIO_VORBIS_CONFIG));
        assert_eq!(crate::Mime::parse("AuDio/VorbIs-COnfIg"), Ok(AUDIO_VORBIS_CONFIG));
    }

    /// `audio/x-aiff`
    pub const AUDIO_X_AIFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XAiff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_aiff_parse() {
        assert_eq!(crate::Mime::parse("audio/x-aiff"), Ok(AUDIO_X_AIFF));
        assert_eq!(crate::Mime::parse("AUdIO/X-aIff"), Ok(AUDIO_X_AIFF));
    }

    /// `audio/x-gsm`
    pub const AUDIO_X_GSM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XGsm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_gsm_parse() {
        assert_eq!(crate::Mime::parse("audio/x-gsm"), Ok(AUDIO_X_GSM));
        assert_eq!(crate::Mime::parse("AuDiO/X-GsM"), Ok(AUDIO_X_GSM));
    }

    /// `audio/x-ms-wax`
    pub const AUDIO_X_MS_WAX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XMsWax),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_ms_wax_parse() {
        assert_eq!(crate::Mime::parse("audio/x-ms-wax"), Ok(AUDIO_X_MS_WAX));
        assert_eq!(crate::Mime::parse("aUDIo/X-Ms-WaX"), Ok(AUDIO_X_MS_WAX));
    }

    /// `audio/x-ms-wma`
    pub const AUDIO_X_MS_WMA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XMsWma),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_ms_wma_parse() {
        assert_eq!(crate::Mime::parse("audio/x-ms-wma"), Ok(AUDIO_X_MS_WMA));
        assert_eq!(crate::Mime::parse("audio/X-Ms-wMa"), Ok(AUDIO_X_MS_WMA));
    }

    /// `audio/x-pn-realaudio`
    pub const AUDIO_X_PN_REALAUDIO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XPnRealaudio),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_pn_realaudio_parse() {
        assert_eq!(crate::Mime::parse("audio/x-pn-realaudio"), Ok(AUDIO_X_PN_REALAUDIO));
        assert_eq!(crate::Mime::parse("auDio/x-pN-reALaUDIO"), Ok(AUDIO_X_PN_REALAUDIO));
    }

    /// `audio/x-scpls`
    pub const AUDIO_X_SCPLS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XScpls),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_scpls_parse() {
        assert_eq!(crate::Mime::parse("audio/x-scpls"), Ok(AUDIO_X_SCPLS));
        assert_eq!(crate::Mime::parse("AUdio/x-ScpLS"), Ok(AUDIO_X_SCPLS));
    }

    /// `audio/x-sd2`
    pub const AUDIO_X_SD2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XSd2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_sd2_parse() {
        assert_eq!(crate::Mime::parse("audio/x-sd2"), Ok(AUDIO_X_SD2));
        assert_eq!(crate::Mime::parse("aUdIO/X-SD2"), Ok(AUDIO_X_SD2));
    }

    /// `audio/x-wav`
    pub const AUDIO_X_WAV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Audio),
        subtype: crate::Name::Interned(super::Subtype::XWav),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn audio_x_wav_parse() {
        assert_eq!(crate::Mime::parse("audio/x-wav"), Ok(AUDIO_X_WAV));
        assert_eq!(crate::Mime::parse("audIo/X-WAV"), Ok(AUDIO_X_WAV));
    }

    /// `chemical/x-alchemy`
    pub const CHEMICAL_X_ALCHEMY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XAlchemy),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_alchemy_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-alchemy"), Ok(CHEMICAL_X_ALCHEMY));
        assert_eq!(crate::Mime::parse("chEmIcaL/x-alchemY"), Ok(CHEMICAL_X_ALCHEMY));
    }

    /// `chemical/x-cache`
    pub const CHEMICAL_X_CACHE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCache),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cache_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cache"), Ok(CHEMICAL_X_CACHE));
        assert_eq!(crate::Mime::parse("cHeMIcAL/X-cache"), Ok(CHEMICAL_X_CACHE));
    }

    /// `chemical/x-cache-csf`
    pub const CHEMICAL_X_CACHE_CSF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCacheCsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cache_csf_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cache-csf"), Ok(CHEMICAL_X_CACHE_CSF));
        assert_eq!(crate::Mime::parse("cheMIcaL/X-CAcHE-Csf"), Ok(CHEMICAL_X_CACHE_CSF));
    }

    /// `chemical/x-cactvs-binary`
    pub const CHEMICAL_X_CACTVS_BINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCactvsBinary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cactvs_binary_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cactvs-binary"), Ok(CHEMICAL_X_CACTVS_BINARY));
        assert_eq!(crate::Mime::parse("chEMICal/x-cacTvS-BinARY"), Ok(CHEMICAL_X_CACTVS_BINARY));
    }

    /// `chemical/x-cdx`
    pub const CHEMICAL_X_CDX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCdx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cdx_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cdx"), Ok(CHEMICAL_X_CDX));
        assert_eq!(crate::Mime::parse("cHeMICAl/x-cdX"), Ok(CHEMICAL_X_CDX));
    }

    /// `chemical/x-cerius`
    pub const CHEMICAL_X_CERIUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCerius),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cerius_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cerius"), Ok(CHEMICAL_X_CERIUS));
        assert_eq!(crate::Mime::parse("cHEmicAL/x-cerius"), Ok(CHEMICAL_X_CERIUS));
    }

    /// `chemical/x-chem3d`
    pub const CHEMICAL_X_CHEM3D: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XChem3d),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_chem3d_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-chem3d"), Ok(CHEMICAL_X_CHEM3D));
        assert_eq!(crate::Mime::parse("cHemIcaL/X-Chem3d"), Ok(CHEMICAL_X_CHEM3D));
    }

    /// `chemical/x-chemdraw`
    pub const CHEMICAL_X_CHEMDRAW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XChemdraw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_chemdraw_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-chemdraw"), Ok(CHEMICAL_X_CHEMDRAW));
        assert_eq!(crate::Mime::parse("CHeMICaL/X-cHeMDrAw"), Ok(CHEMICAL_X_CHEMDRAW));
    }

    /// `chemical/x-cif`
    pub const CHEMICAL_X_CIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cif_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cif"), Ok(CHEMICAL_X_CIF));
        assert_eq!(crate::Mime::parse("ChEMIcal/X-ciF"), Ok(CHEMICAL_X_CIF));
    }

    /// `chemical/x-cmdf`
    pub const CHEMICAL_X_CMDF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCmdf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cmdf_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cmdf"), Ok(CHEMICAL_X_CMDF));
        assert_eq!(crate::Mime::parse("ChemIcal/x-CmdF"), Ok(CHEMICAL_X_CMDF));
    }

    /// `chemical/x-cml`
    pub const CHEMICAL_X_CML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cml_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cml"), Ok(CHEMICAL_X_CML));
        assert_eq!(crate::Mime::parse("Chemical/X-cML"), Ok(CHEMICAL_X_CML));
    }

    /// `chemical/x-compass`
    pub const CHEMICAL_X_COMPASS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCompass),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_compass_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-compass"), Ok(CHEMICAL_X_COMPASS));
        assert_eq!(crate::Mime::parse("ChEmICal/x-COmPAss"), Ok(CHEMICAL_X_COMPASS));
    }

    /// `chemical/x-crossfire`
    pub const CHEMICAL_X_CROSSFIRE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCrossfire),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_crossfire_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-crossfire"), Ok(CHEMICAL_X_CROSSFIRE));
        assert_eq!(crate::Mime::parse("cHemical/X-cRoSsfIre"), Ok(CHEMICAL_X_CROSSFIRE));
    }

    /// `chemical/x-csml`
    pub const CHEMICAL_X_CSML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCsml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_csml_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-csml"), Ok(CHEMICAL_X_CSML));
        assert_eq!(crate::Mime::parse("cheMIcAl/x-CsML"), Ok(CHEMICAL_X_CSML));
    }

    /// `chemical/x-ctx`
    pub const CHEMICAL_X_CTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCtx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_ctx_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-ctx"), Ok(CHEMICAL_X_CTX));
        assert_eq!(crate::Mime::parse("cHemICAL/x-cTX"), Ok(CHEMICAL_X_CTX));
    }

    /// `chemical/x-cxf`
    pub const CHEMICAL_X_CXF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XCxf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_cxf_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-cxf"), Ok(CHEMICAL_X_CXF));
        assert_eq!(crate::Mime::parse("cHEMiCAl/X-CxF"), Ok(CHEMICAL_X_CXF));
    }

    /// `chemical/x-embl-dl-nucleotide`
    pub const CHEMICAL_X_EMBL_DL_NUCLEOTIDE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XEmblDlNucleotide),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_embl_dl_nucleotide_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-embl-dl-nucleotide"), Ok(CHEMICAL_X_EMBL_DL_NUCLEOTIDE));
        assert_eq!(crate::Mime::parse("chemICaL/X-EMBl-Dl-NuClEotiDE"), Ok(CHEMICAL_X_EMBL_DL_NUCLEOTIDE));
    }

    /// `chemical/x-galactic-spc`
    pub const CHEMICAL_X_GALACTIC_SPC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGalacticSpc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_galactic_spc_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-galactic-spc"), Ok(CHEMICAL_X_GALACTIC_SPC));
        assert_eq!(crate::Mime::parse("cheMICaL/x-GALaCtIC-sPc"), Ok(CHEMICAL_X_GALACTIC_SPC));
    }

    /// `chemical/x-gamess-input`
    pub const CHEMICAL_X_GAMESS_INPUT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGamessInput),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_gamess_input_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-gamess-input"), Ok(CHEMICAL_X_GAMESS_INPUT));
        assert_eq!(crate::Mime::parse("cHEMIcAL/x-GAmeSS-INpuT"), Ok(CHEMICAL_X_GAMESS_INPUT));
    }

    /// `chemical/x-gaussian-checkpoint`
    pub const CHEMICAL_X_GAUSSIAN_CHECKPOINT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGaussianCheckpoint),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_gaussian_checkpoint_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-gaussian-checkpoint"), Ok(CHEMICAL_X_GAUSSIAN_CHECKPOINT));
        assert_eq!(crate::Mime::parse("CHEMIcaL/x-GAussiaN-chECkpoInT"), Ok(CHEMICAL_X_GAUSSIAN_CHECKPOINT));
    }

    /// `chemical/x-gaussian-cube`
    pub const CHEMICAL_X_GAUSSIAN_CUBE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGaussianCube),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_gaussian_cube_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-gaussian-cube"), Ok(CHEMICAL_X_GAUSSIAN_CUBE));
        assert_eq!(crate::Mime::parse("cHemIcal/X-GAuSsiAN-cuBe"), Ok(CHEMICAL_X_GAUSSIAN_CUBE));
    }

    /// `chemical/x-gaussian-input`
    pub const CHEMICAL_X_GAUSSIAN_INPUT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGaussianInput),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_gaussian_input_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-gaussian-input"), Ok(CHEMICAL_X_GAUSSIAN_INPUT));
        assert_eq!(crate::Mime::parse("ChemICal/x-gaUsSIAn-inpUT"), Ok(CHEMICAL_X_GAUSSIAN_INPUT));
    }

    /// `chemical/x-gaussian-log`
    pub const CHEMICAL_X_GAUSSIAN_LOG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGaussianLog),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_gaussian_log_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-gaussian-log"), Ok(CHEMICAL_X_GAUSSIAN_LOG));
        assert_eq!(crate::Mime::parse("ChEmicaL/x-GaUSsian-lOg"), Ok(CHEMICAL_X_GAUSSIAN_LOG));
    }

    /// `chemical/x-gcg8-sequence`
    pub const CHEMICAL_X_GCG8_SEQUENCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGcg8Sequence),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_gcg8_sequence_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-gcg8-sequence"), Ok(CHEMICAL_X_GCG8_SEQUENCE));
        assert_eq!(crate::Mime::parse("cHeMiCAL/X-GcG8-seqUEnCE"), Ok(CHEMICAL_X_GCG8_SEQUENCE));
    }

    /// `chemical/x-genbank`
    pub const CHEMICAL_X_GENBANK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XGenbank),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_genbank_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-genbank"), Ok(CHEMICAL_X_GENBANK));
        assert_eq!(crate::Mime::parse("CHeMICAl/x-GeNbANK"), Ok(CHEMICAL_X_GENBANK));
    }

    /// `chemical/x-hin`
    pub const CHEMICAL_X_HIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XHin),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_hin_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-hin"), Ok(CHEMICAL_X_HIN));
        assert_eq!(crate::Mime::parse("cHeMIcAl/x-hin"), Ok(CHEMICAL_X_HIN));
    }

    /// `chemical/x-isostar`
    pub const CHEMICAL_X_ISOSTAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XIsostar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_isostar_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-isostar"), Ok(CHEMICAL_X_ISOSTAR));
        assert_eq!(crate::Mime::parse("ChEmicAL/x-iSoSTAr"), Ok(CHEMICAL_X_ISOSTAR));
    }

    /// `chemical/x-jcamp-dx`
    pub const CHEMICAL_X_JCAMP_DX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XJcampDx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_jcamp_dx_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-jcamp-dx"), Ok(CHEMICAL_X_JCAMP_DX));
        assert_eq!(crate::Mime::parse("CHEmical/X-JCAMP-DX"), Ok(CHEMICAL_X_JCAMP_DX));
    }

    /// `chemical/x-kinemage`
    pub const CHEMICAL_X_KINEMAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XKinemage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_kinemage_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-kinemage"), Ok(CHEMICAL_X_KINEMAGE));
        assert_eq!(crate::Mime::parse("CHemicAL/X-kInEmagE"), Ok(CHEMICAL_X_KINEMAGE));
    }

    /// `chemical/x-macmolecule`
    pub const CHEMICAL_X_MACMOLECULE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMacmolecule),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_macmolecule_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-macmolecule"), Ok(CHEMICAL_X_MACMOLECULE));
        assert_eq!(crate::Mime::parse("cHEmIcaL/x-maCMOleculE"), Ok(CHEMICAL_X_MACMOLECULE));
    }

    /// `chemical/x-macromodel-input`
    pub const CHEMICAL_X_MACROMODEL_INPUT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMacromodelInput),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_macromodel_input_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-macromodel-input"), Ok(CHEMICAL_X_MACROMODEL_INPUT));
        assert_eq!(crate::Mime::parse("chEmicAl/x-maCroMoDeL-inPUt"), Ok(CHEMICAL_X_MACROMODEL_INPUT));
    }

    /// `chemical/x-mdl-molfile`
    pub const CHEMICAL_X_MDL_MOLFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMdlMolfile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mdl_molfile_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mdl-molfile"), Ok(CHEMICAL_X_MDL_MOLFILE));
        assert_eq!(crate::Mime::parse("ChEMICAl/x-mDl-MolFiLe"), Ok(CHEMICAL_X_MDL_MOLFILE));
    }

    /// `chemical/x-mdl-rdfile`
    pub const CHEMICAL_X_MDL_RDFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMdlRdfile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mdl_rdfile_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mdl-rdfile"), Ok(CHEMICAL_X_MDL_RDFILE));
        assert_eq!(crate::Mime::parse("cheMical/X-mdl-rDfIlE"), Ok(CHEMICAL_X_MDL_RDFILE));
    }

    /// `chemical/x-mdl-rxnfile`
    pub const CHEMICAL_X_MDL_RXNFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMdlRxnfile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mdl_rxnfile_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mdl-rxnfile"), Ok(CHEMICAL_X_MDL_RXNFILE));
        assert_eq!(crate::Mime::parse("cHEMicAL/X-MDL-rxnfILe"), Ok(CHEMICAL_X_MDL_RXNFILE));
    }

    /// `chemical/x-mdl-sdfile`
    pub const CHEMICAL_X_MDL_SDFILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMdlSdfile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mdl_sdfile_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mdl-sdfile"), Ok(CHEMICAL_X_MDL_SDFILE));
        assert_eq!(crate::Mime::parse("cHemiCaL/X-mdL-sDFiLe"), Ok(CHEMICAL_X_MDL_SDFILE));
    }

    /// `chemical/x-mdl-tgf`
    pub const CHEMICAL_X_MDL_TGF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMdlTgf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mdl_tgf_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mdl-tgf"), Ok(CHEMICAL_X_MDL_TGF));
        assert_eq!(crate::Mime::parse("chEmiCaL/x-mdl-tGF"), Ok(CHEMICAL_X_MDL_TGF));
    }

    /// `chemical/x-mmcif`
    pub const CHEMICAL_X_MMCIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMmcif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mmcif_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mmcif"), Ok(CHEMICAL_X_MMCIF));
        assert_eq!(crate::Mime::parse("CHEmical/x-MmCIF"), Ok(CHEMICAL_X_MMCIF));
    }

    /// `chemical/x-mol2`
    pub const CHEMICAL_X_MOL2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMol2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mol2_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mol2"), Ok(CHEMICAL_X_MOL2));
        assert_eq!(crate::Mime::parse("CHeMIcaL/x-mOl2"), Ok(CHEMICAL_X_MOL2));
    }

    /// `chemical/x-molconn-Z`
    pub const CHEMICAL_X_MOLCONN_Z: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMolconnZ),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_molconn_z_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-molconn-Z"), Ok(CHEMICAL_X_MOLCONN_Z));
        assert_eq!(crate::Mime::parse("CHeMicAl/X-moLconn-z"), Ok(CHEMICAL_X_MOLCONN_Z));
    }

    /// `chemical/x-mopac-graph`
    pub const CHEMICAL_X_MOPAC_GRAPH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMopacGraph),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mopac_graph_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mopac-graph"), Ok(CHEMICAL_X_MOPAC_GRAPH));
        assert_eq!(crate::Mime::parse("CHeMIcal/X-mopaC-GRAph"), Ok(CHEMICAL_X_MOPAC_GRAPH));
    }

    /// `chemical/x-mopac-input`
    pub const CHEMICAL_X_MOPAC_INPUT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMopacInput),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mopac_input_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mopac-input"), Ok(CHEMICAL_X_MOPAC_INPUT));
        assert_eq!(crate::Mime::parse("chemiCAl/x-MOPac-INPUt"), Ok(CHEMICAL_X_MOPAC_INPUT));
    }

    /// `chemical/x-mopac-out`
    pub const CHEMICAL_X_MOPAC_OUT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMopacOut),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mopac_out_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mopac-out"), Ok(CHEMICAL_X_MOPAC_OUT));
        assert_eq!(crate::Mime::parse("CHEmicAl/X-MopAC-ouT"), Ok(CHEMICAL_X_MOPAC_OUT));
    }

    /// `chemical/x-mopac-vib`
    pub const CHEMICAL_X_MOPAC_VIB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XMopacVib),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_mopac_vib_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-mopac-vib"), Ok(CHEMICAL_X_MOPAC_VIB));
        assert_eq!(crate::Mime::parse("CheMICaL/X-mOPaC-viB"), Ok(CHEMICAL_X_MOPAC_VIB));
    }

    /// `chemical/x-ncbi-asn1`
    pub const CHEMICAL_X_NCBI_ASN1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XNcbiAsn1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_ncbi_asn1_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-ncbi-asn1"), Ok(CHEMICAL_X_NCBI_ASN1));
        assert_eq!(crate::Mime::parse("chEmIcAl/X-NCbi-Asn1"), Ok(CHEMICAL_X_NCBI_ASN1));
    }

    /// `chemical/x-ncbi-asn1-ascii`
    pub const CHEMICAL_X_NCBI_ASN1_ASCII: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XNcbiAsn1Ascii),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_ncbi_asn1_ascii_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-ncbi-asn1-ascii"), Ok(CHEMICAL_X_NCBI_ASN1_ASCII));
        assert_eq!(crate::Mime::parse("chEMical/x-nCbI-AsN1-asCII"), Ok(CHEMICAL_X_NCBI_ASN1_ASCII));
    }

    /// `chemical/x-ncbi-asn1-binary`
    pub const CHEMICAL_X_NCBI_ASN1_BINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XNcbiAsn1Binary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_ncbi_asn1_binary_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-ncbi-asn1-binary"), Ok(CHEMICAL_X_NCBI_ASN1_BINARY));
        assert_eq!(crate::Mime::parse("cHEmICAl/X-Ncbi-aSN1-BinarY"), Ok(CHEMICAL_X_NCBI_ASN1_BINARY));
    }

    /// `chemical/x-ncbi-asn1-spec`
    pub const CHEMICAL_X_NCBI_ASN1_SPEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XNcbiAsn1Spec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_ncbi_asn1_spec_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-ncbi-asn1-spec"), Ok(CHEMICAL_X_NCBI_ASN1_SPEC));
        assert_eq!(crate::Mime::parse("ChEmIcAl/X-NCbi-ASn1-speC"), Ok(CHEMICAL_X_NCBI_ASN1_SPEC));
    }

    /// `chemical/x-pdb`
    pub const CHEMICAL_X_PDB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XPdb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_pdb_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-pdb"), Ok(CHEMICAL_X_PDB));
        assert_eq!(crate::Mime::parse("cheMicaL/x-pdB"), Ok(CHEMICAL_X_PDB));
    }

    /// `chemical/x-rosdal`
    pub const CHEMICAL_X_ROSDAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XRosdal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_rosdal_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-rosdal"), Ok(CHEMICAL_X_ROSDAL));
        assert_eq!(crate::Mime::parse("cHemical/X-RoSdAl"), Ok(CHEMICAL_X_ROSDAL));
    }

    /// `chemical/x-swissprot`
    pub const CHEMICAL_X_SWISSPROT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XSwissprot),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_swissprot_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-swissprot"), Ok(CHEMICAL_X_SWISSPROT));
        assert_eq!(crate::Mime::parse("cHEMiCAl/X-sWISsPRot"), Ok(CHEMICAL_X_SWISSPROT));
    }

    /// `chemical/x-vamas-iso14976`
    pub const CHEMICAL_X_VAMAS_ISO14976: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XVamasIso14976),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_vamas_iso14976_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-vamas-iso14976"), Ok(CHEMICAL_X_VAMAS_ISO14976));
        assert_eq!(crate::Mime::parse("cHemiCAL/x-VaMas-isO14976"), Ok(CHEMICAL_X_VAMAS_ISO14976));
    }

    /// `chemical/x-vmd`
    pub const CHEMICAL_X_VMD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XVmd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_vmd_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-vmd"), Ok(CHEMICAL_X_VMD));
        assert_eq!(crate::Mime::parse("ChEMIcal/x-vmd"), Ok(CHEMICAL_X_VMD));
    }

    /// `chemical/x-xtel`
    pub const CHEMICAL_X_XTEL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XXtel),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_xtel_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-xtel"), Ok(CHEMICAL_X_XTEL));
        assert_eq!(crate::Mime::parse("ChemiCAL/X-xTeL"), Ok(CHEMICAL_X_XTEL));
    }

    /// `chemical/x-xyz`
    pub const CHEMICAL_X_XYZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Chemical),
        subtype: crate::Name::Interned(super::Subtype::XXyz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn chemical_x_xyz_parse() {
        assert_eq!(crate::Mime::parse("chemical/x-xyz"), Ok(CHEMICAL_X_XYZ));
        assert_eq!(crate::Mime::parse("CHemiCaL/x-XYZ"), Ok(CHEMICAL_X_XYZ));
    }

    /// `font/collection`
    pub const FONT_COLLECTION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Font),
        subtype: crate::Name::Interned(super::Subtype::Collection),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn font_collection_parse() {
        assert_eq!(crate::Mime::parse("font/collection"), Ok(FONT_COLLECTION));
        assert_eq!(crate::Mime::parse("fONT/collECTioN"), Ok(FONT_COLLECTION));
    }

    /// `font/otf`
    pub const FONT_OTF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Font),
        subtype: crate::Name::Interned(super::Subtype::Otf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn font_otf_parse() {
        assert_eq!(crate::Mime::parse("font/otf"), Ok(FONT_OTF));
        assert_eq!(crate::Mime::parse("FONt/oTF"), Ok(FONT_OTF));
    }

    /// `font/sfnt`
    pub const FONT_SFNT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Font),
        subtype: crate::Name::Interned(super::Subtype::Sfnt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn font_sfnt_parse() {
        assert_eq!(crate::Mime::parse("font/sfnt"), Ok(FONT_SFNT));
        assert_eq!(crate::Mime::parse("FOnt/SfNt"), Ok(FONT_SFNT));
    }

    /// `font/ttf`
    pub const FONT_TTF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Font),
        subtype: crate::Name::Interned(super::Subtype::Ttf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn font_ttf_parse() {
        assert_eq!(crate::Mime::parse("font/ttf"), Ok(FONT_TTF));
        assert_eq!(crate::Mime::parse("font/Ttf"), Ok(FONT_TTF));
    }

    /// `font/woff`
    pub const FONT_WOFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Font),
        subtype: crate::Name::Interned(super::Subtype::Woff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn font_woff_parse() {
        assert_eq!(crate::Mime::parse("font/woff"), Ok(FONT_WOFF));
        assert_eq!(crate::Mime::parse("FONT/woFf"), Ok(FONT_WOFF));
    }

    /// `font/woff2`
    pub const FONT_WOFF2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Font),
        subtype: crate::Name::Interned(super::Subtype::Woff2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn font_woff2_parse() {
        assert_eq!(crate::Mime::parse("font/woff2"), Ok(FONT_WOFF2));
        assert_eq!(crate::Mime::parse("FoNT/woFf2"), Ok(FONT_WOFF2));
    }

    /// `image/aces`
    pub const IMAGE_ACES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Aces),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_aces_parse() {
        assert_eq!(crate::Mime::parse("image/aces"), Ok(IMAGE_ACES));
        assert_eq!(crate::Mime::parse("ImAge/Aces"), Ok(IMAGE_ACES));
    }

    /// `image/avci`
    pub const IMAGE_AVCI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Avci),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_avci_parse() {
        assert_eq!(crate::Mime::parse("image/avci"), Ok(IMAGE_AVCI));
        assert_eq!(crate::Mime::parse("imAGE/AvCi"), Ok(IMAGE_AVCI));
    }

    /// `image/avcs`
    pub const IMAGE_AVCS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Avcs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_avcs_parse() {
        assert_eq!(crate::Mime::parse("image/avcs"), Ok(IMAGE_AVCS));
        assert_eq!(crate::Mime::parse("imaGE/AVcs"), Ok(IMAGE_AVCS));
    }

    /// `image/avif`
    pub const IMAGE_AVIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Avif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_avif_parse() {
        assert_eq!(crate::Mime::parse("image/avif"), Ok(IMAGE_AVIF));
        assert_eq!(crate::Mime::parse("IMAGe/AVIf"), Ok(IMAGE_AVIF));
    }

    /// `image/bmp`
    pub const IMAGE_BMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Bmp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_bmp_parse() {
        assert_eq!(crate::Mime::parse("image/bmp"), Ok(IMAGE_BMP));
        assert_eq!(crate::Mime::parse("imAge/Bmp"), Ok(IMAGE_BMP));
    }

    /// `image/cgm`
    pub const IMAGE_CGM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Cgm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_cgm_parse() {
        assert_eq!(crate::Mime::parse("image/cgm"), Ok(IMAGE_CGM));
        assert_eq!(crate::Mime::parse("IMaGe/CgM"), Ok(IMAGE_CGM));
    }

    /// `image/dicom-rle`
    pub const IMAGE_DICOM_RLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::DicomRle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_dicom_rle_parse() {
        assert_eq!(crate::Mime::parse("image/dicom-rle"), Ok(IMAGE_DICOM_RLE));
        assert_eq!(crate::Mime::parse("image/DiCOM-RLe"), Ok(IMAGE_DICOM_RLE));
    }

    /// `image/emf`
    pub const IMAGE_EMF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Emf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_emf_parse() {
        assert_eq!(crate::Mime::parse("image/emf"), Ok(IMAGE_EMF));
        assert_eq!(crate::Mime::parse("iMAge/emf"), Ok(IMAGE_EMF));
    }

    /// `image/example`
    pub const IMAGE_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_example_parse() {
        assert_eq!(crate::Mime::parse("image/example"), Ok(IMAGE_EXAMPLE));
        assert_eq!(crate::Mime::parse("iMAgE/eXAMple"), Ok(IMAGE_EXAMPLE));
    }

    /// `image/fits`
    pub const IMAGE_FITS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Fits),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_fits_parse() {
        assert_eq!(crate::Mime::parse("image/fits"), Ok(IMAGE_FITS));
        assert_eq!(crate::Mime::parse("IMaGe/Fits"), Ok(IMAGE_FITS));
    }

    /// `image/g3fax`
    pub const IMAGE_G3FAX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::G3fax),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_g3fax_parse() {
        assert_eq!(crate::Mime::parse("image/g3fax"), Ok(IMAGE_G3FAX));
        assert_eq!(crate::Mime::parse("IMagE/g3faX"), Ok(IMAGE_G3FAX));
    }

    /// `image/gif`
    pub const IMAGE_GIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Gif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_gif_parse() {
        assert_eq!(crate::Mime::parse("image/gif"), Ok(IMAGE_GIF));
        assert_eq!(crate::Mime::parse("iMAGE/GIF"), Ok(IMAGE_GIF));
    }

    /// `image/heic`
    pub const IMAGE_HEIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Heic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_heic_parse() {
        assert_eq!(crate::Mime::parse("image/heic"), Ok(IMAGE_HEIC));
        assert_eq!(crate::Mime::parse("ImaGE/Heic"), Ok(IMAGE_HEIC));
    }

    /// `image/heic-sequence`
    pub const IMAGE_HEIC_SEQUENCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::HeicSequence),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_heic_sequence_parse() {
        assert_eq!(crate::Mime::parse("image/heic-sequence"), Ok(IMAGE_HEIC_SEQUENCE));
        assert_eq!(crate::Mime::parse("IMaGE/HeIc-SEqueNce"), Ok(IMAGE_HEIC_SEQUENCE));
    }

    /// `image/heif`
    pub const IMAGE_HEIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Heif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_heif_parse() {
        assert_eq!(crate::Mime::parse("image/heif"), Ok(IMAGE_HEIF));
        assert_eq!(crate::Mime::parse("IMagE/HeIF"), Ok(IMAGE_HEIF));
    }

    /// `image/heif-sequence`
    pub const IMAGE_HEIF_SEQUENCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::HeifSequence),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_heif_sequence_parse() {
        assert_eq!(crate::Mime::parse("image/heif-sequence"), Ok(IMAGE_HEIF_SEQUENCE));
        assert_eq!(crate::Mime::parse("imAGe/HeIf-sEquENce"), Ok(IMAGE_HEIF_SEQUENCE));
    }

    /// `image/hej2k`
    pub const IMAGE_HEJ2K: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Hej2k),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_hej2k_parse() {
        assert_eq!(crate::Mime::parse("image/hej2k"), Ok(IMAGE_HEJ2K));
        assert_eq!(crate::Mime::parse("IMaGe/HEJ2k"), Ok(IMAGE_HEJ2K));
    }

    /// `image/hsj2`
    pub const IMAGE_HSJ2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Hsj2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_hsj2_parse() {
        assert_eq!(crate::Mime::parse("image/hsj2"), Ok(IMAGE_HSJ2));
        assert_eq!(crate::Mime::parse("IMAGe/HSJ2"), Ok(IMAGE_HSJ2));
    }

    /// `image/ief`
    pub const IMAGE_IEF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Ief),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_ief_parse() {
        assert_eq!(crate::Mime::parse("image/ief"), Ok(IMAGE_IEF));
        assert_eq!(crate::Mime::parse("ImAGe/Ief"), Ok(IMAGE_IEF));
    }

    /// `image/jls`
    pub const IMAGE_JLS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jls),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jls_parse() {
        assert_eq!(crate::Mime::parse("image/jls"), Ok(IMAGE_JLS));
        assert_eq!(crate::Mime::parse("ImAgE/JLs"), Ok(IMAGE_JLS));
    }

    /// `image/jp2`
    pub const IMAGE_JP2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jp2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jp2_parse() {
        assert_eq!(crate::Mime::parse("image/jp2"), Ok(IMAGE_JP2));
        assert_eq!(crate::Mime::parse("ImaGe/jp2"), Ok(IMAGE_JP2));
    }

    /// `image/jpeg`
    pub const IMAGE_JPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jpeg_parse() {
        assert_eq!(crate::Mime::parse("image/jpeg"), Ok(IMAGE_JPEG));
        assert_eq!(crate::Mime::parse("IMAgE/JpEG"), Ok(IMAGE_JPEG));
    }

    /// `image/jph`
    pub const IMAGE_JPH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jph),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jph_parse() {
        assert_eq!(crate::Mime::parse("image/jph"), Ok(IMAGE_JPH));
        assert_eq!(crate::Mime::parse("IMAGE/JPH"), Ok(IMAGE_JPH));
    }

    /// `image/jphc`
    pub const IMAGE_JPHC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jphc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jphc_parse() {
        assert_eq!(crate::Mime::parse("image/jphc"), Ok(IMAGE_JPHC));
        assert_eq!(crate::Mime::parse("IMAgE/JPhc"), Ok(IMAGE_JPHC));
    }

    /// `image/jpm`
    pub const IMAGE_JPM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jpm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jpm_parse() {
        assert_eq!(crate::Mime::parse("image/jpm"), Ok(IMAGE_JPM));
        assert_eq!(crate::Mime::parse("ImAgE/JPm"), Ok(IMAGE_JPM));
    }

    /// `image/jpx`
    pub const IMAGE_JPX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jpx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jpx_parse() {
        assert_eq!(crate::Mime::parse("image/jpx"), Ok(IMAGE_JPX));
        assert_eq!(crate::Mime::parse("iMAge/jpX"), Ok(IMAGE_JPX));
    }

    /// `image/jxl`
    pub const IMAGE_JXL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jxl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxl_parse() {
        assert_eq!(crate::Mime::parse("image/jxl"), Ok(IMAGE_JXL));
        assert_eq!(crate::Mime::parse("iMaGe/JXl"), Ok(IMAGE_JXL));
    }

    /// `image/jxr`
    pub const IMAGE_JXR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jxr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxr_parse() {
        assert_eq!(crate::Mime::parse("image/jxr"), Ok(IMAGE_JXR));
        assert_eq!(crate::Mime::parse("IMage/jxr"), Ok(IMAGE_JXR));
    }

    /// `image/jxrA`
    pub const IMAGE_JXR_A: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::JxrA),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxr_a_parse() {
        assert_eq!(crate::Mime::parse("image/jxrA"), Ok(IMAGE_JXR_A));
        assert_eq!(crate::Mime::parse("Image/jxRa"), Ok(IMAGE_JXR_A));
    }

    /// `image/jxrS`
    pub const IMAGE_JXR_S: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::JxrS),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxr_s_parse() {
        assert_eq!(crate::Mime::parse("image/jxrS"), Ok(IMAGE_JXR_S));
        assert_eq!(crate::Mime::parse("imAgE/jxRS"), Ok(IMAGE_JXR_S));
    }

    /// `image/jxs`
    pub const IMAGE_JXS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jxs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxs_parse() {
        assert_eq!(crate::Mime::parse("image/jxs"), Ok(IMAGE_JXS));
        assert_eq!(crate::Mime::parse("iMAge/JXs"), Ok(IMAGE_JXS));
    }

    /// `image/jxsc`
    pub const IMAGE_JXSC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jxsc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxsc_parse() {
        assert_eq!(crate::Mime::parse("image/jxsc"), Ok(IMAGE_JXSC));
        assert_eq!(crate::Mime::parse("iMaGE/jXsc"), Ok(IMAGE_JXSC));
    }

    /// `image/jxsi`
    pub const IMAGE_JXSI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jxsi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxsi_parse() {
        assert_eq!(crate::Mime::parse("image/jxsi"), Ok(IMAGE_JXSI));
        assert_eq!(crate::Mime::parse("ImaGe/jXSi"), Ok(IMAGE_JXSI));
    }

    /// `image/jxss`
    pub const IMAGE_JXSS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Jxss),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_jxss_parse() {
        assert_eq!(crate::Mime::parse("image/jxss"), Ok(IMAGE_JXSS));
        assert_eq!(crate::Mime::parse("Image/JxsS"), Ok(IMAGE_JXSS));
    }

    /// `image/ktx`
    pub const IMAGE_KTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Ktx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_ktx_parse() {
        assert_eq!(crate::Mime::parse("image/ktx"), Ok(IMAGE_KTX));
        assert_eq!(crate::Mime::parse("ImaGe/Ktx"), Ok(IMAGE_KTX));
    }

    /// `image/ktx2`
    pub const IMAGE_KTX2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Ktx2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_ktx2_parse() {
        assert_eq!(crate::Mime::parse("image/ktx2"), Ok(IMAGE_KTX2));
        assert_eq!(crate::Mime::parse("iMAGe/KTx2"), Ok(IMAGE_KTX2));
    }

    /// `image/naplps`
    pub const IMAGE_NAPLPS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Naplps),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_naplps_parse() {
        assert_eq!(crate::Mime::parse("image/naplps"), Ok(IMAGE_NAPLPS));
        assert_eq!(crate::Mime::parse("imAge/naplpS"), Ok(IMAGE_NAPLPS));
    }

    /// `image/png`
    pub const IMAGE_PNG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Png),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_png_parse() {
        assert_eq!(crate::Mime::parse("image/png"), Ok(IMAGE_PNG));
        assert_eq!(crate::Mime::parse("ImAge/PNg"), Ok(IMAGE_PNG));
    }

    /// `image/prs.btif`
    pub const IMAGE_PRS_BTIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::PrsBtif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_prs_btif_parse() {
        assert_eq!(crate::Mime::parse("image/prs.btif"), Ok(IMAGE_PRS_BTIF));
        assert_eq!(crate::Mime::parse("IMaGE/pRs.BTIF"), Ok(IMAGE_PRS_BTIF));
    }

    /// `image/prs.pti`
    pub const IMAGE_PRS_PTI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::PrsPti),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_prs_pti_parse() {
        assert_eq!(crate::Mime::parse("image/prs.pti"), Ok(IMAGE_PRS_PTI));
        assert_eq!(crate::Mime::parse("ImAge/prS.pTI"), Ok(IMAGE_PRS_PTI));
    }

    /// `image/pwg-raster`
    pub const IMAGE_PWG_RASTER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::PwgRaster),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_pwg_raster_parse() {
        assert_eq!(crate::Mime::parse("image/pwg-raster"), Ok(IMAGE_PWG_RASTER));
        assert_eq!(crate::Mime::parse("iMAgE/pWG-raSTeR"), Ok(IMAGE_PWG_RASTER));
    }

    /// `image/svg+xml`
    pub const IMAGE_SVG_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Svg),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn image_svg_xml_parse() {
        assert_eq!(crate::Mime::parse("image/svg+xml"), Ok(IMAGE_SVG_XML));
        assert_eq!(crate::Mime::parse("ImAge/svG+XML"), Ok(IMAGE_SVG_XML));
    }

    /// `image/t38`
    pub const IMAGE_T38: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::T38),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_t38_parse() {
        assert_eq!(crate::Mime::parse("image/t38"), Ok(IMAGE_T38));
        assert_eq!(crate::Mime::parse("iMAGE/T38"), Ok(IMAGE_T38));
    }

    /// `image/tiff`
    pub const IMAGE_TIFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Tiff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_tiff_parse() {
        assert_eq!(crate::Mime::parse("image/tiff"), Ok(IMAGE_TIFF));
        assert_eq!(crate::Mime::parse("ImAgE/TIFf"), Ok(IMAGE_TIFF));
    }

    /// `image/tiff-fx`
    pub const IMAGE_TIFF_FX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::TiffFx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_tiff_fx_parse() {
        assert_eq!(crate::Mime::parse("image/tiff-fx"), Ok(IMAGE_TIFF_FX));
        assert_eq!(crate::Mime::parse("IMAge/TIFf-fX"), Ok(IMAGE_TIFF_FX));
    }

    /// `image/vnd.adobe.photoshop`
    pub const IMAGE_VND_ADOBE_PHOTOSHOP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndAdobePhotoshop),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_adobe_photoshop_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.adobe.photoshop"), Ok(IMAGE_VND_ADOBE_PHOTOSHOP));
        assert_eq!(crate::Mime::parse("ImagE/VnD.aDobE.pHOtosHop"), Ok(IMAGE_VND_ADOBE_PHOTOSHOP));
    }

    /// `image/vnd.airzip.accelerator.azv`
    pub const IMAGE_VND_AIRZIP_ACCELERATOR_AZV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndAirzipAcceleratorAzv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_airzip_accelerator_azv_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.airzip.accelerator.azv"), Ok(IMAGE_VND_AIRZIP_ACCELERATOR_AZV));
        assert_eq!(crate::Mime::parse("ImAge/vnd.AIrZIp.aCCeLerATor.aZv"), Ok(IMAGE_VND_AIRZIP_ACCELERATOR_AZV));
    }

    /// `image/vnd.cns.inf2`
    pub const IMAGE_VND_CNS_INF2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndCnsInf2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_cns_inf2_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.cns.inf2"), Ok(IMAGE_VND_CNS_INF2));
        assert_eq!(crate::Mime::parse("IMage/VND.CNS.iNF2"), Ok(IMAGE_VND_CNS_INF2));
    }

    /// `image/vnd.dece.graphic`
    pub const IMAGE_VND_DECE_GRAPHIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndDeceGraphic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_dece_graphic_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.dece.graphic"), Ok(IMAGE_VND_DECE_GRAPHIC));
        assert_eq!(crate::Mime::parse("imaGE/vnd.DeCe.GRAphIc"), Ok(IMAGE_VND_DECE_GRAPHIC));
    }

    /// `image/vnd.djvu`
    pub const IMAGE_VND_DJVU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndDjvu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_djvu_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.djvu"), Ok(IMAGE_VND_DJVU));
        assert_eq!(crate::Mime::parse("imAGe/VNd.DjVU"), Ok(IMAGE_VND_DJVU));
    }

    /// `image/vnd.dvb.subtitle`
    pub const IMAGE_VND_DVB_SUBTITLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndDvbSubtitle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_dvb_subtitle_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.dvb.subtitle"), Ok(IMAGE_VND_DVB_SUBTITLE));
        assert_eq!(crate::Mime::parse("iMAge/VnD.DVb.SUbtItlE"), Ok(IMAGE_VND_DVB_SUBTITLE));
    }

    /// `image/vnd.dwg`
    pub const IMAGE_VND_DWG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndDwg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_dwg_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.dwg"), Ok(IMAGE_VND_DWG));
        assert_eq!(crate::Mime::parse("imagE/vnD.Dwg"), Ok(IMAGE_VND_DWG));
    }

    /// `image/vnd.dxf`
    pub const IMAGE_VND_DXF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndDxf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_dxf_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.dxf"), Ok(IMAGE_VND_DXF));
        assert_eq!(crate::Mime::parse("iMage/VND.dxF"), Ok(IMAGE_VND_DXF));
    }

    /// `image/vnd.fastbidsheet`
    pub const IMAGE_VND_FASTBIDSHEET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndFastbidsheet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_fastbidsheet_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.fastbidsheet"), Ok(IMAGE_VND_FASTBIDSHEET));
        assert_eq!(crate::Mime::parse("imAgE/vnd.FasTbIDsHEet"), Ok(IMAGE_VND_FASTBIDSHEET));
    }

    /// `image/vnd.fpx`
    pub const IMAGE_VND_FPX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndFpx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_fpx_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.fpx"), Ok(IMAGE_VND_FPX));
        assert_eq!(crate::Mime::parse("IMAGe/VNd.fPx"), Ok(IMAGE_VND_FPX));
    }

    /// `image/vnd.fst`
    pub const IMAGE_VND_FST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndFst),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_fst_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.fst"), Ok(IMAGE_VND_FST));
        assert_eq!(crate::Mime::parse("image/vnD.fsT"), Ok(IMAGE_VND_FST));
    }

    /// `image/vnd.fujixerox.edmics-mmr`
    pub const IMAGE_VND_FUJIXEROX_EDMICS_MMR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxEdmicsMmr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_fujixerox_edmics_mmr_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.fujixerox.edmics-mmr"), Ok(IMAGE_VND_FUJIXEROX_EDMICS_MMR));
        assert_eq!(crate::Mime::parse("iMAgE/VnD.FUjixERox.EdmiCs-MMR"), Ok(IMAGE_VND_FUJIXEROX_EDMICS_MMR));
    }

    /// `image/vnd.fujixerox.edmics-rlc`
    pub const IMAGE_VND_FUJIXEROX_EDMICS_RLC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndFujixeroxEdmicsRlc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_fujixerox_edmics_rlc_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.fujixerox.edmics-rlc"), Ok(IMAGE_VND_FUJIXEROX_EDMICS_RLC));
        assert_eq!(crate::Mime::parse("image/VnD.FujiXeROX.edMics-rLC"), Ok(IMAGE_VND_FUJIXEROX_EDMICS_RLC));
    }

    /// `image/vnd.globalgraphics.pgb`
    pub const IMAGE_VND_GLOBALGRAPHICS_PGB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndGlobalgraphicsPgb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_globalgraphics_pgb_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.globalgraphics.pgb"), Ok(IMAGE_VND_GLOBALGRAPHICS_PGB));
        assert_eq!(crate::Mime::parse("imagE/vnd.gLObALgRaphiCS.PGB"), Ok(IMAGE_VND_GLOBALGRAPHICS_PGB));
    }

    /// `image/vnd.microsoft.icon`
    pub const IMAGE_VND_MICROSOFT_ICON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndMicrosoftIcon),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_microsoft_icon_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.microsoft.icon"), Ok(IMAGE_VND_MICROSOFT_ICON));
        assert_eq!(crate::Mime::parse("ImAge/vnD.microSoFt.ICON"), Ok(IMAGE_VND_MICROSOFT_ICON));
    }

    /// `image/vnd.mix`
    pub const IMAGE_VND_MIX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndMix),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_mix_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.mix"), Ok(IMAGE_VND_MIX));
        assert_eq!(crate::Mime::parse("image/VNd.mix"), Ok(IMAGE_VND_MIX));
    }

    /// `image/vnd.mozilla.apng`
    pub const IMAGE_VND_MOZILLA_APNG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndMozillaApng),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_mozilla_apng_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.mozilla.apng"), Ok(IMAGE_VND_MOZILLA_APNG));
        assert_eq!(crate::Mime::parse("ImAGe/vnD.mOZiLlA.ApNg"), Ok(IMAGE_VND_MOZILLA_APNG));
    }

    /// `image/vnd.ms-modi`
    pub const IMAGE_VND_MS_MODI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndMsModi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_ms_modi_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.ms-modi"), Ok(IMAGE_VND_MS_MODI));
        assert_eq!(crate::Mime::parse("iMagE/VND.Ms-mOdi"), Ok(IMAGE_VND_MS_MODI));
    }

    /// `image/vnd.net-fpx`
    pub const IMAGE_VND_NET_FPX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndNetFpx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_net_fpx_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.net-fpx"), Ok(IMAGE_VND_NET_FPX));
        assert_eq!(crate::Mime::parse("imAge/vnd.nET-FpX"), Ok(IMAGE_VND_NET_FPX));
    }

    /// `image/vnd.pco.b16`
    pub const IMAGE_VND_PCO_B16: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndPcoB16),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_pco_b16_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.pco.b16"), Ok(IMAGE_VND_PCO_B16));
        assert_eq!(crate::Mime::parse("iMAgE/Vnd.PCO.b16"), Ok(IMAGE_VND_PCO_B16));
    }

    /// `image/vnd.radiance`
    pub const IMAGE_VND_RADIANCE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndRadiance),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_radiance_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.radiance"), Ok(IMAGE_VND_RADIANCE));
        assert_eq!(crate::Mime::parse("IMagE/vnd.RADiAnce"), Ok(IMAGE_VND_RADIANCE));
    }

    /// `image/vnd.sealed.png`
    pub const IMAGE_VND_SEALED_PNG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndSealedPng),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_sealed_png_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.sealed.png"), Ok(IMAGE_VND_SEALED_PNG));
        assert_eq!(crate::Mime::parse("imAGE/VNd.SEALed.pNg"), Ok(IMAGE_VND_SEALED_PNG));
    }

    /// `image/vnd.sealedmedia.softseal.gif`
    pub const IMAGE_VND_SEALEDMEDIA_SOFTSEAL_GIF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndSealedmediaSoftsealGif),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_sealedmedia_softseal_gif_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.sealedmedia.softseal.gif"), Ok(IMAGE_VND_SEALEDMEDIA_SOFTSEAL_GIF));
        assert_eq!(crate::Mime::parse("imaGE/VNd.SeAleDmeDiA.sOftseAL.Gif"), Ok(IMAGE_VND_SEALEDMEDIA_SOFTSEAL_GIF));
    }

    /// `image/vnd.sealedmedia.softseal.jpg`
    pub const IMAGE_VND_SEALEDMEDIA_SOFTSEAL_JPG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndSealedmediaSoftsealJpg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_sealedmedia_softseal_jpg_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.sealedmedia.softseal.jpg"), Ok(IMAGE_VND_SEALEDMEDIA_SOFTSEAL_JPG));
        assert_eq!(crate::Mime::parse("iMagE/vnD.SeaLEdMeDIA.sOfTsEal.jPG"), Ok(IMAGE_VND_SEALEDMEDIA_SOFTSEAL_JPG));
    }

    /// `image/vnd.svf`
    pub const IMAGE_VND_SVF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndSvf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_svf_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.svf"), Ok(IMAGE_VND_SVF));
        assert_eq!(crate::Mime::parse("iMaGe/vnD.SvF"), Ok(IMAGE_VND_SVF));
    }

    /// `image/vnd.tencent.tap`
    pub const IMAGE_VND_TENCENT_TAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndTencentTap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_tencent_tap_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.tencent.tap"), Ok(IMAGE_VND_TENCENT_TAP));
        assert_eq!(crate::Mime::parse("ImAGe/vnd.TEncENt.TaP"), Ok(IMAGE_VND_TENCENT_TAP));
    }

    /// `image/vnd.valve.source.texture`
    pub const IMAGE_VND_VALVE_SOURCE_TEXTURE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndValveSourceTexture),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_valve_source_texture_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.valve.source.texture"), Ok(IMAGE_VND_VALVE_SOURCE_TEXTURE));
        assert_eq!(crate::Mime::parse("iMage/vNd.VaLVE.soURcE.TExTUrE"), Ok(IMAGE_VND_VALVE_SOURCE_TEXTURE));
    }

    /// `image/vnd.wap.wbmp`
    pub const IMAGE_VND_WAP_WBMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndWapWbmp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_wap_wbmp_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.wap.wbmp"), Ok(IMAGE_VND_WAP_WBMP));
        assert_eq!(crate::Mime::parse("iMAge/VND.wap.wBmP"), Ok(IMAGE_VND_WAP_WBMP));
    }

    /// `image/vnd.xiff`
    pub const IMAGE_VND_XIFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndXiff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_xiff_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.xiff"), Ok(IMAGE_VND_XIFF));
        assert_eq!(crate::Mime::parse("imagE/Vnd.xIFF"), Ok(IMAGE_VND_XIFF));
    }

    /// `image/vnd.zbrush.pcx`
    pub const IMAGE_VND_ZBRUSH_PCX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::VndZbrushPcx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_vnd_zbrush_pcx_parse() {
        assert_eq!(crate::Mime::parse("image/vnd.zbrush.pcx"), Ok(IMAGE_VND_ZBRUSH_PCX));
        assert_eq!(crate::Mime::parse("image/vnD.ZBrUSH.pcx"), Ok(IMAGE_VND_ZBRUSH_PCX));
    }

    /// `image/wmf`
    pub const IMAGE_WMF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::Wmf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_wmf_parse() {
        assert_eq!(crate::Mime::parse("image/wmf"), Ok(IMAGE_WMF));
        assert_eq!(crate::Mime::parse("iMAGe/wmF"), Ok(IMAGE_WMF));
    }

    /// `image/x-canon-cr2`
    pub const IMAGE_X_CANON_CR2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCanonCr2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_canon_cr2_parse() {
        assert_eq!(crate::Mime::parse("image/x-canon-cr2"), Ok(IMAGE_X_CANON_CR2));
        assert_eq!(crate::Mime::parse("IMAge/X-CANoN-cr2"), Ok(IMAGE_X_CANON_CR2));
    }

    /// `image/x-canon-crw`
    pub const IMAGE_X_CANON_CRW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCanonCrw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_canon_crw_parse() {
        assert_eq!(crate::Mime::parse("image/x-canon-crw"), Ok(IMAGE_X_CANON_CRW));
        assert_eq!(crate::Mime::parse("iMAge/x-caNon-CRw"), Ok(IMAGE_X_CANON_CRW));
    }

    /// `image/x-cmu-raster`
    pub const IMAGE_X_CMU_RASTER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCmuRaster),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_cmu_raster_parse() {
        assert_eq!(crate::Mime::parse("image/x-cmu-raster"), Ok(IMAGE_X_CMU_RASTER));
        assert_eq!(crate::Mime::parse("iMagE/X-cMU-rAStER"), Ok(IMAGE_X_CMU_RASTER));
    }

    /// `image/x-coreldraw`
    pub const IMAGE_X_CORELDRAW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCoreldraw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_coreldraw_parse() {
        assert_eq!(crate::Mime::parse("image/x-coreldraw"), Ok(IMAGE_X_CORELDRAW));
        assert_eq!(crate::Mime::parse("imAge/X-COReLdRaW"), Ok(IMAGE_X_CORELDRAW));
    }

    /// `image/x-coreldrawpattern`
    pub const IMAGE_X_CORELDRAWPATTERN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCoreldrawpattern),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_coreldrawpattern_parse() {
        assert_eq!(crate::Mime::parse("image/x-coreldrawpattern"), Ok(IMAGE_X_CORELDRAWPATTERN));
        assert_eq!(crate::Mime::parse("imAge/x-CorELDRawPATTerN"), Ok(IMAGE_X_CORELDRAWPATTERN));
    }

    /// `image/x-coreldrawtemplate`
    pub const IMAGE_X_CORELDRAWTEMPLATE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCoreldrawtemplate),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_coreldrawtemplate_parse() {
        assert_eq!(crate::Mime::parse("image/x-coreldrawtemplate"), Ok(IMAGE_X_CORELDRAWTEMPLATE));
        assert_eq!(crate::Mime::parse("IMAGe/X-CoReLDraWTEmplate"), Ok(IMAGE_X_CORELDRAWTEMPLATE));
    }

    /// `image/x-corelphotopaint`
    pub const IMAGE_X_CORELPHOTOPAINT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XCorelphotopaint),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_corelphotopaint_parse() {
        assert_eq!(crate::Mime::parse("image/x-corelphotopaint"), Ok(IMAGE_X_CORELPHOTOPAINT));
        assert_eq!(crate::Mime::parse("iMAge/X-CoRelPhotOPaInt"), Ok(IMAGE_X_CORELPHOTOPAINT));
    }

    /// `image/x-epson-erf`
    pub const IMAGE_X_EPSON_ERF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XEpsonErf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_epson_erf_parse() {
        assert_eq!(crate::Mime::parse("image/x-epson-erf"), Ok(IMAGE_X_EPSON_ERF));
        assert_eq!(crate::Mime::parse("ImAGE/X-EPsOn-eRF"), Ok(IMAGE_X_EPSON_ERF));
    }

    /// `image/x-jg`
    pub const IMAGE_X_JG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XJg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_jg_parse() {
        assert_eq!(crate::Mime::parse("image/x-jg"), Ok(IMAGE_X_JG));
        assert_eq!(crate::Mime::parse("imAGE/x-jg"), Ok(IMAGE_X_JG));
    }

    /// `image/x-jng`
    pub const IMAGE_X_JNG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XJng),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_jng_parse() {
        assert_eq!(crate::Mime::parse("image/x-jng"), Ok(IMAGE_X_JNG));
        assert_eq!(crate::Mime::parse("imAGE/x-jNG"), Ok(IMAGE_X_JNG));
    }

    /// `image/x-nikon-nef`
    pub const IMAGE_X_NIKON_NEF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XNikonNef),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_nikon_nef_parse() {
        assert_eq!(crate::Mime::parse("image/x-nikon-nef"), Ok(IMAGE_X_NIKON_NEF));
        assert_eq!(crate::Mime::parse("imaGe/x-NiKoN-nEf"), Ok(IMAGE_X_NIKON_NEF));
    }

    /// `image/x-olympus-orf`
    pub const IMAGE_X_OLYMPUS_ORF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XOlympusOrf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_olympus_orf_parse() {
        assert_eq!(crate::Mime::parse("image/x-olympus-orf"), Ok(IMAGE_X_OLYMPUS_ORF));
        assert_eq!(crate::Mime::parse("imagE/x-olYmPuS-oRF"), Ok(IMAGE_X_OLYMPUS_ORF));
    }

    /// `image/x-portable-anymap`
    pub const IMAGE_X_PORTABLE_ANYMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XPortableAnymap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_portable_anymap_parse() {
        assert_eq!(crate::Mime::parse("image/x-portable-anymap"), Ok(IMAGE_X_PORTABLE_ANYMAP));
        assert_eq!(crate::Mime::parse("iMaGe/x-pOrtaBlE-AnyMAP"), Ok(IMAGE_X_PORTABLE_ANYMAP));
    }

    /// `image/x-portable-bitmap`
    pub const IMAGE_X_PORTABLE_BITMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XPortableBitmap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_portable_bitmap_parse() {
        assert_eq!(crate::Mime::parse("image/x-portable-bitmap"), Ok(IMAGE_X_PORTABLE_BITMAP));
        assert_eq!(crate::Mime::parse("image/x-pOrtABlE-BitMAp"), Ok(IMAGE_X_PORTABLE_BITMAP));
    }

    /// `image/x-portable-graymap`
    pub const IMAGE_X_PORTABLE_GRAYMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XPortableGraymap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_portable_graymap_parse() {
        assert_eq!(crate::Mime::parse("image/x-portable-graymap"), Ok(IMAGE_X_PORTABLE_GRAYMAP));
        assert_eq!(crate::Mime::parse("ImaGE/x-PORTABlE-gRayMAp"), Ok(IMAGE_X_PORTABLE_GRAYMAP));
    }

    /// `image/x-portable-pixmap`
    pub const IMAGE_X_PORTABLE_PIXMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XPortablePixmap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_portable_pixmap_parse() {
        assert_eq!(crate::Mime::parse("image/x-portable-pixmap"), Ok(IMAGE_X_PORTABLE_PIXMAP));
        assert_eq!(crate::Mime::parse("IMage/X-POrtABlE-PIxmAp"), Ok(IMAGE_X_PORTABLE_PIXMAP));
    }

    /// `image/x-rgb`
    pub const IMAGE_X_RGB: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XRgb),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_rgb_parse() {
        assert_eq!(crate::Mime::parse("image/x-rgb"), Ok(IMAGE_X_RGB));
        assert_eq!(crate::Mime::parse("IMAGE/x-RgB"), Ok(IMAGE_X_RGB));
    }

    /// `image/x-xbitmap`
    pub const IMAGE_X_XBITMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XXbitmap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_xbitmap_parse() {
        assert_eq!(crate::Mime::parse("image/x-xbitmap"), Ok(IMAGE_X_XBITMAP));
        assert_eq!(crate::Mime::parse("imAge/x-xbitMAp"), Ok(IMAGE_X_XBITMAP));
    }

    /// `image/x-xcf`
    pub const IMAGE_X_XCF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XXcf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_xcf_parse() {
        assert_eq!(crate::Mime::parse("image/x-xcf"), Ok(IMAGE_X_XCF));
        assert_eq!(crate::Mime::parse("ImAgE/X-xCF"), Ok(IMAGE_X_XCF));
    }

    /// `image/x-xpixmap`
    pub const IMAGE_X_XPIXMAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XXpixmap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_xpixmap_parse() {
        assert_eq!(crate::Mime::parse("image/x-xpixmap"), Ok(IMAGE_X_XPIXMAP));
        assert_eq!(crate::Mime::parse("iMAgE/x-xpIXMAp"), Ok(IMAGE_X_XPIXMAP));
    }

    /// `image/x-xwindowdump`
    pub const IMAGE_X_XWINDOWDUMP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Image),
        subtype: crate::Name::Interned(super::Subtype::XXwindowdump),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn image_x_xwindowdump_parse() {
        assert_eq!(crate::Mime::parse("image/x-xwindowdump"), Ok(IMAGE_X_XWINDOWDUMP));
        assert_eq!(crate::Mime::parse("ImaGE/X-xwinDowDUmP"), Ok(IMAGE_X_XWINDOWDUMP));
    }

    /// `inode/blockdevice`
    pub const INODE_BLOCKDEVICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Inode),
        subtype: crate::Name::Interned(super::Subtype::Blockdevice),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn inode_blockdevice_parse() {
        assert_eq!(crate::Mime::parse("inode/blockdevice"), Ok(INODE_BLOCKDEVICE));
        assert_eq!(crate::Mime::parse("InODe/BLocKDeViCE"), Ok(INODE_BLOCKDEVICE));
    }

    /// `inode/chardevice`
    pub const INODE_CHARDEVICE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Inode),
        subtype: crate::Name::Interned(super::Subtype::Chardevice),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn inode_chardevice_parse() {
        assert_eq!(crate::Mime::parse("inode/chardevice"), Ok(INODE_CHARDEVICE));
        assert_eq!(crate::Mime::parse("InOde/chARdEvice"), Ok(INODE_CHARDEVICE));
    }

    /// `inode/directory`
    pub const INODE_DIRECTORY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Inode),
        subtype: crate::Name::Interned(super::Subtype::Directory),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn inode_directory_parse() {
        assert_eq!(crate::Mime::parse("inode/directory"), Ok(INODE_DIRECTORY));
        assert_eq!(crate::Mime::parse("INodE/DIRECtoRy"), Ok(INODE_DIRECTORY));
    }

    /// `inode/directory-locked`
    pub const INODE_DIRECTORY_LOCKED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Inode),
        subtype: crate::Name::Interned(super::Subtype::DirectoryLocked),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn inode_directory_locked_parse() {
        assert_eq!(crate::Mime::parse("inode/directory-locked"), Ok(INODE_DIRECTORY_LOCKED));
        assert_eq!(crate::Mime::parse("InoDE/diREctOry-LOCKED"), Ok(INODE_DIRECTORY_LOCKED));
    }

    /// `inode/fifo`
    pub const INODE_FIFO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Inode),
        subtype: crate::Name::Interned(super::Subtype::Fifo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn inode_fifo_parse() {
        assert_eq!(crate::Mime::parse("inode/fifo"), Ok(INODE_FIFO));
        assert_eq!(crate::Mime::parse("INode/fiFO"), Ok(INODE_FIFO));
    }

    /// `inode/socket`
    pub const INODE_SOCKET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Inode),
        subtype: crate::Name::Interned(super::Subtype::Socket),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn inode_socket_parse() {
        assert_eq!(crate::Mime::parse("inode/socket"), Ok(INODE_SOCKET));
        assert_eq!(crate::Mime::parse("inoDE/sOCket"), Ok(INODE_SOCKET));
    }

    /// `message/CPIM`
    pub const MESSAGE_CPIM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Cpim),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_cpim_parse() {
        assert_eq!(crate::Mime::parse("message/CPIM"), Ok(MESSAGE_CPIM));
        assert_eq!(crate::Mime::parse("meSsAgE/CPIm"), Ok(MESSAGE_CPIM));
    }

    /// `message/delivery-status`
    pub const MESSAGE_DELIVERY_STATUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::DeliveryStatus),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_delivery_status_parse() {
        assert_eq!(crate::Mime::parse("message/delivery-status"), Ok(MESSAGE_DELIVERY_STATUS));
        assert_eq!(crate::Mime::parse("MEsSagE/DElIVERy-STaTus"), Ok(MESSAGE_DELIVERY_STATUS));
    }

    /// `message/disposition-notification`
    pub const MESSAGE_DISPOSITION_NOTIFICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::DispositionNotification),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_disposition_notification_parse() {
        assert_eq!(crate::Mime::parse("message/disposition-notification"), Ok(MESSAGE_DISPOSITION_NOTIFICATION));
        assert_eq!(crate::Mime::parse("MesSaGE/diSpOSITioN-NotifICatIOn"), Ok(MESSAGE_DISPOSITION_NOTIFICATION));
    }

    /// `message/example`
    pub const MESSAGE_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_example_parse() {
        assert_eq!(crate::Mime::parse("message/example"), Ok(MESSAGE_EXAMPLE));
        assert_eq!(crate::Mime::parse("mEsSAGe/eXaMpLe"), Ok(MESSAGE_EXAMPLE));
    }

    /// `message/external-body`
    pub const MESSAGE_EXTERNAL_BODY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::ExternalBody),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_external_body_parse() {
        assert_eq!(crate::Mime::parse("message/external-body"), Ok(MESSAGE_EXTERNAL_BODY));
        assert_eq!(crate::Mime::parse("MeSsAGe/External-BODy"), Ok(MESSAGE_EXTERNAL_BODY));
    }

    /// `message/feedback-report`
    pub const MESSAGE_FEEDBACK_REPORT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::FeedbackReport),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_feedback_report_parse() {
        assert_eq!(crate::Mime::parse("message/feedback-report"), Ok(MESSAGE_FEEDBACK_REPORT));
        assert_eq!(crate::Mime::parse("mesSaGE/feEdBACk-RePOrt"), Ok(MESSAGE_FEEDBACK_REPORT));
    }

    /// `message/global`
    pub const MESSAGE_GLOBAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Global),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_global_parse() {
        assert_eq!(crate::Mime::parse("message/global"), Ok(MESSAGE_GLOBAL));
        assert_eq!(crate::Mime::parse("mEssAGE/GlObal"), Ok(MESSAGE_GLOBAL));
    }

    /// `message/global-delivery-status`
    pub const MESSAGE_GLOBAL_DELIVERY_STATUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::GlobalDeliveryStatus),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_global_delivery_status_parse() {
        assert_eq!(crate::Mime::parse("message/global-delivery-status"), Ok(MESSAGE_GLOBAL_DELIVERY_STATUS));
        assert_eq!(crate::Mime::parse("mEssagE/gLoBAl-dElIverY-STAtuS"), Ok(MESSAGE_GLOBAL_DELIVERY_STATUS));
    }

    /// `message/global-disposition-notification`
    pub const MESSAGE_GLOBAL_DISPOSITION_NOTIFICATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::GlobalDispositionNotification),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_global_disposition_notification_parse() {
        assert_eq!(crate::Mime::parse("message/global-disposition-notification"), Ok(MESSAGE_GLOBAL_DISPOSITION_NOTIFICATION));
        assert_eq!(crate::Mime::parse("MESSAGE/gLobAL-DisPoSiTIon-nOTIfIcaTioN"), Ok(MESSAGE_GLOBAL_DISPOSITION_NOTIFICATION));
    }

    /// `message/global-headers`
    pub const MESSAGE_GLOBAL_HEADERS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::GlobalHeaders),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_global_headers_parse() {
        assert_eq!(crate::Mime::parse("message/global-headers"), Ok(MESSAGE_GLOBAL_HEADERS));
        assert_eq!(crate::Mime::parse("MesSaGe/gLoBAL-HeAders"), Ok(MESSAGE_GLOBAL_HEADERS));
    }

    /// `message/http`
    pub const MESSAGE_HTTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Http),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_http_parse() {
        assert_eq!(crate::Mime::parse("message/http"), Ok(MESSAGE_HTTP));
        assert_eq!(crate::Mime::parse("MEsSAgE/HtTP"), Ok(MESSAGE_HTTP));
    }

    /// `message/imdn+xml`
    pub const MESSAGE_IMDN_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Imdn),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn message_imdn_xml_parse() {
        assert_eq!(crate::Mime::parse("message/imdn+xml"), Ok(MESSAGE_IMDN_XML));
        assert_eq!(crate::Mime::parse("messaGE/iMdN+xml"), Ok(MESSAGE_IMDN_XML));
    }

    /// `message/partial`
    pub const MESSAGE_PARTIAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Partial),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_partial_parse() {
        assert_eq!(crate::Mime::parse("message/partial"), Ok(MESSAGE_PARTIAL));
        assert_eq!(crate::Mime::parse("MessaGe/paRTIAL"), Ok(MESSAGE_PARTIAL));
    }

    /// `message/rfc822`
    pub const MESSAGE_RFC822: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Rfc822),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_rfc822_parse() {
        assert_eq!(crate::Mime::parse("message/rfc822"), Ok(MESSAGE_RFC822));
        assert_eq!(crate::Mime::parse("mESSAGE/rFC822"), Ok(MESSAGE_RFC822));
    }

    /// `message/s-http`
    pub const MESSAGE_S_HTTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::SHttp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_s_http_parse() {
        assert_eq!(crate::Mime::parse("message/s-http"), Ok(MESSAGE_S_HTTP));
        assert_eq!(crate::Mime::parse("MesSAGE/S-hTtP"), Ok(MESSAGE_S_HTTP));
    }

    /// `message/sip`
    pub const MESSAGE_SIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Sip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_sip_parse() {
        assert_eq!(crate::Mime::parse("message/sip"), Ok(MESSAGE_SIP));
        assert_eq!(crate::Mime::parse("mEssagE/SIp"), Ok(MESSAGE_SIP));
    }

    /// `message/sipfrag`
    pub const MESSAGE_SIPFRAG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::Sipfrag),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_sipfrag_parse() {
        assert_eq!(crate::Mime::parse("message/sipfrag"), Ok(MESSAGE_SIPFRAG));
        assert_eq!(crate::Mime::parse("mEsSAge/sipFrAg"), Ok(MESSAGE_SIPFRAG));
    }

    /// `message/tracking-status`
    pub const MESSAGE_TRACKING_STATUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::TrackingStatus),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_tracking_status_parse() {
        assert_eq!(crate::Mime::parse("message/tracking-status"), Ok(MESSAGE_TRACKING_STATUS));
        assert_eq!(crate::Mime::parse("MeSsAgE/TrAckInG-staTUS"), Ok(MESSAGE_TRACKING_STATUS));
    }

    /// `message/vnd.wfa.wsc`
    pub const MESSAGE_VND_WFA_WSC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Message),
        subtype: crate::Name::Interned(super::Subtype::VndWfaWsc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn message_vnd_wfa_wsc_parse() {
        assert_eq!(crate::Mime::parse("message/vnd.wfa.wsc"), Ok(MESSAGE_VND_WFA_WSC));
        assert_eq!(crate::Mime::parse("mesSAge/VND.WFA.wsC"), Ok(MESSAGE_VND_WFA_WSC));
    }

    /// `model/e57`
    pub const MODEL_E57: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::E57),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_e57_parse() {
        assert_eq!(crate::Mime::parse("model/e57"), Ok(MODEL_E57));
        assert_eq!(crate::Mime::parse("mOdEl/e57"), Ok(MODEL_E57));
    }

    /// `model/example`
    pub const MODEL_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_example_parse() {
        assert_eq!(crate::Mime::parse("model/example"), Ok(MODEL_EXAMPLE));
        assert_eq!(crate::Mime::parse("modEL/eXaMpLE"), Ok(MODEL_EXAMPLE));
    }

    /// `model/gltf+json`
    pub const MODEL_GLTF_JSON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Gltf),
        suffix: Some(crate::Name::Interned(super::Suffix::Json)),
        parameters: &[]
    });

    #[test]
    fn model_gltf_json_parse() {
        assert_eq!(crate::Mime::parse("model/gltf+json"), Ok(MODEL_GLTF_JSON));
        assert_eq!(crate::Mime::parse("mODEL/GlTf+jsOn"), Ok(MODEL_GLTF_JSON));
    }

    /// `model/gltf-binary`
    pub const MODEL_GLTF_BINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::GltfBinary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_gltf_binary_parse() {
        assert_eq!(crate::Mime::parse("model/gltf-binary"), Ok(MODEL_GLTF_BINARY));
        assert_eq!(crate::Mime::parse("MoDEl/gLTf-BiNarY"), Ok(MODEL_GLTF_BINARY));
    }

    /// `model/iges`
    pub const MODEL_IGES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Iges),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_iges_parse() {
        assert_eq!(crate::Mime::parse("model/iges"), Ok(MODEL_IGES));
        assert_eq!(crate::Mime::parse("mOdEl/iges"), Ok(MODEL_IGES));
    }

    /// `model/mesh`
    pub const MODEL_MESH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Mesh),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_mesh_parse() {
        assert_eq!(crate::Mime::parse("model/mesh"), Ok(MODEL_MESH));
        assert_eq!(crate::Mime::parse("MoDeL/mEsH"), Ok(MODEL_MESH));
    }

    /// `model/mtl`
    pub const MODEL_MTL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Mtl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_mtl_parse() {
        assert_eq!(crate::Mime::parse("model/mtl"), Ok(MODEL_MTL));
        assert_eq!(crate::Mime::parse("ModeL/mTl"), Ok(MODEL_MTL));
    }

    /// `model/obj`
    pub const MODEL_OBJ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Obj),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_obj_parse() {
        assert_eq!(crate::Mime::parse("model/obj"), Ok(MODEL_OBJ));
        assert_eq!(crate::Mime::parse("mOdeL/Obj"), Ok(MODEL_OBJ));
    }

    /// `model/prc`
    pub const MODEL_PRC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Prc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_prc_parse() {
        assert_eq!(crate::Mime::parse("model/prc"), Ok(MODEL_PRC));
        assert_eq!(crate::Mime::parse("MODEL/PRC"), Ok(MODEL_PRC));
    }

    /// `model/step`
    pub const MODEL_STEP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Step),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_step_parse() {
        assert_eq!(crate::Mime::parse("model/step"), Ok(MODEL_STEP));
        assert_eq!(crate::Mime::parse("mOdEL/step"), Ok(MODEL_STEP));
    }

    /// `model/step+xml`
    pub const MODEL_STEP_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Step),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn model_step_xml_parse() {
        assert_eq!(crate::Mime::parse("model/step+xml"), Ok(MODEL_STEP_XML));
        assert_eq!(crate::Mime::parse("MODel/STep+XML"), Ok(MODEL_STEP_XML));
    }

    /// `model/step+zip`
    pub const MODEL_STEP_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Step),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn model_step_zip_parse() {
        assert_eq!(crate::Mime::parse("model/step+zip"), Ok(MODEL_STEP_ZIP));
        assert_eq!(crate::Mime::parse("mODeL/stEP+zIP"), Ok(MODEL_STEP_ZIP));
    }

    /// `model/step-xml+zip`
    pub const MODEL_STEP_XML_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::StepXml),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn model_step_xml_zip_parse() {
        assert_eq!(crate::Mime::parse("model/step-xml+zip"), Ok(MODEL_STEP_XML_ZIP));
        assert_eq!(crate::Mime::parse("MoDeL/StEp-XmL+ZIp"), Ok(MODEL_STEP_XML_ZIP));
    }

    /// `model/stl`
    pub const MODEL_STL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Stl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_stl_parse() {
        assert_eq!(crate::Mime::parse("model/stl"), Ok(MODEL_STL));
        assert_eq!(crate::Mime::parse("mOdeL/sTl"), Ok(MODEL_STL));
    }

    /// `model/u3d`
    pub const MODEL_U3D: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::U3d),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_u3d_parse() {
        assert_eq!(crate::Mime::parse("model/u3d"), Ok(MODEL_U3D));
        assert_eq!(crate::Mime::parse("MODEl/U3D"), Ok(MODEL_U3D));
    }

    /// `model/vnd.collada+xml`
    pub const MODEL_VND_COLLADA_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndCollada),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn model_vnd_collada_xml_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.collada+xml"), Ok(MODEL_VND_COLLADA_XML));
        assert_eq!(crate::Mime::parse("MOdel/vNd.COlLAda+xmL"), Ok(MODEL_VND_COLLADA_XML));
    }

    /// `model/vnd.dwf`
    pub const MODEL_VND_DWF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndDwf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_dwf_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.dwf"), Ok(MODEL_VND_DWF));
        assert_eq!(crate::Mime::parse("model/vnD.dwF"), Ok(MODEL_VND_DWF));
    }

    /// `model/vnd.flatland.3dml`
    pub const MODEL_VND_FLATLAND_3DML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndFlatland3dml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_flatland_3dml_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.flatland.3dml"), Ok(MODEL_VND_FLATLAND_3DML));
        assert_eq!(crate::Mime::parse("moDEL/VND.flaTland.3dml"), Ok(MODEL_VND_FLATLAND_3DML));
    }

    /// `model/vnd.gdl`
    pub const MODEL_VND_GDL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndGdl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_gdl_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.gdl"), Ok(MODEL_VND_GDL));
        assert_eq!(crate::Mime::parse("MOdeL/vNd.GdL"), Ok(MODEL_VND_GDL));
    }

    /// `model/vnd.gs-gdl`
    pub const MODEL_VND_GS_GDL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndGsGdl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_gs_gdl_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.gs-gdl"), Ok(MODEL_VND_GS_GDL));
        assert_eq!(crate::Mime::parse("MoDel/vnd.gs-GDL"), Ok(MODEL_VND_GS_GDL));
    }

    /// `model/vnd.gtw`
    pub const MODEL_VND_GTW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndGtw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_gtw_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.gtw"), Ok(MODEL_VND_GTW));
        assert_eq!(crate::Mime::parse("modeL/vnD.Gtw"), Ok(MODEL_VND_GTW));
    }

    /// `model/vnd.moml+xml`
    pub const MODEL_VND_MOML_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndMoml),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn model_vnd_moml_xml_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.moml+xml"), Ok(MODEL_VND_MOML_XML));
        assert_eq!(crate::Mime::parse("mODel/vnd.MOML+xmL"), Ok(MODEL_VND_MOML_XML));
    }

    /// `model/vnd.mts`
    pub const MODEL_VND_MTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndMts),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_mts_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.mts"), Ok(MODEL_VND_MTS));
        assert_eq!(crate::Mime::parse("Model/vnD.mtS"), Ok(MODEL_VND_MTS));
    }

    /// `model/vnd.opengex`
    pub const MODEL_VND_OPENGEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndOpengex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_opengex_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.opengex"), Ok(MODEL_VND_OPENGEX));
        assert_eq!(crate::Mime::parse("moDel/vNd.OPEnGEX"), Ok(MODEL_VND_OPENGEX));
    }

    /// `model/vnd.parasolid.transmit.binary`
    pub const MODEL_VND_PARASOLID_TRANSMIT_BINARY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndParasolidTransmitBinary),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_parasolid_transmit_binary_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.parasolid.transmit.binary"), Ok(MODEL_VND_PARASOLID_TRANSMIT_BINARY));
        assert_eq!(crate::Mime::parse("mOdEl/VnD.PArAsOlid.tRansMiT.bInAry"), Ok(MODEL_VND_PARASOLID_TRANSMIT_BINARY));
    }

    /// `model/vnd.parasolid.transmit.text`
    pub const MODEL_VND_PARASOLID_TRANSMIT_TEXT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndParasolidTransmitText),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_parasolid_transmit_text_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.parasolid.transmit.text"), Ok(MODEL_VND_PARASOLID_TRANSMIT_TEXT));
        assert_eq!(crate::Mime::parse("mODEL/vNd.ParAsoLid.tRaNSMIt.Text"), Ok(MODEL_VND_PARASOLID_TRANSMIT_TEXT));
    }

    /// `model/vnd.pytha.pyox`
    pub const MODEL_VND_PYTHA_PYOX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndPythaPyox),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_pytha_pyox_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.pytha.pyox"), Ok(MODEL_VND_PYTHA_PYOX));
        assert_eq!(crate::Mime::parse("MoDeL/vNd.PYthA.pyOX"), Ok(MODEL_VND_PYTHA_PYOX));
    }

    /// `model/vnd.rosette.annotated-data-model`
    pub const MODEL_VND_ROSETTE_ANNOTATED_DATA_MODEL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndRosetteAnnotatedDataModel),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_rosette_annotated_data_model_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.rosette.annotated-data-model"), Ok(MODEL_VND_ROSETTE_ANNOTATED_DATA_MODEL));
        assert_eq!(crate::Mime::parse("MoDeL/VnD.ROSETte.aNnotaTED-DATA-MoDEl"), Ok(MODEL_VND_ROSETTE_ANNOTATED_DATA_MODEL));
    }

    /// `model/vnd.sap.vds`
    pub const MODEL_VND_SAP_VDS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndSapVds),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_sap_vds_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.sap.vds"), Ok(MODEL_VND_SAP_VDS));
        assert_eq!(crate::Mime::parse("modEL/VND.SaP.VDs"), Ok(MODEL_VND_SAP_VDS));
    }

    /// `model/vnd.usdz+zip`
    pub const MODEL_VND_USDZ_ZIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndUsdz),
        suffix: Some(crate::Name::Interned(super::Suffix::Zip)),
        parameters: &[]
    });

    #[test]
    fn model_vnd_usdz_zip_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.usdz+zip"), Ok(MODEL_VND_USDZ_ZIP));
        assert_eq!(crate::Mime::parse("MOdel/vnD.uSdz+Zip"), Ok(MODEL_VND_USDZ_ZIP));
    }

    /// `model/vnd.valve.source.compiled-map`
    pub const MODEL_VND_VALVE_SOURCE_COMPILED_MAP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndValveSourceCompiledMap),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_valve_source_compiled_map_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.valve.source.compiled-map"), Ok(MODEL_VND_VALVE_SOURCE_COMPILED_MAP));
        assert_eq!(crate::Mime::parse("MOdel/VNd.VALve.sOURCE.COmpIlED-Map"), Ok(MODEL_VND_VALVE_SOURCE_COMPILED_MAP));
    }

    /// `model/vnd.vtu`
    pub const MODEL_VND_VTU: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::VndVtu),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vnd_vtu_parse() {
        assert_eq!(crate::Mime::parse("model/vnd.vtu"), Ok(MODEL_VND_VTU));
        assert_eq!(crate::Mime::parse("modEl/VNd.VTU"), Ok(MODEL_VND_VTU));
    }

    /// `model/vrml`
    pub const MODEL_VRML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::Vrml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_vrml_parse() {
        assert_eq!(crate::Mime::parse("model/vrml"), Ok(MODEL_VRML));
        assert_eq!(crate::Mime::parse("Model/VRMl"), Ok(MODEL_VRML));
    }

    /// `model/x3d+fastinfoset`
    pub const MODEL_X3D_FASTINFOSET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::X3d),
        suffix: Some(crate::Name::Interned(super::Suffix::Fastinfoset)),
        parameters: &[]
    });

    #[test]
    fn model_x3d_fastinfoset_parse() {
        assert_eq!(crate::Mime::parse("model/x3d+fastinfoset"), Ok(MODEL_X3D_FASTINFOSET));
        assert_eq!(crate::Mime::parse("mODel/X3d+FaSTiNfOSEt"), Ok(MODEL_X3D_FASTINFOSET));
    }

    /// `model/x3d+xml`
    pub const MODEL_X3D_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::X3d),
        suffix: Some(crate::Name::Interned(super::Suffix::Xml)),
        parameters: &[]
    });

    #[test]
    fn model_x3d_xml_parse() {
        assert_eq!(crate::Mime::parse("model/x3d+xml"), Ok(MODEL_X3D_XML));
        assert_eq!(crate::Mime::parse("modeL/X3D+xmL"), Ok(MODEL_X3D_XML));
    }

    /// `model/x3d-vrml`
    pub const MODEL_X3D_VRML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Model),
        subtype: crate::Name::Interned(super::Subtype::X3dVrml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn model_x3d_vrml_parse() {
        assert_eq!(crate::Mime::parse("model/x3d-vrml"), Ok(MODEL_X3D_VRML));
        assert_eq!(crate::Mime::parse("MoDEL/x3D-vRml"), Ok(MODEL_X3D_VRML));
    }

    /// `multipart/alternative`
    pub const MULTIPART_ALTERNATIVE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Alternative),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_alternative_parse() {
        assert_eq!(crate::Mime::parse("multipart/alternative"), Ok(MULTIPART_ALTERNATIVE));
        assert_eq!(crate::Mime::parse("MULTiPARt/alTernATIvE"), Ok(MULTIPART_ALTERNATIVE));
    }

    /// `multipart/appledouble`
    pub const MULTIPART_APPLEDOUBLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Appledouble),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_appledouble_parse() {
        assert_eq!(crate::Mime::parse("multipart/appledouble"), Ok(MULTIPART_APPLEDOUBLE));
        assert_eq!(crate::Mime::parse("mUlTIPARt/apPlEdoUble"), Ok(MULTIPART_APPLEDOUBLE));
    }

    /// `multipart/byteranges`
    pub const MULTIPART_BYTERANGES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Byteranges),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_byteranges_parse() {
        assert_eq!(crate::Mime::parse("multipart/byteranges"), Ok(MULTIPART_BYTERANGES));
        assert_eq!(crate::Mime::parse("muLtiPaRt/BytERangeS"), Ok(MULTIPART_BYTERANGES));
    }

    /// `multipart/digest`
    pub const MULTIPART_DIGEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Digest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_digest_parse() {
        assert_eq!(crate::Mime::parse("multipart/digest"), Ok(MULTIPART_DIGEST));
        assert_eq!(crate::Mime::parse("MUltiPArT/DIgEST"), Ok(MULTIPART_DIGEST));
    }

    /// `multipart/encrypted`
    pub const MULTIPART_ENCRYPTED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Encrypted),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_encrypted_parse() {
        assert_eq!(crate::Mime::parse("multipart/encrypted"), Ok(MULTIPART_ENCRYPTED));
        assert_eq!(crate::Mime::parse("mULtipART/enCRyptEd"), Ok(MULTIPART_ENCRYPTED));
    }

    /// `multipart/example`
    pub const MULTIPART_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_example_parse() {
        assert_eq!(crate::Mime::parse("multipart/example"), Ok(MULTIPART_EXAMPLE));
        assert_eq!(crate::Mime::parse("muLtiPARt/ExAmplE"), Ok(MULTIPART_EXAMPLE));
    }

    /// `multipart/form-data`
    pub const MULTIPART_FORM_DATA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::FormData),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_form_data_parse() {
        assert_eq!(crate::Mime::parse("multipart/form-data"), Ok(MULTIPART_FORM_DATA));
        assert_eq!(crate::Mime::parse("mUlTipArT/FOrm-DAtA"), Ok(MULTIPART_FORM_DATA));
    }

    /// `multipart/header-set`
    pub const MULTIPART_HEADER_SET: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::HeaderSet),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_header_set_parse() {
        assert_eq!(crate::Mime::parse("multipart/header-set"), Ok(MULTIPART_HEADER_SET));
        assert_eq!(crate::Mime::parse("mUlTiPart/HEAder-set"), Ok(MULTIPART_HEADER_SET));
    }

    /// `multipart/mixed`
    pub const MULTIPART_MIXED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Mixed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_mixed_parse() {
        assert_eq!(crate::Mime::parse("multipart/mixed"), Ok(MULTIPART_MIXED));
        assert_eq!(crate::Mime::parse("mUlTiPaRT/miXED"), Ok(MULTIPART_MIXED));
    }

    /// `multipart/multilingual`
    pub const MULTIPART_MULTILINGUAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Multilingual),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_multilingual_parse() {
        assert_eq!(crate::Mime::parse("multipart/multilingual"), Ok(MULTIPART_MULTILINGUAL));
        assert_eq!(crate::Mime::parse("mulTIPArt/mUltilINgUAL"), Ok(MULTIPART_MULTILINGUAL));
    }

    /// `multipart/parallel`
    pub const MULTIPART_PARALLEL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Parallel),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_parallel_parse() {
        assert_eq!(crate::Mime::parse("multipart/parallel"), Ok(MULTIPART_PARALLEL));
        assert_eq!(crate::Mime::parse("MultIpArt/pArALlEL"), Ok(MULTIPART_PARALLEL));
    }

    /// `multipart/related`
    pub const MULTIPART_RELATED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Related),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_related_parse() {
        assert_eq!(crate::Mime::parse("multipart/related"), Ok(MULTIPART_RELATED));
        assert_eq!(crate::Mime::parse("MuLtIPART/rElAted"), Ok(MULTIPART_RELATED));
    }

    /// `multipart/report`
    pub const MULTIPART_REPORT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Report),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_report_parse() {
        assert_eq!(crate::Mime::parse("multipart/report"), Ok(MULTIPART_REPORT));
        assert_eq!(crate::Mime::parse("muLtiPart/REpORT"), Ok(MULTIPART_REPORT));
    }

    /// `multipart/signed`
    pub const MULTIPART_SIGNED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::Signed),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_signed_parse() {
        assert_eq!(crate::Mime::parse("multipart/signed"), Ok(MULTIPART_SIGNED));
        assert_eq!(crate::Mime::parse("multIPaRt/SigNED"), Ok(MULTIPART_SIGNED));
    }

    /// `multipart/vnd.bint.med-plus`
    pub const MULTIPART_VND_BINT_MED_PLUS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::VndBintMedPlus),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_vnd_bint_med_plus_parse() {
        assert_eq!(crate::Mime::parse("multipart/vnd.bint.med-plus"), Ok(MULTIPART_VND_BINT_MED_PLUS));
        assert_eq!(crate::Mime::parse("mULtIpArT/VND.BinT.MED-Plus"), Ok(MULTIPART_VND_BINT_MED_PLUS));
    }

    /// `multipart/voice-message`
    pub const MULTIPART_VOICE_MESSAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::VoiceMessage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_voice_message_parse() {
        assert_eq!(crate::Mime::parse("multipart/voice-message"), Ok(MULTIPART_VOICE_MESSAGE));
        assert_eq!(crate::Mime::parse("MULTIpARt/VOice-MEsSaGE"), Ok(MULTIPART_VOICE_MESSAGE));
    }

    /// `multipart/x-mixed-replace`
    pub const MULTIPART_X_MIXED_REPLACE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Multipart),
        subtype: crate::Name::Interned(super::Subtype::XMixedReplace),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn multipart_x_mixed_replace_parse() {
        assert_eq!(crate::Mime::parse("multipart/x-mixed-replace"), Ok(MULTIPART_X_MIXED_REPLACE));
        assert_eq!(crate::Mime::parse("MuLTiPart/x-mixed-REPlAce"), Ok(MULTIPART_X_MIXED_REPLACE));
    }

    /// `text/cache-manifest`
    pub const TEXT_CACHE_MANIFEST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::CacheManifest),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_cache_manifest_parse() {
        assert_eq!(crate::Mime::parse("text/cache-manifest"), Ok(TEXT_CACHE_MANIFEST));
        assert_eq!(crate::Mime::parse("TExt/CaChe-MAnifest"), Ok(TEXT_CACHE_MANIFEST));
    }

    /// `text/calendar`
    pub const TEXT_CALENDAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Calendar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_calendar_parse() {
        assert_eq!(crate::Mime::parse("text/calendar"), Ok(TEXT_CALENDAR));
        assert_eq!(crate::Mime::parse("tEXt/CaleNdar"), Ok(TEXT_CALENDAR));
    }

    /// `text/cql`
    pub const TEXT_CQL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Cql),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_cql_parse() {
        assert_eq!(crate::Mime::parse("text/cql"), Ok(TEXT_CQL));
        assert_eq!(crate::Mime::parse("TeXt/cql"), Ok(TEXT_CQL));
    }

    /// `text/cql-extension`
    pub const TEXT_CQL_EXTENSION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::CqlExtension),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_cql_extension_parse() {
        assert_eq!(crate::Mime::parse("text/cql-extension"), Ok(TEXT_CQL_EXTENSION));
        assert_eq!(crate::Mime::parse("TEXT/CQl-EXTeNsion"), Ok(TEXT_CQL_EXTENSION));
    }

    /// `text/cql-identifier`
    pub const TEXT_CQL_IDENTIFIER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::CqlIdentifier),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_cql_identifier_parse() {
        assert_eq!(crate::Mime::parse("text/cql-identifier"), Ok(TEXT_CQL_IDENTIFIER));
        assert_eq!(crate::Mime::parse("TExt/CQl-idENtifier"), Ok(TEXT_CQL_IDENTIFIER));
    }

    /// `text/css`
    pub const TEXT_CSS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Css),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_css_parse() {
        assert_eq!(crate::Mime::parse("text/css"), Ok(TEXT_CSS));
        assert_eq!(crate::Mime::parse("texT/CSs"), Ok(TEXT_CSS));
    }

    /// `text/csv`
    pub const TEXT_CSV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Csv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_csv_parse() {
        assert_eq!(crate::Mime::parse("text/csv"), Ok(TEXT_CSV));
        assert_eq!(crate::Mime::parse("tEXt/CSV"), Ok(TEXT_CSV));
    }

    /// `text/csv-schema`
    pub const TEXT_CSV_SCHEMA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::CsvSchema),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_csv_schema_parse() {
        assert_eq!(crate::Mime::parse("text/csv-schema"), Ok(TEXT_CSV_SCHEMA));
        assert_eq!(crate::Mime::parse("tEXT/cSv-ScHema"), Ok(TEXT_CSV_SCHEMA));
    }

    /// `text/dns`
    pub const TEXT_DNS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Dns),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_dns_parse() {
        assert_eq!(crate::Mime::parse("text/dns"), Ok(TEXT_DNS));
        assert_eq!(crate::Mime::parse("text/Dns"), Ok(TEXT_DNS));
    }

    /// `text/encaprtp`
    pub const TEXT_ENCAPRTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Encaprtp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_encaprtp_parse() {
        assert_eq!(crate::Mime::parse("text/encaprtp"), Ok(TEXT_ENCAPRTP));
        assert_eq!(crate::Mime::parse("TeXt/eNCapRTP"), Ok(TEXT_ENCAPRTP));
    }

    /// `text/enriched`
    pub const TEXT_ENRICHED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Enriched),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_enriched_parse() {
        assert_eq!(crate::Mime::parse("text/enriched"), Ok(TEXT_ENRICHED));
        assert_eq!(crate::Mime::parse("TEXt/eNricHeD"), Ok(TEXT_ENRICHED));
    }

    /// `text/example`
    pub const TEXT_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_example_parse() {
        assert_eq!(crate::Mime::parse("text/example"), Ok(TEXT_EXAMPLE));
        assert_eq!(crate::Mime::parse("TEXT/ExAMPLe"), Ok(TEXT_EXAMPLE));
    }

    /// `text/fhirpath`
    pub const TEXT_FHIRPATH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Fhirpath),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_fhirpath_parse() {
        assert_eq!(crate::Mime::parse("text/fhirpath"), Ok(TEXT_FHIRPATH));
        assert_eq!(crate::Mime::parse("TeXt/fHiRPatH"), Ok(TEXT_FHIRPATH));
    }

    /// `text/flexfec`
    pub const TEXT_FLEXFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Flexfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_flexfec_parse() {
        assert_eq!(crate::Mime::parse("text/flexfec"), Ok(TEXT_FLEXFEC));
        assert_eq!(crate::Mime::parse("text/FLeXFeC"), Ok(TEXT_FLEXFEC));
    }

    /// `text/fwdred`
    pub const TEXT_FWDRED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Fwdred),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_fwdred_parse() {
        assert_eq!(crate::Mime::parse("text/fwdred"), Ok(TEXT_FWDRED));
        assert_eq!(crate::Mime::parse("TExt/FWdred"), Ok(TEXT_FWDRED));
    }

    /// `text/gff3`
    pub const TEXT_GFF3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Gff3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_gff3_parse() {
        assert_eq!(crate::Mime::parse("text/gff3"), Ok(TEXT_GFF3));
        assert_eq!(crate::Mime::parse("TExT/gff3"), Ok(TEXT_GFF3));
    }

    /// `text/grammar-ref-list`
    pub const TEXT_GRAMMAR_REF_LIST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::GrammarRefList),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_grammar_ref_list_parse() {
        assert_eq!(crate::Mime::parse("text/grammar-ref-list"), Ok(TEXT_GRAMMAR_REF_LIST));
        assert_eq!(crate::Mime::parse("TExt/grammar-reF-lIst"), Ok(TEXT_GRAMMAR_REF_LIST));
    }

    /// `text/html`
    pub const TEXT_HTML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Html),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_html_parse() {
        assert_eq!(crate::Mime::parse("text/html"), Ok(TEXT_HTML));
        assert_eq!(crate::Mime::parse("Text/HtML"), Ok(TEXT_HTML));
    }

    /// `text/javascript`
    pub const TEXT_JAVASCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Javascript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_javascript_parse() {
        assert_eq!(crate::Mime::parse("text/javascript"), Ok(TEXT_JAVASCRIPT));
        assert_eq!(crate::Mime::parse("TexT/javAsCRipT"), Ok(TEXT_JAVASCRIPT));
    }

    /// `text/jcr-cnd`
    pub const TEXT_JCR_CND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::JcrCnd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_jcr_cnd_parse() {
        assert_eq!(crate::Mime::parse("text/jcr-cnd"), Ok(TEXT_JCR_CND));
        assert_eq!(crate::Mime::parse("teXt/JcR-CND"), Ok(TEXT_JCR_CND));
    }

    /// `text/markdown`
    pub const TEXT_MARKDOWN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Markdown),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_markdown_parse() {
        assert_eq!(crate::Mime::parse("text/markdown"), Ok(TEXT_MARKDOWN));
        assert_eq!(crate::Mime::parse("tExT/mARKdOwn"), Ok(TEXT_MARKDOWN));
    }

    /// `text/mizar`
    pub const TEXT_MIZAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Mizar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_mizar_parse() {
        assert_eq!(crate::Mime::parse("text/mizar"), Ok(TEXT_MIZAR));
        assert_eq!(crate::Mime::parse("TEXt/MIZaR"), Ok(TEXT_MIZAR));
    }

    /// `text/n3`
    pub const TEXT_N3: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::N3),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_n3_parse() {
        assert_eq!(crate::Mime::parse("text/n3"), Ok(TEXT_N3));
        assert_eq!(crate::Mime::parse("teXt/n3"), Ok(TEXT_N3));
    }

    /// `text/parameters`
    pub const TEXT_PARAMETERS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Parameters),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_parameters_parse() {
        assert_eq!(crate::Mime::parse("text/parameters"), Ok(TEXT_PARAMETERS));
        assert_eq!(crate::Mime::parse("tEXt/PARAmETerS"), Ok(TEXT_PARAMETERS));
    }

    /// `text/parityfec`
    pub const TEXT_PARITYFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Parityfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_parityfec_parse() {
        assert_eq!(crate::Mime::parse("text/parityfec"), Ok(TEXT_PARITYFEC));
        assert_eq!(crate::Mime::parse("text/ParItyFeC"), Ok(TEXT_PARITYFEC));
    }

    /// `text/plain`
    pub const TEXT_PLAIN: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Plain),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_plain_parse() {
        assert_eq!(crate::Mime::parse("text/plain"), Ok(TEXT_PLAIN));
        assert_eq!(crate::Mime::parse("text/PLaIN"), Ok(TEXT_PLAIN));
    }

    /// `text/provenance-notation`
    pub const TEXT_PROVENANCE_NOTATION: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::ProvenanceNotation),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_provenance_notation_parse() {
        assert_eq!(crate::Mime::parse("text/provenance-notation"), Ok(TEXT_PROVENANCE_NOTATION));
        assert_eq!(crate::Mime::parse("TEXT/PRovEnance-NoTaTion"), Ok(TEXT_PROVENANCE_NOTATION));
    }

    /// `text/prs.fallenstein.rst`
    pub const TEXT_PRS_FALLENSTEIN_RST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::PrsFallensteinRst),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_prs_fallenstein_rst_parse() {
        assert_eq!(crate::Mime::parse("text/prs.fallenstein.rst"), Ok(TEXT_PRS_FALLENSTEIN_RST));
        assert_eq!(crate::Mime::parse("tEXT/pRs.faLLenSteIn.rSt"), Ok(TEXT_PRS_FALLENSTEIN_RST));
    }

    /// `text/prs.lines.tag`
    pub const TEXT_PRS_LINES_TAG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::PrsLinesTag),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_prs_lines_tag_parse() {
        assert_eq!(crate::Mime::parse("text/prs.lines.tag"), Ok(TEXT_PRS_LINES_TAG));
        assert_eq!(crate::Mime::parse("tEXt/Prs.LiNes.Tag"), Ok(TEXT_PRS_LINES_TAG));
    }

    /// `text/prs.prop.logic`
    pub const TEXT_PRS_PROP_LOGIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::PrsPropLogic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_prs_prop_logic_parse() {
        assert_eq!(crate::Mime::parse("text/prs.prop.logic"), Ok(TEXT_PRS_PROP_LOGIC));
        assert_eq!(crate::Mime::parse("TeXt/PrS.PrOp.logiC"), Ok(TEXT_PRS_PROP_LOGIC));
    }

    /// `text/raptorfec`
    pub const TEXT_RAPTORFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Raptorfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_raptorfec_parse() {
        assert_eq!(crate::Mime::parse("text/raptorfec"), Ok(TEXT_RAPTORFEC));
        assert_eq!(crate::Mime::parse("TeXT/raPtOrfeC"), Ok(TEXT_RAPTORFEC));
    }

    /// `text/RED`
    pub const TEXT_RED: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Red),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_red_parse() {
        assert_eq!(crate::Mime::parse("text/RED"), Ok(TEXT_RED));
        assert_eq!(crate::Mime::parse("TexT/RED"), Ok(TEXT_RED));
    }

    /// `text/rfc822-headers`
    pub const TEXT_RFC822_HEADERS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Rfc822Headers),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_rfc822_headers_parse() {
        assert_eq!(crate::Mime::parse("text/rfc822-headers"), Ok(TEXT_RFC822_HEADERS));
        assert_eq!(crate::Mime::parse("tEXT/RFC822-HEADerS"), Ok(TEXT_RFC822_HEADERS));
    }

    /// `text/rtf`
    pub const TEXT_RTF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Rtf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_rtf_parse() {
        assert_eq!(crate::Mime::parse("text/rtf"), Ok(TEXT_RTF));
        assert_eq!(crate::Mime::parse("tEXT/rtF"), Ok(TEXT_RTF));
    }

    /// `text/rtp-enc-aescm128`
    pub const TEXT_RTP_ENC_AESCM128: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::RtpEncAescm128),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_rtp_enc_aescm128_parse() {
        assert_eq!(crate::Mime::parse("text/rtp-enc-aescm128"), Ok(TEXT_RTP_ENC_AESCM128));
        assert_eq!(crate::Mime::parse("tEXT/rtP-enc-AESCm128"), Ok(TEXT_RTP_ENC_AESCM128));
    }

    /// `text/rtploopback`
    pub const TEXT_RTPLOOPBACK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Rtploopback),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_rtploopback_parse() {
        assert_eq!(crate::Mime::parse("text/rtploopback"), Ok(TEXT_RTPLOOPBACK));
        assert_eq!(crate::Mime::parse("TexT/rtPlOoPBacK"), Ok(TEXT_RTPLOOPBACK));
    }

    /// `text/rtx`
    pub const TEXT_RTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Rtx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_rtx_parse() {
        assert_eq!(crate::Mime::parse("text/rtx"), Ok(TEXT_RTX));
        assert_eq!(crate::Mime::parse("TEXT/RTX"), Ok(TEXT_RTX));
    }

    /// `text/SGML`
    pub const TEXT_SGML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Sgml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_sgml_parse() {
        assert_eq!(crate::Mime::parse("text/SGML"), Ok(TEXT_SGML));
        assert_eq!(crate::Mime::parse("TexT/sGml"), Ok(TEXT_SGML));
    }

    /// `text/shaclc`
    pub const TEXT_SHACLC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Shaclc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_shaclc_parse() {
        assert_eq!(crate::Mime::parse("text/shaclc"), Ok(TEXT_SHACLC));
        assert_eq!(crate::Mime::parse("texT/sHacLC"), Ok(TEXT_SHACLC));
    }

    /// `text/shex`
    pub const TEXT_SHEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Shex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_shex_parse() {
        assert_eq!(crate::Mime::parse("text/shex"), Ok(TEXT_SHEX));
        assert_eq!(crate::Mime::parse("texT/SheX"), Ok(TEXT_SHEX));
    }

    /// `text/spdx`
    pub const TEXT_SPDX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Spdx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_spdx_parse() {
        assert_eq!(crate::Mime::parse("text/spdx"), Ok(TEXT_SPDX));
        assert_eq!(crate::Mime::parse("text/SpdX"), Ok(TEXT_SPDX));
    }

    /// `text/strings`
    pub const TEXT_STRINGS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Strings),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_strings_parse() {
        assert_eq!(crate::Mime::parse("text/strings"), Ok(TEXT_STRINGS));
        assert_eq!(crate::Mime::parse("TEXT/stRInGs"), Ok(TEXT_STRINGS));
    }

    /// `text/t140`
    pub const TEXT_T140: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::T140),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_t140_parse() {
        assert_eq!(crate::Mime::parse("text/t140"), Ok(TEXT_T140));
        assert_eq!(crate::Mime::parse("text/T140"), Ok(TEXT_T140));
    }

    /// `text/tab-separated-values`
    pub const TEXT_TAB_SEPARATED_VALUES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::TabSeparatedValues),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_tab_separated_values_parse() {
        assert_eq!(crate::Mime::parse("text/tab-separated-values"), Ok(TEXT_TAB_SEPARATED_VALUES));
        assert_eq!(crate::Mime::parse("TexT/TaB-sepARAted-vALUEs"), Ok(TEXT_TAB_SEPARATED_VALUES));
    }

    /// `text/texmacs`
    pub const TEXT_TEXMACS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Texmacs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_texmacs_parse() {
        assert_eq!(crate::Mime::parse("text/texmacs"), Ok(TEXT_TEXMACS));
        assert_eq!(crate::Mime::parse("text/teXmaCS"), Ok(TEXT_TEXMACS));
    }

    /// `text/troff`
    pub const TEXT_TROFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Troff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_troff_parse() {
        assert_eq!(crate::Mime::parse("text/troff"), Ok(TEXT_TROFF));
        assert_eq!(crate::Mime::parse("texT/TrOfF"), Ok(TEXT_TROFF));
    }

    /// `text/turtle`
    pub const TEXT_TURTLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Turtle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_turtle_parse() {
        assert_eq!(crate::Mime::parse("text/turtle"), Ok(TEXT_TURTLE));
        assert_eq!(crate::Mime::parse("TEXt/TURtlE"), Ok(TEXT_TURTLE));
    }

    /// `text/ulpfec`
    pub const TEXT_ULPFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Ulpfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_ulpfec_parse() {
        assert_eq!(crate::Mime::parse("text/ulpfec"), Ok(TEXT_ULPFEC));
        assert_eq!(crate::Mime::parse("TExt/ULpFec"), Ok(TEXT_ULPFEC));
    }

    /// `text/uri-list`
    pub const TEXT_URI_LIST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::UriList),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_uri_list_parse() {
        assert_eq!(crate::Mime::parse("text/uri-list"), Ok(TEXT_URI_LIST));
        assert_eq!(crate::Mime::parse("texT/uRI-LisT"), Ok(TEXT_URI_LIST));
    }

    /// `text/vcard`
    pub const TEXT_VCARD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Vcard),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vcard_parse() {
        assert_eq!(crate::Mime::parse("text/vcard"), Ok(TEXT_VCARD));
        assert_eq!(crate::Mime::parse("TExT/vcarD"), Ok(TEXT_VCARD));
    }

    /// `text/vnd.a`
    pub const TEXT_VND_A: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndA),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_a_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.a"), Ok(TEXT_VND_A));
        assert_eq!(crate::Mime::parse("Text/vnd.a"), Ok(TEXT_VND_A));
    }

    /// `text/vnd.abc`
    pub const TEXT_VND_ABC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndAbc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_abc_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.abc"), Ok(TEXT_VND_ABC));
        assert_eq!(crate::Mime::parse("TEXT/vnD.abc"), Ok(TEXT_VND_ABC));
    }

    /// `text/vnd.ascii-art`
    pub const TEXT_VND_ASCII_ART: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndAsciiArt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_ascii_art_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.ascii-art"), Ok(TEXT_VND_ASCII_ART));
        assert_eq!(crate::Mime::parse("teXT/vnd.aScIi-aRT"), Ok(TEXT_VND_ASCII_ART));
    }

    /// `text/vnd.curl`
    pub const TEXT_VND_CURL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndCurl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_curl_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.curl"), Ok(TEXT_VND_CURL));
        assert_eq!(crate::Mime::parse("teXt/VnD.cuRl"), Ok(TEXT_VND_CURL));
    }

    /// `text/vnd.debian.copyright`
    pub const TEXT_VND_DEBIAN_COPYRIGHT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndDebianCopyright),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_debian_copyright_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.debian.copyright"), Ok(TEXT_VND_DEBIAN_COPYRIGHT));
        assert_eq!(crate::Mime::parse("teXt/vnd.DEbiAN.coPYrIghT"), Ok(TEXT_VND_DEBIAN_COPYRIGHT));
    }

    /// `text/vnd.DMClientScript`
    pub const TEXT_VND_DM_CLIENT_SCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndDmClientScript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_dm_client_script_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.DMClientScript"), Ok(TEXT_VND_DM_CLIENT_SCRIPT));
        assert_eq!(crate::Mime::parse("TeXt/vNd.DMcLiENTsCript"), Ok(TEXT_VND_DM_CLIENT_SCRIPT));
    }

    /// `text/vnd.dvb.subtitle`
    pub const TEXT_VND_DVB_SUBTITLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndDvbSubtitle),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_dvb_subtitle_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.dvb.subtitle"), Ok(TEXT_VND_DVB_SUBTITLE));
        assert_eq!(crate::Mime::parse("texT/VNd.Dvb.SUbTItLE"), Ok(TEXT_VND_DVB_SUBTITLE));
    }

    /// `text/vnd.esmertec.theme-descriptor`
    pub const TEXT_VND_ESMERTEC_THEME_DESCRIPTOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndEsmertecThemeDescriptor),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_esmertec_theme_descriptor_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.esmertec.theme-descriptor"), Ok(TEXT_VND_ESMERTEC_THEME_DESCRIPTOR));
        assert_eq!(crate::Mime::parse("tEXt/vnD.esmeRTEC.tHemE-DEsCRIPTOr"), Ok(TEXT_VND_ESMERTEC_THEME_DESCRIPTOR));
    }

    /// `text/vnd.familysearch.gedcom`
    pub const TEXT_VND_FAMILYSEARCH_GEDCOM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndFamilysearchGedcom),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_familysearch_gedcom_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.familysearch.gedcom"), Ok(TEXT_VND_FAMILYSEARCH_GEDCOM));
        assert_eq!(crate::Mime::parse("tEXT/vND.FaMILYSearcH.gEdcOM"), Ok(TEXT_VND_FAMILYSEARCH_GEDCOM));
    }

    /// `text/vnd.ficlab.flt`
    pub const TEXT_VND_FICLAB_FLT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndFiclabFlt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_ficlab_flt_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.ficlab.flt"), Ok(TEXT_VND_FICLAB_FLT));
        assert_eq!(crate::Mime::parse("tExt/vNd.FiCLab.Flt"), Ok(TEXT_VND_FICLAB_FLT));
    }

    /// `text/vnd.fly`
    pub const TEXT_VND_FLY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndFly),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_fly_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.fly"), Ok(TEXT_VND_FLY));
        assert_eq!(crate::Mime::parse("TeXT/vnD.FLY"), Ok(TEXT_VND_FLY));
    }

    /// `text/vnd.fmi.flexstor`
    pub const TEXT_VND_FMI_FLEXSTOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndFmiFlexstor),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_fmi_flexstor_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.fmi.flexstor"), Ok(TEXT_VND_FMI_FLEXSTOR));
        assert_eq!(crate::Mime::parse("tEXT/vnd.Fmi.fLexStOr"), Ok(TEXT_VND_FMI_FLEXSTOR));
    }

    /// `text/vnd.gml`
    pub const TEXT_VND_GML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndGml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_gml_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.gml"), Ok(TEXT_VND_GML));
        assert_eq!(crate::Mime::parse("texT/VNd.gMl"), Ok(TEXT_VND_GML));
    }

    /// `text/vnd.graphviz`
    pub const TEXT_VND_GRAPHVIZ: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndGraphviz),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_graphviz_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.graphviz"), Ok(TEXT_VND_GRAPHVIZ));
        assert_eq!(crate::Mime::parse("tEXT/vnd.GraPhVIz"), Ok(TEXT_VND_GRAPHVIZ));
    }

    /// `text/vnd.hans`
    pub const TEXT_VND_HANS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndHans),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_hans_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.hans"), Ok(TEXT_VND_HANS));
        assert_eq!(crate::Mime::parse("TExT/vNd.hANs"), Ok(TEXT_VND_HANS));
    }

    /// `text/vnd.hgl`
    pub const TEXT_VND_HGL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndHgl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_hgl_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.hgl"), Ok(TEXT_VND_HGL));
        assert_eq!(crate::Mime::parse("tExT/vnD.hGl"), Ok(TEXT_VND_HGL));
    }

    /// `text/vnd.in3d.3dml`
    pub const TEXT_VND_IN3D_3DML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndIn3d3dml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_in3d_3dml_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.in3d.3dml"), Ok(TEXT_VND_IN3D_3DML));
        assert_eq!(crate::Mime::parse("TeXT/VND.iN3d.3dml"), Ok(TEXT_VND_IN3D_3DML));
    }

    /// `text/vnd.in3d.spot`
    pub const TEXT_VND_IN3D_SPOT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndIn3dSpot),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_in3d_spot_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.in3d.spot"), Ok(TEXT_VND_IN3D_SPOT));
        assert_eq!(crate::Mime::parse("TeXT/vnd.In3d.spOT"), Ok(TEXT_VND_IN3D_SPOT));
    }

    /// `text/vnd.IPTC.NewsML`
    pub const TEXT_VND_IPTC_NEWS_ML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndIptcNewsMl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_iptc_news_ml_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.IPTC.NewsML"), Ok(TEXT_VND_IPTC_NEWS_ML));
        assert_eq!(crate::Mime::parse("TexT/VND.ipTc.NEwSML"), Ok(TEXT_VND_IPTC_NEWS_ML));
    }

    /// `text/vnd.IPTC.NITF`
    pub const TEXT_VND_IPTC_NITF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndIptcNitf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_iptc_nitf_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.IPTC.NITF"), Ok(TEXT_VND_IPTC_NITF));
        assert_eq!(crate::Mime::parse("teXt/VNd.IptC.niTF"), Ok(TEXT_VND_IPTC_NITF));
    }

    /// `text/vnd.latex-z`
    pub const TEXT_VND_LATEX_Z: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndLatexZ),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_latex_z_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.latex-z"), Ok(TEXT_VND_LATEX_Z));
        assert_eq!(crate::Mime::parse("teXT/VND.LatEX-z"), Ok(TEXT_VND_LATEX_Z));
    }

    /// `text/vnd.motorola.reflex`
    pub const TEXT_VND_MOTOROLA_REFLEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaReflex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_motorola_reflex_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.motorola.reflex"), Ok(TEXT_VND_MOTOROLA_REFLEX));
        assert_eq!(crate::Mime::parse("texT/VND.MOtorOLA.refLeX"), Ok(TEXT_VND_MOTOROLA_REFLEX));
    }

    /// `text/vnd.ms-mediapackage`
    pub const TEXT_VND_MS_MEDIAPACKAGE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndMsMediapackage),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_ms_mediapackage_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.ms-mediapackage"), Ok(TEXT_VND_MS_MEDIAPACKAGE));
        assert_eq!(crate::Mime::parse("Text/vnD.Ms-mEDiApAcKage"), Ok(TEXT_VND_MS_MEDIAPACKAGE));
    }

    /// `text/vnd.net2phone.commcenter.command`
    pub const TEXT_VND_NET2PHONE_COMMCENTER_COMMAND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndNet2phoneCommcenterCommand),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_net2phone_commcenter_command_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.net2phone.commcenter.command"), Ok(TEXT_VND_NET2PHONE_COMMCENTER_COMMAND));
        assert_eq!(crate::Mime::parse("TExT/Vnd.nEt2phone.coMmcENteR.cOMMAnd"), Ok(TEXT_VND_NET2PHONE_COMMCENTER_COMMAND));
    }

    /// `text/vnd.radisys.msml-basic-layout`
    pub const TEXT_VND_RADISYS_MSML_BASIC_LAYOUT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndRadisysMsmlBasicLayout),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_radisys_msml_basic_layout_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.radisys.msml-basic-layout"), Ok(TEXT_VND_RADISYS_MSML_BASIC_LAYOUT));
        assert_eq!(crate::Mime::parse("tEXT/vND.raDiSYs.Msml-BASIC-lAyOuT"), Ok(TEXT_VND_RADISYS_MSML_BASIC_LAYOUT));
    }

    /// `text/vnd.senx.warpscript`
    pub const TEXT_VND_SENX_WARPSCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndSenxWarpscript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_senx_warpscript_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.senx.warpscript"), Ok(TEXT_VND_SENX_WARPSCRIPT));
        assert_eq!(crate::Mime::parse("TexT/vNd.senx.WArPScRIPT"), Ok(TEXT_VND_SENX_WARPSCRIPT));
    }

    /// `text/vnd.sosi`
    pub const TEXT_VND_SOSI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndSosi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_sosi_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.sosi"), Ok(TEXT_VND_SOSI));
        assert_eq!(crate::Mime::parse("tExt/VND.SosI"), Ok(TEXT_VND_SOSI));
    }

    /// `text/vnd.sun.j2me.app-descriptor`
    pub const TEXT_VND_SUN_J2ME_APP_DESCRIPTOR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndSunJ2meAppDescriptor),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_sun_j2me_app_descriptor_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.sun.j2me.app-descriptor"), Ok(TEXT_VND_SUN_J2ME_APP_DESCRIPTOR));
        assert_eq!(crate::Mime::parse("TEXT/VnD.sUn.J2Me.aPp-dEScRiPTOr"), Ok(TEXT_VND_SUN_J2ME_APP_DESCRIPTOR));
    }

    /// `text/vnd.trolltech.linguist`
    pub const TEXT_VND_TROLLTECH_LINGUIST: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndTrolltechLinguist),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_trolltech_linguist_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.trolltech.linguist"), Ok(TEXT_VND_TROLLTECH_LINGUIST));
        assert_eq!(crate::Mime::parse("TExt/vnD.trOllTecH.LINGUIsT"), Ok(TEXT_VND_TROLLTECH_LINGUIST));
    }

    /// `text/vnd.wap.si`
    pub const TEXT_VND_WAP_SI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndWapSi),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_wap_si_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.wap.si"), Ok(TEXT_VND_WAP_SI));
        assert_eq!(crate::Mime::parse("TEXt/VND.wap.Si"), Ok(TEXT_VND_WAP_SI));
    }

    /// `text/vnd.wap.sl`
    pub const TEXT_VND_WAP_SL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndWapSl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_wap_sl_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.wap.sl"), Ok(TEXT_VND_WAP_SL));
        assert_eq!(crate::Mime::parse("tExT/VnD.Wap.sl"), Ok(TEXT_VND_WAP_SL));
    }

    /// `text/vnd.wap.wml`
    pub const TEXT_VND_WAP_WML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndWapWml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_wap_wml_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.wap.wml"), Ok(TEXT_VND_WAP_WML));
        assert_eq!(crate::Mime::parse("tExT/VND.wAp.wml"), Ok(TEXT_VND_WAP_WML));
    }

    /// `text/vnd.wap.wmlscript`
    pub const TEXT_VND_WAP_WMLSCRIPT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::VndWapWmlscript),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vnd_wap_wmlscript_parse() {
        assert_eq!(crate::Mime::parse("text/vnd.wap.wmlscript"), Ok(TEXT_VND_WAP_WMLSCRIPT));
        assert_eq!(crate::Mime::parse("tExt/Vnd.wap.WMlsCRIpt"), Ok(TEXT_VND_WAP_WMLSCRIPT));
    }

    /// `text/vtt`
    pub const TEXT_VTT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Vtt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_vtt_parse() {
        assert_eq!(crate::Mime::parse("text/vtt"), Ok(TEXT_VTT));
        assert_eq!(crate::Mime::parse("TExt/vtT"), Ok(TEXT_VTT));
    }

    /// `text/x-bibtex`
    pub const TEXT_X_BIBTEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XBibtex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_bibtex_parse() {
        assert_eq!(crate::Mime::parse("text/x-bibtex"), Ok(TEXT_X_BIBTEX));
        assert_eq!(crate::Mime::parse("tExT/X-biBTEX"), Ok(TEXT_X_BIBTEX));
    }

    /// `text/x-boo`
    pub const TEXT_X_BOO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XBoo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_boo_parse() {
        assert_eq!(crate::Mime::parse("text/x-boo"), Ok(TEXT_X_BOO));
        assert_eq!(crate::Mime::parse("Text/x-BOO"), Ok(TEXT_X_BOO));
    }

    /// `text/x-chdr`
    pub const TEXT_X_CHDR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XChdr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_chdr_parse() {
        assert_eq!(crate::Mime::parse("text/x-chdr"), Ok(TEXT_X_CHDR));
        assert_eq!(crate::Mime::parse("TEXT/X-cHdr"), Ok(TEXT_X_CHDR));
    }

    /// `text/x-component`
    pub const TEXT_X_COMPONENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XComponent),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_component_parse() {
        assert_eq!(crate::Mime::parse("text/x-component"), Ok(TEXT_X_COMPONENT));
        assert_eq!(crate::Mime::parse("teXt/X-COMPONEnt"), Ok(TEXT_X_COMPONENT));
    }

    /// `text/x-csh`
    pub const TEXT_X_CSH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XCsh),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_csh_parse() {
        assert_eq!(crate::Mime::parse("text/x-csh"), Ok(TEXT_X_CSH));
        assert_eq!(crate::Mime::parse("texT/X-CSh"), Ok(TEXT_X_CSH));
    }

    /// `text/x-csrc`
    pub const TEXT_X_CSRC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XCsrc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_csrc_parse() {
        assert_eq!(crate::Mime::parse("text/x-csrc"), Ok(TEXT_X_CSRC));
        assert_eq!(crate::Mime::parse("tExt/x-csrC"), Ok(TEXT_X_CSRC));
    }

    /// `text/x-diff`
    pub const TEXT_X_DIFF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XDiff),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_diff_parse() {
        assert_eq!(crate::Mime::parse("text/x-diff"), Ok(TEXT_X_DIFF));
        assert_eq!(crate::Mime::parse("Text/x-dIFF"), Ok(TEXT_X_DIFF));
    }

    /// `text/x-dsrc`
    pub const TEXT_X_DSRC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XDsrc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_dsrc_parse() {
        assert_eq!(crate::Mime::parse("text/x-dsrc"), Ok(TEXT_X_DSRC));
        assert_eq!(crate::Mime::parse("TeXT/x-DSrc"), Ok(TEXT_X_DSRC));
    }

    /// `text/x-haskell`
    pub const TEXT_X_HASKELL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XHaskell),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_haskell_parse() {
        assert_eq!(crate::Mime::parse("text/x-haskell"), Ok(TEXT_X_HASKELL));
        assert_eq!(crate::Mime::parse("tEXT/X-hAskEll"), Ok(TEXT_X_HASKELL));
    }

    /// `text/x-java`
    pub const TEXT_X_JAVA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XJava),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_java_parse() {
        assert_eq!(crate::Mime::parse("text/x-java"), Ok(TEXT_X_JAVA));
        assert_eq!(crate::Mime::parse("TExT/X-JAVA"), Ok(TEXT_X_JAVA));
    }

    /// `text/x-lilypond`
    pub const TEXT_X_LILYPOND: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XLilypond),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_lilypond_parse() {
        assert_eq!(crate::Mime::parse("text/x-lilypond"), Ok(TEXT_X_LILYPOND));
        assert_eq!(crate::Mime::parse("tEXT/x-lilYpond"), Ok(TEXT_X_LILYPOND));
    }

    /// `text/x-literate-haskell`
    pub const TEXT_X_LITERATE_HASKELL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XLiterateHaskell),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_literate_haskell_parse() {
        assert_eq!(crate::Mime::parse("text/x-literate-haskell"), Ok(TEXT_X_LITERATE_HASKELL));
        assert_eq!(crate::Mime::parse("tExT/x-litErate-HAskEll"), Ok(TEXT_X_LITERATE_HASKELL));
    }

    /// `text/x-moc`
    pub const TEXT_X_MOC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XMoc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_moc_parse() {
        assert_eq!(crate::Mime::parse("text/x-moc"), Ok(TEXT_X_MOC));
        assert_eq!(crate::Mime::parse("TEXT/x-MoC"), Ok(TEXT_X_MOC));
    }

    /// `text/x-pascal`
    pub const TEXT_X_PASCAL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XPascal),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_pascal_parse() {
        assert_eq!(crate::Mime::parse("text/x-pascal"), Ok(TEXT_X_PASCAL));
        assert_eq!(crate::Mime::parse("tExt/X-PasCaL"), Ok(TEXT_X_PASCAL));
    }

    /// `text/x-pcs-gcd`
    pub const TEXT_X_PCS_GCD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XPcsGcd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_pcs_gcd_parse() {
        assert_eq!(crate::Mime::parse("text/x-pcs-gcd"), Ok(TEXT_X_PCS_GCD));
        assert_eq!(crate::Mime::parse("tEXt/X-pCS-GcD"), Ok(TEXT_X_PCS_GCD));
    }

    /// `text/x-perl`
    pub const TEXT_X_PERL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XPerl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_perl_parse() {
        assert_eq!(crate::Mime::parse("text/x-perl"), Ok(TEXT_X_PERL));
        assert_eq!(crate::Mime::parse("tEXT/x-PErl"), Ok(TEXT_X_PERL));
    }

    /// `text/x-python`
    pub const TEXT_X_PYTHON: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XPython),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_python_parse() {
        assert_eq!(crate::Mime::parse("text/x-python"), Ok(TEXT_X_PYTHON));
        assert_eq!(crate::Mime::parse("TEXT/X-PYThoN"), Ok(TEXT_X_PYTHON));
    }

    /// `text/x-scala`
    pub const TEXT_X_SCALA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XScala),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_scala_parse() {
        assert_eq!(crate::Mime::parse("text/x-scala"), Ok(TEXT_X_SCALA));
        assert_eq!(crate::Mime::parse("tExt/X-SCAlA"), Ok(TEXT_X_SCALA));
    }

    /// `text/x-setext`
    pub const TEXT_X_SETEXT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XSetext),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_setext_parse() {
        assert_eq!(crate::Mime::parse("text/x-setext"), Ok(TEXT_X_SETEXT));
        assert_eq!(crate::Mime::parse("text/x-sETExt"), Ok(TEXT_X_SETEXT));
    }

    /// `text/x-sfv`
    pub const TEXT_X_SFV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XSfv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_sfv_parse() {
        assert_eq!(crate::Mime::parse("text/x-sfv"), Ok(TEXT_X_SFV));
        assert_eq!(crate::Mime::parse("texT/X-SfV"), Ok(TEXT_X_SFV));
    }

    /// `text/x-sh`
    pub const TEXT_X_SH: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XSh),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_sh_parse() {
        assert_eq!(crate::Mime::parse("text/x-sh"), Ok(TEXT_X_SH));
        assert_eq!(crate::Mime::parse("teXT/X-sh"), Ok(TEXT_X_SH));
    }

    /// `text/x-tcl`
    pub const TEXT_X_TCL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XTcl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_tcl_parse() {
        assert_eq!(crate::Mime::parse("text/x-tcl"), Ok(TEXT_X_TCL));
        assert_eq!(crate::Mime::parse("TExT/X-TcL"), Ok(TEXT_X_TCL));
    }

    /// `text/x-tex`
    pub const TEXT_X_TEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XTex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_tex_parse() {
        assert_eq!(crate::Mime::parse("text/x-tex"), Ok(TEXT_X_TEX));
        assert_eq!(crate::Mime::parse("tEXt/x-tEx"), Ok(TEXT_X_TEX));
    }

    /// `text/x-vcalendar`
    pub const TEXT_X_VCALENDAR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XVcalendar),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_x_vcalendar_parse() {
        assert_eq!(crate::Mime::parse("text/x-vcalendar"), Ok(TEXT_X_VCALENDAR));
        assert_eq!(crate::Mime::parse("tExt/X-vcALENDAr"), Ok(TEXT_X_VCALENDAR));
    }

    /// `text/xml`
    pub const TEXT_XML: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::Xml),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_xml_parse() {
        assert_eq!(crate::Mime::parse("text/xml"), Ok(TEXT_XML));
        assert_eq!(crate::Mime::parse("tExt/xMl"), Ok(TEXT_XML));
    }

    /// `text/xml-dtd`
    pub const TEXT_XML_DTD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XmlDtd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_xml_dtd_parse() {
        assert_eq!(crate::Mime::parse("text/xml-dtd"), Ok(TEXT_XML_DTD));
        assert_eq!(crate::Mime::parse("texT/xml-DTd"), Ok(TEXT_XML_DTD));
    }

    /// `text/xml-external-parsed-entity`
    pub const TEXT_XML_EXTERNAL_PARSED_ENTITY: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Text),
        subtype: crate::Name::Interned(super::Subtype::XmlExternalParsedEntity),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn text_xml_external_parsed_entity_parse() {
        assert_eq!(crate::Mime::parse("text/xml-external-parsed-entity"), Ok(TEXT_XML_EXTERNAL_PARSED_ENTITY));
        assert_eq!(crate::Mime::parse("tExt/xMl-eXTeRNAL-pArSED-EnTITy"), Ok(TEXT_XML_EXTERNAL_PARSED_ENTITY));
    }

    /// `video/annodex`
    pub const VIDEO_ANNODEX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Annodex),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_annodex_parse() {
        assert_eq!(crate::Mime::parse("video/annodex"), Ok(VIDEO_ANNODEX));
        assert_eq!(crate::Mime::parse("ViDEo/anNoDEX"), Ok(VIDEO_ANNODEX));
    }

    /// `video/AV1`
    pub const VIDEO_AV1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Av1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_av1_parse() {
        assert_eq!(crate::Mime::parse("video/AV1"), Ok(VIDEO_AV1));
        assert_eq!(crate::Mime::parse("videO/av1"), Ok(VIDEO_AV1));
    }

    /// `video/BMPEG`
    pub const VIDEO_BMPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Bmpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_bmpeg_parse() {
        assert_eq!(crate::Mime::parse("video/BMPEG"), Ok(VIDEO_BMPEG));
        assert_eq!(crate::Mime::parse("vIdeO/BMpeG"), Ok(VIDEO_BMPEG));
    }

    /// `video/BT656`
    pub const VIDEO_BT656: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Bt656),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_bt656_parse() {
        assert_eq!(crate::Mime::parse("video/BT656"), Ok(VIDEO_BT656));
        assert_eq!(crate::Mime::parse("vidEO/bT656"), Ok(VIDEO_BT656));
    }

    /// `video/CelB`
    pub const VIDEO_CEL_B: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::CelB),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_cel_b_parse() {
        assert_eq!(crate::Mime::parse("video/CelB"), Ok(VIDEO_CEL_B));
        assert_eq!(crate::Mime::parse("ViDeo/CElB"), Ok(VIDEO_CEL_B));
    }

    /// `video/dl`
    pub const VIDEO_DL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Dl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_dl_parse() {
        assert_eq!(crate::Mime::parse("video/dl"), Ok(VIDEO_DL));
        assert_eq!(crate::Mime::parse("VideO/dl"), Ok(VIDEO_DL));
    }

    /// `video/DV`
    pub const VIDEO_DV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Dv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_dv_parse() {
        assert_eq!(crate::Mime::parse("video/DV"), Ok(VIDEO_DV));
        assert_eq!(crate::Mime::parse("vidEo/DV"), Ok(VIDEO_DV));
    }

    /// `video/encaprtp`
    pub const VIDEO_ENCAPRTP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Encaprtp),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_encaprtp_parse() {
        assert_eq!(crate::Mime::parse("video/encaprtp"), Ok(VIDEO_ENCAPRTP));
        assert_eq!(crate::Mime::parse("VIDeO/enCapRTP"), Ok(VIDEO_ENCAPRTP));
    }

    /// `video/example`
    pub const VIDEO_EXAMPLE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Example),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_example_parse() {
        assert_eq!(crate::Mime::parse("video/example"), Ok(VIDEO_EXAMPLE));
        assert_eq!(crate::Mime::parse("VidEo/EXaMPle"), Ok(VIDEO_EXAMPLE));
    }

    /// `video/FFV1`
    pub const VIDEO_FFV1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Ffv1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_ffv1_parse() {
        assert_eq!(crate::Mime::parse("video/FFV1"), Ok(VIDEO_FFV1));
        assert_eq!(crate::Mime::parse("VIdeo/FFv1"), Ok(VIDEO_FFV1));
    }

    /// `video/flexfec`
    pub const VIDEO_FLEXFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Flexfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_flexfec_parse() {
        assert_eq!(crate::Mime::parse("video/flexfec"), Ok(VIDEO_FLEXFEC));
        assert_eq!(crate::Mime::parse("viDeO/fLeXFeC"), Ok(VIDEO_FLEXFEC));
    }

    /// `video/fli`
    pub const VIDEO_FLI: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Fli),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_fli_parse() {
        assert_eq!(crate::Mime::parse("video/fli"), Ok(VIDEO_FLI));
        assert_eq!(crate::Mime::parse("VIDEo/FlI"), Ok(VIDEO_FLI));
    }

    /// `video/gl`
    pub const VIDEO_GL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Gl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_gl_parse() {
        assert_eq!(crate::Mime::parse("video/gl"), Ok(VIDEO_GL));
        assert_eq!(crate::Mime::parse("VIdeO/Gl"), Ok(VIDEO_GL));
    }

    /// `video/H261`
    pub const VIDEO_H261: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H261),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h261_parse() {
        assert_eq!(crate::Mime::parse("video/H261"), Ok(VIDEO_H261));
        assert_eq!(crate::Mime::parse("ViDEo/h261"), Ok(VIDEO_H261));
    }

    /// `video/H263`
    pub const VIDEO_H263: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H263),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h263_parse() {
        assert_eq!(crate::Mime::parse("video/H263"), Ok(VIDEO_H263));
        assert_eq!(crate::Mime::parse("VideO/h263"), Ok(VIDEO_H263));
    }

    /// `video/H263-1998`
    pub const VIDEO_H263_1998: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H2631998),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h263_1998_parse() {
        assert_eq!(crate::Mime::parse("video/H263-1998"), Ok(VIDEO_H263_1998));
        assert_eq!(crate::Mime::parse("VIdeo/h263-1998"), Ok(VIDEO_H263_1998));
    }

    /// `video/H263-2000`
    pub const VIDEO_H263_2000: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H2632000),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h263_2000_parse() {
        assert_eq!(crate::Mime::parse("video/H263-2000"), Ok(VIDEO_H263_2000));
        assert_eq!(crate::Mime::parse("viDeo/H263-2000"), Ok(VIDEO_H263_2000));
    }

    /// `video/H264`
    pub const VIDEO_H264: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H264),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h264_parse() {
        assert_eq!(crate::Mime::parse("video/H264"), Ok(VIDEO_H264));
        assert_eq!(crate::Mime::parse("viDEO/h264"), Ok(VIDEO_H264));
    }

    /// `video/H264-RCDO`
    pub const VIDEO_H264_RCDO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H264Rcdo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h264_rcdo_parse() {
        assert_eq!(crate::Mime::parse("video/H264-RCDO"), Ok(VIDEO_H264_RCDO));
        assert_eq!(crate::Mime::parse("vIdeO/h264-RcDo"), Ok(VIDEO_H264_RCDO));
    }

    /// `video/H264-SVC`
    pub const VIDEO_H264_SVC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H264Svc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h264_svc_parse() {
        assert_eq!(crate::Mime::parse("video/H264-SVC"), Ok(VIDEO_H264_SVC));
        assert_eq!(crate::Mime::parse("VIdeO/H264-SVC"), Ok(VIDEO_H264_SVC));
    }

    /// `video/H265`
    pub const VIDEO_H265: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::H265),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_h265_parse() {
        assert_eq!(crate::Mime::parse("video/H265"), Ok(VIDEO_H265));
        assert_eq!(crate::Mime::parse("viDeo/h265"), Ok(VIDEO_H265));
    }

    /// `video/iso.segment`
    pub const VIDEO_ISO_SEGMENT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::IsoSegment),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_iso_segment_parse() {
        assert_eq!(crate::Mime::parse("video/iso.segment"), Ok(VIDEO_ISO_SEGMENT));
        assert_eq!(crate::Mime::parse("VideO/iSo.SEgMeNT"), Ok(VIDEO_ISO_SEGMENT));
    }

    /// `video/JPEG`
    pub const VIDEO_JPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Jpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_jpeg_parse() {
        assert_eq!(crate::Mime::parse("video/JPEG"), Ok(VIDEO_JPEG));
        assert_eq!(crate::Mime::parse("vIdEO/jPEG"), Ok(VIDEO_JPEG));
    }

    /// `video/jpeg2000`
    pub const VIDEO_JPEG2000: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Jpeg2000),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_jpeg2000_parse() {
        assert_eq!(crate::Mime::parse("video/jpeg2000"), Ok(VIDEO_JPEG2000));
        assert_eq!(crate::Mime::parse("VIDeo/jpeG2000"), Ok(VIDEO_JPEG2000));
    }

    /// `video/jxsv`
    pub const VIDEO_JXSV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Jxsv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_jxsv_parse() {
        assert_eq!(crate::Mime::parse("video/jxsv"), Ok(VIDEO_JXSV));
        assert_eq!(crate::Mime::parse("videO/JxSv"), Ok(VIDEO_JXSV));
    }

    /// `video/mj2`
    pub const VIDEO_MJ2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mj2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mj2_parse() {
        assert_eq!(crate::Mime::parse("video/mj2"), Ok(VIDEO_MJ2));
        assert_eq!(crate::Mime::parse("VideO/Mj2"), Ok(VIDEO_MJ2));
    }

    /// `video/MP1S`
    pub const VIDEO_MP1S: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mp1s),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mp1s_parse() {
        assert_eq!(crate::Mime::parse("video/MP1S"), Ok(VIDEO_MP1S));
        assert_eq!(crate::Mime::parse("ViDEO/MP1s"), Ok(VIDEO_MP1S));
    }

    /// `video/MP2P`
    pub const VIDEO_MP2P: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mp2p),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mp2p_parse() {
        assert_eq!(crate::Mime::parse("video/MP2P"), Ok(VIDEO_MP2P));
        assert_eq!(crate::Mime::parse("ViDeO/Mp2P"), Ok(VIDEO_MP2P));
    }

    /// `video/MP2T`
    pub const VIDEO_MP2T: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mp2t),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mp2t_parse() {
        assert_eq!(crate::Mime::parse("video/MP2T"), Ok(VIDEO_MP2T));
        assert_eq!(crate::Mime::parse("viDEo/mp2T"), Ok(VIDEO_MP2T));
    }

    /// `video/mp4`
    pub const VIDEO_MP4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mp4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mp4_parse() {
        assert_eq!(crate::Mime::parse("video/mp4"), Ok(VIDEO_MP4));
        assert_eq!(crate::Mime::parse("vIdEo/MP4"), Ok(VIDEO_MP4));
    }

    /// `video/MP4V-ES`
    pub const VIDEO_MP4V_ES: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mp4vEs),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mp4v_es_parse() {
        assert_eq!(crate::Mime::parse("video/MP4V-ES"), Ok(VIDEO_MP4V_ES));
        assert_eq!(crate::Mime::parse("vIDEO/mp4V-ES"), Ok(VIDEO_MP4V_ES));
    }

    /// `video/mpeg`
    pub const VIDEO_MPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mpeg_parse() {
        assert_eq!(crate::Mime::parse("video/mpeg"), Ok(VIDEO_MPEG));
        assert_eq!(crate::Mime::parse("vIdEO/mpeg"), Ok(VIDEO_MPEG));
    }

    /// `video/mpeg4-generic`
    pub const VIDEO_MPEG4_GENERIC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mpeg4Generic),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mpeg4_generic_parse() {
        assert_eq!(crate::Mime::parse("video/mpeg4-generic"), Ok(VIDEO_MPEG4_GENERIC));
        assert_eq!(crate::Mime::parse("VidEo/MPeG4-genEriC"), Ok(VIDEO_MPEG4_GENERIC));
    }

    /// `video/MPV`
    pub const VIDEO_MPV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Mpv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_mpv_parse() {
        assert_eq!(crate::Mime::parse("video/MPV"), Ok(VIDEO_MPV));
        assert_eq!(crate::Mime::parse("VIdeO/mpv"), Ok(VIDEO_MPV));
    }

    /// `video/nv`
    pub const VIDEO_NV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Nv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_nv_parse() {
        assert_eq!(crate::Mime::parse("video/nv"), Ok(VIDEO_NV));
        assert_eq!(crate::Mime::parse("VIDEO/nV"), Ok(VIDEO_NV));
    }

    /// `video/ogg`
    pub const VIDEO_OGG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Ogg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_ogg_parse() {
        assert_eq!(crate::Mime::parse("video/ogg"), Ok(VIDEO_OGG));
        assert_eq!(crate::Mime::parse("VIdEO/ogg"), Ok(VIDEO_OGG));
    }

    /// `video/parityfec`
    pub const VIDEO_PARITYFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Parityfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_parityfec_parse() {
        assert_eq!(crate::Mime::parse("video/parityfec"), Ok(VIDEO_PARITYFEC));
        assert_eq!(crate::Mime::parse("vIDEO/pAriTyFEC"), Ok(VIDEO_PARITYFEC));
    }

    /// `video/pointer`
    pub const VIDEO_POINTER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Pointer),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_pointer_parse() {
        assert_eq!(crate::Mime::parse("video/pointer"), Ok(VIDEO_POINTER));
        assert_eq!(crate::Mime::parse("ViDeO/PoIntEr"), Ok(VIDEO_POINTER));
    }

    /// `video/quicktime`
    pub const VIDEO_QUICKTIME: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Quicktime),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_quicktime_parse() {
        assert_eq!(crate::Mime::parse("video/quicktime"), Ok(VIDEO_QUICKTIME));
        assert_eq!(crate::Mime::parse("viDeO/QuICKTImE"), Ok(VIDEO_QUICKTIME));
    }

    /// `video/raptorfec`
    pub const VIDEO_RAPTORFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Raptorfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_raptorfec_parse() {
        assert_eq!(crate::Mime::parse("video/raptorfec"), Ok(VIDEO_RAPTORFEC));
        assert_eq!(crate::Mime::parse("vidEO/RaPtorfEC"), Ok(VIDEO_RAPTORFEC));
    }

    /// `video/raw`
    pub const VIDEO_RAW: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Raw),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_raw_parse() {
        assert_eq!(crate::Mime::parse("video/raw"), Ok(VIDEO_RAW));
        assert_eq!(crate::Mime::parse("vidEO/RaW"), Ok(VIDEO_RAW));
    }

    /// `video/rtp-enc-aescm128`
    pub const VIDEO_RTP_ENC_AESCM128: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::RtpEncAescm128),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_rtp_enc_aescm128_parse() {
        assert_eq!(crate::Mime::parse("video/rtp-enc-aescm128"), Ok(VIDEO_RTP_ENC_AESCM128));
        assert_eq!(crate::Mime::parse("VIdEo/rtp-EnC-aESCm128"), Ok(VIDEO_RTP_ENC_AESCM128));
    }

    /// `video/rtploopback`
    pub const VIDEO_RTPLOOPBACK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Rtploopback),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_rtploopback_parse() {
        assert_eq!(crate::Mime::parse("video/rtploopback"), Ok(VIDEO_RTPLOOPBACK));
        assert_eq!(crate::Mime::parse("ViDEO/RtplOopbAck"), Ok(VIDEO_RTPLOOPBACK));
    }

    /// `video/rtx`
    pub const VIDEO_RTX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Rtx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_rtx_parse() {
        assert_eq!(crate::Mime::parse("video/rtx"), Ok(VIDEO_RTX));
        assert_eq!(crate::Mime::parse("VIDEo/rTx"), Ok(VIDEO_RTX));
    }

    /// `video/scip`
    pub const VIDEO_SCIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Scip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_scip_parse() {
        assert_eq!(crate::Mime::parse("video/scip"), Ok(VIDEO_SCIP));
        assert_eq!(crate::Mime::parse("vIdEo/ScIp"), Ok(VIDEO_SCIP));
    }

    /// `video/smpte291`
    pub const VIDEO_SMPTE291: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Smpte291),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_smpte291_parse() {
        assert_eq!(crate::Mime::parse("video/smpte291"), Ok(VIDEO_SMPTE291));
        assert_eq!(crate::Mime::parse("video/smPtE291"), Ok(VIDEO_SMPTE291));
    }

    /// `video/SMPTE292M`
    pub const VIDEO_SMPTE292M: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Smpte292m),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_smpte292m_parse() {
        assert_eq!(crate::Mime::parse("video/SMPTE292M"), Ok(VIDEO_SMPTE292M));
        assert_eq!(crate::Mime::parse("VIdEO/SmPtE292M"), Ok(VIDEO_SMPTE292M));
    }

    /// `video/ulpfec`
    pub const VIDEO_ULPFEC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Ulpfec),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_ulpfec_parse() {
        assert_eq!(crate::Mime::parse("video/ulpfec"), Ok(VIDEO_ULPFEC));
        assert_eq!(crate::Mime::parse("vidEO/ULpFeC"), Ok(VIDEO_ULPFEC));
    }

    /// `video/vc1`
    pub const VIDEO_VC1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Vc1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vc1_parse() {
        assert_eq!(crate::Mime::parse("video/vc1"), Ok(VIDEO_VC1));
        assert_eq!(crate::Mime::parse("vIdeO/vc1"), Ok(VIDEO_VC1));
    }

    /// `video/vc2`
    pub const VIDEO_VC2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Vc2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vc2_parse() {
        assert_eq!(crate::Mime::parse("video/vc2"), Ok(VIDEO_VC2));
        assert_eq!(crate::Mime::parse("VIDEO/Vc2"), Ok(VIDEO_VC2));
    }

    /// `video/vnd.CCTV`
    pub const VIDEO_VND_CCTV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndCctv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_cctv_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.CCTV"), Ok(VIDEO_VND_CCTV));
        assert_eq!(crate::Mime::parse("vIdeo/VND.CCTv"), Ok(VIDEO_VND_CCTV));
    }

    /// `video/vnd.dece.hd`
    pub const VIDEO_VND_DECE_HD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDeceHd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dece_hd_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dece.hd"), Ok(VIDEO_VND_DECE_HD));
        assert_eq!(crate::Mime::parse("VidEO/vnD.deCE.hd"), Ok(VIDEO_VND_DECE_HD));
    }

    /// `video/vnd.dece.mobile`
    pub const VIDEO_VND_DECE_MOBILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDeceMobile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dece_mobile_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dece.mobile"), Ok(VIDEO_VND_DECE_MOBILE));
        assert_eq!(crate::Mime::parse("vIDeO/vnD.dece.MObIlE"), Ok(VIDEO_VND_DECE_MOBILE));
    }

    /// `video/vnd.dece.mp4`
    pub const VIDEO_VND_DECE_MP4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDeceMp4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dece_mp4_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dece.mp4"), Ok(VIDEO_VND_DECE_MP4));
        assert_eq!(crate::Mime::parse("vIdeo/vnd.DEcE.MP4"), Ok(VIDEO_VND_DECE_MP4));
    }

    /// `video/vnd.dece.pd`
    pub const VIDEO_VND_DECE_PD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDecePd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dece_pd_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dece.pd"), Ok(VIDEO_VND_DECE_PD));
        assert_eq!(crate::Mime::parse("vIDeO/vNd.DeCE.Pd"), Ok(VIDEO_VND_DECE_PD));
    }

    /// `video/vnd.dece.sd`
    pub const VIDEO_VND_DECE_SD: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDeceSd),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dece_sd_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dece.sd"), Ok(VIDEO_VND_DECE_SD));
        assert_eq!(crate::Mime::parse("vIdeO/VNd.DeCe.sD"), Ok(VIDEO_VND_DECE_SD));
    }

    /// `video/vnd.dece.video`
    pub const VIDEO_VND_DECE_VIDEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDeceVideo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dece_video_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dece.video"), Ok(VIDEO_VND_DECE_VIDEO));
        assert_eq!(crate::Mime::parse("viDeO/VNd.Dece.VIDEO"), Ok(VIDEO_VND_DECE_VIDEO));
    }

    /// `video/vnd.directv.mpeg`
    pub const VIDEO_VND_DIRECTV_MPEG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDirectvMpeg),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_directv_mpeg_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.directv.mpeg"), Ok(VIDEO_VND_DIRECTV_MPEG));
        assert_eq!(crate::Mime::parse("VIdeo/vnd.dIREctv.mPeG"), Ok(VIDEO_VND_DIRECTV_MPEG));
    }

    /// `video/vnd.directv.mpeg-tts`
    pub const VIDEO_VND_DIRECTV_MPEG_TTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDirectvMpegTts),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_directv_mpeg_tts_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.directv.mpeg-tts"), Ok(VIDEO_VND_DIRECTV_MPEG_TTS));
        assert_eq!(crate::Mime::parse("Video/vND.DiRECtv.MpeG-TTs"), Ok(VIDEO_VND_DIRECTV_MPEG_TTS));
    }

    /// `video/vnd.dlna.mpeg-tts`
    pub const VIDEO_VND_DLNA_MPEG_TTS: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDlnaMpegTts),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dlna_mpeg_tts_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dlna.mpeg-tts"), Ok(VIDEO_VND_DLNA_MPEG_TTS));
        assert_eq!(crate::Mime::parse("VIdEO/vnD.Dlna.mpEg-TTS"), Ok(VIDEO_VND_DLNA_MPEG_TTS));
    }

    /// `video/vnd.dvb.file`
    pub const VIDEO_VND_DVB_FILE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndDvbFile),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_dvb_file_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.dvb.file"), Ok(VIDEO_VND_DVB_FILE));
        assert_eq!(crate::Mime::parse("Video/vNd.dvb.FilE"), Ok(VIDEO_VND_DVB_FILE));
    }

    /// `video/vnd.fvt`
    pub const VIDEO_VND_FVT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndFvt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_fvt_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.fvt"), Ok(VIDEO_VND_FVT));
        assert_eq!(crate::Mime::parse("vIdeO/vnd.fvT"), Ok(VIDEO_VND_FVT));
    }

    /// `video/vnd.hns.video`
    pub const VIDEO_VND_HNS_VIDEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndHnsVideo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_hns_video_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.hns.video"), Ok(VIDEO_VND_HNS_VIDEO));
        assert_eq!(crate::Mime::parse("VIDEO/vNd.HNS.viDEo"), Ok(VIDEO_VND_HNS_VIDEO));
    }

    /// `video/vnd.iptvforum.1dparityfec-1010`
    pub const VIDEO_VND_IPTVFORUM_1DPARITYFEC_1010: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndIptvforum1dparityfec1010),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_iptvforum_1dparityfec_1010_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.iptvforum.1dparityfec-1010"), Ok(VIDEO_VND_IPTVFORUM_1DPARITYFEC_1010));
        assert_eq!(crate::Mime::parse("VIdeO/vND.IpTVfORum.1dPaRItyFEC-1010"), Ok(VIDEO_VND_IPTVFORUM_1DPARITYFEC_1010));
    }

    /// `video/vnd.iptvforum.1dparityfec-2005`
    pub const VIDEO_VND_IPTVFORUM_1DPARITYFEC_2005: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndIptvforum1dparityfec2005),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_iptvforum_1dparityfec_2005_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.iptvforum.1dparityfec-2005"), Ok(VIDEO_VND_IPTVFORUM_1DPARITYFEC_2005));
        assert_eq!(crate::Mime::parse("vIdeo/VnD.IPtvfORum.1dPARITyfeC-2005"), Ok(VIDEO_VND_IPTVFORUM_1DPARITYFEC_2005));
    }

    /// `video/vnd.iptvforum.2dparityfec-1010`
    pub const VIDEO_VND_IPTVFORUM_2DPARITYFEC_1010: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndIptvforum2dparityfec1010),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_iptvforum_2dparityfec_1010_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.iptvforum.2dparityfec-1010"), Ok(VIDEO_VND_IPTVFORUM_2DPARITYFEC_1010));
        assert_eq!(crate::Mime::parse("VIDEO/VnD.ipTVforuM.2dpaRItyFeC-1010"), Ok(VIDEO_VND_IPTVFORUM_2DPARITYFEC_1010));
    }

    /// `video/vnd.iptvforum.2dparityfec-2005`
    pub const VIDEO_VND_IPTVFORUM_2DPARITYFEC_2005: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndIptvforum2dparityfec2005),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_iptvforum_2dparityfec_2005_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.iptvforum.2dparityfec-2005"), Ok(VIDEO_VND_IPTVFORUM_2DPARITYFEC_2005));
        assert_eq!(crate::Mime::parse("vIdeo/vNd.IptVFoRUM.2dParITyfEC-2005"), Ok(VIDEO_VND_IPTVFORUM_2DPARITYFEC_2005));
    }

    /// `video/vnd.iptvforum.ttsavc`
    pub const VIDEO_VND_IPTVFORUM_TTSAVC: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndIptvforumTtsavc),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_iptvforum_ttsavc_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.iptvforum.ttsavc"), Ok(VIDEO_VND_IPTVFORUM_TTSAVC));
        assert_eq!(crate::Mime::parse("vIdEo/VNd.iPtVfORuM.ttsavc"), Ok(VIDEO_VND_IPTVFORUM_TTSAVC));
    }

    /// `video/vnd.iptvforum.ttsmpeg2`
    pub const VIDEO_VND_IPTVFORUM_TTSMPEG2: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndIptvforumTtsmpeg2),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_iptvforum_ttsmpeg2_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.iptvforum.ttsmpeg2"), Ok(VIDEO_VND_IPTVFORUM_TTSMPEG2));
        assert_eq!(crate::Mime::parse("vidEo/VND.iPtVfOruM.tTsmpeG2"), Ok(VIDEO_VND_IPTVFORUM_TTSMPEG2));
    }

    /// `video/vnd.motorola.video`
    pub const VIDEO_VND_MOTOROLA_VIDEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaVideo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_motorola_video_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.motorola.video"), Ok(VIDEO_VND_MOTOROLA_VIDEO));
        assert_eq!(crate::Mime::parse("videO/vNd.MOtORoLa.VideO"), Ok(VIDEO_VND_MOTOROLA_VIDEO));
    }

    /// `video/vnd.motorola.videop`
    pub const VIDEO_VND_MOTOROLA_VIDEOP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndMotorolaVideop),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_motorola_videop_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.motorola.videop"), Ok(VIDEO_VND_MOTOROLA_VIDEOP));
        assert_eq!(crate::Mime::parse("VIdeo/vnd.MOTORoLa.VIDEop"), Ok(VIDEO_VND_MOTOROLA_VIDEOP));
    }

    /// `video/vnd.mpegurl`
    pub const VIDEO_VND_MPEGURL: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndMpegurl),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_mpegurl_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.mpegurl"), Ok(VIDEO_VND_MPEGURL));
        assert_eq!(crate::Mime::parse("vIDEO/vND.MpEGurl"), Ok(VIDEO_VND_MPEGURL));
    }

    /// `video/vnd.ms-playready.media.pyv`
    pub const VIDEO_VND_MS_PLAYREADY_MEDIA_PYV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndMsPlayreadyMediaPyv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_ms_playready_media_pyv_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.ms-playready.media.pyv"), Ok(VIDEO_VND_MS_PLAYREADY_MEDIA_PYV));
        assert_eq!(crate::Mime::parse("viDEO/vNd.MS-pLayreadY.mEdia.PYv"), Ok(VIDEO_VND_MS_PLAYREADY_MEDIA_PYV));
    }

    /// `video/vnd.nokia.interleaved-multimedia`
    pub const VIDEO_VND_NOKIA_INTERLEAVED_MULTIMEDIA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaInterleavedMultimedia),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_nokia_interleaved_multimedia_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.nokia.interleaved-multimedia"), Ok(VIDEO_VND_NOKIA_INTERLEAVED_MULTIMEDIA));
        assert_eq!(crate::Mime::parse("vidEO/VNd.NOKIA.inTErLeAved-MULTiMEdIa"), Ok(VIDEO_VND_NOKIA_INTERLEAVED_MULTIMEDIA));
    }

    /// `video/vnd.nokia.mp4vr`
    pub const VIDEO_VND_NOKIA_MP4VR: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaMp4vr),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_nokia_mp4vr_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.nokia.mp4vr"), Ok(VIDEO_VND_NOKIA_MP4VR));
        assert_eq!(crate::Mime::parse("vIdeo/vNd.nokIa.MP4VR"), Ok(VIDEO_VND_NOKIA_MP4VR));
    }

    /// `video/vnd.nokia.videovoip`
    pub const VIDEO_VND_NOKIA_VIDEOVOIP: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndNokiaVideovoip),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_nokia_videovoip_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.nokia.videovoip"), Ok(VIDEO_VND_NOKIA_VIDEOVOIP));
        assert_eq!(crate::Mime::parse("viDeo/vnD.noKia.ViDEOvOiP"), Ok(VIDEO_VND_NOKIA_VIDEOVOIP));
    }

    /// `video/vnd.objectvideo`
    pub const VIDEO_VND_OBJECTVIDEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndObjectvideo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_objectvideo_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.objectvideo"), Ok(VIDEO_VND_OBJECTVIDEO));
        assert_eq!(crate::Mime::parse("Video/vnD.oBJeCTVIDEO"), Ok(VIDEO_VND_OBJECTVIDEO));
    }

    /// `video/vnd.radgamettools.bink`
    pub const VIDEO_VND_RADGAMETTOOLS_BINK: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndRadgamettoolsBink),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_radgamettools_bink_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.radgamettools.bink"), Ok(VIDEO_VND_RADGAMETTOOLS_BINK));
        assert_eq!(crate::Mime::parse("viDeO/vND.RAdGaMeTtools.BInk"), Ok(VIDEO_VND_RADGAMETTOOLS_BINK));
    }

    /// `video/vnd.radgamettools.smacker`
    pub const VIDEO_VND_RADGAMETTOOLS_SMACKER: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndRadgamettoolsSmacker),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_radgamettools_smacker_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.radgamettools.smacker"), Ok(VIDEO_VND_RADGAMETTOOLS_SMACKER));
        assert_eq!(crate::Mime::parse("VIdEO/vNd.radGAmeTTOols.SmacKer"), Ok(VIDEO_VND_RADGAMETTOOLS_SMACKER));
    }

    /// `video/vnd.sealed.mpeg1`
    pub const VIDEO_VND_SEALED_MPEG1: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndSealedMpeg1),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_sealed_mpeg1_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.sealed.mpeg1"), Ok(VIDEO_VND_SEALED_MPEG1));
        assert_eq!(crate::Mime::parse("vIdeo/VND.SEAlEd.MpeG1"), Ok(VIDEO_VND_SEALED_MPEG1));
    }

    /// `video/vnd.sealed.mpeg4`
    pub const VIDEO_VND_SEALED_MPEG4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndSealedMpeg4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_sealed_mpeg4_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.sealed.mpeg4"), Ok(VIDEO_VND_SEALED_MPEG4));
        assert_eq!(crate::Mime::parse("viDEO/Vnd.SeALED.mpEg4"), Ok(VIDEO_VND_SEALED_MPEG4));
    }

    /// `video/vnd.sealed.swf`
    pub const VIDEO_VND_SEALED_SWF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndSealedSwf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_sealed_swf_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.sealed.swf"), Ok(VIDEO_VND_SEALED_SWF));
        assert_eq!(crate::Mime::parse("viDeO/vnd.sEAled.swf"), Ok(VIDEO_VND_SEALED_SWF));
    }

    /// `video/vnd.sealedmedia.softseal.mov`
    pub const VIDEO_VND_SEALEDMEDIA_SOFTSEAL_MOV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndSealedmediaSoftsealMov),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_sealedmedia_softseal_mov_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.sealedmedia.softseal.mov"), Ok(VIDEO_VND_SEALEDMEDIA_SOFTSEAL_MOV));
        assert_eq!(crate::Mime::parse("VIdeO/VNd.SEAleDmedia.soFTSeal.MoV"), Ok(VIDEO_VND_SEALEDMEDIA_SOFTSEAL_MOV));
    }

    /// `video/vnd.uvvu.mp4`
    pub const VIDEO_VND_UVVU_MP4: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndUvvuMp4),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_uvvu_mp4_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.uvvu.mp4"), Ok(VIDEO_VND_UVVU_MP4));
        assert_eq!(crate::Mime::parse("VideO/VnD.uvVU.Mp4"), Ok(VIDEO_VND_UVVU_MP4));
    }

    /// `video/vnd.vivo`
    pub const VIDEO_VND_VIVO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndVivo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_vivo_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.vivo"), Ok(VIDEO_VND_VIVO));
        assert_eq!(crate::Mime::parse("VidEO/Vnd.Vivo"), Ok(VIDEO_VND_VIVO));
    }

    /// `video/vnd.youtube.yt`
    pub const VIDEO_VND_YOUTUBE_YT: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::VndYoutubeYt),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vnd_youtube_yt_parse() {
        assert_eq!(crate::Mime::parse("video/vnd.youtube.yt"), Ok(VIDEO_VND_YOUTUBE_YT));
        assert_eq!(crate::Mime::parse("vIdeo/VNd.yoUtuBe.YT"), Ok(VIDEO_VND_YOUTUBE_YT));
    }

    /// `video/VP8`
    pub const VIDEO_VP8: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Vp8),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vp8_parse() {
        assert_eq!(crate::Mime::parse("video/VP8"), Ok(VIDEO_VP8));
        assert_eq!(crate::Mime::parse("VIDeO/vP8"), Ok(VIDEO_VP8));
    }

    /// `video/VP9`
    pub const VIDEO_VP9: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Vp9),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_vp9_parse() {
        assert_eq!(crate::Mime::parse("video/VP9"), Ok(VIDEO_VP9));
        assert_eq!(crate::Mime::parse("vIDEO/vP9"), Ok(VIDEO_VP9));
    }

    /// `video/webm`
    pub const VIDEO_WEBM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::Webm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_webm_parse() {
        assert_eq!(crate::Mime::parse("video/webm"), Ok(VIDEO_WEBM));
        assert_eq!(crate::Mime::parse("vIdEo/Webm"), Ok(VIDEO_WEBM));
    }

    /// `video/x-flv`
    pub const VIDEO_X_FLV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XFlv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_flv_parse() {
        assert_eq!(crate::Mime::parse("video/x-flv"), Ok(VIDEO_X_FLV));
        assert_eq!(crate::Mime::parse("ViDEo/x-Flv"), Ok(VIDEO_X_FLV));
    }

    /// `video/x-la-asf`
    pub const VIDEO_X_LA_ASF: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XLaAsf),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_la_asf_parse() {
        assert_eq!(crate::Mime::parse("video/x-la-asf"), Ok(VIDEO_X_LA_ASF));
        assert_eq!(crate::Mime::parse("viDeO/x-la-aSF"), Ok(VIDEO_X_LA_ASF));
    }

    /// `video/x-matroska`
    pub const VIDEO_X_MATROSKA: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMatroska),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_matroska_parse() {
        assert_eq!(crate::Mime::parse("video/x-matroska"), Ok(VIDEO_X_MATROSKA));
        assert_eq!(crate::Mime::parse("VIDeO/X-mATRoSka"), Ok(VIDEO_X_MATROSKA));
    }

    /// `video/x-mng`
    pub const VIDEO_X_MNG: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMng),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_mng_parse() {
        assert_eq!(crate::Mime::parse("video/x-mng"), Ok(VIDEO_X_MNG));
        assert_eq!(crate::Mime::parse("VidEO/X-mnG"), Ok(VIDEO_X_MNG));
    }

    /// `video/x-ms-wm`
    pub const VIDEO_X_MS_WM: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMsWm),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_ms_wm_parse() {
        assert_eq!(crate::Mime::parse("video/x-ms-wm"), Ok(VIDEO_X_MS_WM));
        assert_eq!(crate::Mime::parse("VIdEO/x-Ms-wM"), Ok(VIDEO_X_MS_WM));
    }

    /// `video/x-ms-wmv`
    pub const VIDEO_X_MS_WMV: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMsWmv),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_ms_wmv_parse() {
        assert_eq!(crate::Mime::parse("video/x-ms-wmv"), Ok(VIDEO_X_MS_WMV));
        assert_eq!(crate::Mime::parse("viDEO/X-ms-Wmv"), Ok(VIDEO_X_MS_WMV));
    }

    /// `video/x-ms-wmx`
    pub const VIDEO_X_MS_WMX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMsWmx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_ms_wmx_parse() {
        assert_eq!(crate::Mime::parse("video/x-ms-wmx"), Ok(VIDEO_X_MS_WMX));
        assert_eq!(crate::Mime::parse("viDEO/x-mS-WMX"), Ok(VIDEO_X_MS_WMX));
    }

    /// `video/x-ms-wvx`
    pub const VIDEO_X_MS_WVX: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMsWvx),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_ms_wvx_parse() {
        assert_eq!(crate::Mime::parse("video/x-ms-wvx"), Ok(VIDEO_X_MS_WVX));
        assert_eq!(crate::Mime::parse("viDeO/X-Ms-WvX"), Ok(VIDEO_X_MS_WVX));
    }

    /// `video/x-msvideo`
    pub const VIDEO_X_MSVIDEO: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XMsvideo),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_msvideo_parse() {
        assert_eq!(crate::Mime::parse("video/x-msvideo"), Ok(VIDEO_X_MSVIDEO));
        assert_eq!(crate::Mime::parse("VIdEo/X-MsviDeO"), Ok(VIDEO_X_MSVIDEO));
    }

    /// `video/x-sgi-movie`
    pub const VIDEO_X_SGI_MOVIE: crate::Mime<'static> = crate::Mime(crate::Repr::Parts {
        ty: crate::Name::Interned(super::Type::Video),
        subtype: crate::Name::Interned(super::Subtype::XSgiMovie),
        suffix: None,
        parameters: &[]
    });

    #[test]
    fn video_x_sgi_movie_parse() {
        assert_eq!(crate::Mime::parse("video/x-sgi-movie"), Ok(VIDEO_X_SGI_MOVIE));
        assert_eq!(crate::Mime::parse("VidEO/x-Sgi-MOVIE"), Ok(VIDEO_X_SGI_MOVIE));
    }

}
